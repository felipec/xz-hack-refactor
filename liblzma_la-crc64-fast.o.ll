source_filename = "test"
target datalayout = "e-m:e-p:64:64-i64:64-f80:128-n8:16:32:64-S128"

%0 = type { i32, i32, i32, i32 }
%1 = type { i32, i32, i32, i32 }
%2 = type { i32, i32, i32, i32 }
%3 = type { i32, i32, i32, i32 }
%4 = type { i32, i32, i32, i32 }

@global_var_adc0 = local_unnamed_addr constant i64 -166614666352616
@global_var_adf8 = local_unnamed_addr constant i64 -168001940789241
@global_var_cae0 = local_unnamed_addr global i64 0
@global_var_cad8 = local_unnamed_addr global i64 0
@global_var_2b0 = constant [4 x i8] c"   \00"
@global_var_ae18 = constant i64 0
@global_var_ae20 = constant i64 0
@global_var_580 = constant i64 -8607223312834101240
@global_var_2c8 = constant i64 9008058248200224
@global_var_178 = constant i64 -4539273787798978551
@global_var_398 = constant i64 4904784516670816264
@global_var_47 = constant [3 x i8] c":\0A\00"
@global_var_cb41 = external global i64
@0 = external global i32
@global_var_18 = constant i32* inttoptr (i64 -321646377060794298 to i32*)
@1 = internal constant [11 x i8] c"\C0\C0\C0\C0\C0\C0\C0\C0\FF\FF\00"
@global_var_ada0 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0)
@global_var_48 = constant i32* inttoptr (i64 7438823665468178442 to i32*)
@2 = internal constant [9 x i8] c"\0F\0F\0F\0F\0F\0F\0F\0F\00"
@global_var_ad80 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0)
@3 = internal constant [8 x i8] c"\EFk\FF\FF\0F\FF\BF\00"
@global_var_ad60 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0)
@4 = internal constant [7 x i8] c"\0F \FF\FF\0F\FF\00"
@global_var_ad40 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0)
@5 = internal constant [10 x i8] c"\FF\0F\B1p?\0F\BF\FF\03\00"
@global_var_ad20 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0)
@6 = internal constant [10 x i8] c"\FF\0F\B1p?\0F\BF\FF\03\00"
@global_var_ad00 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0)
@global_var_cb40 = global i32 0

define i64 @.Lx86_code.part.0(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_0:
  %0 = alloca i64
  %storemerge1.reg2mem = alloca i64, !insn.addr !0
  %storemerge12.reg2mem = alloca i64, !insn.addr !0
  %rdx.8.reg2mem = alloca i64, !insn.addr !0
  %zf.2.reg2mem = alloca i1, !insn.addr !0
  %storemerge5.reg2mem = alloca i64, !insn.addr !0
  %rdx.7.reg2mem = alloca i64, !insn.addr !0
  %rsi.17.reg2mem = alloca i64, !insn.addr !0
  %rsi.16.reg2mem = alloca i64, !insn.addr !0
  %rax.4.reg2mem = alloca i64, !insn.addr !0
  %zf.1.in.reg2mem = alloca i64, !insn.addr !0
  %rsi.17.pn.reg2mem = alloca i64, !insn.addr !0
  %storemerge4.reg2mem = alloca i64, !insn.addr !0
  %.reg2mem120 = alloca i64, !insn.addr !0
  %rdx.6.reg2mem = alloca i64, !insn.addr !0
  %rdx.5.reg2mem = alloca i64, !insn.addr !0
  %rdx.4.reg2mem = alloca i64, !insn.addr !0
  %zf.0.reg2mem = alloca i1, !insn.addr !0
  %storemerge6.reg2mem = alloca i1, !insn.addr !0
  %cf.0.reg2mem = alloca i1, !insn.addr !0
  %storemerge8.reg2mem = alloca i64, !insn.addr !0
  %.pre-phi77.reg2mem = alloca i32*, !insn.addr !0
  %rax.2.reg2mem = alloca i64, !insn.addr !0
  %.pre76.pre-phi.reg2mem = alloca i32*, !insn.addr !0
  %rdx.3.in.reg2mem = alloca i64, !insn.addr !0
  %rax.1.reg2mem = alloca i64, !insn.addr !0
  %storemerge7.reg2mem = alloca i64, !insn.addr !0
  %rdi.1.reg2mem = alloca i64, !insn.addr !0
  %storemerge11.reg2mem = alloca i64, !insn.addr !0
  %rsi.6.reg2mem = alloca i64, !insn.addr !0
  %rdi.0.reg2mem = alloca i64, !insn.addr !0
  %rcx.4.reg2mem = alloca i64, !insn.addr !0
  %.reg2mem118 = alloca i8, !insn.addr !0
  %.reg2mem = alloca i8, !insn.addr !0
  %rdx.2.reg2mem = alloca i64, !insn.addr !0
  %rsi.3.reg2mem = alloca i64, !insn.addr !0
  %rdx.1.reg2mem = alloca i64, !insn.addr !0
  %rdx.047.reg2mem = alloca i64, !insn.addr !0
  %1 = load i64, i64* %0
  %stack_var_-56 = alloca i64, align 8
  %2 = call i64 @.Llzma2_decoder_end.1(i32 0, i64 18, i64 70, i64 2, i64 %arg5, i64 %1), !insn.addr !1
  %3 = trunc i64 %2 to i32, !insn.addr !2
  %4 = icmp eq i32 %3, 0, !insn.addr !2
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !3
  br i1 %4, label %dec_label_pc_a96, label %dec_label_pc_33, !insn.addr !3

dec_label_pc_33:                                  ; preds = %dec_label_pc_0
  %5 = bitcast i64* %arg1 to i8*, !insn.addr !4
  call void @__asm_rep_stosd_memset(i8* %5, i32 0, i64 22), !insn.addr !4
  %storemerge44 = icmp ult i64 %arg2, %arg3
  %6 = icmp eq i1 %storemerge44, false, !insn.addr !5
  br i1 %6, label %dec_label_pc_a85, label %dec_label_pc_4b.lr.ph, !insn.addr !5

dec_label_pc_4b.lr.ph:                            ; preds = %dec_label_pc_33
  %7 = ptrtoint i64* %arg1 to i64
  %8 = ptrtoint i64* %stack_var_-56 to i64, !insn.addr !6
  %9 = add i64 %7, 16
  %10 = inttoptr i64 %9 to i8*
  %11 = add i64 %7, 20
  %12 = inttoptr i64 %11 to i8*
  %13 = add i64 %7, 22
  %14 = inttoptr i64 %13 to i8*
  %15 = add i64 %7, 23
  %16 = inttoptr i64 %15 to i8*
  %17 = add i64 %7, 21
  %18 = inttoptr i64 %17 to i8*
  store i64 %arg2, i64* %rdx.047.reg2mem
  br label %dec_label_pc_4b

dec_label_pc_4b:                                  ; preds = %dec_label_pc_4b.lr.ph, %dec_label_pc_655
  %rdx.047.reload = load i64, i64* %rdx.047.reg2mem
  %19 = inttoptr i64 %rdx.047.reload to i8*
  %20 = load i8, i8* %19, align 1, !insn.addr !7
  %21 = icmp ult i8 %20, 104
  br i1 %21, label %dec_label_pc_52, label %dec_label_pc_8d, !insn.addr !8

dec_label_pc_52:                                  ; preds = %dec_label_pc_4b
  %22 = icmp ult i8 %20, 46
  br i1 %22, label %dec_label_pc_56, label %dec_label_pc_68, !insn.addr !9

dec_label_pc_56:                                  ; preds = %dec_label_pc_52
  %23 = icmp eq i8 %20, 15, !insn.addr !10
  br i1 %23, label %dec_label_pc_128, label %dec_label_pc_5e, !insn.addr !11

dec_label_pc_5e:                                  ; preds = %dec_label_pc_56
  %24 = icmp eq i8 %20, 38, !insn.addr !12
  %25 = icmp eq i1 %24, false, !insn.addr !13
  store i64 %rdx.047.reload, i64* %rdx.1.reg2mem, !insn.addr !13
  br i1 %25, label %dec_label_pc_171, label %dec_label_pc_c7, !insn.addr !13

dec_label_pc_68:                                  ; preds = %dec_label_pc_52
  %26 = add i8 %20, 18
  %27 = urem i8 %26, 64
  %28 = zext i8 %27 to i64, !insn.addr !14
  %29 = shl i64 1, %28, !insn.addr !14
  %30 = and i64 %29, 54043195528511745, !insn.addr !14
  %31 = icmp eq i64 %30, 0, !insn.addr !14
  br i1 %31, label %dec_label_pc_7b, label %dec_label_pc_c7, !insn.addr !15

dec_label_pc_7b:                                  ; preds = %dec_label_pc_68
  %32 = icmp eq i8 %20, 103, !insn.addr !16
  br i1 %32, label %dec_label_pc_10a, label %dec_label_pc_83, !insn.addr !17

dec_label_pc_83:                                  ; preds = %dec_label_pc_7b
  %33 = icmp eq i8 %20, 102, !insn.addr !18
  %34 = icmp eq i1 %33, false, !insn.addr !19
  br i1 %34, label %dec_label_pc_15e, label %dec_label_pc_df, !insn.addr !19

dec_label_pc_8d:                                  ; preds = %dec_label_pc_4b
  %35 = icmp eq i8 %20, -16, !insn.addr !20
  br i1 %35, label %dec_label_pc_af, label %dec_label_pc_91, !insn.addr !21

dec_label_pc_91:                                  ; preds = %dec_label_pc_8d
  %36 = icmp ult i8 %20, -15
  %37 = and i8 %20, -2
  br i1 %36, label %dec_label_pc_93, label %dec_label_pc_a4, !insn.addr !22

dec_label_pc_93:                                  ; preds = %dec_label_pc_91
  %38 = icmp eq i8 %37, -60
  store i64 %rdx.047.reload, i64* %rdx.1.reg2mem, !insn.addr !23
  br i1 %38, label %dec_label_pc_134, label %dec_label_pc_171, !insn.addr !23

dec_label_pc_a4:                                  ; preds = %dec_label_pc_91
  %39 = icmp eq i8 %37, -14
  store i64 %rdx.047.reload, i64* %rdx.1.reg2mem, !insn.addr !24
  br i1 %39, label %dec_label_pc_af, label %dec_label_pc_171, !insn.addr !24

dec_label_pc_af:                                  ; preds = %dec_label_pc_a4, %dec_label_pc_8d
  %40 = load i8, i8* %10, align 1, !insn.addr !25
  %41 = urem i8 %40, 2, !insn.addr !26
  %42 = icmp eq i8 %41, 0, !insn.addr !26
  %43 = icmp eq i1 %42, false, !insn.addr !27
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !27
  br i1 %43, label %dec_label_pc_a96, label %dec_label_pc_ba, !insn.addr !27

dec_label_pc_ba:                                  ; preds = %dec_label_pc_af
  %44 = or i8 %40, 1, !insn.addr !28
  store i8 %44, i8* %10, align 1, !insn.addr !28
  %45 = load i8, i8* %19, align 1, !insn.addr !29
  store i8 %45, i8* %12, align 1, !insn.addr !30
  br label %dec_label_pc_655, !insn.addr !31

dec_label_pc_c7:                                  ; preds = %dec_label_pc_5e, %dec_label_pc_68
  %46 = load i8, i8* %10, align 1, !insn.addr !32
  %47 = and i8 %46, 2, !insn.addr !33
  %48 = icmp eq i8 %47, 0, !insn.addr !33
  %49 = icmp eq i1 %48, false, !insn.addr !34
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !34
  br i1 %49, label %dec_label_pc_a96, label %dec_label_pc_d2, !insn.addr !34

dec_label_pc_d2:                                  ; preds = %dec_label_pc_c7
  %50 = or i8 %46, 2, !insn.addr !35
  store i8 %50, i8* %10, align 1, !insn.addr !35
  %51 = load i8, i8* %19, align 1, !insn.addr !36
  store i8 %51, i8* %18, align 1, !insn.addr !37
  br label %dec_label_pc_655, !insn.addr !38

dec_label_pc_df:                                  ; preds = %dec_label_pc_83
  %52 = load i8, i8* %10, align 1, !insn.addr !39
  %53 = and i8 %52, 4, !insn.addr !40
  %54 = icmp eq i8 %53, 0, !insn.addr !40
  br i1 %54, label %dec_label_pc_f0, label %dec_label_pc_e6, !insn.addr !41

dec_label_pc_e6:                                  ; preds = %dec_label_pc_df
  %55 = load i8, i8* %14, align 1, !insn.addr !42
  %56 = icmp eq i8 %55, 102, !insn.addr !42
  %57 = icmp eq i1 %56, false, !insn.addr !43
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !43
  br i1 %57, label %dec_label_pc_a96, label %dec_label_pc_f0, !insn.addr !43

dec_label_pc_f0:                                  ; preds = %dec_label_pc_e6, %dec_label_pc_df
  %58 = and i8 %52, 32
  %59 = icmp eq i8 %58, 0, !insn.addr !44
  %60 = icmp eq i1 %59, false, !insn.addr !45
  br i1 %60, label %dec_label_pc_655, label %dec_label_pc_fc, !insn.addr !45

dec_label_pc_fc:                                  ; preds = %dec_label_pc_f0
  %61 = or i8 %52, 4, !insn.addr !46
  store i8 %61, i8* %10, align 1, !insn.addr !46
  %62 = load i8, i8* %19, align 1, !insn.addr !47
  store i8 %62, i8* %14, align 1, !insn.addr !48
  br label %dec_label_pc_655, !insn.addr !49

dec_label_pc_10a:                                 ; preds = %dec_label_pc_7b
  %63 = load i8, i8* %10, align 1, !insn.addr !50
  %64 = and i8 %63, 8, !insn.addr !51
  %65 = icmp eq i8 %64, 0, !insn.addr !51
  %66 = icmp eq i1 %65, false, !insn.addr !52
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !52
  br i1 %66, label %dec_label_pc_a96, label %dec_label_pc_115, !insn.addr !52

dec_label_pc_115:                                 ; preds = %dec_label_pc_10a
  %67 = or i8 %63, 8, !insn.addr !53
  store i8 %67, i8* %10, align 1, !insn.addr !53
  %68 = load i8, i8* %19, align 1, !insn.addr !54
  store i8 %68, i8* %16, align 1, !insn.addr !55
  br label %dec_label_pc_655, !insn.addr !55

dec_label_pc_128:                                 ; preds = %dec_label_pc_56
  %69 = add i64 %7, 40, !insn.addr !56
  %70 = inttoptr i64 %69 to i32*, !insn.addr !56
  store i32 15, i32* %70, align 4, !insn.addr !56
  %71 = add i64 %rdx.047.reload, 1, !insn.addr !57
  store i64 %71, i64* %rdx.2.reg2mem, !insn.addr !58
  br label %dec_label_pc_1a9, !insn.addr !58

dec_label_pc_134:                                 ; preds = %dec_label_pc_93
  %72 = load i8, i8* %10, align 1, !insn.addr !59
  %73 = and i8 %72, 32, !insn.addr !60
  %74 = icmp eq i8 %73, 0, !insn.addr !60
  %75 = icmp eq i1 %74, false, !insn.addr !61
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !61
  br i1 %75, label %dec_label_pc_a96, label %dec_label_pc_140, !insn.addr !61

dec_label_pc_140:                                 ; preds = %dec_label_pc_134
  %76 = zext i8 %20 to i32, !insn.addr !62
  %77 = add i64 %7, 40, !insn.addr !62
  %78 = inttoptr i64 %77 to i32*, !insn.addr !62
  store i32 %76, i32* %78, align 4, !insn.addr !62
  %79 = load i8, i8* %19, align 1, !insn.addr !63
  %80 = or i8 %72, 16, !insn.addr !64
  %81 = add i64 %rdx.047.reload, 1, !insn.addr !65
  store i8 %80, i8* %10, align 1, !insn.addr !66
  %82 = add i64 %7, ptrtoint (i32** @global_var_18 to i64), !insn.addr !67
  %83 = inttoptr i64 %82 to i8*, !insn.addr !67
  store i8 %79, i8* %83, align 1, !insn.addr !67
  %84 = icmp ult i64 %81, %arg3, !insn.addr !68
  br i1 %84, label %dec_label_pc_17b, label %dec_label_pc_a85, !insn.addr !69

dec_label_pc_15e:                                 ; preds = %dec_label_pc_83
  %85 = and i8 %20, -16
  %86 = icmp eq i8 %85, 64, !insn.addr !70
  %87 = icmp eq i1 %86, false, !insn.addr !71
  store i64 %rdx.047.reload, i64* %rdx.1.reg2mem, !insn.addr !71
  br i1 %87, label %dec_label_pc_171, label %dec_label_pc_165, !insn.addr !71

dec_label_pc_165:                                 ; preds = %dec_label_pc_15e
  %88 = load i8, i8* %10, align 1, !insn.addr !72
  %89 = or i8 %88, 32, !insn.addr !72
  store i8 %89, i8* %10, align 1, !insn.addr !72
  %90 = load i8, i8* %19, align 1, !insn.addr !73
  %91 = add i64 %rdx.047.reload, 1, !insn.addr !74
  %92 = add i64 %7, 27, !insn.addr !75
  %93 = inttoptr i64 %92 to i8*, !insn.addr !75
  store i8 %90, i8* %93, align 1, !insn.addr !75
  store i64 %91, i64* %rdx.1.reg2mem, !insn.addr !75
  br label %dec_label_pc_171, !insn.addr !75

dec_label_pc_171:                                 ; preds = %dec_label_pc_a4, %dec_label_pc_5e, %dec_label_pc_93, %dec_label_pc_165, %dec_label_pc_15e
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %94 = icmp ult i64 %rdx.1.reload, %arg3, !insn.addr !76
  br i1 %94, label %dec_label_pc_1f1, label %dec_label_pc_a85, !insn.addr !77

dec_label_pc_17b:                                 ; preds = %dec_label_pc_140
  %95 = zext i8 %20 to i64, !insn.addr !7
  %96 = inttoptr i64 %81 to i8*, !insn.addr !78
  %97 = load i8, i8* %96, align 1, !insn.addr !78
  %98 = mul i64 %95, 256, !insn.addr !79
  %99 = add i64 %7, 27, !insn.addr !80
  %100 = inttoptr i64 %99 to i8*, !insn.addr !80
  store i8 64, i8* %100, align 1, !insn.addr !80
  %101 = or i64 %98, 15, !insn.addr !81
  %102 = add i64 %7, 25, !insn.addr !82
  %103 = inttoptr i64 %102 to i8*, !insn.addr !82
  store i8 %97, i8* %103, align 1, !insn.addr !82
  %104 = trunc i64 %101 to i32, !insn.addr !83
  store i32 %104, i32* %78, align 4, !insn.addr !83
  %105 = load i8, i8* %96, align 1, !insn.addr !84
  %106 = ashr i8 %105, 7, !insn.addr !85
  %107 = add i8 %106, 68
  %108 = and i8 %107, -4, !insn.addr !86
  store i8 %108, i8* %100, align 1, !insn.addr !87
  %109 = icmp eq i8 %79, -59, !insn.addr !88
  %110 = icmp eq i1 %109, false, !insn.addr !89
  store i64 %81, i64* %rsi.3.reg2mem, !insn.addr !89
  br i1 %110, label %dec_label_pc_1b7, label %dec_label_pc_1a5, !insn.addr !89

dec_label_pc_1a5:                                 ; preds = %dec_label_pc_1f8, %dec_label_pc_17b
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %111 = add i64 %rsi.3.reload, 1, !insn.addr !90
  store i64 %111, i64* %rdx.2.reg2mem, !insn.addr !90
  br label %dec_label_pc_1a9, !insn.addr !90

dec_label_pc_1a9:                                 ; preds = %dec_label_pc_a7c, %dec_label_pc_1a5, %dec_label_pc_128
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %112 = icmp ult i64 %rdx.2.reload, %arg3, !insn.addr !91
  br i1 %112, label %dec_label_pc_3af, label %dec_label_pc_a85, !insn.addr !92

dec_label_pc_1b7:                                 ; preds = %dec_label_pc_17b
  %113 = icmp eq i8 %79, -60, !insn.addr !93
  %114 = icmp eq i1 %113, false, !insn.addr !94
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !94
  br i1 %114, label %dec_label_pc_a96, label %dec_label_pc_1c1, !insn.addr !94

dec_label_pc_1c1:                                 ; preds = %dec_label_pc_1b7
  %115 = load i8, i8* %96, align 1, !insn.addr !95
  %116 = and i8 %115, 64, !insn.addr !96
  %117 = icmp eq i8 %116, 0, !insn.addr !96
  %118 = icmp eq i1 %117, false, !insn.addr !97
  store i8 %108, i8* %.reg2mem, !insn.addr !97
  store i8 %115, i8* %.reg2mem118, !insn.addr !97
  br i1 %118, label %dec_label_pc_1d6, label %dec_label_pc_1d0, !insn.addr !97

dec_label_pc_1d0:                                 ; preds = %dec_label_pc_1c1
  %119 = or i8 %108, 2, !insn.addr !98
  store i8 %119, i8* %100, align 1, !insn.addr !99
  %.pre = load i8, i8* %96, align 1
  store i8 %119, i8* %.reg2mem, !insn.addr !99
  store i8 %.pre, i8* %.reg2mem118, !insn.addr !99
  br label %dec_label_pc_1d6, !insn.addr !99

dec_label_pc_1d6:                                 ; preds = %dec_label_pc_1d0, %dec_label_pc_1c1
  %.reload119 = load i8, i8* %.reg2mem118, !insn.addr !100
  %120 = and i8 %.reload119, 32, !insn.addr !100
  %121 = icmp eq i8 %120, 0, !insn.addr !100
  %122 = icmp eq i1 %121, false, !insn.addr !101
  br i1 %122, label %dec_label_pc_1e0, label %dec_label_pc_1dc, !insn.addr !101

dec_label_pc_1dc:                                 ; preds = %dec_label_pc_1d6
  %.reload = load i8, i8* %.reg2mem, !insn.addr !102
  %123 = or i8 %.reload, 1, !insn.addr !102
  store i8 %123, i8* %100, align 1, !insn.addr !102
  br label %dec_label_pc_1e0, !insn.addr !102

dec_label_pc_1e0:                                 ; preds = %dec_label_pc_1dc, %dec_label_pc_1d6
  %124 = urem i8 %115, 32
  %125 = add nsw i8 %124, -1, !insn.addr !103
  %126 = icmp ult i8 %125, 3
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !104
  br i1 %126, label %dec_label_pc_a30, label %dec_label_pc_a96, !insn.addr !104

dec_label_pc_1f1:                                 ; preds = %dec_label_pc_171
  %127 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !105
  %128 = load i8, i8* %127, align 1, !insn.addr !105
  %129 = icmp eq i8 %128, 15, !insn.addr !106
  %130 = icmp eq i1 %129, false, !insn.addr !107
  br i1 %130, label %dec_label_pc_204, label %dec_label_pc_1f8, !insn.addr !107

dec_label_pc_1f8:                                 ; preds = %dec_label_pc_1f1
  %131 = add i64 %7, 40, !insn.addr !108
  %132 = inttoptr i64 %131 to i32*, !insn.addr !108
  store i32 15, i32* %132, align 4, !insn.addr !108
  store i64 %rdx.1.reload, i64* %rsi.3.reg2mem, !insn.addr !109
  br label %dec_label_pc_1a5, !insn.addr !109

dec_label_pc_204:                                 ; preds = %dec_label_pc_1f1
  %133 = zext i8 %128 to i64, !insn.addr !105
  %134 = urem i64 %133, 8, !insn.addr !110
  %135 = udiv i64 %133, 8, !insn.addr !111
  %136 = add i64 %135, ptrtoint (i8** @global_var_ada0 to i64), !insn.addr !112
  %137 = inttoptr i64 %136 to i8*, !insn.addr !112
  %138 = load i8, i8* %137, align 1, !insn.addr !112
  %139 = zext i8 %138 to i32, !insn.addr !113
  %140 = trunc i64 %134 to i32, !insn.addr !113
  %141 = shl i32 1, %140, !insn.addr !113
  %142 = and i32 %141, %139, !insn.addr !113
  %143 = icmp eq i32 %142, 0, !insn.addr !113
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !114
  br i1 %143, label %dec_label_pc_22b, label %dec_label_pc_a96, !insn.addr !114

dec_label_pc_22b:                                 ; preds = %dec_label_pc_204
  %144 = zext i8 %128 to i32, !insn.addr !115
  %145 = add i64 %7, 40, !insn.addr !115
  %146 = inttoptr i64 %145 to i32*, !insn.addr !115
  store i32 %144, i32* %146, align 4, !insn.addr !115
  store i64 3472328296227680304, i64* %stack_var_-56, align 8, !insn.addr !116
  %147 = sub i64 %rdx.1.reload, %arg2, !insn.addr !117
  %148 = trunc i64 %147 to i8, !insn.addr !118
  %149 = add i64 %7, 80, !insn.addr !118
  %150 = inttoptr i64 %149 to i8*, !insn.addr !118
  store i8 %148, i8* %150, align 1, !insn.addr !118
  %151 = and i64 %135, 24, !insn.addr !119
  %152 = add i64 %151, %8, !insn.addr !119
  %153 = inttoptr i64 %152 to i64*, !insn.addr !119
  %154 = load i64, i64* %153, align 8, !insn.addr !119
  %155 = urem i64 %133, 64, !insn.addr !120
  %156 = lshr i64 %154, %155
  %157 = trunc i64 %156 to i32, !insn.addr !121
  %158 = urem i32 %157, 2, !insn.addr !121
  %159 = icmp eq i32 %158, 0, !insn.addr !121
  br i1 %159, label %dec_label_pc_316, label %dec_label_pc_28b, !insn.addr !122

dec_label_pc_28b:                                 ; preds = %dec_label_pc_22b
  %160 = zext i32 %158 to i64, !insn.addr !121
  %161 = icmp ult i8 %128, -8
  store i64 %160, i64* %rsi.6.reg2mem, !insn.addr !123
  br i1 %161, label %dec_label_pc_294, label %dec_label_pc_324, !insn.addr !123

dec_label_pc_294:                                 ; preds = %dec_label_pc_28b
  %162 = icmp ult i8 %128, -62
  br i1 %162, label %dec_label_pc_299, label %dec_label_pc_2b8, !insn.addr !124

dec_label_pc_299:                                 ; preds = %dec_label_pc_294
  %163 = icmp ult i8 %128, 106
  br i1 %163, label %dec_label_pc_29e, label %dec_label_pc_302, !insn.addr !125

dec_label_pc_29e:                                 ; preds = %dec_label_pc_299
  %164 = icmp ult i8 %128, 45
  br i1 %164, label %dec_label_pc_2a3, label %dec_label_pc_2e6, !insn.addr !126

dec_label_pc_2a3:                                 ; preds = %dec_label_pc_29e
  %165 = add i8 %128, -5, !insn.addr !127
  %166 = icmp ult i8 %165, 33
  store i64 %133, i64* %rcx.4.reg2mem, !insn.addr !128
  store i64 137977929760, i64* %rdi.0.reg2mem, !insn.addr !128
  store i64 %160, i64* %rsi.6.reg2mem, !insn.addr !128
  br i1 %166, label %dec_label_pc_2f3, label %dec_label_pc_324, !insn.addr !128

dec_label_pc_2b8:                                 ; preds = %dec_label_pc_294
  %167 = add i8 %128, 62
  %168 = urem i8 %167, 64
  %169 = zext i8 %168 to i64, !insn.addr !129
  %170 = shl i64 1, %169
  %171 = and i64 %170, 9008058248200224, !insn.addr !130
  %172 = icmp eq i64 %171, 0, !insn.addr !130
  %173 = icmp eq i1 %172, false, !insn.addr !131
  store i64 4, i64* %rsi.6.reg2mem, !insn.addr !131
  br i1 %173, label %dec_label_pc_324, label %dec_label_pc_2d5, !insn.addr !131

dec_label_pc_2d5:                                 ; preds = %dec_label_pc_2b8
  %174 = and i64 %170, 257
  %175 = icmp eq i64 %174, 0, !insn.addr !132
  %176 = icmp eq i1 %175, false, !insn.addr !133
  %177 = select i1 %176, i64 2, i64 %160, !insn.addr !133
  store i64 %177, i64* %rsi.6.reg2mem, !insn.addr !134
  br label %dec_label_pc_324, !insn.addr !134

dec_label_pc_2e6:                                 ; preds = %dec_label_pc_29e
  %178 = add nuw nsw i64 %133, 4294967251, !insn.addr !135
  %179 = and i64 %178, 4294967295, !insn.addr !135
  store i64 %179, i64* %rcx.4.reg2mem, !insn.addr !135
  store i64 1729382256910336257, i64* %rdi.0.reg2mem, !insn.addr !135
  br label %dec_label_pc_2f3, !insn.addr !135

dec_label_pc_2f3:                                 ; preds = %dec_label_pc_2a3, %dec_label_pc_302, %dec_label_pc_2e6
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %180 = urem i64 %rcx.4.reload, 64, !insn.addr !136
  %181 = shl i64 1, %180, !insn.addr !136
  %182 = and i64 %181, %rdi.0.reload, !insn.addr !136
  %183 = icmp eq i64 %182, 0, !insn.addr !136
  %184 = select i1 %183, i64 %160, i64 4, !insn.addr !137
  store i64 %184, i64* %rsi.6.reg2mem, !insn.addr !138
  br label %dec_label_pc_324, !insn.addr !138

dec_label_pc_302:                                 ; preds = %dec_label_pc_299
  %185 = add nuw nsw i64 %133, 127, !insn.addr !139
  %186 = trunc i64 %185 to i8, !insn.addr !140
  %187 = icmp ult i8 %186, 63
  store i64 %185, i64* %rcx.4.reg2mem, !insn.addr !141
  store i64 9187344339347439617, i64* %rdi.0.reg2mem, !insn.addr !141
  store i64 %160, i64* %rsi.6.reg2mem, !insn.addr !141
  br i1 %187, label %dec_label_pc_2f3, label %dec_label_pc_324, !insn.addr !141

dec_label_pc_316:                                 ; preds = %dec_label_pc_22b
  %188 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !142
  %189 = inttoptr i64 %188 to i64*, !insn.addr !142
  store i64 0, i64* %189, align 8, !insn.addr !142
  br label %dec_label_pc_32c, !insn.addr !143

dec_label_pc_324:                                 ; preds = %dec_label_pc_2b8, %dec_label_pc_302, %dec_label_pc_2a3, %dec_label_pc_28b, %dec_label_pc_2f3, %dec_label_pc_2d5
  %rsi.6.reload = load i64, i64* %rsi.6.reg2mem
  %190 = add i64 %7, 17, !insn.addr !144
  %191 = inttoptr i64 %190 to i8*, !insn.addr !144
  %192 = load i8, i8* %191, align 1, !insn.addr !144
  %193 = or i8 %192, 8, !insn.addr !144
  store i8 %193, i8* %191, align 1, !insn.addr !144
  %194 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !145
  %195 = inttoptr i64 %194 to i64*, !insn.addr !145
  store i64 %rsi.6.reload, i64* %195, align 8, !insn.addr !145
  br label %dec_label_pc_32c, !insn.addr !145

dec_label_pc_32c:                                 ; preds = %dec_label_pc_324, %dec_label_pc_316
  %196 = add i64 %135, ptrtoint (i8** @global_var_ad80 to i64), !insn.addr !146
  %197 = inttoptr i64 %196 to i8*, !insn.addr !146
  %198 = load i8, i8* %197, align 1, !insn.addr !146
  %199 = icmp eq i32 %140, 0, !insn.addr !147
  %200 = zext i8 %198 to i32
  %201 = lshr i32 %200, %140
  %202 = trunc i32 %201 to i8
  %rsi.7 = select i1 %199, i8 %198, i8 %202
  %203 = urem i8 %rsi.7, 2, !insn.addr !148
  %204 = icmp eq i8 %203, 0, !insn.addr !148
  %205 = icmp eq i1 %204, false, !insn.addr !149
  store i64 %rdx.1.reload, i64* %rdx.7.reg2mem, !insn.addr !149
  br i1 %205, label %dec_label_pc_8a5, label %dec_label_pc_347, !insn.addr !149

dec_label_pc_347:                                 ; preds = %dec_label_pc_32c
  %206 = and i8 %128, -4
  %207 = icmp eq i8 %206, -96
  %208 = add i64 %7, 17
  %209 = inttoptr i64 %208 to i8*
  %210 = load i8, i8* %209, align 1
  br i1 %207, label %dec_label_pc_352, label %dec_label_pc_35b, !insn.addr !150

dec_label_pc_352:                                 ; preds = %dec_label_pc_347
  %211 = or i8 %210, 5, !insn.addr !151
  store i8 %211, i8* %209, align 1, !insn.addr !151
  store i64 %rdx.1.reload, i64* %rdx.4.reg2mem, !insn.addr !152
  br label %dec_label_pc_63f, !insn.addr !152

dec_label_pc_35b:                                 ; preds = %dec_label_pc_347
  %212 = and i8 %210, 8, !insn.addr !153
  %213 = icmp eq i8 %212, 0, !insn.addr !153
  %214 = icmp eq i1 %213, false, !insn.addr !154
  br i1 %214, label %dec_label_pc_36f, label %dec_label_pc_363, !insn.addr !154

dec_label_pc_363:                                 ; preds = %dec_label_pc_35b
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !155
  store i64 %133, i64* %rax.1.reg2mem, !insn.addr !156
  store i64 %147, i64* %rdx.3.in.reg2mem, !insn.addr !156
  br label %dec_label_pc_4c1, !insn.addr !156

dec_label_pc_36f:                                 ; preds = %dec_label_pc_35b
  %215 = load i8, i8* %10, align 1, !insn.addr !157
  %216 = and i8 %215, 32, !insn.addr !157
  %217 = icmp eq i8 %216, 0, !insn.addr !157
  store i64 %rdx.1.reload, i64* %rdx.5.reg2mem, !insn.addr !158
  br i1 %217, label %dec_label_pc_65d, label %dec_label_pc_379, !insn.addr !158

dec_label_pc_379:                                 ; preds = %dec_label_pc_36f
  %218 = add i64 %7, 27, !insn.addr !159
  %219 = inttoptr i64 %218 to i8*, !insn.addr !159
  %220 = load i8, i8* %219, align 1, !insn.addr !159
  %221 = and i8 %220, 8, !insn.addr !159
  %222 = icmp eq i8 %221, 0, !insn.addr !159
  store i64 %rdx.1.reload, i64* %rdx.5.reg2mem, !insn.addr !160
  br i1 %222, label %dec_label_pc_65d, label %dec_label_pc_383, !insn.addr !160

dec_label_pc_383:                                 ; preds = %dec_label_pc_379
  %223 = and i64 %133, 248, !insn.addr !161
  %224 = icmp eq i64 %223, 184, !insn.addr !162
  %225 = icmp eq i1 %224, false, !insn.addr !163
  store i64 %rdx.1.reload, i64* %rdx.5.reg2mem, !insn.addr !163
  br i1 %225, label %dec_label_pc_65d, label %dec_label_pc_391, !insn.addr !163

dec_label_pc_391:                                 ; preds = %dec_label_pc_383
  %226 = or i8 %210, 16, !insn.addr !164
  %227 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !165
  %228 = inttoptr i64 %227 to i64*, !insn.addr !165
  store i64 8, i64* %228, align 8, !insn.addr !165
  store i8 %226, i8* %209, align 1, !insn.addr !166
  %229 = trunc i64 %134 to i8, !insn.addr !167
  %230 = add i64 %7, 32, !insn.addr !167
  %231 = inttoptr i64 %230 to i8*, !insn.addr !167
  store i8 %229, i8* %231, align 1, !insn.addr !167
  store i32 184, i32* %146, align 4, !insn.addr !168
  store i64 %rdx.1.reload, i64* %rdx.5.reg2mem, !insn.addr !169
  br label %dec_label_pc_65d, !insn.addr !169

dec_label_pc_3af:                                 ; preds = %dec_label_pc_1a9
  %232 = add i64 %7, 40
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233, align 4, !insn.addr !170
  %235 = mul i32 %234, 256, !insn.addr !171
  store i32 %235, i32* %233, align 4, !insn.addr !172
  %236 = inttoptr i64 %rdx.2.reload to i8*, !insn.addr !173
  %237 = load i8, i8* %236, align 1, !insn.addr !173
  %238 = zext i8 %237 to i32, !insn.addr !174
  %239 = or i32 %235, %238, !insn.addr !174
  store i32 %239, i32* %233, align 4, !insn.addr !175
  %240 = load i8, i8* %236, align 1, !insn.addr !176
  %241 = add i8 %240, -56
  %242 = and i8 %241, -3, !insn.addr !177
  %243 = icmp eq i8 %242, 0, !insn.addr !177
  %244 = icmp eq i1 %243, false, !insn.addr !178
  br i1 %244, label %dec_label_pc_3e8, label %dec_label_pc_3cd, !insn.addr !178

dec_label_pc_3cd:                                 ; preds = %dec_label_pc_3af
  %245 = load i8, i8* %10, align 1, !insn.addr !179
  %246 = and i8 %245, 16, !insn.addr !179
  %247 = icmp eq i8 %246, 0, !insn.addr !179
  %248 = icmp eq i1 %247, false, !insn.addr !180
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !180
  br i1 %248, label %dec_label_pc_a96, label %dec_label_pc_3d7, !insn.addr !180

dec_label_pc_3d7:                                 ; preds = %dec_label_pc_3cd
  %249 = add i64 %rdx.2.reload, 1, !insn.addr !181
  store i64 %249, i64* %storemerge11.reg2mem, !insn.addr !181
  br label %dec_label_pc_3da, !insn.addr !181

dec_label_pc_3da:                                 ; preds = %dec_label_pc_a68, %dec_label_pc_3d7
  %storemerge11.reload = load i64, i64* %storemerge11.reg2mem
  %250 = icmp ult i64 %storemerge11.reload, %arg3, !insn.addr !182
  br i1 %250, label %dec_label_pc_4de, label %dec_label_pc_a85, !insn.addr !183

dec_label_pc_3e8:                                 ; preds = %dec_label_pc_3af
  %251 = udiv i8 %240, 8
  %252 = zext i8 %251 to i64, !insn.addr !184
  %253 = add i64 %252, ptrtoint (i8** @global_var_ad60 to i64), !insn.addr !185
  %254 = inttoptr i64 %253 to i8*, !insn.addr !185
  %255 = load i8, i8* %254, align 1, !insn.addr !185
  %256 = zext i8 %255 to i64, !insn.addr !185
  %257 = urem i8 %240, 8
  %258 = icmp eq i8 %257, 0, !insn.addr !186
  store i64 %256, i64* %rdi.1.reg2mem, !insn.addr !186
  br i1 %258, label %264, label %259, !insn.addr !186

; <label>:259:                                    ; preds = %dec_label_pc_3e8
  %260 = zext i8 %257 to i32, !insn.addr !187
  %261 = zext i8 %255 to i32, !insn.addr !186
  %262 = lshr i32 %261, %260, !insn.addr !186
  %263 = zext i32 %262 to i64, !insn.addr !186
  store i64 %263, i64* %rdi.1.reg2mem, !insn.addr !186
  br label %264, !insn.addr !186

; <label>:264:                                    ; preds = %dec_label_pc_3e8, %259
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %265 = urem i64 %rdi.1.reload, 2
  %266 = icmp eq i64 %265, 0, !insn.addr !188
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !189
  br i1 %266, label %dec_label_pc_a96, label %dec_label_pc_40e, !insn.addr !189

dec_label_pc_40e:                                 ; preds = %264
  %267 = load i8, i8* %12, align 1, !insn.addr !190
  %268 = icmp eq i8 %267, -13, !insn.addr !190
  %269 = icmp eq i8 %240, 30, !insn.addr !191
  %or.cond = icmp eq i1 %269, %268
  br i1 %or.cond, label %dec_label_pc_9f3, label %dec_label_pc_41e, !insn.addr !192

dec_label_pc_41e:                                 ; preds = %dec_label_pc_40e
  %270 = zext i32 %239 to i64, !insn.addr !174
  %271 = sub i64 %rdx.2.reload, %arg2, !insn.addr !193
  %272 = trunc i64 %271 to i8, !insn.addr !194
  %273 = add i64 %7, 80, !insn.addr !194
  %274 = inttoptr i64 %273 to i8*, !insn.addr !194
  store i8 %272, i8* %274, align 1, !insn.addr !194
  %275 = load i8, i8* %10, align 1, !insn.addr !195
  %276 = and i8 %275, 16, !insn.addr !195
  %277 = icmp eq i8 %276, 0, !insn.addr !195
  %278 = urem i64 %270, 65536
  %spec.select13 = select i1 %277, i64 %270, i64 %278
  %279 = and i64 %spec.select13, 240
  %280 = icmp eq i64 %279, 128, !insn.addr !196
  store i64 4, i64* %storemerge7.reg2mem, !insn.addr !197
  br i1 %280, label %dec_label_pc_487, label %dec_label_pc_443, !insn.addr !197

dec_label_pc_443:                                 ; preds = %dec_label_pc_41e
  %281 = urem i64 %spec.select13, 256, !insn.addr !198
  %282 = trunc i64 %spec.select13 to i8, !insn.addr !199
  %283 = icmp ult i8 %282, 116
  br i1 %283, label %dec_label_pc_44d, label %dec_label_pc_454, !insn.addr !200

dec_label_pc_44d:                                 ; preds = %dec_label_pc_443
  %284 = trunc i64 %281 to i32, !insn.addr !201
  %285 = icmp ult i32 %284, 112
  store i64 1, i64* %storemerge7.reg2mem, !insn.addr !202
  br i1 %285, label %dec_label_pc_472, label %dec_label_pc_487, !insn.addr !202

dec_label_pc_454:                                 ; preds = %dec_label_pc_443
  %286 = add nuw nsw i64 %281, 4294967132, !insn.addr !203
  %287 = trunc i64 %286 to i32, !insn.addr !204
  %288 = icmp ult i32 %287, 35
  br i1 %288, label %dec_label_pc_45f, label %dec_label_pc_472, !insn.addr !205

dec_label_pc_45f:                                 ; preds = %dec_label_pc_454
  %289 = urem i64 %286, 64, !insn.addr !206
  %290 = lshr i64 31142707457, %289
  %291 = urem i64 %290, 2
  %292 = icmp eq i64 %291, 0, !insn.addr !207
  %293 = icmp eq i1 %292, false, !insn.addr !208
  store i64 1, i64* %storemerge7.reg2mem, !insn.addr !208
  br i1 %293, label %dec_label_pc_487, label %dec_label_pc_472, !insn.addr !208

dec_label_pc_472:                                 ; preds = %dec_label_pc_454, %dec_label_pc_45f, %dec_label_pc_44d
  %294 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !209
  %295 = inttoptr i64 %294 to i64*, !insn.addr !209
  store i64 0, i64* %295, align 8, !insn.addr !209
  br label %dec_label_pc_48f, !insn.addr !210

dec_label_pc_487:                                 ; preds = %dec_label_pc_45f, %dec_label_pc_44d, %dec_label_pc_41e
  %storemerge7.reload = load i64, i64* %storemerge7.reg2mem
  %296 = add i64 %7, 17, !insn.addr !211
  %297 = inttoptr i64 %296 to i8*, !insn.addr !211
  %298 = load i8, i8* %297, align 1, !insn.addr !211
  %299 = or i8 %298, 8, !insn.addr !211
  store i8 %299, i8* %297, align 1, !insn.addr !211
  %300 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !212
  %301 = inttoptr i64 %300 to i64*, !insn.addr !212
  store i64 %storemerge7.reload, i64* %301, align 8, !insn.addr !212
  br label %dec_label_pc_48f, !insn.addr !212

dec_label_pc_48f:                                 ; preds = %dec_label_pc_487, %dec_label_pc_472
  %302 = udiv i64 %spec.select13, 8, !insn.addr !213
  %303 = urem i64 %302, 32, !insn.addr !214
  %304 = add i64 %303, ptrtoint (i8** @global_var_ad40 to i64), !insn.addr !215
  %305 = inttoptr i64 %304 to i8*, !insn.addr !215
  %306 = load i8, i8* %305, align 1, !insn.addr !215
  %307 = zext i8 %306 to i32, !insn.addr !216
  %308 = trunc i64 %spec.select13 to i32
  %309 = urem i32 %308, 8, !insn.addr !216
  %310 = shl i32 1, %309, !insn.addr !216
  %311 = and i32 %310, %307, !insn.addr !216
  %312 = icmp eq i32 %311, 0, !insn.addr !216
  store i64 %rdx.2.reload, i64* %rdx.7.reg2mem, !insn.addr !217
  br i1 %312, label %dec_label_pc_4b0, label %dec_label_pc_8a5, !insn.addr !217

dec_label_pc_4b0:                                 ; preds = %dec_label_pc_48f
  %313 = add i64 %7, 17, !insn.addr !218
  %314 = inttoptr i64 %313 to i8*, !insn.addr !218
  %315 = load i8, i8* %314, align 1, !insn.addr !218
  %316 = and i8 %315, 8, !insn.addr !218
  %317 = icmp eq i8 %316, 0, !insn.addr !218
  %318 = icmp eq i1 %317, false, !insn.addr !219
  store i64 %rdx.2.reload, i64* %rdx.5.reg2mem, !insn.addr !219
  br i1 %318, label %dec_label_pc_65d, label %dec_label_pc_4ba, !insn.addr !219

dec_label_pc_4ba:                                 ; preds = %dec_label_pc_4b0
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !220
  store i64 %270, i64* %rax.1.reg2mem, !insn.addr !221
  store i64 %271, i64* %rdx.3.in.reg2mem, !insn.addr !221
  br label %dec_label_pc_4c1, !insn.addr !221

dec_label_pc_4c1:                                 ; preds = %dec_label_pc_9e5, %dec_label_pc_9b8, %dec_label_pc_633, %dec_label_pc_4ba, %dec_label_pc_363
  %rdx.3.in.reload = load i64, i64* %rdx.3.in.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %rdx.3 = add i64 %rdx.3.in.reload, 1
  %319 = add i64 %7, 8, !insn.addr !222
  %320 = inttoptr i64 %319 to i64*, !insn.addr !222
  store i64 %rdx.3, i64* %320, align 8, !insn.addr !222
  %321 = icmp eq i64 %rdx.3, 0, !insn.addr !223
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !224
  br i1 %321, label %dec_label_pc_a96, label %dec_label_pc_4c1.dec_label_pc_4ce_crit_edge, !insn.addr !224

dec_label_pc_4c1.dec_label_pc_4ce_crit_edge:      ; preds = %dec_label_pc_4c1
  %.pre78 = add i64 %7, 40, !insn.addr !225
  %.pre79 = inttoptr i64 %.pre78 to i32*, !insn.addr !225
  store i32* %.pre79, i32** %.pre76.pre-phi.reg2mem
  store i64 %rax.1.reload, i64* %rax.2.reg2mem
  br label %dec_label_pc_4ce

dec_label_pc_4ce:                                 ; preds = %dec_label_pc_4c1.dec_label_pc_4ce_crit_edge, %dec_label_pc_7d1
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %.pre76.pre-phi.reload = load i32*, i32** %.pre76.pre-phi.reg2mem
  %322 = add nsw i64 %rax.2.reload, 128, !insn.addr !226
  %323 = and i64 %322, 4294967295, !insn.addr !226
  store i32* %.pre76.pre-phi.reload, i32** %.pre-phi77.reg2mem, !insn.addr !226
  store i64 %323, i64* %storemerge8.reg2mem, !insn.addr !226
  br label %dec_label_pc_4d1, !insn.addr !226

dec_label_pc_4d1:                                 ; preds = %dec_label_pc_a00, %dec_label_pc_4ce
  %storemerge8.reload = load i64, i64* %storemerge8.reg2mem
  %.pre-phi77.reload = load i32*, i32** %.pre-phi77.reg2mem
  %324 = trunc i64 %storemerge8.reload to i32, !insn.addr !225
  store i32 %324, i32* %.pre-phi77.reload, align 4, !insn.addr !225
  store i64 1, i64* %storemerge1.reg2mem, !insn.addr !227
  br label %dec_label_pc_a96, !insn.addr !227

dec_label_pc_4de:                                 ; preds = %dec_label_pc_3da
  %325 = add i64 %7, 40, !insn.addr !228
  %326 = inttoptr i64 %325 to i32*, !insn.addr !228
  %327 = load i32, i32* %326, align 4, !insn.addr !228
  %328 = mul i32 %327, 256, !insn.addr !229
  store i32 %328, i32* %326, align 4, !insn.addr !230
  %329 = inttoptr i64 %storemerge11.reload to i8*, !insn.addr !231
  %330 = load i8, i8* %329, align 1, !insn.addr !231
  %331 = zext i8 %330 to i32, !insn.addr !232
  %332 = or i32 %328, %331, !insn.addr !232
  %333 = zext i32 %332 to i64, !insn.addr !232
  store i32 %332, i32* %326, align 4, !insn.addr !233
  %334 = load i8, i8* %10, align 1, !insn.addr !234
  %335 = and i8 %334, 16, !insn.addr !234
  %336 = icmp eq i8 %335, 0, !insn.addr !234
  %337 = urem i64 %333, 16777216
  %spec.select15 = select i1 %336, i64 %333, i64 %337
  %338 = and i64 %spec.select15, 65280, !insn.addr !235
  %339 = icmp eq i64 %338, 14336, !insn.addr !236
  %340 = icmp eq i1 %339, false, !insn.addr !237
  br i1 %340, label %dec_label_pc_559, label %dec_label_pc_510, !insn.addr !237

dec_label_pc_510:                                 ; preds = %dec_label_pc_4de
  %341 = udiv i64 %spec.select15, 8, !insn.addr !238
  %342 = urem i64 %341, 32, !insn.addr !239
  %343 = add i64 %342, ptrtoint (i8** @global_var_ad20 to i64), !insn.addr !240
  %344 = inttoptr i64 %343 to i8*, !insn.addr !240
  %345 = load i8, i8* %344, align 1, !insn.addr !240
  %346 = zext i8 %345 to i32, !insn.addr !241
  %347 = trunc i64 %spec.select15 to i32
  %348 = urem i32 %347, 8, !insn.addr !241
  %349 = shl i32 1, %348, !insn.addr !241
  %350 = and i32 %349, %346, !insn.addr !241
  %351 = icmp ne i32 %350, 0, !insn.addr !241
  %352 = icmp eq i1 %351, false, !insn.addr !242
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !242
  br i1 %352, label %dec_label_pc_a96, label %dec_label_pc_52f, !insn.addr !242

dec_label_pc_52f:                                 ; preds = %dec_label_pc_510
  %353 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !243
  %354 = inttoptr i64 %353 to i64*, !insn.addr !243
  store i64 0, i64* %354, align 8, !insn.addr !243
  %355 = sub i64 %storemerge11.reload, %arg2, !insn.addr !244
  %356 = add i64 %342, ptrtoint (i8** @global_var_ad00 to i64), !insn.addr !245
  %357 = inttoptr i64 %356 to i8*, !insn.addr !245
  %358 = load i8, i8* %357, align 1, !insn.addr !245
  %359 = trunc i64 %355 to i8, !insn.addr !246
  %360 = add i64 %7, 80, !insn.addr !246
  %361 = inttoptr i64 %360 to i8*, !insn.addr !246
  store i8 %359, i8* %361, align 1, !insn.addr !246
  %362 = zext i8 %358 to i32, !insn.addr !247
  %363 = and i32 %349, %362, !insn.addr !247
  %364 = icmp ne i32 %363, 0, !insn.addr !247
  %365 = icmp eq i1 %364, false, !insn.addr !248
  store i64 %storemerge11.reload, i64* %rdx.7.reg2mem, !insn.addr !248
  br i1 %365, label %dec_label_pc_62d, label %dec_label_pc_8a5, !insn.addr !248

dec_label_pc_559:                                 ; preds = %dec_label_pc_4de
  %366 = urem i64 %spec.select15, 256, !insn.addr !249
  %367 = trunc i64 %spec.select15 to i8, !insn.addr !250
  %368 = icmp ult i8 %367, -15
  br i1 %368, label %dec_label_pc_563, label %dec_label_pc_5b6, !insn.addr !251

dec_label_pc_563:                                 ; preds = %dec_label_pc_559
  %369 = trunc i64 %366 to i32, !insn.addr !252
  %370 = icmp ult i32 %369, 204
  br i1 %370, label %dec_label_pc_56a, label %dec_label_pc_57c, !insn.addr !253

dec_label_pc_56a:                                 ; preds = %dec_label_pc_563
  %371 = icmp ult i32 %369, 58
  br i1 %371, label %dec_label_pc_56f, label %dec_label_pc_597, !insn.addr !254

dec_label_pc_56f:                                 ; preds = %dec_label_pc_56a
  %372 = icmp ult i32 %369, 56
  br i1 %372, label %dec_label_pc_574, label %dec_label_pc_59f, !insn.addr !255

dec_label_pc_574:                                 ; preds = %dec_label_pc_56f
  %373 = and i64 %spec.select15, 254
  %374 = icmp eq i64 %373, 32, !insn.addr !256
  %375 = icmp eq i32 %369, 34, !insn.addr !256
  store i1 %374, i1* %cf.0.reg2mem, !insn.addr !257
  store i1 %375, i1* %storemerge6.reg2mem, !insn.addr !257
  br label %dec_label_pc_59d, !insn.addr !257

dec_label_pc_57c:                                 ; preds = %dec_label_pc_563
  %376 = add nuw nsw i64 %spec.select15, 52, !insn.addr !258
  %377 = urem i64 %376, 64, !insn.addr !259
  %378 = lshr i64 68720001025, %377
  %379 = urem i64 %378, 2
  %380 = icmp eq i64 %379, 0, !insn.addr !260
  br i1 %380, label %dec_label_pc_5b6, label %dec_label_pc_59f, !insn.addr !261

dec_label_pc_597:                                 ; preds = %dec_label_pc_56a
  %381 = add nsw i32 %369, -96, !insn.addr !262
  %382 = icmp ult i32 %381, 3, !insn.addr !263
  %383 = icmp eq i32 %369, 99, !insn.addr !263
  store i1 %382, i1* %cf.0.reg2mem, !insn.addr !263
  store i1 %383, i1* %storemerge6.reg2mem, !insn.addr !263
  br label %dec_label_pc_59d, !insn.addr !263

dec_label_pc_59d:                                 ; preds = %dec_label_pc_597, %dec_label_pc_574
  %storemerge6.reload = load i1, i1* %storemerge6.reg2mem
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %384 = or i1 %cf.0.reload, %storemerge6.reload, !insn.addr !264
  br i1 %384, label %dec_label_pc_59f, label %dec_label_pc_5b6, !insn.addr !264

dec_label_pc_59f:                                 ; preds = %dec_label_pc_57c, %dec_label_pc_59d, %dec_label_pc_56f
  %385 = sub i64 %storemerge11.reload, %arg2, !insn.addr !265
  %386 = trunc i64 %385 to i8, !insn.addr !266
  %387 = add i64 %7, 80, !insn.addr !266
  %388 = inttoptr i64 %387 to i8*, !insn.addr !266
  store i8 %386, i8* %388, align 1, !insn.addr !266
  %389 = icmp eq i64 %338, 14848, !insn.addr !267
  br i1 %389, label %dec_label_pc_61c, label %dec_label_pc_647, !insn.addr !268

dec_label_pc_5b6:                                 ; preds = %dec_label_pc_59d, %dec_label_pc_559, %dec_label_pc_57c
  %390 = udiv i64 %spec.select15, 16, !insn.addr !269
  %391 = urem i64 %390, 16, !insn.addr !269
  %392 = urem i64 %spec.select15, 16, !insn.addr !270
  %393 = icmp eq i64 %391, 1, !insn.addr !271
  br i1 %393, label %dec_label_pc_5db, label %dec_label_pc_5c7, !insn.addr !272

dec_label_pc_5c7:                                 ; preds = %dec_label_pc_5b6
  %394 = trunc i64 %391 to i8, !insn.addr !273
  %395 = icmp eq i8 %394, 4, !insn.addr !273
  br i1 %395, label %dec_label_pc_5f4, label %dec_label_pc_5cd, !insn.addr !274

dec_label_pc_5cd:                                 ; preds = %dec_label_pc_5c7
  %396 = icmp eq i8 %394, 0, !insn.addr !275
  %397 = icmp eq i1 %396, false, !insn.addr !276
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !276
  br i1 %397, label %dec_label_pc_a96, label %dec_label_pc_5d2, !insn.addr !276

dec_label_pc_5d2:                                 ; preds = %dec_label_pc_5cd
  %398 = and i64 %spec.select15, 11, !insn.addr !277
  %399 = icmp eq i64 %398, 3, !insn.addr !278
  store i1 %399, i1* %zf.0.reg2mem, !insn.addr !279
  br label %dec_label_pc_5e4, !insn.addr !279

dec_label_pc_5db:                                 ; preds = %dec_label_pc_5b6
  %400 = trunc i64 %392 to i8, !insn.addr !280
  %401 = icmp ult i8 %400, 10
  br i1 %401, label %dec_label_pc_5e0, label %dec_label_pc_5ed, !insn.addr !281

dec_label_pc_5e0:                                 ; preds = %dec_label_pc_5db
  %402 = and i64 %spec.select15, 12
  %403 = icmp eq i64 %402, 0, !insn.addr !282
  store i1 %403, i1* %zf.0.reg2mem, !insn.addr !282
  br label %dec_label_pc_5e4, !insn.addr !282

dec_label_pc_5e4:                                 ; preds = %dec_label_pc_5f4, %dec_label_pc_5e0, %dec_label_pc_5d2
  %zf.0.reload = load i1, i1* %zf.0.reg2mem
  %404 = icmp eq i1 %zf.0.reload, false, !insn.addr !283
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !283
  br i1 %404, label %dec_label_pc_602, label %dec_label_pc_a96, !insn.addr !283

dec_label_pc_5ed:                                 ; preds = %dec_label_pc_5db
  %405 = icmp eq i8 %400, 13, !insn.addr !284
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !285
  br i1 %405, label %dec_label_pc_602, label %dec_label_pc_a96, !insn.addr !285

dec_label_pc_5f4:                                 ; preds = %dec_label_pc_5c7
  %406 = lshr i64 7255, %392
  %407 = urem i64 %406, 2
  %408 = icmp eq i64 %407, 0, !insn.addr !286
  store i1 %408, i1* %zf.0.reg2mem, !insn.addr !287
  br label %dec_label_pc_5e4, !insn.addr !287

dec_label_pc_602:                                 ; preds = %dec_label_pc_5ed, %dec_label_pc_5e4
  %409 = sub i64 %storemerge11.reload, %arg2, !insn.addr !288
  %410 = trunc i64 %409 to i8, !insn.addr !289
  %411 = add i64 %7, 80, !insn.addr !289
  %412 = inttoptr i64 %411 to i8*, !insn.addr !289
  store i8 %410, i8* %412, align 1, !insn.addr !289
  %413 = icmp eq i64 %338, 14848, !insn.addr !290
  %414 = icmp eq i1 %413, false, !insn.addr !291
  br i1 %414, label %dec_label_pc_647, label %dec_label_pc_614, !insn.addr !291

dec_label_pc_614:                                 ; preds = %dec_label_pc_602
  %415 = trunc i64 %366 to i32
  %416 = add nsw i32 %415, -74, !insn.addr !292
  %417 = icmp ult i32 %416, 3
  br i1 %417, label %dec_label_pc_647, label %dec_label_pc_61c, !insn.addr !293

dec_label_pc_61c:                                 ; preds = %dec_label_pc_614, %dec_label_pc_59f
  %418 = add i64 %7, 17, !insn.addr !294
  %419 = inttoptr i64 %418 to i8*, !insn.addr !294
  %420 = load i8, i8* %419, align 1, !insn.addr !294
  %421 = or i8 %420, 8, !insn.addr !294
  store i8 %421, i8* %419, align 1, !insn.addr !294
  %422 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !295
  %423 = inttoptr i64 %422 to i64*, !insn.addr !295
  store i64 1, i64* %423, align 8, !insn.addr !295
  store i64 %storemerge11.reload, i64* %rdx.7.reg2mem, !insn.addr !296
  br label %dec_label_pc_8a5, !insn.addr !296

dec_label_pc_62d:                                 ; preds = %dec_label_pc_52f
  %424 = add i64 %7, 17, !insn.addr !297
  %425 = inttoptr i64 %424 to i8*, !insn.addr !297
  %426 = load i8, i8* %425, align 1, !insn.addr !297
  %427 = and i8 %426, 8, !insn.addr !297
  %428 = icmp eq i8 %427, 0, !insn.addr !297
  %429 = icmp eq i1 %428, false, !insn.addr !298
  store i64 %storemerge11.reload, i64* %rdx.5.reg2mem, !insn.addr !298
  br i1 %429, label %dec_label_pc_65d, label %dec_label_pc_633, !insn.addr !298

dec_label_pc_633:                                 ; preds = %dec_label_pc_62d
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !299
  store i64 %333, i64* %rax.1.reg2mem, !insn.addr !300
  store i64 %355, i64* %rdx.3.in.reg2mem, !insn.addr !300
  br label %dec_label_pc_4c1, !insn.addr !300

dec_label_pc_63f:                                 ; preds = %dec_label_pc_94a, %dec_label_pc_352
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %430 = add i64 %rdx.4.reload, 1, !insn.addr !301
  store i64 %430, i64* %storemerge4.reg2mem, !insn.addr !302
  br label %dec_label_pc_71c, !insn.addr !302

dec_label_pc_647:                                 ; preds = %dec_label_pc_59f, %dec_label_pc_614, %dec_label_pc_602
  %431 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !303
  %432 = inttoptr i64 %431 to i64*, !insn.addr !303
  store i64 0, i64* %432, align 8, !insn.addr !303
  store i64 %storemerge11.reload, i64* %rdx.7.reg2mem, !insn.addr !304
  br label %dec_label_pc_8a5, !insn.addr !304

dec_label_pc_655:                                 ; preds = %dec_label_pc_f0, %dec_label_pc_fc, %dec_label_pc_ba, %dec_label_pc_d2, %dec_label_pc_115
  %storemerge10 = add i64 %rdx.047.reload, 1
  %storemerge = icmp ult i64 %storemerge10, %arg3
  %433 = icmp eq i1 %storemerge, false, !insn.addr !5
  store i64 %storemerge10, i64* %rdx.047.reg2mem, !insn.addr !5
  br i1 %433, label %dec_label_pc_a85, label %dec_label_pc_4b, !insn.addr !5

dec_label_pc_65d:                                 ; preds = %dec_label_pc_9df, %dec_label_pc_62d, %dec_label_pc_4b0, %dec_label_pc_391, %dec_label_pc_383, %dec_label_pc_379, %dec_label_pc_36f
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %434 = add i64 %rdx.5.reload, 1, !insn.addr !305
  store i64 %434, i64* %rdx.6.reg2mem, !insn.addr !305
  br label %dec_label_pc_660, !insn.addr !305

dec_label_pc_660:                                 ; preds = %dec_label_pc_9af, %dec_label_pc_89c, %dec_label_pc_893, %dec_label_pc_65d
  %rdx.6.reload = load i64, i64* %rdx.6.reg2mem
  %435 = icmp ult i64 %rdx.6.reload, %arg3, !insn.addr !306
  %436 = icmp eq i1 %435, false, !insn.addr !307
  br i1 %436, label %dec_label_pc_a85, label %dec_label_pc_669, !insn.addr !307

dec_label_pc_669:                                 ; preds = %dec_label_pc_660
  %437 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !308
  %438 = inttoptr i64 %437 to i64*, !insn.addr !308
  %439 = load i64, i64* %438, align 8, !insn.addr !308
  %440 = inttoptr i64 %rdx.6.reload to i8*, !insn.addr !309
  %441 = load i8, i8* %440, align 1, !insn.addr !309
  %442 = zext i8 %441 to i64, !insn.addr !309
  %443 = icmp eq i64 %439, 1, !insn.addr !310
  %444 = icmp eq i1 %443, false, !insn.addr !311
  br i1 %444, label %dec_label_pc_694, label %dec_label_pc_676, !insn.addr !311

dec_label_pc_676:                                 ; preds = %dec_label_pc_669
  %445 = sub i64 %439, %arg2, !insn.addr !312
  %446 = sext i8 %441 to i64, !insn.addr !313
  %447 = add i64 %7, 64, !insn.addr !314
  %448 = inttoptr i64 %447 to i64*, !insn.addr !314
  store i64 %442, i64* %448, align 8, !insn.addr !314
  %449 = add i64 %445, %rdx.6.reload, !insn.addr !315
  %450 = add i64 %7, 56, !insn.addr !316
  %451 = inttoptr i64 %450 to i64*, !insn.addr !316
  store i64 %446, i64* %451, align 8, !insn.addr !316
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !317
  %452 = add i64 %7, 8, !insn.addr !318
  %453 = inttoptr i64 %452 to i64*, !insn.addr !318
  store i64 %449, i64* %453, align 8, !insn.addr !318
  store i64 %449, i64* %zf.1.in.reg2mem, !insn.addr !319
  br label %dec_label_pc_7cb, !insn.addr !319

dec_label_pc_694:                                 ; preds = %dec_label_pc_669
  %454 = inttoptr i64 %9 to i64*, !insn.addr !320
  %455 = load i64, i64* %454, align 8, !insn.addr !320
  %456 = and i64 %455, 71776119061217284, !insn.addr !320
  %457 = icmp eq i64 %456, 28710447624486916, !insn.addr !321
  %458 = icmp eq i1 %457, false, !insn.addr !322
  store i64 %439, i64* %.reg2mem120, !insn.addr !322
  br i1 %458, label %dec_label_pc_6d3, label %dec_label_pc_6b5, !insn.addr !322

dec_label_pc_6b5:                                 ; preds = %dec_label_pc_694
  %459 = icmp eq i64 %439, 2, !insn.addr !323
  %460 = icmp eq i1 %459, false, !insn.addr !324
  br i1 %460, label %dec_label_pc_6c5, label %dec_label_pc_6bb, !insn.addr !324

dec_label_pc_6bb:                                 ; preds = %dec_label_pc_6b5
  store i64 4, i64* %438, align 8, !insn.addr !325
  store i64 4, i64* %.reg2mem120, !insn.addr !326
  br label %dec_label_pc_6d3, !insn.addr !326

dec_label_pc_6c5:                                 ; preds = %dec_label_pc_6b5
  %461 = icmp eq i64 %439, 4, !insn.addr !327
  %462 = icmp eq i1 %461, false, !insn.addr !328
  store i64 %439, i64* %.reg2mem120, !insn.addr !328
  br i1 %462, label %dec_label_pc_6d3, label %dec_label_pc_6cb, !insn.addr !328

dec_label_pc_6cb:                                 ; preds = %dec_label_pc_6c5
  store i64 2, i64* %438, align 8, !insn.addr !329
  store i64 2, i64* %.reg2mem120, !insn.addr !329
  br label %dec_label_pc_6d3, !insn.addr !329

dec_label_pc_6d3:                                 ; preds = %dec_label_pc_6cb, %dec_label_pc_6c5, %dec_label_pc_6bb, %dec_label_pc_694
  %463 = add i64 %rdx.6.reload, 1, !insn.addr !330
  %464 = icmp ult i64 %463, %arg3, !insn.addr !331
  %465 = icmp eq i1 %464, false, !insn.addr !332
  br i1 %465, label %dec_label_pc_a85, label %dec_label_pc_6dc, !insn.addr !332

dec_label_pc_6dc:                                 ; preds = %dec_label_pc_6d3
  %.reload121 = load i64, i64* %.reg2mem120, !insn.addr !333
  %466 = inttoptr i64 %463 to i8*, !insn.addr !334
  %467 = load i8, i8* %466, align 1, !insn.addr !334
  %468 = zext i8 %467 to i64, !insn.addr !334
  %469 = mul i64 %468, 256, !insn.addr !335
  %470 = or i64 %469, %442, !insn.addr !336
  %471 = icmp eq i64 %.reload121, 2, !insn.addr !337
  %472 = icmp eq i1 %471, false, !insn.addr !338
  br i1 %472, label %dec_label_pc_7d9, label %dec_label_pc_6f4, !insn.addr !338

dec_label_pc_6f4:                                 ; preds = %dec_label_pc_6dc
  %473 = add i64 %7, 64, !insn.addr !339
  %474 = inttoptr i64 %473 to i64*, !insn.addr !339
  store i64 %470, i64* %474, align 8, !insn.addr !339
  %sext2 = mul i64 %470, 281474976710656
  %475 = ashr exact i64 %sext2, 48, !insn.addr !340
  %476 = add i64 %7, 56, !insn.addr !341
  %477 = inttoptr i64 %476 to i64*, !insn.addr !341
  store i64 %475, i64* %477, align 8, !insn.addr !341
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !342
  store i64 %463, i64* %rsi.17.pn.reg2mem, !insn.addr !343
  br label %dec_label_pc_7c4, !insn.addr !343

dec_label_pc_70f:                                 ; preds = %dec_label_pc_998
  %478 = zext i8 %711 to i64, !insn.addr !344
  %479 = urem i64 %478, 2
  %480 = icmp eq i64 %479, 0, !insn.addr !345
  br i1 %480, label %dec_label_pc_9aa, label %dec_label_pc_718, !insn.addr !346

dec_label_pc_718:                                 ; preds = %dec_label_pc_70f
  %481 = add i64 %rdx.7.reload, 3, !insn.addr !347
  store i64 %481, i64* %storemerge4.reg2mem, !insn.addr !347
  br label %dec_label_pc_71c, !insn.addr !347

dec_label_pc_71c:                                 ; preds = %dec_label_pc_718, %dec_label_pc_63f
  %storemerge4.reload = load i64, i64* %storemerge4.reg2mem
  %482 = icmp ult i64 %storemerge4.reload, %arg3, !insn.addr !348
  %483 = icmp eq i1 %482, false, !insn.addr !349
  br i1 %483, label %dec_label_pc_a85, label %dec_label_pc_725, !insn.addr !349

dec_label_pc_725:                                 ; preds = %dec_label_pc_71c
  %484 = add i64 %storemerge4.reload, 1, !insn.addr !350
  %485 = icmp ult i64 %484, %arg3, !insn.addr !351
  %486 = icmp eq i1 %485, false, !insn.addr !352
  br i1 %486, label %dec_label_pc_a85, label %dec_label_pc_735, !insn.addr !352

dec_label_pc_735:                                 ; preds = %dec_label_pc_725
  %487 = add i64 %storemerge4.reload, 2, !insn.addr !353
  %488 = icmp ult i64 %487, %arg3, !insn.addr !354
  %489 = icmp eq i1 %488, false, !insn.addr !355
  br i1 %489, label %dec_label_pc_a85, label %dec_label_pc_74c, !insn.addr !355

dec_label_pc_74c:                                 ; preds = %dec_label_pc_735
  %490 = add i64 %storemerge4.reload, 3, !insn.addr !356
  %491 = icmp ult i64 %490, %arg3, !insn.addr !357
  %492 = icmp eq i1 %491, false, !insn.addr !358
  br i1 %492, label %dec_label_pc_a85, label %dec_label_pc_763, !insn.addr !358

dec_label_pc_763:                                 ; preds = %dec_label_pc_74c
  %493 = inttoptr i64 %487 to i8*, !insn.addr !359
  %494 = load i8, i8* %493, align 1, !insn.addr !359
  %495 = zext i8 %494 to i32, !insn.addr !360
  %496 = mul i32 %495, 65536, !insn.addr !360
  %497 = inttoptr i64 %484 to i8*, !insn.addr !361
  %498 = load i8, i8* %497, align 1, !insn.addr !361
  %499 = zext i8 %498 to i32, !insn.addr !362
  %500 = mul i32 %499, 256, !insn.addr !362
  %501 = inttoptr i64 %storemerge4.reload to i8*, !insn.addr !363
  %502 = load i8, i8* %501, align 1, !insn.addr !363
  %503 = zext i8 %502 to i32, !insn.addr !363
  %504 = inttoptr i64 %490 to i8*, !insn.addr !364
  %505 = load i8, i8* %504, align 1, !insn.addr !364
  %506 = zext i8 %505 to i32, !insn.addr !365
  %507 = shl i32 %506, ptrtoint (i32** @global_var_18 to i32), !insn.addr !365
  %508 = or i32 %496, %503, !insn.addr !366
  %509 = or i32 %508, %500, !insn.addr !367
  %510 = or i32 %509, %507, !insn.addr !368
  %511 = add i64 %7, 17, !insn.addr !369
  %512 = inttoptr i64 %511 to i8*, !insn.addr !369
  %513 = load i8, i8* %512, align 1, !insn.addr !369
  %514 = zext i8 %513 to i64, !insn.addr !369
  %515 = sext i32 %510 to i64, !insn.addr !370
  %516 = add i64 %7, 48, !insn.addr !371
  %517 = inttoptr i64 %516 to i64*, !insn.addr !371
  store i64 %515, i64* %517, align 8, !insn.addr !371
  %518 = and i8 %513, 4, !insn.addr !372
  %519 = icmp eq i8 %518, 0, !insn.addr !372
  br i1 %519, label %dec_label_pc_88e, label %dec_label_pc_77e, !insn.addr !373

dec_label_pc_77e:                                 ; preds = %dec_label_pc_763
  %520 = add i64 %storemerge4.reload, 4, !insn.addr !374
  %521 = icmp ult i64 %520, %arg3, !insn.addr !375
  %522 = icmp eq i1 %521, false, !insn.addr !376
  br i1 %522, label %dec_label_pc_a85, label %dec_label_pc_78b, !insn.addr !376

dec_label_pc_78b:                                 ; preds = %dec_label_pc_77e
  %523 = add i64 %storemerge4.reload, 5, !insn.addr !377
  %524 = icmp ult i64 %523, %arg3, !insn.addr !378
  %525 = icmp eq i1 %524, false, !insn.addr !379
  br i1 %525, label %dec_label_pc_a85, label %dec_label_pc_798, !insn.addr !379

dec_label_pc_798:                                 ; preds = %dec_label_pc_78b
  %526 = add i64 %storemerge4.reload, 6, !insn.addr !380
  %527 = icmp ult i64 %526, %arg3, !insn.addr !381
  %528 = icmp eq i1 %527, false, !insn.addr !382
  br i1 %528, label %dec_label_pc_a85, label %dec_label_pc_7a5, !insn.addr !382

dec_label_pc_7a5:                                 ; preds = %dec_label_pc_798
  %529 = add i64 %storemerge4.reload, 7, !insn.addr !383
  %530 = icmp ult i64 %529, %arg3, !insn.addr !384
  %531 = icmp eq i1 %530, false, !insn.addr !385
  br i1 %531, label %dec_label_pc_a85, label %dec_label_pc_7b2, !insn.addr !385

dec_label_pc_7b2:                                 ; preds = %dec_label_pc_7a5
  %532 = and i64 %514, 8
  %533 = icmp eq i64 %532, 0, !insn.addr !386
  %534 = icmp eq i1 %533, false, !insn.addr !387
  br i1 %534, label %dec_label_pc_89c, label %dec_label_pc_7bb, !insn.addr !387

dec_label_pc_7bb:                                 ; preds = %dec_label_pc_7b2
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !388
  store i64 %529, i64* %rsi.17.pn.reg2mem, !insn.addr !389
  br label %dec_label_pc_7c4, !insn.addr !389

dec_label_pc_7c4:                                 ; preds = %dec_label_pc_87f, %dec_label_pc_7bb, %dec_label_pc_6f4
  %rsi.17.pn.reload = load i64, i64* %rsi.17.pn.reg2mem
  %rax.3.in = sub i64 %rsi.17.pn.reload, %arg2
  %rax.3 = add i64 %rax.3.in, 1
  %535 = add i64 %7, 8, !insn.addr !390
  %536 = inttoptr i64 %535 to i64*, !insn.addr !390
  store i64 %rax.3, i64* %536, align 8, !insn.addr !390
  store i64 %rax.3, i64* %zf.1.in.reg2mem, !insn.addr !391
  br label %dec_label_pc_7cb, !insn.addr !391

dec_label_pc_7cb:                                 ; preds = %dec_label_pc_7c4, %dec_label_pc_676
  %zf.1.in.reload = load i64, i64* %zf.1.in.reg2mem
  %zf.1 = icmp eq i64 %zf.1.in.reload, 0
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !392
  br i1 %zf.1, label %dec_label_pc_a96, label %dec_label_pc_7d1, !insn.addr !392

dec_label_pc_7d1:                                 ; preds = %dec_label_pc_7cb
  %537 = add i64 %7, 40
  %538 = inttoptr i64 %537 to i32*
  %539 = load i32, i32* %538, align 4, !insn.addr !393
  %540 = zext i32 %539 to i64, !insn.addr !393
  store i32* %538, i32** %.pre76.pre-phi.reg2mem, !insn.addr !394
  store i64 %540, i64* %rax.2.reg2mem, !insn.addr !394
  br label %dec_label_pc_4ce, !insn.addr !394

dec_label_pc_7d9:                                 ; preds = %dec_label_pc_6dc
  %541 = add i64 %rdx.6.reload, 2, !insn.addr !395
  %542 = icmp ult i64 %541, %arg3, !insn.addr !396
  %543 = icmp eq i1 %542, false, !insn.addr !397
  br i1 %543, label %dec_label_pc_a85, label %dec_label_pc_7e6, !insn.addr !397

dec_label_pc_7e6:                                 ; preds = %dec_label_pc_7d9
  %544 = add i64 %rdx.6.reload, 3, !insn.addr !398
  %545 = icmp ult i64 %544, %arg3, !insn.addr !399
  %546 = icmp eq i1 %545, false, !insn.addr !400
  br i1 %546, label %dec_label_pc_a85, label %dec_label_pc_7fe, !insn.addr !400

dec_label_pc_7fe:                                 ; preds = %dec_label_pc_7e6
  %547 = inttoptr i64 %541 to i8*, !insn.addr !401
  %548 = load i8, i8* %547, align 1, !insn.addr !401
  %549 = zext i8 %548 to i64, !insn.addr !401
  %550 = mul i64 %549, 65536, !insn.addr !402
  %551 = or i64 %550, %470, !insn.addr !403
  %552 = inttoptr i64 %544 to i8*, !insn.addr !404
  %553 = load i8, i8* %552, align 1, !insn.addr !404
  %554 = zext i8 %553 to i64, !insn.addr !404
  %555 = shl i64 %554, ptrtoint (i32** @global_var_18 to i64), !insn.addr !405
  %556 = or i64 %551, %555, !insn.addr !406
  %557 = icmp eq i64 %.reload121, 4, !insn.addr !407
  %558 = icmp eq i1 %557, false, !insn.addr !408
  br i1 %558, label %dec_label_pc_817, label %dec_label_pc_80f, !insn.addr !408

dec_label_pc_80f:                                 ; preds = %dec_label_pc_7fe
  %559 = add i64 %7, 64, !insn.addr !409
  %560 = inttoptr i64 %559 to i64*, !insn.addr !409
  store i64 %556, i64* %560, align 8, !insn.addr !409
  %sext3 = mul i64 %556, 4294967296
  %561 = ashr exact i64 %sext3, 32, !insn.addr !410
  store i64 %561, i64* %rax.4.reg2mem, !insn.addr !411
  store i64 %544, i64* %rsi.16.reg2mem, !insn.addr !411
  br label %dec_label_pc_87b, !insn.addr !411

dec_label_pc_817:                                 ; preds = %dec_label_pc_7fe
  %562 = add i64 %rdx.6.reload, 4, !insn.addr !412
  %563 = icmp ult i64 %562, %arg3, !insn.addr !413
  %564 = icmp eq i1 %563, false, !insn.addr !414
  br i1 %564, label %dec_label_pc_a85, label %dec_label_pc_824, !insn.addr !414

dec_label_pc_824:                                 ; preds = %dec_label_pc_817
  %565 = add i64 %rdx.6.reload, 5, !insn.addr !415
  %566 = icmp ult i64 %565, %arg3, !insn.addr !416
  %567 = icmp eq i1 %566, false, !insn.addr !417
  br i1 %567, label %dec_label_pc_a85, label %dec_label_pc_83c, !insn.addr !417

dec_label_pc_83c:                                 ; preds = %dec_label_pc_824
  %568 = add i64 %rdx.6.reload, 6, !insn.addr !418
  %569 = icmp ult i64 %568, %arg3, !insn.addr !419
  %570 = icmp eq i1 %569, false, !insn.addr !420
  br i1 %570, label %dec_label_pc_a85, label %dec_label_pc_854, !insn.addr !420

dec_label_pc_854:                                 ; preds = %dec_label_pc_83c
  %571 = add i64 %rdx.6.reload, 7, !insn.addr !421
  %572 = icmp ult i64 %571, %arg3, !insn.addr !422
  %573 = icmp eq i1 %572, false, !insn.addr !423
  br i1 %573, label %dec_label_pc_a85, label %dec_label_pc_86c, !insn.addr !423

dec_label_pc_86c:                                 ; preds = %dec_label_pc_854
  %574 = inttoptr i64 %568 to i8*, !insn.addr !424
  %575 = load i8, i8* %574, align 1, !insn.addr !424
  %576 = zext i8 %575 to i64, !insn.addr !424
  %577 = mul i64 %576, 281474976710656, !insn.addr !425
  %578 = inttoptr i64 %565 to i8*, !insn.addr !426
  %579 = load i8, i8* %578, align 1, !insn.addr !426
  %580 = zext i8 %579 to i64, !insn.addr !426
  %581 = mul i64 %580, 1099511627776, !insn.addr !427
  %582 = inttoptr i64 %562 to i8*, !insn.addr !428
  %583 = load i8, i8* %582, align 1, !insn.addr !428
  %584 = zext i8 %583 to i64, !insn.addr !428
  %585 = mul i64 %584, 4294967296, !insn.addr !429
  %586 = inttoptr i64 %571 to i8*, !insn.addr !430
  %587 = load i8, i8* %586, align 1, !insn.addr !430
  %588 = zext i8 %587 to i64, !insn.addr !430
  %589 = mul i64 %588, 72057594037927936, !insn.addr !431
  %590 = or i64 %577, %556, !insn.addr !432
  %591 = or i64 %590, %581, !insn.addr !433
  %592 = or i64 %591, %585, !insn.addr !434
  %593 = or i64 %592, %589, !insn.addr !435
  %594 = add i64 %7, 64, !insn.addr !436
  %595 = inttoptr i64 %594 to i64*, !insn.addr !436
  store i64 %593, i64* %595, align 8, !insn.addr !436
  store i64 %593, i64* %rax.4.reg2mem, !insn.addr !436
  store i64 %571, i64* %rsi.16.reg2mem, !insn.addr !436
  br label %dec_label_pc_87b, !insn.addr !436

dec_label_pc_87b:                                 ; preds = %dec_label_pc_86c, %dec_label_pc_80f
  %rsi.16.reload = load i64, i64* %rsi.16.reg2mem
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %596 = add i64 %7, 56, !insn.addr !437
  %597 = inttoptr i64 %596 to i64*, !insn.addr !437
  store i64 %rax.4.reload, i64* %597, align 8, !insn.addr !437
  store i64 %rsi.16.reload, i64* %rsi.17.reg2mem, !insn.addr !437
  br label %dec_label_pc_87f, !insn.addr !437

dec_label_pc_87f:                                 ; preds = %dec_label_pc_88e, %dec_label_pc_87b
  %rsi.17.reload = load i64, i64* %rsi.17.reg2mem
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !438
  store i64 %rsi.17.reload, i64* %rsi.17.pn.reg2mem, !insn.addr !439
  br label %dec_label_pc_7c4, !insn.addr !439

dec_label_pc_88e:                                 ; preds = %dec_label_pc_763
  %598 = and i64 %514, 8
  %599 = icmp eq i64 %598, 0, !insn.addr !440
  store i64 %490, i64* %rsi.17.reg2mem, !insn.addr !441
  br i1 %599, label %dec_label_pc_87f, label %dec_label_pc_893, !insn.addr !441

dec_label_pc_893:                                 ; preds = %dec_label_pc_88e
  %600 = add i64 %storemerge4.reload, 4, !insn.addr !442
  store i64 %600, i64* %rdx.6.reg2mem, !insn.addr !443
  br label %dec_label_pc_660, !insn.addr !443

dec_label_pc_89c:                                 ; preds = %dec_label_pc_7b2
  %601 = add i64 %storemerge4.reload, 8, !insn.addr !444
  store i64 %601, i64* %rdx.6.reg2mem, !insn.addr !445
  br label %dec_label_pc_660, !insn.addr !445

dec_label_pc_8a5:                                 ; preds = %dec_label_pc_52f, %dec_label_pc_48f, %dec_label_pc_647, %dec_label_pc_61c, %dec_label_pc_32c
  %rdx.7.reload = load i64, i64* %rdx.7.reg2mem
  %602 = add i64 %rdx.7.reload, 1, !insn.addr !446
  %603 = icmp ult i64 %602, %arg3, !insn.addr !447
  %604 = icmp eq i1 %603, false, !insn.addr !448
  br i1 %604, label %dec_label_pc_a85, label %dec_label_pc_8b1, !insn.addr !448

dec_label_pc_8b1:                                 ; preds = %dec_label_pc_8a5
  %605 = load i8, i8* %10, align 1, !insn.addr !449
  %606 = or i8 %605, 64, !insn.addr !450
  store i8 %606, i8* %10, align 1, !insn.addr !451
  %607 = inttoptr i64 %602 to i8*, !insn.addr !452
  %608 = load i8, i8* %607, align 1, !insn.addr !452
  %609 = add i64 %7, 28, !insn.addr !453
  %610 = inttoptr i64 %609 to i8*, !insn.addr !453
  store i8 %608, i8* %610, align 1, !insn.addr !453
  %611 = udiv i8 %608, 64, !insn.addr !454
  %612 = add i64 %7, 29, !insn.addr !455
  %613 = inttoptr i64 %612 to i8*, !insn.addr !455
  store i8 %611, i8* %613, align 1, !insn.addr !455
  %614 = load i8, i8* %607, align 1, !insn.addr !456
  %615 = udiv i8 %614, 8
  %616 = urem i8 %615, 8
  %617 = add i64 %7, 30, !insn.addr !457
  %618 = inttoptr i64 %617 to i8*, !insn.addr !457
  store i8 %616, i8* %618, align 1, !insn.addr !457
  %619 = load i8, i8* %607, align 1, !insn.addr !458
  %620 = urem i8 %619, 8
  %621 = add i64 %7, 31, !insn.addr !459
  %622 = inttoptr i64 %621 to i8*, !insn.addr !459
  store i8 %620, i8* %622, align 1, !insn.addr !459
  %623 = icmp ugt i8 %608, -65, !insn.addr !460
  %624 = icmp eq i1 %623, false, !insn.addr !461
  br i1 %624, label %dec_label_pc_8f3, label %dec_label_pc_8e2, !insn.addr !461

dec_label_pc_8e2:                                 ; preds = %dec_label_pc_90a, %dec_label_pc_8b1
  %625 = inttoptr i64 %609 to i32*, !insn.addr !462
  %626 = load i32, i32* %625, align 4, !insn.addr !462
  %627 = add i32 %626, -83886080
  %628 = and i32 %627, -16711936, !insn.addr !463
  %629 = icmp eq i32 %628, 0, !insn.addr !463
  %630 = icmp eq i1 %629, false, !insn.addr !464
  br i1 %630, label %dec_label_pc_912, label %dec_label_pc_90e, !insn.addr !464

dec_label_pc_8f3:                                 ; preds = %dec_label_pc_8b1
  %631 = icmp eq i8 %620, 4, !insn.addr !465
  %632 = icmp eq i1 %631, false, !insn.addr !466
  br i1 %632, label %dec_label_pc_900, label %dec_label_pc_8f9, !insn.addr !466

dec_label_pc_8f9:                                 ; preds = %dec_label_pc_8f3
  %633 = or i8 %605, -64, !insn.addr !467
  store i8 %633, i8* %10, align 1, !insn.addr !468
  br label %dec_label_pc_900, !insn.addr !468

dec_label_pc_900:                                 ; preds = %dec_label_pc_8f9, %dec_label_pc_8f3
  %634 = and i8 %608, -64
  %635 = icmp eq i8 %634, 64
  %636 = icmp eq i1 %635, false, !insn.addr !469
  br i1 %636, label %dec_label_pc_90a, label %dec_label_pc_904, !insn.addr !469

dec_label_pc_904:                                 ; preds = %dec_label_pc_900
  %637 = add i64 %7, 17, !insn.addr !470
  %638 = inttoptr i64 %637 to i8*, !insn.addr !470
  %639 = load i8, i8* %638, align 1, !insn.addr !470
  %640 = or i8 %639, 3, !insn.addr !470
  store i8 %640, i8* %638, align 1, !insn.addr !470
  br label %dec_label_pc_912, !insn.addr !471

dec_label_pc_90a:                                 ; preds = %dec_label_pc_900
  %.off = xor i8 %608, -128
  %641 = icmp ult i8 %.off, 64
  %642 = icmp eq i1 %641, false, !insn.addr !472
  br i1 %642, label %dec_label_pc_8e2, label %dec_label_pc_90e, !insn.addr !472

dec_label_pc_90e:                                 ; preds = %dec_label_pc_8e2, %dec_label_pc_90a
  %643 = add i64 %7, 17, !insn.addr !473
  %644 = inttoptr i64 %643 to i8*, !insn.addr !473
  %645 = load i8, i8* %644, align 1, !insn.addr !473
  %646 = or i8 %645, 1, !insn.addr !473
  store i8 %646, i8* %644, align 1, !insn.addr !473
  br label %dec_label_pc_912, !insn.addr !473

dec_label_pc_912:                                 ; preds = %dec_label_pc_90e, %dec_label_pc_904, %dec_label_pc_8e2
  %647 = add i64 %7, 40, !insn.addr !474
  %648 = inttoptr i64 %647 to i32*, !insn.addr !474
  %649 = load i32, i32* %648, align 4, !insn.addr !474
  %650 = or i32 %649, 1
  %651 = icmp ne i32 %650, 247
  %652 = icmp eq i8 %616, 0, !insn.addr !475
  %or.cond18 = or i1 %652, %651
  br i1 %or.cond18, label %dec_label_pc_92e, label %dec_label_pc_924, !insn.addr !476

dec_label_pc_924:                                 ; preds = %dec_label_pc_912
  %653 = add i64 %7, 17, !insn.addr !477
  %654 = inttoptr i64 %653 to i8*, !insn.addr !477
  %655 = load i8, i8* %654, align 1, !insn.addr !477
  %656 = and i8 %655, -9, !insn.addr !477
  store i8 %656, i8* %654, align 1, !insn.addr !477
  %657 = add i64 %7, ptrtoint (i32** @global_var_48 to i64), !insn.addr !478
  %658 = inttoptr i64 %657 to i64*, !insn.addr !478
  store i64 0, i64* %658, align 8, !insn.addr !478
  br label %dec_label_pc_92e, !insn.addr !478

dec_label_pc_92e:                                 ; preds = %dec_label_pc_912, %dec_label_pc_924
  %659 = zext i32 %649 to i64, !insn.addr !474
  %660 = load i8, i8* %10, align 1, !insn.addr !479
  %661 = icmp slt i8 %660, 0, !insn.addr !479
  %662 = icmp eq i1 %661, false, !insn.addr !480
  br i1 %662, label %dec_label_pc_942, label %dec_label_pc_934, !insn.addr !480

dec_label_pc_934:                                 ; preds = %dec_label_pc_92e
  %663 = add i64 %rdx.7.reload, 2, !insn.addr !481
  %664 = icmp ult i64 %663, %arg3, !insn.addr !482
  br i1 %664, label %dec_label_pc_95b, label %dec_label_pc_a85, !insn.addr !483

dec_label_pc_942:                                 ; preds = %dec_label_pc_92e
  %665 = add i64 %7, 17, !insn.addr !484
  %666 = inttoptr i64 %665 to i8*, !insn.addr !484
  %667 = load i8, i8* %666, align 1, !insn.addr !484
  %668 = and i8 %667, 2, !insn.addr !485
  %669 = icmp eq i8 %668, 0, !insn.addr !485
  %670 = icmp eq i1 %669, false, !insn.addr !486
  br i1 %670, label %dec_label_pc_9c7, label %dec_label_pc_94a, !insn.addr !486

dec_label_pc_94a:                                 ; preds = %dec_label_pc_942
  %671 = zext i8 %667 to i64, !insn.addr !484
  %672 = urem i64 %671, 2
  %673 = icmp eq i64 %672, 0, !insn.addr !487
  %674 = icmp eq i1 %673, false, !insn.addr !488
  store i64 %602, i64* %rdx.4.reg2mem, !insn.addr !488
  br i1 %674, label %dec_label_pc_63f, label %dec_label_pc_953, !insn.addr !488

dec_label_pc_953:                                 ; preds = %dec_label_pc_94a
  %675 = and i64 %671, 8
  %676 = icmp eq i64 %675, 0, !insn.addr !489
  store i1 %676, i1* %zf.2.reg2mem, !insn.addr !490
  store i64 %602, i64* %rdx.8.reg2mem, !insn.addr !490
  br label %dec_label_pc_9df, !insn.addr !490

dec_label_pc_95b:                                 ; preds = %dec_label_pc_934
  %677 = inttoptr i64 %663 to i8*, !insn.addr !491
  %678 = load i8, i8* %677, align 1, !insn.addr !491
  %679 = add i64 %7, 33, !insn.addr !492
  %680 = inttoptr i64 %679 to i8*, !insn.addr !492
  store i8 %678, i8* %680, align 1, !insn.addr !492
  %681 = udiv i8 %678, 64, !insn.addr !493
  %682 = add i64 %7, 34, !insn.addr !494
  %683 = inttoptr i64 %682 to i8*, !insn.addr !494
  store i8 %681, i8* %683, align 1, !insn.addr !494
  %684 = load i8, i8* %677, align 1, !insn.addr !495
  %685 = udiv i8 %684, 8
  %686 = urem i8 %685, 8
  %687 = add i64 %7, 35, !insn.addr !496
  %688 = inttoptr i64 %687 to i8*, !insn.addr !496
  store i8 %686, i8* %688, align 1, !insn.addr !496
  %689 = load i8, i8* %677, align 1, !insn.addr !497
  %690 = urem i8 %689, 8
  %691 = add i64 %7, 36, !insn.addr !498
  %692 = inttoptr i64 %691 to i8*, !insn.addr !498
  store i8 %690, i8* %692, align 1, !insn.addr !498
  %693 = icmp eq i8 %690, 5, !insn.addr !499
  %694 = icmp eq i1 %693, false, !insn.addr !500
  br i1 %694, label %dec_label_pc_998, label %dec_label_pc_982, !insn.addr !500

dec_label_pc_982:                                 ; preds = %dec_label_pc_95b
  %695 = load i8, i8* %613, align 1, !insn.addr !501
  %696 = and i8 %695, -3, !insn.addr !502
  %697 = icmp eq i8 %696, 0, !insn.addr !502
  %698 = icmp eq i1 %697, false, !insn.addr !503
  br i1 %698, label %dec_label_pc_990, label %dec_label_pc_98a, !insn.addr !503

dec_label_pc_98a:                                 ; preds = %dec_label_pc_982
  %699 = add i64 %7, 17, !insn.addr !504
  %700 = inttoptr i64 %699 to i8*, !insn.addr !504
  %701 = load i8, i8* %700, align 1, !insn.addr !504
  %702 = or i8 %701, 1, !insn.addr !504
  store i8 %702, i8* %700, align 1, !insn.addr !504
  br label %dec_label_pc_998, !insn.addr !505

dec_label_pc_990:                                 ; preds = %dec_label_pc_982
  %703 = icmp eq i8 %695, 1, !insn.addr !506
  %704 = icmp eq i1 %703, false, !insn.addr !507
  br i1 %704, label %dec_label_pc_998, label %dec_label_pc_994, !insn.addr !507

dec_label_pc_994:                                 ; preds = %dec_label_pc_990
  %705 = add i64 %7, 17, !insn.addr !508
  %706 = inttoptr i64 %705 to i8*, !insn.addr !508
  %707 = load i8, i8* %706, align 1, !insn.addr !508
  %708 = or i8 %707, 3, !insn.addr !508
  store i8 %708, i8* %706, align 1, !insn.addr !508
  br label %dec_label_pc_998, !insn.addr !508

dec_label_pc_998:                                 ; preds = %dec_label_pc_994, %dec_label_pc_990, %dec_label_pc_98a, %dec_label_pc_95b
  %709 = add i64 %7, 17, !insn.addr !344
  %710 = inttoptr i64 %709 to i8*, !insn.addr !344
  %711 = load i8, i8* %710, align 1, !insn.addr !344
  %712 = and i8 %711, 2, !insn.addr !509
  %713 = icmp eq i8 %712, 0, !insn.addr !509
  br i1 %713, label %dec_label_pc_70f, label %dec_label_pc_9a4, !insn.addr !510

dec_label_pc_9a4:                                 ; preds = %dec_label_pc_998
  %714 = add i64 %rdx.7.reload, 3, !insn.addr !511
  store i64 %714, i64* %storemerge5.reg2mem, !insn.addr !512
  br label %dec_label_pc_9ca, !insn.addr !512

dec_label_pc_9aa:                                 ; preds = %dec_label_pc_70f
  %715 = and i64 %478, 8
  %716 = icmp eq i64 %715, 0, !insn.addr !513
  br i1 %716, label %dec_label_pc_9b8, label %dec_label_pc_9af, !insn.addr !514

dec_label_pc_9af:                                 ; preds = %dec_label_pc_9aa
  %717 = add i64 %rdx.7.reload, 3, !insn.addr !515
  store i64 %717, i64* %rdx.6.reg2mem, !insn.addr !516
  br label %dec_label_pc_660, !insn.addr !516

dec_label_pc_9b8:                                 ; preds = %dec_label_pc_9aa
  %718 = sub i64 %663, %arg2, !insn.addr !517
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !518
  store i64 %659, i64* %rax.1.reg2mem, !insn.addr !519
  store i64 %718, i64* %rdx.3.in.reg2mem, !insn.addr !519
  br label %dec_label_pc_4c1, !insn.addr !519

dec_label_pc_9c7:                                 ; preds = %dec_label_pc_942
  %719 = add i64 %rdx.7.reload, 2, !insn.addr !520
  store i64 %719, i64* %storemerge5.reg2mem, !insn.addr !520
  br label %dec_label_pc_9ca, !insn.addr !520

dec_label_pc_9ca:                                 ; preds = %dec_label_pc_9c7, %dec_label_pc_9a4
  %storemerge5.reload = load i64, i64* %storemerge5.reg2mem
  %720 = icmp ult i64 %storemerge5.reload, %arg3, !insn.addr !521
  %721 = icmp eq i1 %720, false, !insn.addr !522
  br i1 %721, label %dec_label_pc_a85, label %dec_label_pc_9d3, !insn.addr !522

dec_label_pc_9d3:                                 ; preds = %dec_label_pc_9ca
  %722 = inttoptr i64 %storemerge5.reload to i8*, !insn.addr !523
  %723 = load i8, i8* %722, align 1, !insn.addr !523
  %724 = sext i8 %723 to i64, !insn.addr !523
  %725 = add i64 %7, 17, !insn.addr !524
  %726 = inttoptr i64 %725 to i8*, !insn.addr !524
  %727 = load i8, i8* %726, align 1, !insn.addr !524
  %728 = and i8 %727, 8, !insn.addr !524
  %729 = icmp eq i8 %728, 0, !insn.addr !524
  %730 = add i64 %7, 48, !insn.addr !525
  %731 = inttoptr i64 %730 to i64*, !insn.addr !525
  store i64 %724, i64* %731, align 8, !insn.addr !525
  store i1 %729, i1* %zf.2.reg2mem, !insn.addr !525
  store i64 %storemerge5.reload, i64* %rdx.8.reg2mem, !insn.addr !525
  br label %dec_label_pc_9df, !insn.addr !525

dec_label_pc_9df:                                 ; preds = %dec_label_pc_9d3, %dec_label_pc_953
  %rdx.8.reload = load i64, i64* %rdx.8.reg2mem
  %zf.2.reload = load i1, i1* %zf.2.reg2mem
  %732 = icmp eq i1 %zf.2.reload, false, !insn.addr !526
  store i64 %rdx.8.reload, i64* %rdx.5.reg2mem, !insn.addr !526
  br i1 %732, label %dec_label_pc_65d, label %dec_label_pc_9e5, !insn.addr !526

dec_label_pc_9e5:                                 ; preds = %dec_label_pc_9df
  %733 = sub i64 %rdx.8.reload, %arg2, !insn.addr !527
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !528
  store i64 %659, i64* %rax.1.reg2mem, !insn.addr !529
  store i64 %733, i64* %rdx.3.in.reg2mem, !insn.addr !529
  br label %dec_label_pc_4c1, !insn.addr !529

dec_label_pc_9f3:                                 ; preds = %dec_label_pc_40e
  %734 = add i64 %rdx.2.reload, 1, !insn.addr !530
  %735 = icmp ult i64 %734, %arg3, !insn.addr !531
  %736 = icmp eq i1 %735, false, !insn.addr !532
  br i1 %736, label %dec_label_pc_a85, label %dec_label_pc_a00, !insn.addr !532

dec_label_pc_a00:                                 ; preds = %dec_label_pc_9f3
  call void @__asm_rep_stosd_memset(i8* %10, i32 0, i64 18), !insn.addr !533
  store i64 %arg2, i64* %arg1, align 8, !insn.addr !534
  %737 = add i64 %7, 8, !insn.addr !535
  %738 = inttoptr i64 %737 to i64*, !insn.addr !535
  store i64 4, i64* %738, align 8, !insn.addr !535
  %739 = inttoptr i64 %734 to i8*, !insn.addr !536
  %740 = load i8, i8* %739, align 1, !insn.addr !536
  %741 = icmp eq i8 %740, -6, !insn.addr !536
  %742 = zext i1 %741 to i64, !insn.addr !537
  %743 = select i1 %741, i64 42493, i64 42492, !insn.addr !538
  %744 = add nuw nsw i64 %743, %742, !insn.addr !538
  store i32* %233, i32** %.pre-phi77.reg2mem, !insn.addr !539
  store i64 %744, i64* %storemerge8.reg2mem, !insn.addr !539
  br label %dec_label_pc_4d1, !insn.addr !539

dec_label_pc_a30:                                 ; preds = %dec_label_pc_1e0
  %745 = add i64 %rdx.047.reload, 2, !insn.addr !540
  %746 = icmp ult i64 %745, %arg3, !insn.addr !541
  %747 = icmp eq i1 %746, false, !insn.addr !542
  br i1 %747, label %dec_label_pc_a85, label %dec_label_pc_a39, !insn.addr !542

dec_label_pc_a39:                                 ; preds = %dec_label_pc_a30
  %748 = inttoptr i64 %745 to i8*, !insn.addr !543
  %749 = load i8, i8* %748, align 1, !insn.addr !543
  %750 = add i64 %7, 26, !insn.addr !544
  %751 = inttoptr i64 %750 to i8*, !insn.addr !544
  store i8 %749, i8* %751, align 1, !insn.addr !544
  %752 = icmp slt i8 %749, 0, !insn.addr !545
  br i1 %752, label %dec_label_pc_a50, label %dec_label_pc_a4c, !insn.addr !546

dec_label_pc_a4c:                                 ; preds = %dec_label_pc_a39
  %753 = load i8, i8* %100, align 1, !insn.addr !547
  %754 = or i8 %753, 8, !insn.addr !547
  store i8 %754, i8* %100, align 1, !insn.addr !547
  br label %dec_label_pc_a50, !insn.addr !547

dec_label_pc_a50:                                 ; preds = %dec_label_pc_a4c, %dec_label_pc_a39
  %755 = urem i8 %97, 32, !insn.addr !548
  %756 = mul i64 %101, 256, !insn.addr !549
  %757 = trunc i64 %756 to i32, !insn.addr !550
  store i32 %757, i32* %78, align 4, !insn.addr !550
  %758 = icmp eq i8 %755, 2, !insn.addr !551
  %759 = icmp eq i1 %758, false, !insn.addr !552
  br i1 %759, label %dec_label_pc_a60, label %dec_label_pc_a5b, !insn.addr !552

dec_label_pc_a5b:                                 ; preds = %dec_label_pc_a50
  %760 = or i64 %756, 56, !insn.addr !553
  store i64 %760, i64* %storemerge12.reg2mem, !insn.addr !554
  br label %dec_label_pc_a68, !insn.addr !554

dec_label_pc_a60:                                 ; preds = %dec_label_pc_a50
  %761 = icmp eq i8 %755, 3, !insn.addr !555
  %762 = icmp eq i1 %761, false, !insn.addr !556
  br i1 %762, label %dec_label_pc_a74, label %dec_label_pc_a65, !insn.addr !556

dec_label_pc_a65:                                 ; preds = %dec_label_pc_a60
  %763 = or i64 %756, 58, !insn.addr !557
  store i64 %763, i64* %storemerge12.reg2mem, !insn.addr !557
  br label %dec_label_pc_a68, !insn.addr !557

dec_label_pc_a68:                                 ; preds = %dec_label_pc_a65, %dec_label_pc_a5b
  %storemerge12.reload = load i64, i64* %storemerge12.reg2mem
  %764 = trunc i64 %storemerge12.reload to i32, !insn.addr !558
  store i32 %764, i32* %78, align 4, !insn.addr !558
  %765 = add i64 %rdx.047.reload, 3, !insn.addr !559
  store i64 %765, i64* %storemerge11.reg2mem, !insn.addr !560
  br label %dec_label_pc_3da, !insn.addr !560

dec_label_pc_a74:                                 ; preds = %dec_label_pc_a60
  %766 = icmp eq i8 %755, 1, !insn.addr !561
  %767 = icmp eq i1 %766, false, !insn.addr !562
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !562
  br i1 %767, label %dec_label_pc_a96, label %dec_label_pc_a7c, !insn.addr !562

dec_label_pc_a7c:                                 ; preds = %dec_label_pc_a74
  %768 = add i64 %rdx.047.reload, 3, !insn.addr !563
  store i64 %768, i64* %rdx.2.reg2mem, !insn.addr !564
  br label %dec_label_pc_1a9, !insn.addr !564

dec_label_pc_a85:                                 ; preds = %dec_label_pc_655, %dec_label_pc_33, %dec_label_pc_934, %dec_label_pc_3da, %dec_label_pc_1a9, %dec_label_pc_171, %dec_label_pc_140, %dec_label_pc_a30, %dec_label_pc_9f3, %dec_label_pc_9ca, %dec_label_pc_8a5, %dec_label_pc_854, %dec_label_pc_83c, %dec_label_pc_824, %dec_label_pc_817, %dec_label_pc_7e6, %dec_label_pc_7d9, %dec_label_pc_7a5, %dec_label_pc_798, %dec_label_pc_78b, %dec_label_pc_77e, %dec_label_pc_74c, %dec_label_pc_735, %dec_label_pc_725, %dec_label_pc_71c, %dec_label_pc_6d3, %dec_label_pc_660
  call void @__asm_rep_stosd_memset(i8* %5, i32 0, i64 22), !insn.addr !565
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !566
  br label %dec_label_pc_a96, !insn.addr !566

dec_label_pc_a96:                                 ; preds = %dec_label_pc_af, %dec_label_pc_c7, %dec_label_pc_e6, %dec_label_pc_10a, %dec_label_pc_5ed, %dec_label_pc_0, %dec_label_pc_134, %dec_label_pc_1b7, %dec_label_pc_3cd, %264, %dec_label_pc_4c1, %dec_label_pc_510, %dec_label_pc_5cd, %dec_label_pc_5e4, %dec_label_pc_7cb, %dec_label_pc_a74, %dec_label_pc_a85, %dec_label_pc_204, %dec_label_pc_1e0, %dec_label_pc_4d1
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  ret i64 %storemerge1.reload, !insn.addr !567

; uselistorder directives
  uselistorder i64 %756, { 2, 1, 0 }
  uselistorder i1 %741, { 1, 0 }
  uselistorder i64 %storemerge5.reload, { 0, 2, 1 }
  uselistorder i8 %690, { 1, 0 }
  uselistorder i64 %671, { 1, 0 }
  uselistorder i8 %667, { 1, 0 }
  uselistorder i64 %663, { 1, 0, 2 }
  uselistorder i64 %659, { 1, 0 }
  uselistorder i32 %649, { 1, 0 }
  uselistorder i8 %620, { 1, 0 }
  uselistorder i8 %616, { 1, 0 }
  uselistorder i64 %rdx.7.reload, { 5, 4, 2, 1, 0, 3 }
  uselistorder i64 %556, { 1, 0, 2 }
  uselistorder i64 %storemerge4.reload, { 10, 5, 9, 8, 7, 6, 1, 3, 4, 2, 0 }
  uselistorder i64 %478, { 1, 0 }
  uselistorder i64 %470, { 1, 0, 2 }
  uselistorder i64 %463, { 0, 2, 1 }
  uselistorder i64 %439, { 1, 4, 3, 0, 2, 5 }
  uselistorder i64* %438, { 1, 0, 2 }
  uselistorder i64 %rdx.6.reload, { 8, 7, 6, 5, 4, 3, 2, 9, 1, 0 }
  uselistorder i64 %392, { 1, 0 }
  uselistorder i64 %391, { 1, 0 }
  uselistorder i32 %369, { 2, 3, 0, 1, 4, 5 }
  uselistorder i64 %366, { 1, 0 }
  uselistorder i64 %342, { 1, 0 }
  uselistorder i64 %338, { 1, 0, 2 }
  uselistorder i64 %spec.select15, { 10, 7, 1, 0, 8, 9, 6, 2, 4, 3, 5 }
  uselistorder i64 %333, { 0, 2, 1 }
  uselistorder i32 %328, { 1, 0 }
  uselistorder i64 %rdx.3, { 1, 0 }
  uselistorder i64 %spec.select13, { 4, 0, 2, 1, 3 }
  uselistorder i64 %270, { 0, 2, 1 }
  uselistorder i64 %storemerge11.reload, { 1, 3, 2, 7, 6, 0, 8, 5, 4 }
  uselistorder i8 %240, { 2, 1, 0, 3 }
  uselistorder i32 %239, { 1, 0 }
  uselistorder i32 %235, { 1, 0 }
  uselistorder i64 %160, { 1, 4, 3, 2, 0 }
  uselistorder i32 %158, { 1, 0 }
  uselistorder i64 %135, { 1, 2, 0 }
  uselistorder i64 %134, { 1, 0 }
  uselistorder i64 %133, { 7, 0, 6, 5, 1, 2, 3, 4 }
  uselistorder i8 %128, { 0, 2, 1, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i8 %115, { 1, 0, 2 }
  uselistorder i64 %rdx.2.reload, { 5, 1, 0, 4, 6, 3, 2 }
  uselistorder i8 %108, { 2, 0, 1 }
  uselistorder i8* %100, { 3, 2, 1, 0, 4, 5 }
  uselistorder i64 %rdx.1.reload, { 1, 2, 3, 4, 5, 0, 9, 6, 7, 8 }
  uselistorder i8 %40, { 1, 0 }
  uselistorder i8 %37, { 1, 0 }
  uselistorder i8 %20, { 2, 0, 1, 3, 7, 11, 4, 5, 6, 8, 9, 10, 12 }
  uselistorder i8* %19, { 0, 1, 4, 3, 5, 2, 6 }
  uselistorder i64 %rdx.047.reload, { 8, 9, 7, 5, 10, 3, 6, 11, 0, 2, 1, 4 }
  uselistorder i8* %10, { 0, 4, 3, 2, 1, 6, 5, 7, 8, 10, 9, 12, 11, 16, 15, 18, 17, 14, 13, 19, 20 }
  uselistorder i64 %7, { 1, 31, 46, 47, 39, 38, 37, 40, 41, 42, 43, 48, 35, 36, 49, 34, 33, 50, 51, 52, 53, 63, 64, 60, 61, 62, 44, 45, 58, 59, 55, 56, 57, 65, 26, 22, 27, 28, 25, 29, 23, 24, 30, 0, 54, 66, 67, 68, 32, 69, 70, 15, 16, 17, 18, 13, 14, 19, 20, 21, 12, 2, 3, 9, 4, 5, 71, 11, 10, 8, 6, 7 }
  uselistorder i64* %rdx.047.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.1.reg2mem, { 0, 4, 5, 1, 3, 2 }
  uselistorder i64* %rsi.3.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rdx.2.reg2mem, { 1, 0, 2, 3 }
  uselistorder i8* %.reg2mem, { 0, 2, 1 }
  uselistorder i8* %.reg2mem118, { 0, 2, 1 }
  uselistorder i64* %rcx.4.reg2mem, { 2, 0, 3, 1 }
  uselistorder i64* %rdi.0.reg2mem, { 2, 0, 3, 1 }
  uselistorder i64* %rsi.6.reg2mem, { 0, 4, 6, 3, 1, 5, 2 }
  uselistorder i64* %storemerge11.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.1.reg2mem, { 4, 3, 2, 0, 5, 1 }
  uselistorder i64* %rdx.3.in.reg2mem, { 4, 3, 2, 0, 5, 1 }
  uselistorder i32** %.pre76.pre-phi.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.2.reg2mem, { 1, 0, 2 }
  uselistorder i32** %.pre-phi77.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge8.reg2mem, { 2, 0, 1 }
  uselistorder i1* %zf.0.reg2mem, { 2, 0, 3, 1 }
  uselistorder i64* %rdx.4.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rdx.5.reg2mem, { 6, 0, 5, 7, 1, 2, 3, 4 }
  uselistorder i64* %rdx.6.reg2mem, { 1, 2, 3, 0, 4 }
  uselistorder i64* %.reg2mem120, { 0, 4, 3, 2, 1 }
  uselistorder i64* %rsi.17.pn.reg2mem, { 3, 0, 1, 2 }
  uselistorder i64* %zf.1.in.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.4.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rsi.16.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rsi.17.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.7.reg2mem, { 0, 3, 4, 2, 5, 1 }
  uselistorder i64* %storemerge5.reg2mem, { 0, 2, 1 }
  uselistorder i1* %zf.2.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rdx.8.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge12.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge1.reg2mem, { 0, 17, 16, 15, 5, 14, 13, 12, 20, 11, 10, 9, 18, 19, 8, 7, 4, 3, 2, 1, 6 }
  uselistorder i64 14848, { 1, 0 }
  uselistorder i8 -3, { 1, 0 }
  uselistorder i8 -4, { 1, 0 }
  uselistorder i8 -60, { 1, 0 }
  uselistorder i8 -15, { 1, 0 }
  uselistorder i64 %arg3, { 2, 6, 16, 7, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 1, 5, 26, 4, 3, 0 }
  uselistorder i64 %arg2, { 9, 14, 13, 11, 10, 19, 2, 12, 18, 16, 17, 5, 7, 8, 6, 15, 20, 3, 4, 0, 1 }
  uselistorder i64* %arg1, { 1, 9, 4, 6, 5, 7, 8, 3, 2, 0, 11, 10 }
  uselistorder label %dec_label_pc_a96, { 16, 15, 14, 4, 13, 12, 11, 19, 10, 9, 8, 17, 18, 7, 6, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_a85, { 7, 8, 9, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 3, 4, 5, 6, 1 }
  uselistorder label %dec_label_pc_92e, { 1, 0 }
  uselistorder label %dec_label_pc_90e, { 1, 0 }
  uselistorder label %dec_label_pc_8a5, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_655, { 4, 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_647, { 1, 2, 0 }
  uselistorder label %dec_label_pc_5b6, { 0, 2, 1 }
  uselistorder label %dec_label_pc_59f, { 1, 0, 2 }
  uselistorder label %dec_label_pc_4ce, { 1, 0 }
  uselistorder label %dec_label_pc_472, { 1, 0, 2 }
  uselistorder label %264, { 1, 0 }
  uselistorder label %dec_label_pc_324, { 1, 4, 5, 0, 2, 3 }
  uselistorder label %dec_label_pc_2f3, { 1, 2, 0 }
  uselistorder label %dec_label_pc_171, { 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_c7, { 1, 0 }
  uselistorder label %dec_label_pc_4b, { 1, 0 }
}

define i64 @.Llzma_block_buffer_encode.0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_aa0:
  %0 = alloca i64
  %rdx.0.reg2mem = alloca i64, !insn.addr !568
  %1 = load i64, i64* %0
  %2 = sub i64 %arg2, %arg1, !insn.addr !569
  %3 = icmp slt i64 %2, 4, !insn.addr !570
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !570
  br i1 %3, label %dec_label_pc_ae8, label %dec_label_pc_ac1, !insn.addr !570

dec_label_pc_ac1:                                 ; preds = %dec_label_pc_aa0
  %4 = trunc i64 %1 to i32
  %5 = trunc i64 %arg3 to i32, !insn.addr !571
  %6 = or i32 %5, 98697216, !insn.addr !571
  %7 = add i32 %6, %4, !insn.addr !572
  %8 = icmp eq i32 %7, 61987, !insn.addr !573
  %9 = zext i1 %8 to i64, !insn.addr !574
  store i64 %9, i64* %rdx.0.reg2mem, !insn.addr !574
  br label %dec_label_pc_ae8, !insn.addr !574

dec_label_pc_ae8:                                 ; preds = %dec_label_pc_ac1, %dec_label_pc_aa0
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  ret i64 %rdx.0.reload, !insn.addr !575
}

define i64 @function_af0(i64 %arg1, i64 %arg2, i64 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_af0:
  %0 = alloca i64
  %1 = alloca i32
  %rax.0.reg2mem = alloca i64, !insn.addr !576
  %2 = load i64, i64* %0
  %3 = load i64, i64* %0
  %4 = load i32, i32* %1
  %stack_var_-112 = alloca i64, align 8
  %5 = icmp eq i32 %arg4, 0, !insn.addr !577
  br i1 %5, label %dec_label_pc_b1e, label %dec_label_pc_b00, !insn.addr !578

dec_label_pc_b00:                                 ; preds = %dec_label_pc_af0
  %6 = call i64 @.Llzma_block_buffer_encode.0(i64 %arg1, i64 %arg2, i64 57904), !insn.addr !579
  %7 = trunc i64 %6 to i32, !insn.addr !580
  %8 = icmp eq i32 %7, 0, !insn.addr !580
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !581
  br i1 %8, label %dec_label_pc_b6e, label %dec_label_pc_b0e, !insn.addr !581

dec_label_pc_b0e:                                 ; preds = %dec_label_pc_b00
  %9 = icmp eq i64 %arg3, 0, !insn.addr !582
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !583
  br i1 %9, label %dec_label_pc_b6e, label %dec_label_pc_b13, !insn.addr !583

dec_label_pc_b13:                                 ; preds = %dec_label_pc_b0e
  %10 = inttoptr i64 %arg3 to i64*, !insn.addr !584
  store i64 %arg1, i64* %10, align 8, !insn.addr !584
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !584
  br label %dec_label_pc_b6e, !insn.addr !584

dec_label_pc_b1e:                                 ; preds = %dec_label_pc_af0
  %11 = bitcast i64* %stack_var_-112 to i8*, !insn.addr !585
  call void @__asm_rep_stosd_memset(i8* nonnull %11, i32 0, i64 22), !insn.addr !585
  %12 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-112, i64 %arg1, i64 %arg2, i64 0, i64 %arg1, i64 %2), !insn.addr !586
  %13 = trunc i64 %12 to i32, !insn.addr !587
  %14 = icmp eq i32 %13, 0, !insn.addr !587
  %15 = icmp eq i32 %4, 3999, !insn.addr !588
  %16 = icmp eq i1 %15, false, !insn.addr !589
  %or.cond = or i1 %16, %14
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !590
  br i1 %or.cond, label %dec_label_pc_b6e, label %dec_label_pc_b4c, !insn.addr !590

dec_label_pc_b4c:                                 ; preds = %dec_label_pc_b1e
  %17 = load i64, i64* %stack_var_-112, align 8, !insn.addr !591
  %18 = add i64 %17, %3, !insn.addr !591
  %19 = urem i64 %18, 16
  %20 = icmp eq i64 %19, 0, !insn.addr !592
  %21 = icmp eq i1 %20, false, !insn.addr !593
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !593
  br i1 %21, label %dec_label_pc_b6e, label %dec_label_pc_b5a, !insn.addr !593

dec_label_pc_b5a:                                 ; preds = %dec_label_pc_b4c
  %22 = icmp eq i64 %arg3, 0, !insn.addr !594
  %23 = icmp eq i1 %22, false, !insn.addr !595
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !595
  br i1 %23, label %dec_label_pc_b66, label %dec_label_pc_b6e, !insn.addr !595

dec_label_pc_b66:                                 ; preds = %dec_label_pc_b5a
  %24 = inttoptr i64 %arg3 to i64*, !insn.addr !596
  store i64 %18, i64* %24, align 8, !insn.addr !596
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !597
  br label %dec_label_pc_b6e, !insn.addr !597

dec_label_pc_b6e:                                 ; preds = %dec_label_pc_b1e, %dec_label_pc_b4c, %dec_label_pc_b66, %dec_label_pc_b5a, %dec_label_pc_b0e, %dec_label_pc_b13, %dec_label_pc_b00
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !598

; uselistorder directives
  uselistorder i64 %18, { 1, 0 }
  uselistorder i64* %stack_var_-112, { 2, 0, 1 }
  uselistorder i64* %rax.0.reg2mem, { 0, 2, 1, 3, 4, 6, 5, 7 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 %arg3, { 3, 2, 1, 0 }
  uselistorder i64 %arg2, { 1, 0 }
  uselistorder i64 %arg1, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_b6e, { 2, 3, 1, 0, 5, 4, 6 }
}

define i64 @.Llzma2_encoder_init.1(i64 %arg1, i32 %arg2, i64* %arg3, i64 %arg4, i64 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_b80:
  %storemerge.reg2mem = alloca i64, !insn.addr !599
  %rbp.0.reg2mem = alloca i64, !insn.addr !599
  %rbx.0.in.reg2mem = alloca i64, !insn.addr !599
  %storemerge14.reg2mem = alloca i64, !insn.addr !599
  %stack_var_-64 = alloca i64, align 8
  store i64 0, i64* %stack_var_-64, align 8, !insn.addr !600
  %0 = icmp eq i32 %arg2, 0, !insn.addr !601
  br i1 %0, label %dec_label_pc_c0e, label %dec_label_pc_bbf.preheader, !insn.addr !602

dec_label_pc_bbf.preheader:                       ; preds = %dec_label_pc_b80
  %1 = sext i32 %arg2 to i64
  %2 = ptrtoint i64* %stack_var_-64 to i64, !insn.addr !603
  %3 = icmp ugt i64 %arg1, %arg4, !insn.addr !604
  store i64 %arg1, i64* %storemerge14.reg2mem, !insn.addr !605
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !605
  br i1 %3, label %dec_label_pc_bd0, label %dec_label_pc_c61, !insn.addr !605

dec_label_pc_bc4:                                 ; preds = %dec_label_pc_bd0
  %.pre = load i64, i64* %stack_var_-64, align 8
  %4 = icmp eq i64 %.pre, 0, !insn.addr !606
  %5 = icmp eq i1 %4, false, !insn.addr !607
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !607
  br i1 %5, label %dec_label_pc_bed, label %dec_label_pc_c61, !insn.addr !607

dec_label_pc_bd0:                                 ; preds = %dec_label_pc_bbf.preheader, %dec_label_pc_bd0
  %storemerge14.reload = load i64, i64* %storemerge14.reg2mem
  %6 = call i64 @function_af0(i64 %storemerge14.reload, i64 %arg5, i64 %2, i32 %arg6), !insn.addr !608
  %7 = trunc i64 %6 to i32, !insn.addr !609
  %8 = icmp eq i32 %7, 0, !insn.addr !609
  %9 = add i64 %storemerge14.reload, -1, !insn.addr !610
  %10 = icmp ugt i64 %9, %arg4, !insn.addr !604
  %or.cond = icmp eq i1 %10, %8
  store i64 %9, i64* %storemerge14.reg2mem, !insn.addr !611
  br i1 %or.cond, label %dec_label_pc_bd0, label %dec_label_pc_bc4, !insn.addr !611

dec_label_pc_bed:                                 ; preds = %dec_label_pc_bc4
  %11 = icmp eq i64 %.pre, %arg4, !insn.addr !612
  %12 = icmp eq i1 %11, false, !insn.addr !613
  br i1 %12, label %dec_label_pc_c0b, label %dec_label_pc_bf2, !insn.addr !613

dec_label_pc_bf2:                                 ; preds = %dec_label_pc_bed
  %13 = call i64 @function_af0(i64 %arg4, i64 %arg5, i64 0, i32 %arg6), !insn.addr !614
  %14 = trunc i64 %13 to i32, !insn.addr !615
  %15 = icmp eq i32 %14, 0, !insn.addr !615
  %16 = icmp eq i1 %15, false, !insn.addr !616
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !616
  br i1 %16, label %dec_label_pc_c0b, label %dec_label_pc_c61, !insn.addr !616

dec_label_pc_c0b:                                 ; preds = %dec_label_pc_bf2, %dec_label_pc_bed
  %17 = inttoptr i64 %1 to i64*, !insn.addr !617
  store i64 %.pre, i64* %17, align 8, !insn.addr !617
  br label %dec_label_pc_c0e, !insn.addr !617

dec_label_pc_c0e:                                 ; preds = %dec_label_pc_c0b, %dec_label_pc_b80
  %18 = add i64 %arg5, -4, !insn.addr !618
  %19 = icmp eq i64* %arg3, null, !insn.addr !619
  %20 = icmp eq i1 %19, false, !insn.addr !620
  store i64 %arg1, i64* %rbx.0.in.reg2mem, !insn.addr !620
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !620
  br i1 %20, label %dec_label_pc_c39, label %dec_label_pc_c61, !insn.addr !620

dec_label_pc_c21:                                 ; preds = %dec_label_pc_c39
  %21 = call i64 @function_af0(i64 %rbx.0, i64 %arg5, i64 0, i32 %arg6), !insn.addr !621
  %22 = trunc i64 %21 to i32, !insn.addr !622
  %23 = icmp eq i32 %22, 0, !insn.addr !622
  %24 = icmp eq i1 %23, false, !insn.addr !623
  store i64 %rbx.0, i64* %rbx.0.in.reg2mem, !insn.addr !623
  br i1 %24, label %dec_label_pc_c58, label %dec_label_pc_c39, !insn.addr !623

dec_label_pc_c39:                                 ; preds = %dec_label_pc_c0e, %dec_label_pc_c21
  %rbx.0.in.reload = load i64, i64* %rbx.0.in.reg2mem
  %rbx.0 = add i64 %rbx.0.in.reload, 1
  %25 = icmp ult i64 %rbx.0, %18, !insn.addr !624
  br i1 %25, label %dec_label_pc_c21, label %dec_label_pc_c3e, !insn.addr !625

dec_label_pc_c3e:                                 ; preds = %dec_label_pc_c39
  %26 = icmp eq i64 %18, %rbx.0, !insn.addr !626
  %27 = icmp eq i1 %26, false, !insn.addr !627
  br i1 %27, label %dec_label_pc_c58, label %dec_label_pc_c43, !insn.addr !627

dec_label_pc_c43:                                 ; preds = %dec_label_pc_c3e
  %28 = call i64 @function_af0(i64 %rbx.0, i64 %arg5, i64 0, i32 %arg6), !insn.addr !628
  %29 = trunc i64 %28 to i32, !insn.addr !629
  %30 = icmp eq i32 %29, 0, !insn.addr !629
  store i64 %arg5, i64* %rbp.0.reg2mem, !insn.addr !630
  br i1 %30, label %dec_label_pc_c5b, label %dec_label_pc_c58, !insn.addr !630

dec_label_pc_c58:                                 ; preds = %dec_label_pc_c21, %dec_label_pc_c43, %dec_label_pc_c3e
  store i64 %rbx.0, i64* %rbp.0.reg2mem, !insn.addr !631
  br label %dec_label_pc_c5b, !insn.addr !631

dec_label_pc_c5b:                                 ; preds = %dec_label_pc_c58, %dec_label_pc_c43
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  store i64 %rbp.0.reload, i64* %arg3, align 8, !insn.addr !632
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !633
  br label %dec_label_pc_c61, !insn.addr !633

dec_label_pc_c61:                                 ; preds = %dec_label_pc_bbf.preheader, %dec_label_pc_c0e, %dec_label_pc_c5b, %dec_label_pc_bf2, %dec_label_pc_bc4
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !634

; uselistorder directives
  uselistorder i64 %rbx.0, { 0, 2, 3, 5, 4, 1 }
  uselistorder i64 %18, { 1, 0 }
  uselistorder i64 %.pre, { 1, 2, 0 }
  uselistorder i64* %storemerge14.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rbx.0.in.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbp.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 2, 4, 5, 1 }
  uselistorder i64 (i64, i64, i64, i32)* @function_af0, { 2, 3, 1, 0 }
  uselistorder i32 %arg6, { 2, 3, 0, 1 }
  uselistorder i64 %arg5, { 0, 3, 4, 5, 1, 2 }
  uselistorder i64 %arg4, { 3, 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_c61, { 2, 1, 3, 4, 0 }
  uselistorder label %dec_label_pc_c58, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c39, { 1, 0 }
  uselistorder label %dec_label_pc_bd0, { 1, 0 }
}

define i64 @.Llzma_optimum_normal.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_c70:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !635
  %rbp.0.be.reg2mem = alloca i64, !insn.addr !635
  %.reg2mem = alloca i64, !insn.addr !635
  %rbp.01.reg2mem = alloca i64, !insn.addr !635
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %3 = load i64, i64* %0
  %stack_var_-128 = alloca i64, align 8
  %4 = call i64 @.Llzma2_decoder_end.1(i32 0, i64 129, i64 4, i64 7, i64 %2, i64 %3), !insn.addr !636
  %5 = trunc i64 %4 to i32, !insn.addr !637
  %6 = icmp eq i32 %5, 0, !insn.addr !637
  %7 = icmp eq i1 %6, false, !insn.addr !638
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !638
  br i1 %7, label %dec_label_pc_ca8, label %dec_label_pc_d07, !insn.addr !638

dec_label_pc_ca8:                                 ; preds = %dec_label_pc_c70
  %8 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !639
  call void @__asm_rep_stosd_memset(i8* nonnull %8, i32 0, i64 22), !insn.addr !639
  %9 = icmp ult i64 %arg1, %arg2, !insn.addr !640
  %10 = icmp eq i1 %9, false, !insn.addr !641
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !641
  br i1 %10, label %dec_label_pc_d07, label %dec_label_pc_cc7.lr.ph, !insn.addr !641

dec_label_pc_cc7.lr.ph:                           ; preds = %dec_label_pc_ca8
  %11 = icmp eq i64 %arg4, 0, !insn.addr !642
  %12 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !643
  %13 = select i1 %11, i64 %12, i64 %arg4, !insn.addr !644
  %14 = add i64 %13, 8
  %15 = inttoptr i64 %14 to i64*
  %16 = inttoptr i64 %13 to i64*, !insn.addr !645
  %17 = add i64 %13, 40
  %18 = inttoptr i64 %17 to i32*
  %19 = icmp eq i64 %arg3, 0
  %20 = add i64 %13, 56
  %21 = inttoptr i64 %20 to i64*
  store i64 %arg1, i64* %rbp.01.reg2mem
  br label %dec_label_pc_cc7

dec_label_pc_cc7:                                 ; preds = %dec_label_pc_cc7.lr.ph, %dec_label_pc_cc2.backedge
  %rbp.01.reload = load i64, i64* %rbp.01.reg2mem
  %22 = call i64 @.Lx86_code.part.0(i64* %16, i64 %rbp.01.reload, i64 %arg2, i64 0, i64 %2, i64 %1), !insn.addr !645
  %23 = trunc i64 %22 to i32, !insn.addr !646
  %24 = icmp eq i32 %23, 0, !insn.addr !646
  br i1 %24, label %dec_label_pc_cfd, label %dec_label_pc_cd9, !insn.addr !647

dec_label_pc_cd9:                                 ; preds = %dec_label_pc_cc7
  %25 = load i32, i32* %18, align 4, !insn.addr !648
  %26 = icmp eq i32 %25, 360, !insn.addr !648
  %27 = icmp eq i1 %26, false, !insn.addr !649
  br i1 %27, label %dec_label_pc_cd9.dec_label_pc_cf7_crit_edge, label %dec_label_pc_ce2, !insn.addr !649

dec_label_pc_cd9.dec_label_pc_cf7_crit_edge:      ; preds = %dec_label_pc_cd9
  %.pre = load i64, i64* %15, align 8
  store i64 %.pre, i64* %.reg2mem
  br label %dec_label_pc_cf7

dec_label_pc_ce2:                                 ; preds = %dec_label_pc_cd9
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !650
  br i1 %19, label %dec_label_pc_d07, label %dec_label_pc_ce7, !insn.addr !650

dec_label_pc_ce7:                                 ; preds = %dec_label_pc_ce2
  %28 = load i64, i64* %15, align 8, !insn.addr !651
  %29 = load i64, i64* %21, align 8, !insn.addr !652
  %30 = add i64 %29, %28, !insn.addr !652
  %31 = load i64, i64* %16, align 8, !insn.addr !653
  %32 = add i64 %30, %31, !insn.addr !653
  %33 = icmp eq i64 %32, %arg3, !insn.addr !654
  store i64 %28, i64* %.reg2mem, !insn.addr !655
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !655
  br i1 %33, label %dec_label_pc_d07, label %dec_label_pc_cf7, !insn.addr !655

dec_label_pc_cf7:                                 ; preds = %dec_label_pc_cd9.dec_label_pc_cf7_crit_edge, %dec_label_pc_ce7
  %.reload = load i64, i64* %.reg2mem, !insn.addr !656
  %34 = add i64 %.reload, %rbp.01.reload, !insn.addr !656
  store i64 %34, i64* %rbp.0.be.reg2mem, !insn.addr !657
  br label %dec_label_pc_cc2.backedge, !insn.addr !657

dec_label_pc_cc2.backedge:                        ; preds = %dec_label_pc_cf7, %dec_label_pc_cfd
  %rbp.0.be.reload = load i64, i64* %rbp.0.be.reg2mem
  %35 = icmp ult i64 %rbp.0.be.reload, %arg2, !insn.addr !640
  %36 = icmp eq i1 %35, false, !insn.addr !641
  store i64 %rbp.0.be.reload, i64* %rbp.01.reg2mem, !insn.addr !641
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !641
  br i1 %36, label %dec_label_pc_d07, label %dec_label_pc_cc7, !insn.addr !641

dec_label_pc_cfd:                                 ; preds = %dec_label_pc_cc7
  %37 = add i64 %rbp.01.reload, 1, !insn.addr !658
  store i64 %37, i64* %rbp.0.be.reg2mem, !insn.addr !659
  br label %dec_label_pc_cc2.backedge, !insn.addr !659

dec_label_pc_d07:                                 ; preds = %dec_label_pc_cc2.backedge, %dec_label_pc_ce7, %dec_label_pc_ce2, %dec_label_pc_ca8, %dec_label_pc_c70
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !660

; uselistorder directives
  uselistorder i64 %rbp.0.be.reload, { 1, 0 }
  uselistorder i64 %rbp.01.reload, { 0, 2, 1 }
  uselistorder i64* %15, { 1, 0 }
  uselistorder i64 %13, { 1, 0, 3, 2 }
  uselistorder i64* %stack_var_-128, { 1, 0 }
  uselistorder i64* %rbp.01.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbp.0.be.reg2mem, { 2, 0, 1 }
  uselistorder i64* %0, { 2, 1, 0 }
  uselistorder i64 %arg4, { 1, 0 }
  uselistorder i64 %arg3, { 1, 0 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_cc2.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_cf7, { 1, 0 }
  uselistorder label %dec_label_pc_cc7, { 1, 0 }
}

define i64 @.Llzma_filters_update.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_d20:
  %0 = alloca i64
  %storemerge1.reg2mem = alloca i64, !insn.addr !661
  %rbx.0.be.reg2mem = alloca i64, !insn.addr !661
  %rbx.02.reg2mem = alloca i64, !insn.addr !661
  %1 = load i64, i64* %0
  %stack_var_-128 = alloca i64, align 8
  %2 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !662
  call void @__asm_rep_stosd_memset(i8* nonnull %2, i32 0, i64 22), !insn.addr !662
  %3 = icmp ult i64 %arg1, %arg2, !insn.addr !663
  %4 = icmp eq i1 %3, false, !insn.addr !664
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !664
  br i1 %4, label %dec_label_pc_dc8, label %dec_label_pc_d5e.lr.ph, !insn.addr !664

dec_label_pc_d5e.lr.ph:                           ; preds = %dec_label_pc_d20
  %5 = icmp eq i64 %arg5, 0, !insn.addr !665
  %6 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !666
  %7 = select i1 %5, i64 %6, i64 %arg5, !insn.addr !667
  %8 = inttoptr i64 %7 to i64*, !insn.addr !668
  %9 = add i64 %7, 28
  %10 = inttoptr i64 %9 to i32*
  %11 = add i64 %7, 27
  %12 = inttoptr i64 %11 to i8*
  %13 = trunc i64 %arg3 to i32
  %14 = trunc i64 %arg4 to i32
  %15 = icmp eq i32 %14, 0
  %16 = add i64 %7, 40
  %17 = inttoptr i64 %16 to i32*
  %18 = add i64 %7, 8
  %19 = inttoptr i64 %18 to i64*
  store i64 %arg1, i64* %rbx.02.reg2mem
  br label %dec_label_pc_d5e

dec_label_pc_d5e:                                 ; preds = %dec_label_pc_d5e.lr.ph, %dec_label_pc_d59.backedge
  %rbx.02.reload = load i64, i64* %rbx.02.reg2mem
  %20 = call i64 @.Lx86_code.part.0(i64* %8, i64 %rbx.02.reload, i64 %arg2, i64 0, i64 %arg5, i64 %1), !insn.addr !668
  %21 = trunc i64 %20 to i32, !insn.addr !669
  %22 = icmp eq i32 %21, 0, !insn.addr !669
  br i1 %22, label %dec_label_pc_dba, label %dec_label_pc_d70, !insn.addr !670

dec_label_pc_d70:                                 ; preds = %dec_label_pc_d5e
  %23 = load i32, i32* %10, align 4, !insn.addr !671
  %24 = and i32 %23, -16711936, !insn.addr !672
  %25 = icmp eq i32 %24, 83886080, !insn.addr !673
  %26 = icmp eq i1 %25, false, !insn.addr !674
  br i1 %26, label %dec_label_pc_db4, label %dec_label_pc_d7f, !insn.addr !674

dec_label_pc_d7f:                                 ; preds = %dec_label_pc_d70
  %27 = load i8, i8* %12, align 1, !insn.addr !675
  %28 = and i8 %27, ptrtoint (i32** @global_var_48 to i8), !insn.addr !676
  %29 = icmp eq i8 %28, ptrtoint (i32** @global_var_48 to i8), !insn.addr !677
  %30 = zext i1 %29 to i32, !insn.addr !678
  %31 = icmp eq i32 %30, %13, !insn.addr !678
  %brmerge = or i1 %15, %31
  br i1 %brmerge, label %dec_label_pc_d97, label %dec_label_pc_db4, !insn.addr !679

dec_label_pc_d97:                                 ; preds = %dec_label_pc_d7f
  %32 = load i32, i32* %17, align 4, !insn.addr !680
  %33 = icmp eq i32 %32, 269, !insn.addr !681
  store i64 1, i64* %storemerge1.reg2mem, !insn.addr !682
  br i1 %33, label %dec_label_pc_dc8, label %dec_label_pc_da1, !insn.addr !682

dec_label_pc_da1:                                 ; preds = %dec_label_pc_d97
  %34 = icmp eq i32 %32, 265
  %35 = icmp eq i32 %32, 267
  %storemerge = select i1 %15, i1 %34, i1 %35
  store i64 1, i64* %storemerge1.reg2mem, !insn.addr !683
  br i1 %storemerge, label %dec_label_pc_dc8, label %dec_label_pc_db4, !insn.addr !683

dec_label_pc_db4:                                 ; preds = %dec_label_pc_d7f, %dec_label_pc_da1, %dec_label_pc_d70
  %36 = load i64, i64* %19, align 8, !insn.addr !684
  %37 = add i64 %36, %rbx.02.reload, !insn.addr !684
  store i64 %37, i64* %rbx.0.be.reg2mem, !insn.addr !685
  br label %dec_label_pc_d59.backedge, !insn.addr !685

dec_label_pc_d59.backedge:                        ; preds = %dec_label_pc_db4, %dec_label_pc_dba
  %rbx.0.be.reload = load i64, i64* %rbx.0.be.reg2mem
  %38 = icmp ult i64 %rbx.0.be.reload, %arg2, !insn.addr !663
  %39 = icmp eq i1 %38, false, !insn.addr !664
  store i64 %rbx.0.be.reload, i64* %rbx.02.reg2mem, !insn.addr !664
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !664
  br i1 %39, label %dec_label_pc_dc8, label %dec_label_pc_d5e, !insn.addr !664

dec_label_pc_dba:                                 ; preds = %dec_label_pc_d5e
  %40 = add i64 %rbx.02.reload, 1, !insn.addr !686
  store i64 %40, i64* %rbx.0.be.reg2mem, !insn.addr !687
  br label %dec_label_pc_d59.backedge, !insn.addr !687

dec_label_pc_dc8:                                 ; preds = %dec_label_pc_d59.backedge, %dec_label_pc_da1, %dec_label_pc_d97, %dec_label_pc_d20
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  ret i64 %storemerge1.reload, !insn.addr !688

; uselistorder directives
  uselistorder i64 %rbx.0.be.reload, { 1, 0 }
  uselistorder i32 %32, { 1, 0, 2 }
  uselistorder i64 %rbx.02.reload, { 0, 2, 1 }
  uselistorder i1 %15, { 1, 0 }
  uselistorder i64 %7, { 2, 0, 1, 3, 4 }
  uselistorder i64* %stack_var_-128, { 1, 0 }
  uselistorder i64* %rbx.02.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.0.be.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge1.reg2mem, { 0, 3, 2, 1, 4 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d59.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_db4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d5e, { 1, 0 }
}

define i64 @.Llzma_filters_update.1(i64 %arg1, i64 %arg2, i64 %arg3, i32 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_de0:
  %0 = alloca i64
  %storemerge1.reg2mem = alloca i64, !insn.addr !689
  %rbx.0.be.reg2mem = alloca i64, !insn.addr !689
  %rbx.03.reg2mem = alloca i64, !insn.addr !689
  %1 = load i64, i64* %0
  %stack_var_-128 = alloca i64, align 8
  %2 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !690
  call void @__asm_rep_stosd_memset(i8* nonnull %2, i32 0, i64 22), !insn.addr !690
  %3 = icmp ult i64 %arg1, %arg2, !insn.addr !691
  %4 = icmp eq i1 %3, false, !insn.addr !692
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !692
  br i1 %4, label %dec_label_pc_e81, label %dec_label_pc_e1e.lr.ph, !insn.addr !692

dec_label_pc_e1e.lr.ph:                           ; preds = %dec_label_pc_de0
  %5 = icmp eq i64 %arg5, 0, !insn.addr !693
  %6 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !694
  %7 = select i1 %5, i64 %6, i64 %arg5, !insn.addr !695
  %8 = inttoptr i64 %7 to i64*, !insn.addr !696
  %9 = add i64 %7, 28
  %10 = inttoptr i64 %9 to i32*
  %11 = add i64 %7, 27
  %12 = inttoptr i64 %11 to i8*
  %13 = trunc i64 %arg3 to i32
  %14 = icmp eq i32 %arg4, 0
  %15 = icmp eq i1 %14, false
  %16 = add i64 %7, 40
  %17 = inttoptr i64 %16 to i32*
  %18 = add i64 %7, 8
  %19 = inttoptr i64 %18 to i64*
  store i64 %arg1, i64* %rbx.03.reg2mem
  br label %dec_label_pc_e1e

dec_label_pc_e1e:                                 ; preds = %dec_label_pc_e1e.lr.ph, %dec_label_pc_e19.backedge
  %rbx.03.reload = load i64, i64* %rbx.03.reg2mem
  %20 = call i64 @.Lx86_code.part.0(i64* %8, i64 %rbx.03.reload, i64 %arg2, i64 0, i64 %arg5, i64 %1), !insn.addr !696
  %21 = trunc i64 %20 to i32, !insn.addr !697
  %22 = icmp eq i32 %21, 0, !insn.addr !697
  br i1 %22, label %dec_label_pc_e73, label %dec_label_pc_e30, !insn.addr !698

dec_label_pc_e30:                                 ; preds = %dec_label_pc_e1e
  %23 = load i32, i32* %10, align 4, !insn.addr !699
  %24 = and i32 %23, -16711936, !insn.addr !700
  %25 = icmp eq i32 %24, 83886080, !insn.addr !701
  %26 = icmp eq i1 %25, false, !insn.addr !702
  br i1 %26, label %dec_label_pc_e6d, label %dec_label_pc_e3f, !insn.addr !702

dec_label_pc_e3f:                                 ; preds = %dec_label_pc_e30
  %27 = load i8, i8* %12, align 1, !insn.addr !703
  %28 = and i8 %27, ptrtoint (i32** @global_var_48 to i8), !insn.addr !704
  %29 = icmp eq i8 %28, ptrtoint (i32** @global_var_48 to i8), !insn.addr !705
  %30 = zext i1 %29 to i32, !insn.addr !706
  %31 = icmp ne i32 %30, %13, !insn.addr !706
  %or.cond = icmp eq i1 %15, %31
  br i1 %or.cond, label %dec_label_pc_e6d, label %dec_label_pc_e57, !insn.addr !707

dec_label_pc_e57:                                 ; preds = %dec_label_pc_e3f
  %32 = load i32, i32* %17, align 4, !insn.addr !708
  %33 = icmp eq i32 %32, 265
  %34 = icmp eq i32 %32, 267
  %storemerge = select i1 %14, i1 %33, i1 %34
  store i64 1, i64* %storemerge1.reg2mem, !insn.addr !709
  br i1 %storemerge, label %dec_label_pc_e81, label %dec_label_pc_e6d, !insn.addr !709

dec_label_pc_e6d:                                 ; preds = %dec_label_pc_e3f, %dec_label_pc_e57, %dec_label_pc_e30
  %35 = load i64, i64* %19, align 8, !insn.addr !710
  %36 = add i64 %35, %rbx.03.reload, !insn.addr !710
  store i64 %36, i64* %rbx.0.be.reg2mem, !insn.addr !711
  br label %dec_label_pc_e19.backedge, !insn.addr !711

dec_label_pc_e19.backedge:                        ; preds = %dec_label_pc_e6d, %dec_label_pc_e73
  %rbx.0.be.reload = load i64, i64* %rbx.0.be.reg2mem
  %37 = icmp ult i64 %rbx.0.be.reload, %arg2, !insn.addr !691
  %38 = icmp eq i1 %37, false, !insn.addr !692
  store i64 %rbx.0.be.reload, i64* %rbx.03.reg2mem, !insn.addr !692
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !692
  br i1 %38, label %dec_label_pc_e81, label %dec_label_pc_e1e, !insn.addr !692

dec_label_pc_e73:                                 ; preds = %dec_label_pc_e1e
  %39 = add i64 %rbx.03.reload, 1, !insn.addr !712
  store i64 %39, i64* %rbx.0.be.reg2mem, !insn.addr !713
  br label %dec_label_pc_e19.backedge, !insn.addr !713

dec_label_pc_e81:                                 ; preds = %dec_label_pc_e19.backedge, %dec_label_pc_e57, %dec_label_pc_de0
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  ret i64 %storemerge1.reload, !insn.addr !714

; uselistorder directives
  uselistorder i64 %rbx.0.be.reload, { 1, 0 }
  uselistorder i32 %32, { 1, 0 }
  uselistorder i64 %rbx.03.reload, { 0, 2, 1 }
  uselistorder i64 %7, { 2, 0, 1, 3, 4 }
  uselistorder i64* %stack_var_-128, { 1, 0 }
  uselistorder i64* %rbx.03.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.0.be.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge1.reg2mem, { 0, 2, 1, 3 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e19.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e6d, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e1e, { 1, 0 }
}

define i64 @.Llzma_raw_encoder.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_e90:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i8
  %storemerge.reg2mem = alloca i64, !insn.addr !715
  %rbx.04.reg2mem = alloca i64, !insn.addr !715
  %3 = load i64, i64* %0
  %4 = load i64, i64* %0
  %5 = load i64, i64* %0
  %6 = load i32, i32* %1
  %7 = load i8, i8* %2
  %8 = load i32, i32* %1
  %stack_var_-128 = alloca i64, align 8
  %9 = call i64 @.Llzma_index_iter_rewind.cold(i64 124, i64 5, i64 6, i32 0, i64 %5), !insn.addr !716
  %10 = trunc i64 %9 to i32, !insn.addr !717
  %11 = icmp eq i32 %10, 0, !insn.addr !717
  %12 = icmp eq i1 %11, false, !insn.addr !718
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !718
  br i1 %12, label %dec_label_pc_ec7, label %dec_label_pc_f25, !insn.addr !718

dec_label_pc_ec7:                                 ; preds = %dec_label_pc_e90
  %13 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !719
  call void @__asm_rep_stosd_memset(i8* nonnull %13, i32 0, i64 22), !insn.addr !719
  %14 = icmp ult i64 %arg1, %arg2, !insn.addr !720
  %15 = icmp eq i1 %14, false, !insn.addr !721
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !721
  br i1 %15, label %dec_label_pc_f25, label %dec_label_pc_ee5.lr.ph, !insn.addr !721

dec_label_pc_ee5.lr.ph:                           ; preds = %dec_label_pc_ec7
  %16 = sub i64 0, %arg3, !insn.addr !722
  %17 = icmp eq i32 %8, 269
  %18 = urem i8 %7, 8
  %19 = icmp eq i8 %18, 1
  %20 = sext i32 %6 to i64
  %21 = icmp ne i64 %20, %arg3
  %22 = icmp ne i64 %20, %16
  %23 = icmp eq i1 %17, %19
  %24 = icmp ne i1 %23, true
  %or.cond3.not = icmp eq i1 %22, %21
  store i64 %arg1, i64* %rbx.04.reg2mem
  br label %dec_label_pc_ee5

dec_label_pc_ee5:                                 ; preds = %dec_label_pc_ee5.lr.ph, %dec_label_pc_f1b
  %rbx.04.reload = load i64, i64* %rbx.04.reg2mem
  %25 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-128, i64 %rbx.04.reload, i64 %arg2, i64 0, i64 %4, i64 %3), !insn.addr !723
  %26 = trunc i64 %25 to i32, !insn.addr !724
  %27 = icmp eq i32 %26, 0, !insn.addr !724
  %28 = or i1 %24, %27
  %brmerge6 = or i1 %or.cond3.not, %28
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !725
  br i1 %brmerge6, label %dec_label_pc_f1b, label %dec_label_pc_f25, !insn.addr !725

dec_label_pc_f1b:                                 ; preds = %dec_label_pc_ee5
  %29 = add i64 %rbx.04.reload, 1, !insn.addr !726
  %30 = icmp ult i64 %29, %arg2, !insn.addr !720
  %31 = icmp eq i1 %30, false, !insn.addr !721
  store i64 %29, i64* %rbx.04.reg2mem, !insn.addr !721
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !721
  br i1 %31, label %dec_label_pc_f25, label %dec_label_pc_ee5, !insn.addr !721

dec_label_pc_f25:                                 ; preds = %dec_label_pc_ee5, %dec_label_pc_f1b, %dec_label_pc_ec7, %dec_label_pc_e90
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !727

; uselistorder directives
  uselistorder i64* %rbx.04.reg2mem, { 1, 0, 2 }
  uselistorder i32* %1, { 1, 0 }
  uselistorder i64* %0, { 2, 1, 0 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f25, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ee5, { 1, 0 }
}

define i64 @.Llzma_mt_block_size.1(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_f40:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !728
  %rbp.01.reg2mem = alloca i64, !insn.addr !728
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %3 = load i64, i64* %0
  %stack_var_-128 = alloca i64, align 8
  %4 = call i64 @.Llzma_index_iter_rewind.cold(i64 456, i64 0, i64 30, i32 0, i64 %3), !insn.addr !729
  %5 = trunc i64 %4 to i32, !insn.addr !730
  %6 = icmp eq i32 %5, 0, !insn.addr !730
  %7 = icmp eq i1 %6, false, !insn.addr !731
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !731
  br i1 %7, label %dec_label_pc_f75, label %dec_label_pc_fe7, !insn.addr !731

dec_label_pc_f75:                                 ; preds = %dec_label_pc_f40
  %8 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !732
  call void @__asm_rep_stosd_memset(i8* nonnull %8, i32 0, i64 22), !insn.addr !732
  %9 = icmp ult i64 %arg1, %arg2, !insn.addr !733
  %10 = icmp eq i1 %9, false, !insn.addr !734
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !734
  br i1 %10, label %dec_label_pc_fe7, label %dec_label_pc_f94.lr.ph, !insn.addr !734

dec_label_pc_f94.lr.ph:                           ; preds = %dec_label_pc_f75
  %11 = icmp eq i64* %arg3, null, !insn.addr !735
  %.v = select i1 %11, i64* %stack_var_-128, i64* %arg3
  %12 = ptrtoint i64* %.v to i64, !insn.addr !736
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %13 to i64*
  %15 = add i64 %12, 40
  %16 = inttoptr i64 %15 to i32*
  %17 = add i64 %12, 27
  %18 = inttoptr i64 %17 to i8*
  %19 = add i64 %12, 28
  %20 = inttoptr i64 %19 to i32*
  %21 = icmp eq i64 %arg4, 0
  %22 = add i64 %12, 48
  %23 = inttoptr i64 %22 to i64*
  store i64 %arg1, i64* %rbp.01.reg2mem
  br label %dec_label_pc_f94

dec_label_pc_f94:                                 ; preds = %dec_label_pc_f94.lr.ph, %dec_label_pc_fdd
  %rbp.01.reload = load i64, i64* %rbp.01.reg2mem
  %24 = call i64 @.Lx86_code.part.0(i64* %.v, i64 %rbp.01.reload, i64 %arg2, i64 0, i64 %2, i64 %1), !insn.addr !737
  %25 = trunc i64 %24 to i32, !insn.addr !738
  %26 = icmp eq i32 %25, 0, !insn.addr !738
  br i1 %26, label %dec_label_pc_fdd, label %dec_label_pc_fa6, !insn.addr !739

dec_label_pc_fa6:                                 ; preds = %dec_label_pc_f94
  %27 = load i32, i32* %16, align 4, !insn.addr !740
  %28 = icmp eq i32 %27, 269, !insn.addr !740
  %29 = icmp eq i1 %28, false, !insn.addr !741
  br i1 %29, label %dec_label_pc_fdd, label %dec_label_pc_faf, !insn.addr !741

dec_label_pc_faf:                                 ; preds = %dec_label_pc_fa6
  %30 = load i8, i8* %18, align 1, !insn.addr !742
  %31 = and i8 %30, ptrtoint (i32** @global_var_48 to i8), !insn.addr !743
  %32 = icmp eq i8 %31, ptrtoint (i32** @global_var_48 to i8), !insn.addr !744
  %33 = icmp eq i1 %32, false, !insn.addr !745
  br i1 %33, label %dec_label_pc_fdd, label %dec_label_pc_fb9, !insn.addr !745

dec_label_pc_fb9:                                 ; preds = %dec_label_pc_faf
  %34 = load i32, i32* %20, align 4, !insn.addr !746
  %35 = and i32 %34, -16711936, !insn.addr !747
  %36 = icmp eq i32 %35, 83886080, !insn.addr !748
  %37 = icmp eq i1 %36, false, !insn.addr !749
  br i1 %37, label %dec_label_pc_fdd, label %dec_label_pc_fc8, !insn.addr !749

dec_label_pc_fc8:                                 ; preds = %dec_label_pc_fb9
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !750
  br i1 %21, label %dec_label_pc_fe7, label %dec_label_pc_fcd, !insn.addr !750

dec_label_pc_fcd:                                 ; preds = %dec_label_pc_fc8
  %38 = load i64, i64* %14, align 8, !insn.addr !751
  %39 = load i64, i64* %.v, align 8, !insn.addr !752
  %40 = add i64 %39, %38, !insn.addr !752
  %41 = load i64, i64* %23, align 8, !insn.addr !753
  %42 = add i64 %40, %41, !insn.addr !753
  %43 = icmp eq i64 %42, %arg4, !insn.addr !754
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !755
  br i1 %43, label %dec_label_pc_fe7, label %dec_label_pc_fdd, !insn.addr !755

dec_label_pc_fdd:                                 ; preds = %dec_label_pc_fcd, %dec_label_pc_fb9, %dec_label_pc_faf, %dec_label_pc_fa6, %dec_label_pc_f94
  %44 = add i64 %rbp.01.reload, 1, !insn.addr !756
  %45 = icmp ult i64 %44, %arg2, !insn.addr !733
  %46 = icmp eq i1 %45, false, !insn.addr !734
  store i64 %44, i64* %rbp.01.reg2mem, !insn.addr !734
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !734
  br i1 %46, label %dec_label_pc_fe7, label %dec_label_pc_f94, !insn.addr !734

dec_label_pc_fe7:                                 ; preds = %dec_label_pc_fdd, %dec_label_pc_fcd, %dec_label_pc_fc8, %dec_label_pc_f75, %dec_label_pc_f40
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !757

; uselistorder directives
  uselistorder i64 %12, { 3, 2, 0, 1, 4 }
  uselistorder i64* %rbp.01.reg2mem, { 1, 0, 2 }
  uselistorder i64* %0, { 2, 1, 0 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f94, { 1, 0 }
}

define i64 @.Lstream_encode.1(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1000:
  %stack_var_-96 = alloca i64, align 8
  %0 = bitcast i64* %stack_var_-96 to i8*, !insn.addr !758
  call void @__asm_rep_stosd_memset(i8* nonnull %0, i32 0, i64 22), !insn.addr !758
  %1 = call i64 @.Llzma_mt_block_size.1(i64 %arg1, i64 %arg2, i64* nonnull %stack_var_-96, i64 %arg3), !insn.addr !759
  %2 = trunc i64 %1 to i32, !insn.addr !760
  %3 = icmp eq i32 %2, 0, !insn.addr !760
  %4 = load i64, i64* %stack_var_-96, align 8
  %spec.select = select i1 %3, i64 0, i64 %4
  ret i64 %spec.select, !insn.addr !761

; uselistorder directives
  uselistorder i64* %stack_var_-96, { 2, 0, 1 }
}

define i64 @.Llzma_properties_size.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1040:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !762
  %rbp.01.reg2mem = alloca i64, !insn.addr !762
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %stack_var_-128 = alloca i64, align 8
  %3 = call i64 @.Llzma_index_iter_rewind.cold(i64 214, i64 4, i64 14, i32 0, i64 %2), !insn.addr !763
  %4 = trunc i64 %3 to i32, !insn.addr !764
  %5 = icmp eq i32 %4, 0, !insn.addr !764
  %6 = icmp eq i1 %5, false, !insn.addr !765
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !765
  br i1 %6, label %dec_label_pc_107d, label %dec_label_pc_10e8, !insn.addr !765

dec_label_pc_107d:                                ; preds = %dec_label_pc_1040
  %7 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !766
  call void @__asm_rep_stosd_memset(i8* nonnull %7, i32 0, i64 22), !insn.addr !766
  %8 = icmp ult i64 %arg1, %arg2, !insn.addr !767
  %9 = icmp eq i1 %8, false, !insn.addr !768
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !768
  br i1 %9, label %dec_label_pc_10e8, label %dec_label_pc_109c.lr.ph, !insn.addr !768

dec_label_pc_109c.lr.ph:                          ; preds = %dec_label_pc_107d
  %10 = icmp eq i64 %arg3, 0, !insn.addr !769
  %11 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !770
  %12 = select i1 %10, i64 %11, i64 %arg3, !insn.addr !771
  %13 = add i64 %12, 48
  %14 = inttoptr i64 %13 to i64*
  %15 = inttoptr i64 %12 to i64*, !insn.addr !772
  %16 = add i64 %12, 40
  %17 = inttoptr i64 %16 to i32*
  %18 = trunc i64 %arg4 to i32
  %19 = add i64 %12, 28
  %20 = inttoptr i64 %19 to i32*
  %21 = icmp eq i64 %arg5, 0
  %22 = add i64 %12, 17
  %23 = inttoptr i64 %22 to i8*
  %24 = add i64 %12, 8
  %25 = inttoptr i64 %24 to i64*
  store i64 %arg1, i64* %rbp.01.reg2mem
  br label %dec_label_pc_109c

dec_label_pc_109c:                                ; preds = %dec_label_pc_109c.lr.ph, %dec_label_pc_10de
  %rbp.01.reload = load i64, i64* %rbp.01.reg2mem
  %26 = call i64 @.Lx86_code.part.0(i64* %15, i64 %rbp.01.reload, i64 %arg2, i64 0, i64 %arg5, i64 %1), !insn.addr !772
  %27 = trunc i64 %26 to i32, !insn.addr !773
  %28 = icmp eq i32 %27, 0, !insn.addr !773
  br i1 %28, label %dec_label_pc_10de, label %dec_label_pc_10ae, !insn.addr !774

dec_label_pc_10ae:                                ; preds = %dec_label_pc_109c
  %29 = load i32, i32* %17, align 4, !insn.addr !775
  %30 = icmp eq i32 %29, %18, !insn.addr !775
  %31 = icmp eq i1 %30, false, !insn.addr !776
  br i1 %31, label %dec_label_pc_10de, label %dec_label_pc_10b4, !insn.addr !776

dec_label_pc_10b4:                                ; preds = %dec_label_pc_10ae
  %32 = load i32, i32* %20, align 4, !insn.addr !777
  %33 = and i32 %32, -16711936, !insn.addr !778
  %34 = icmp eq i32 %33, 83886080, !insn.addr !779
  %35 = icmp eq i1 %34, false, !insn.addr !780
  br i1 %35, label %dec_label_pc_10de, label %dec_label_pc_10c3, !insn.addr !780

dec_label_pc_10c3:                                ; preds = %dec_label_pc_10b4
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !781
  br i1 %21, label %dec_label_pc_10e8, label %dec_label_pc_10c8, !insn.addr !781

dec_label_pc_10c8:                                ; preds = %dec_label_pc_10c3
  %36 = load i8, i8* %23, align 1, !insn.addr !782
  %37 = urem i8 %36, 2, !insn.addr !782
  %38 = icmp eq i8 %37, 0, !insn.addr !782
  br i1 %38, label %dec_label_pc_10de, label %dec_label_pc_10ce, !insn.addr !783

dec_label_pc_10ce:                                ; preds = %dec_label_pc_10c8
  %39 = load i64, i64* %14, align 8, !insn.addr !784
  %40 = load i64, i64* %15, align 8, !insn.addr !785
  %41 = add i64 %40, %39, !insn.addr !785
  %42 = load i64, i64* %25, align 8, !insn.addr !786
  %43 = add i64 %41, %42, !insn.addr !786
  %44 = icmp eq i64 %43, %arg5, !insn.addr !787
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !788
  br i1 %44, label %dec_label_pc_10e8, label %dec_label_pc_10de, !insn.addr !788

dec_label_pc_10de:                                ; preds = %dec_label_pc_10ce, %dec_label_pc_10c8, %dec_label_pc_10b4, %dec_label_pc_10ae, %dec_label_pc_109c
  %45 = add i64 %rbp.01.reload, 1, !insn.addr !789
  %46 = icmp ult i64 %45, %arg2, !insn.addr !767
  %47 = icmp eq i1 %46, false, !insn.addr !768
  store i64 %45, i64* %rbp.01.reg2mem, !insn.addr !768
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !768
  br i1 %47, label %dec_label_pc_10e8, label %dec_label_pc_109c, !insn.addr !768

dec_label_pc_10e8:                                ; preds = %dec_label_pc_10de, %dec_label_pc_10ce, %dec_label_pc_10c3, %dec_label_pc_107d, %dec_label_pc_1040
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !790

; uselistorder directives
  uselistorder i64 %12, { 4, 2, 1, 0, 5, 3 }
  uselistorder i64* %stack_var_-128, { 1, 0 }
  uselistorder i64* %rbp.01.reg2mem, { 1, 0, 2 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 %arg5, { 0, 2, 1 }
  uselistorder i64 %arg3, { 1, 0 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_109c, { 1, 0 }
}

define i64 @.Lstream_encoder_mt_init.1(i64 %arg1, i64 %arg2, i32 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1100:
  %0 = sext i32 %arg3 to i64
  %1 = inttoptr i64 %0 to i64*, !insn.addr !791
  %2 = call i64 @.Llzma_mt_block_size.1(i64 %arg1, i64 %arg2, i64* %1, i64 %arg4), !insn.addr !791
  %3 = trunc i64 %2 to i32, !insn.addr !792
  %4 = icmp eq i32 %3, 0, !insn.addr !792
  %5 = icmp eq i1 %4, false, !insn.addr !793
  br i1 %5, label %dec_label_pc_1145, label %dec_label_pc_1137, !insn.addr !793

dec_label_pc_1137:                                ; preds = %dec_label_pc_1100
  %6 = call i64 @.Llzma_properties_size.0(i64 %arg1, i64 %arg2, i64 %0, i64 267, i64 %arg4), !insn.addr !794
  ret i64 %6, !insn.addr !794

dec_label_pc_1145:                                ; preds = %dec_label_pc_1100
  ret i64 1, !insn.addr !795
}

define i64 @.Llzma_simple_x86_decoder_init.1(i64 %arg1, i64 %arg2, i32 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1150:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !796
  %rbp.01.reg2mem = alloca i64, !insn.addr !796
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %stack_var_-128 = alloca i64, align 8
  %3 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !797
  call void @__asm_rep_stosd_memset(i8* nonnull %3, i32 0, i64 22), !insn.addr !797
  %4 = icmp ult i64 %arg1, %arg2, !insn.addr !798
  %5 = icmp eq i1 %4, false, !insn.addr !799
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !799
  br i1 %5, label %dec_label_pc_11dc, label %dec_label_pc_1189.lr.ph, !insn.addr !799

dec_label_pc_1189.lr.ph:                          ; preds = %dec_label_pc_1150
  %6 = sext i32 %arg3 to i64
  %7 = icmp eq i32 %arg3, 0, !insn.addr !800
  %8 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !801
  %9 = select i1 %7, i64 %8, i64 %6, !insn.addr !802
  %10 = add i64 %9, 48
  %11 = inttoptr i64 %10 to i64*
  %12 = inttoptr i64 %9 to i64*, !insn.addr !803
  %13 = add i64 %9, 40
  %14 = inttoptr i64 %13 to i32*
  %15 = add i64 %9, 28
  %16 = inttoptr i64 %15 to i32*
  %17 = icmp eq i64 %arg4, 0
  %18 = add i64 %9, 17
  %19 = inttoptr i64 %18 to i8*
  %20 = add i64 %9, 8
  %21 = inttoptr i64 %20 to i64*
  store i64 %arg1, i64* %rbp.01.reg2mem
  br label %dec_label_pc_1189

dec_label_pc_1189:                                ; preds = %dec_label_pc_1189.lr.ph, %dec_label_pc_11ce
  %rbp.01.reload = load i64, i64* %rbp.01.reg2mem
  %22 = call i64 @.Lx86_code.part.0(i64* %12, i64 %rbp.01.reload, i64 %arg2, i64 0, i64 %2, i64 %1), !insn.addr !803
  %23 = trunc i64 %22 to i32, !insn.addr !804
  %24 = icmp eq i32 %23, 0, !insn.addr !804
  br i1 %24, label %dec_label_pc_11ce, label %dec_label_pc_119b, !insn.addr !805

dec_label_pc_119b:                                ; preds = %dec_label_pc_1189
  %25 = load i32, i32* %14, align 4, !insn.addr !806
  %26 = icmp eq i32 %25, 259, !insn.addr !806
  %27 = icmp eq i1 %26, false, !insn.addr !807
  br i1 %27, label %dec_label_pc_11ce, label %dec_label_pc_11a4, !insn.addr !807

dec_label_pc_11a4:                                ; preds = %dec_label_pc_119b
  %28 = load i32, i32* %16, align 4, !insn.addr !808
  %29 = and i32 %28, -16711936, !insn.addr !809
  %30 = icmp eq i32 %29, 83886080, !insn.addr !810
  %31 = icmp eq i1 %30, false, !insn.addr !811
  br i1 %31, label %dec_label_pc_11ce, label %dec_label_pc_11b3, !insn.addr !811

dec_label_pc_11b3:                                ; preds = %dec_label_pc_11a4
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !812
  br i1 %17, label %dec_label_pc_11dc, label %dec_label_pc_11b8, !insn.addr !812

dec_label_pc_11b8:                                ; preds = %dec_label_pc_11b3
  %32 = load i8, i8* %19, align 1, !insn.addr !813
  %33 = urem i8 %32, 2, !insn.addr !813
  %34 = icmp eq i8 %33, 0, !insn.addr !813
  br i1 %34, label %dec_label_pc_11ce, label %dec_label_pc_11be, !insn.addr !814

dec_label_pc_11be:                                ; preds = %dec_label_pc_11b8
  %35 = load i64, i64* %11, align 8, !insn.addr !815
  %36 = load i64, i64* %12, align 8, !insn.addr !816
  %37 = add i64 %36, %35, !insn.addr !816
  %38 = load i64, i64* %21, align 8, !insn.addr !817
  %39 = add i64 %37, %38, !insn.addr !817
  %40 = icmp eq i64 %39, %arg4, !insn.addr !818
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !819
  br i1 %40, label %dec_label_pc_11dc, label %dec_label_pc_11ce, !insn.addr !819

dec_label_pc_11ce:                                ; preds = %dec_label_pc_11be, %dec_label_pc_11b8, %dec_label_pc_11a4, %dec_label_pc_119b, %dec_label_pc_1189
  %41 = add i64 %rbp.01.reload, 1, !insn.addr !820
  %42 = icmp ult i64 %41, %arg2, !insn.addr !798
  %43 = icmp eq i1 %42, false, !insn.addr !799
  store i64 %41, i64* %rbp.01.reg2mem, !insn.addr !799
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !799
  br i1 %43, label %dec_label_pc_11dc, label %dec_label_pc_1189, !insn.addr !799

dec_label_pc_11dc:                                ; preds = %dec_label_pc_11ce, %dec_label_pc_11be, %dec_label_pc_11b3, %dec_label_pc_1150
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !821

; uselistorder directives
  uselistorder i64 %9, { 4, 2, 1, 0, 5, 3 }
  uselistorder i64* %stack_var_-128, { 1, 0 }
  uselistorder i64* %rbp.01.reg2mem, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 2, 1, 4 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1189, { 1, 0 }
}

define i64 @.Lstream_decode.1(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_11f0:
  %0 = alloca i64
  %1 = load i64, i64* %0
  ret i64 %1, !insn.addr !822
}

define i64 @function_1220(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1220:
  %rax.0.reg2mem = alloca i64, !insn.addr !823
  %storemerge30.reg2mem = alloca i64, !insn.addr !823
  %.in42.in.reg2mem = alloca i64, !insn.addr !823
  %.reg2mem109 = alloca i64, !insn.addr !823
  %rsi.0.ph38.reg2mem = alloca i64, !insn.addr !823
  %.in.in.reg2mem = alloca i64, !insn.addr !823
  %.reg2mem = alloca i64, !insn.addr !823
  %0 = icmp eq i64 %arg3, 0, !insn.addr !824
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !825
  br i1 %0, label %dec_label_pc_1373, label %dec_label_pc_1244.lr.ph.lr.ph, !insn.addr !825

dec_label_pc_1244.lr.ph.lr.ph:                    ; preds = %dec_label_pc_1220
  %1 = and i64 %arg4, 4294967295, !insn.addr !826
  %2 = add i64 %arg3, %arg2, !insn.addr !827
  %3 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64)
  %4 = inttoptr i64 %3 to i16*
  %5 = add i64 %arg1, 16
  %6 = inttoptr i64 %5 to i64*
  %7 = trunc i64 %arg4 to i32
  %8 = add i64 %arg1, 8
  %9 = inttoptr i64 %8 to i64*
  store i64 %2, i64* %.reg2mem
  store i64 %arg2, i64* %rsi.0.ph38.reg2mem
  br label %dec_label_pc_1244.lr.ph

dec_label_pc_1244.lr.ph:                          ; preds = %dec_label_pc_1244.lr.ph.lr.ph, %dec_label_pc_130d
  %rsi.0.ph38.reload = load i64, i64* %rsi.0.ph38.reg2mem
  %.in.in.reload = load i64, i64* %.in.in.reg2mem
  %.reload = load i64, i64* %.reg2mem
  %10 = add i64 %rsi.0.ph38.reload, 1
  store i64 %.reload, i64* %.reg2mem109
  store i64 %.in.in.reload, i64* %.in42.in.reg2mem
  br label %dec_label_pc_1244

dec_label_pc_1244:                                ; preds = %dec_label_pc_1244.lr.ph, %dec_label_pc_12f3
  %.in42.in.reload = load i64, i64* %.in42.in.reg2mem
  %.reload110 = load i64, i64* %.reg2mem109
  %.in42 = add i64 %.in42.in.reload, 1
  %11 = icmp ugt i64 %rsi.0.ph38.reload, %.reload110
  %12 = select i1 %11, i64 %.reload110, i64 %rsi.0.ph38.reload, !insn.addr !828
  %13 = icmp ult i64 %12, %arg1, !insn.addr !829
  %14 = trunc i64 %.in42 to i32, !insn.addr !830
  %15 = icmp eq i32 %14, 1002, !insn.addr !830
  %or.cond = or i1 %13, %15
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !831
  br i1 %or.cond, label %dec_label_pc_1373, label %dec_label_pc_1264, !insn.addr !831

dec_label_pc_1264:                                ; preds = %dec_label_pc_1244
  %16 = load i16, i16* %4, align 2, !insn.addr !832
  %17 = icmp ne i16 %16, 0, !insn.addr !833
  %18 = icmp eq i1 %17, false, !insn.addr !834
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !834
  br i1 %18, label %dec_label_pc_1373, label %dec_label_pc_1274.lr.ph, !insn.addr !834

dec_label_pc_1274.lr.ph:                          ; preds = %dec_label_pc_1264
  %19 = and i64 %.in42, 4294967295
  %20 = zext i16 %16 to i32, !insn.addr !833
  %21 = load i64, i64* %6, align 8, !insn.addr !835
  store i64 0, i64* %storemerge30.reg2mem
  br label %dec_label_pc_1274

dec_label_pc_1274:                                ; preds = %dec_label_pc_1274.lr.ph, %dec_label_pc_1362
  %storemerge30.reload = load i64, i64* %storemerge30.reg2mem
  %22 = mul i64 %storemerge30.reload, 56, !insn.addr !836
  %23 = add i64 %22, %21, !insn.addr !835
  %24 = inttoptr i64 %23 to i32*, !insn.addr !837
  %25 = load i32, i32* %24, align 4, !insn.addr !837
  %26 = icmp eq i32 %25, 1, !insn.addr !837
  %27 = icmp eq i1 %26, false, !insn.addr !838
  br i1 %27, label %dec_label_pc_1362, label %dec_label_pc_1285, !insn.addr !838

dec_label_pc_1285:                                ; preds = %dec_label_pc_1274
  %28 = add i64 %23, 4, !insn.addr !839
  %29 = inttoptr i64 %28 to i32*, !insn.addr !839
  %30 = load i32, i32* %29, align 4, !insn.addr !839
  %31 = and i32 %30, %7, !insn.addr !840
  %32 = icmp eq i32 %31, %7, !insn.addr !841
  %33 = icmp eq i1 %32, false, !insn.addr !842
  br i1 %33, label %dec_label_pc_1362, label %dec_label_pc_1294, !insn.addr !842

dec_label_pc_1294:                                ; preds = %dec_label_pc_1285
  %34 = add i64 %23, 40, !insn.addr !843
  %35 = inttoptr i64 %34 to i64*, !insn.addr !843
  %36 = load i64, i64* %35, align 8, !insn.addr !843
  %37 = load i64, i64* %9, align 8, !insn.addr !844
  %38 = sub i64 %arg1, %37, !insn.addr !844
  %39 = add i64 %23, 16, !insn.addr !845
  %40 = inttoptr i64 %39 to i64*, !insn.addr !845
  %41 = load i64, i64* %40, align 8, !insn.addr !845
  %42 = add i64 %38, %41, !insn.addr !845
  %43 = add i64 %42, %36, !insn.addr !846
  %44 = and i64 %42, -4096, !insn.addr !847
  %45 = urem i64 %43, 4096
  %46 = icmp eq i64 %45, 0, !insn.addr !848
  %47 = add i64 %43, 4096
  %48 = and i64 %47, -4096
  %rbx.0 = select i1 %46, i64 %43, i64 %48
  %49 = icmp ugt i64 %44, %rsi.0.ph38.reload, !insn.addr !849
  %50 = icmp ult i64 %rbx.0, %.reload110, !insn.addr !850
  %51 = icmp eq i1 %50, false, !insn.addr !851
  %52 = icmp eq i1 %51, false, !insn.addr !852
  %53 = or i1 %49, %52
  %54 = icmp eq i1 %53, false
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !853
  br i1 %54, label %dec_label_pc_1373, label %dec_label_pc_12df, !insn.addr !853

dec_label_pc_12df:                                ; preds = %dec_label_pc_1294
  %55 = icmp eq i1 %49, %51
  br i1 %55, label %dec_label_pc_12ee, label %dec_label_pc_12fe, !insn.addr !854

dec_label_pc_12ee:                                ; preds = %dec_label_pc_12df
  %56 = icmp ult i64 %44, %.reload110, !insn.addr !855
  %57 = icmp eq i1 %56, false, !insn.addr !856
  br i1 %57, label %dec_label_pc_1362, label %dec_label_pc_12f3, !insn.addr !856

dec_label_pc_12f3:                                ; preds = %dec_label_pc_12ee
  %58 = add i64 %44, -1, !insn.addr !827
  %59 = icmp eq i64 %44, %10, !insn.addr !824
  store i64 %58, i64* %.reg2mem109, !insn.addr !825
  store i64 %19, i64* %.in42.in.reg2mem, !insn.addr !825
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !825
  br i1 %59, label %dec_label_pc_1373, label %dec_label_pc_1244, !insn.addr !825

dec_label_pc_12fe:                                ; preds = %dec_label_pc_12df
  %60 = icmp eq i1 %49, false, !insn.addr !857
  %61 = icmp ult i64 %rsi.0.ph38.reload, %rbx.0, !insn.addr !858
  %62 = icmp eq i1 %60, %61
  br i1 %62, label %dec_label_pc_1308, label %dec_label_pc_131c, !insn.addr !859

dec_label_pc_1308:                                ; preds = %dec_label_pc_12fe
  br i1 %51, label %dec_label_pc_1362, label %dec_label_pc_130d, !insn.addr !860

dec_label_pc_130d:                                ; preds = %dec_label_pc_1308
  %63 = add i64 %rbx.0, 1, !insn.addr !861
  %64 = icmp eq i64 %.reload110, %63, !insn.addr !824
  store i64 %.reload110, i64* %.reg2mem, !insn.addr !825
  store i64 %19, i64* %.in.in.reg2mem, !insn.addr !825
  store i64 %63, i64* %rsi.0.ph38.reg2mem, !insn.addr !825
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !825
  br i1 %64, label %dec_label_pc_1373, label %dec_label_pc_1244.lr.ph, !insn.addr !825

dec_label_pc_131c:                                ; preds = %dec_label_pc_12fe
  %65 = icmp eq i1 %49, %50
  br i1 %65, label %dec_label_pc_1325, label %dec_label_pc_1362, !insn.addr !862

dec_label_pc_1325:                                ; preds = %dec_label_pc_131c
  %66 = sub i64 %44, %rsi.0.ph38.reload, !insn.addr !863
  %67 = call i64 @function_1220(i64 %arg1, i64 %rsi.0.ph38.reload, i64 %66, i64 %1), !insn.addr !864
  %68 = trunc i64 %67 to i32, !insn.addr !865
  %69 = icmp eq i32 %68, 0, !insn.addr !865
  store i64 %67, i64* %rax.0.reg2mem, !insn.addr !866
  br i1 %69, label %dec_label_pc_1373, label %dec_label_pc_1341, !insn.addr !866

dec_label_pc_1341:                                ; preds = %dec_label_pc_1325
  %70 = add i64 %rbx.0, 1, !insn.addr !867
  %71 = sub i64 0, %rbx.0
  %72 = sub i64 %71, 1
  %73 = add i64 %.reload110, %72, !insn.addr !868
  %74 = call i64 @function_1220(i64 %arg1, i64 %70, i64 %73, i64 %1), !insn.addr !869
  %75 = trunc i64 %74 to i32, !insn.addr !870
  %76 = icmp eq i32 %75, 0, !insn.addr !870
  %77 = icmp eq i1 %76, false, !insn.addr !871
  %78 = zext i1 %77 to i64, !insn.addr !872
  store i64 %78, i64* %rax.0.reg2mem, !insn.addr !873
  br label %dec_label_pc_1373, !insn.addr !873

dec_label_pc_1362:                                ; preds = %dec_label_pc_131c, %dec_label_pc_1308, %dec_label_pc_12ee, %dec_label_pc_1285, %dec_label_pc_1274
  %79 = add i64 %storemerge30.reload, 1, !insn.addr !874
  %80 = trunc i64 %79 to i32, !insn.addr !833
  %81 = icmp ult i32 %80, %20, !insn.addr !833
  %82 = icmp eq i1 %81, false, !insn.addr !834
  store i64 %79, i64* %storemerge30.reg2mem, !insn.addr !834
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !834
  br i1 %82, label %dec_label_pc_1373, label %dec_label_pc_1274, !insn.addr !834

dec_label_pc_1373:                                ; preds = %dec_label_pc_130d, %dec_label_pc_1244, %dec_label_pc_12f3, %dec_label_pc_1264, %dec_label_pc_1362, %dec_label_pc_1294, %dec_label_pc_1220, %dec_label_pc_1341, %dec_label_pc_1325
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !875

; uselistorder directives
  uselistorder i1 %51, { 1, 0, 2 }
  uselistorder i1 %49, { 0, 3, 1, 2 }
  uselistorder i64 %rbx.0, { 0, 2, 1, 4, 3 }
  uselistorder i64 %44, { 2, 0, 1, 4, 3 }
  uselistorder i64 %43, { 1, 2, 0 }
  uselistorder i64 %42, { 1, 0 }
  uselistorder i64 %19, { 1, 0 }
  uselistorder i16 %16, { 1, 0 }
  uselistorder i64 %.reload110, { 4, 6, 5, 0, 1, 3, 2 }
  uselistorder i64 %rsi.0.ph38.reload, { 6, 5, 2, 3, 0, 1, 4 }
  uselistorder i32 %7, { 1, 0 }
  uselistorder i64* %.reg2mem, { 1, 0, 2 }
  uselistorder i64* %.in.in.reg2mem, { 1, 0 }
  uselistorder i64* %rsi.0.ph38.reg2mem, { 1, 0, 2 }
  uselistorder i64* %.reg2mem109, { 1, 0, 2 }
  uselistorder i64* %.in42.in.reg2mem, { 1, 0, 2 }
  uselistorder i64* %storemerge30.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.0.reg2mem, { 0, 5, 8, 9, 1, 4, 6, 2, 3, 7 }
  uselistorder i64 %arg1, { 0, 1, 3, 6, 2, 4, 5 }
  uselistorder label %dec_label_pc_1373, { 4, 7, 8, 0, 2, 5, 3, 1, 6 }
  uselistorder label %dec_label_pc_1274, { 1, 0 }
  uselistorder label %dec_label_pc_1244, { 1, 0 }
  uselistorder label %dec_label_pc_1244.lr.ph, { 1, 0 }
}

define i64 @.Lparse_bcj.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1380:
  %0 = call i64 @function_1220(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4), !insn.addr !876
  ret i64 %0, !insn.addr !876

; uselistorder directives
  uselistorder i64 (i64, i64, i64, i64)* @function_1220, { 0, 2, 1 }
}

define i64 @.Llzma_simple_props_size.part.0(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1390:
  %0 = zext i32 %arg1 to i64
  %1 = add nuw nsw i64 %0, 1, !insn.addr !877
  %2 = add i64 %1, %arg2, !insn.addr !877
  %3 = trunc i64 %2 to i32, !insn.addr !877
  %4 = icmp eq i32 %3, 74769747, !insn.addr !878
  %5 = zext i1 %4 to i64, !insn.addr !879
  ret i64 %5, !insn.addr !880
}

define i64 @.Lget_literal_price.part.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_13b0:
  %r15.2.reg2mem = alloca i64, !insn.addr !881
  %r15.115.reg2mem = alloca i64, !insn.addr !881
  %rdi.118.reg2mem = alloca i64, !insn.addr !881
  %merge.reg2mem = alloca i64, !insn.addr !881
  %rdi.124.lcssa.reg2mem = alloca i64, !insn.addr !881
  %r15.125.lcssa.reg2mem = alloca i64, !insn.addr !881
  %.lcssa.reg2mem = alloca i32, !insn.addr !881
  %r15.0.reg2mem = alloca i64, !insn.addr !881
  %rdi.0.reg2mem = alloca i64, !insn.addr !881
  %r15.12549.reg2mem = alloca i64, !insn.addr !881
  %rdi.12450.reg2mem = alloca i64, !insn.addr !881
  %rcx.22351.reg2mem = alloca i64, !insn.addr !881
  %rax.02152.reg2mem = alloca i64, !insn.addr !881
  %.reg2mem = alloca i64, !insn.addr !881
  %r9.1.reg2mem = alloca i64, !insn.addr !881
  %rcx.1.reg2mem = alloca i64, !insn.addr !881
  %rcx.027.reg2mem = alloca i64, !insn.addr !881
  %r9.028.reg2mem = alloca i64, !insn.addr !881
  %r13.029.reg2mem = alloca i64, !insn.addr !881
  %storemerge31.reg2mem = alloca i64, !insn.addr !881
  %0 = icmp eq i64 %arg1, 0, !insn.addr !882
  %1 = icmp eq i64 %arg2, 0, !insn.addr !883
  %or.cond7 = or i1 %0, %1
  store i64 0, i64* %merge.reg2mem, !insn.addr !884
  br i1 %or.cond7, label %dec_label_pc_1556, label %dec_label_pc_13d6, !insn.addr !884

dec_label_pc_13d6:                                ; preds = %dec_label_pc_13b0
  %2 = add i64 %arg2, 8, !insn.addr !885
  %3 = inttoptr i64 %2 to i8*, !insn.addr !886
  call void @__asm_rep_stosd_memset(i8* %3, i32 0, i64 62), !insn.addr !886
  %4 = inttoptr i64 %arg2 to i64*, !insn.addr !887
  store i64 %arg1, i64* %4, align 8, !insn.addr !887
  %5 = add i64 %arg1, 32, !insn.addr !888
  %6 = inttoptr i64 %5 to i64*, !insn.addr !888
  %7 = load i64, i64* %6, align 8, !insn.addr !888
  %8 = add i64 %arg1, 56, !insn.addr !889
  %9 = inttoptr i64 %8 to i16*, !insn.addr !889
  %10 = load i16, i16* %9, align 2, !insn.addr !889
  %11 = add i64 %7, %arg1, !insn.addr !890
  %12 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !891
  %13 = inttoptr i64 %12 to i16*, !insn.addr !891
  store i16 %10, i16* %13, align 2, !insn.addr !891
  %14 = add i64 %arg2, 16, !insn.addr !892
  %15 = inttoptr i64 %14 to i64*, !insn.addr !892
  store i64 %11, i64* %15, align 8, !insn.addr !892
  %16 = icmp ne i16 %10, 0, !insn.addr !893
  %17 = icmp eq i1 %16, false, !insn.addr !894
  store i64 0, i64* %merge.reg2mem, !insn.addr !894
  br i1 %17, label %dec_label_pc_1556, label %dec_label_pc_1416.lr.ph, !insn.addr !894

dec_label_pc_1416.lr.ph:                          ; preds = %dec_label_pc_13d6
  %18 = zext i16 %10 to i32, !insn.addr !893
  %19 = add i64 %arg2, 76
  %20 = inttoptr i64 %19 to i32*
  %21 = add i64 %arg2, 80
  %22 = inttoptr i64 %21 to i64*
  %23 = add i64 %arg2, 88
  %24 = inttoptr i64 %23 to i64*
  store i64 %11, i64* %storemerge31.reg2mem
  store i64 0, i64* %r13.029.reg2mem
  store i64 -1, i64* %r9.028.reg2mem
  store i64 -1, i64* %rcx.027.reg2mem
  br label %dec_label_pc_1416

dec_label_pc_1416:                                ; preds = %dec_label_pc_1416.lr.ph, %dec_label_pc_1464
  %rcx.027.reload = load i64, i64* %rcx.027.reg2mem
  %r9.028.reload = load i64, i64* %r9.028.reg2mem
  %r13.029.reload = load i64, i64* %r13.029.reg2mem
  %storemerge31.reload = load i64, i64* %storemerge31.reg2mem
  %25 = inttoptr i64 %storemerge31.reload to i32*, !insn.addr !895
  %26 = load i32, i32* %25, align 4, !insn.addr !895
  %27 = icmp eq i32 %26, 1, !insn.addr !896
  %28 = icmp eq i1 %27, false, !insn.addr !897
  br i1 %28, label %dec_label_pc_142b, label %dec_label_pc_141e, !insn.addr !897

dec_label_pc_141e:                                ; preds = %dec_label_pc_1416
  %29 = add i64 %storemerge31.reload, 16, !insn.addr !898
  %30 = inttoptr i64 %29 to i64*, !insn.addr !898
  %31 = load i64, i64* %30, align 8, !insn.addr !898
  %32 = icmp ugt i64 %r9.028.reload, %31
  %33 = select i1 %32, i64 %31, i64 %r9.028.reload, !insn.addr !899
  store i64 %rcx.027.reload, i64* %rcx.1.reg2mem, !insn.addr !900
  store i64 %33, i64* %r9.1.reg2mem, !insn.addr !900
  br label %dec_label_pc_1464, !insn.addr !900

dec_label_pc_142b:                                ; preds = %dec_label_pc_1416
  %34 = icmp eq i32 %26, 2, !insn.addr !901
  %35 = icmp eq i1 %34, false, !insn.addr !902
  br i1 %35, label %dec_label_pc_1435, label %dec_label_pc_1430, !insn.addr !902

dec_label_pc_1430:                                ; preds = %dec_label_pc_142b
  %sext = mul i64 %r13.029.reload, 4294967296
  %36 = ashr exact i64 %sext, 32, !insn.addr !903
  store i64 %36, i64* %rcx.1.reg2mem, !insn.addr !904
  store i64 %r9.028.reload, i64* %r9.1.reg2mem, !insn.addr !904
  br label %dec_label_pc_1464, !insn.addr !904

dec_label_pc_1435:                                ; preds = %dec_label_pc_142b
  %37 = call i64 @.Llzma_simple_props_size.part.0(i32 %26, i64 2684354560), !insn.addr !905
  %38 = trunc i64 %37 to i32, !insn.addr !906
  %39 = icmp eq i32 %38, 0, !insn.addr !906
  store i64 %rcx.027.reload, i64* %rcx.1.reg2mem, !insn.addr !907
  store i64 %r9.028.reload, i64* %r9.1.reg2mem, !insn.addr !907
  br i1 %39, label %dec_label_pc_1464, label %dec_label_pc_1443, !insn.addr !907

dec_label_pc_1443:                                ; preds = %dec_label_pc_1435
  %40 = load i32, i32* %20, align 4, !insn.addr !908
  %41 = icmp eq i32 %40, 0, !insn.addr !908
  %42 = icmp eq i1 %41, false, !insn.addr !909
  store i64 0, i64* %merge.reg2mem, !insn.addr !909
  br i1 %42, label %dec_label_pc_1556, label %dec_label_pc_144d, !insn.addr !909

dec_label_pc_144d:                                ; preds = %dec_label_pc_1443
  %43 = add i64 %storemerge31.reload, 16, !insn.addr !910
  %44 = inttoptr i64 %43 to i64*, !insn.addr !910
  %45 = load i64, i64* %44, align 8, !insn.addr !910
  store i64 %45, i64* %22, align 8, !insn.addr !911
  %46 = add i64 %storemerge31.reload, 40, !insn.addr !912
  %47 = inttoptr i64 %46 to i64*, !insn.addr !912
  %48 = load i64, i64* %47, align 8, !insn.addr !912
  store i32 1, i32* %20, align 4, !insn.addr !913
  store i64 %48, i64* %24, align 8, !insn.addr !914
  store i64 %rcx.027.reload, i64* %rcx.1.reg2mem, !insn.addr !914
  store i64 %r9.028.reload, i64* %r9.1.reg2mem, !insn.addr !914
  br label %dec_label_pc_1464, !insn.addr !914

dec_label_pc_1464:                                ; preds = %dec_label_pc_144d, %dec_label_pc_1435, %dec_label_pc_1430, %dec_label_pc_141e
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %49 = add nuw nsw i64 %r13.029.reload, 1, !insn.addr !915
  %50 = and i64 %49, 4294967295, !insn.addr !915
  %51 = add i64 %storemerge31.reload, 56, !insn.addr !916
  %52 = trunc i64 %49 to i32, !insn.addr !893
  %53 = icmp ult i32 %52, %18, !insn.addr !893
  %54 = icmp eq i1 %53, false, !insn.addr !894
  store i64 %51, i64* %storemerge31.reg2mem, !insn.addr !894
  store i64 %50, i64* %r13.029.reg2mem, !insn.addr !894
  store i64 %r9.1.reload, i64* %r9.028.reg2mem, !insn.addr !894
  store i64 %rcx.1.reload, i64* %rcx.027.reg2mem, !insn.addr !894
  br i1 %54, label %dec_label_pc_146d, label %dec_label_pc_1416, !insn.addr !894

dec_label_pc_146d:                                ; preds = %dec_label_pc_1464
  %55 = icmp eq i64 %r9.1.reload, -1, !insn.addr !917
  %56 = trunc i64 %rcx.1.reload to i32, !insn.addr !918
  %57 = icmp eq i32 %56, -1, !insn.addr !918
  %or.cond4 = or i1 %55, %57
  store i64 0, i64* %merge.reg2mem, !insn.addr !919
  br i1 %or.cond4, label %dec_label_pc_1556, label %dec_label_pc_1480, !insn.addr !919

dec_label_pc_1480:                                ; preds = %dec_label_pc_146d
  %58 = mul i64 %rcx.1.reload, 56, !insn.addr !920
  %59 = inttoptr i64 %2 to i64*, !insn.addr !921
  store i64 %r9.1.reload, i64* %59, align 8, !insn.addr !921
  %60 = sub i64 %arg1, %r9.1.reload, !insn.addr !922
  %61 = add i64 %58, %11, !insn.addr !923
  %62 = add i64 %61, 40, !insn.addr !924
  %63 = inttoptr i64 %62 to i64*, !insn.addr !924
  %64 = load i64, i64* %63, align 8, !insn.addr !924
  %65 = add i64 %61, 16, !insn.addr !925
  %66 = inttoptr i64 %65 to i64*, !insn.addr !925
  %67 = load i64, i64* %66, align 8, !insn.addr !925
  %68 = add i64 %67, %60, !insn.addr !925
  %69 = add i64 %arg2, 32, !insn.addr !926
  %70 = inttoptr i64 %69 to i64*, !insn.addr !926
  store i64 %68, i64* %70, align 8, !insn.addr !926
  %71 = udiv i64 %64, 16, !insn.addr !927
  %72 = trunc i64 %71 to i32, !insn.addr !928
  %73 = add i64 %arg2, 40, !insn.addr !928
  %74 = inttoptr i64 %73 to i32*, !insn.addr !928
  store i32 %72, i32* %74, align 4, !insn.addr !928
  %75 = call i64 @.Lparse_bcj.0(i64 %arg2, i64 %68, i64 %64, i64 4, i64 %61), !insn.addr !929
  %76 = trunc i64 %75 to i32, !insn.addr !930
  %77 = icmp eq i32 %76, 0, !insn.addr !930
  store i64 0, i64* %merge.reg2mem, !insn.addr !931
  br i1 %77, label %dec_label_pc_1556, label %dec_label_pc_14c2, !insn.addr !931

dec_label_pc_14c2:                                ; preds = %dec_label_pc_1480
  %78 = icmp eq i32 %72, 0, !insn.addr !932
  store i64 0, i64* %rdi.118.reg2mem, !insn.addr !933
  store i64 0, i64* %r15.115.reg2mem, !insn.addr !933
  br i1 %78, label %dec_label_pc_1642, label %dec_label_pc_153b.lr.ph, !insn.addr !933

dec_label_pc_153b.lr.ph:                          ; preds = %dec_label_pc_14c2
  %79 = inttoptr i64 %68 to i64*, !insn.addr !934
  %80 = load i64, i64* %79, align 8, !insn.addr !934
  %81 = icmp eq i64 %80, 0, !insn.addr !935
  %82 = icmp eq i1 %81, false, !insn.addr !936
  store i32 0, i32* %.lcssa.reg2mem, !insn.addr !936
  store i64 0, i64* %r15.125.lcssa.reg2mem, !insn.addr !936
  store i64 0, i64* %rdi.124.lcssa.reg2mem, !insn.addr !936
  br i1 %82, label %dec_label_pc_14e9.lr.ph, label %dec_label_pc_1544, !insn.addr !936

dec_label_pc_14e9.lr.ph:                          ; preds = %dec_label_pc_153b.lr.ph
  %83 = add i64 %arg2, 208
  %84 = inttoptr i64 %83 to i8*
  %85 = add i64 %arg2, 112
  %86 = inttoptr i64 %85 to i64*
  %87 = add i64 %arg2, 104
  %88 = inttoptr i64 %87 to i64*
  %89 = add i64 %arg2, 96
  %90 = inttoptr i64 %89 to i64*
  %91 = add i64 %68, 8, !insn.addr !937
  store i64 %80, i64* %.reg2mem
  store i64 %91, i64* %rax.02152.reg2mem
  store i64 0, i64* %rcx.22351.reg2mem
  store i64 0, i64* %rdi.12450.reg2mem
  store i64 0, i64* %r15.12549.reg2mem
  br label %dec_label_pc_14e9

dec_label_pc_14e9:                                ; preds = %dec_label_pc_14e9.lr.ph, %dec_label_pc_153b
  %r15.12549.reload = load i64, i64* %r15.12549.reg2mem
  %rdi.12450.reload = load i64, i64* %rdi.12450.reg2mem
  %rcx.22351.reload = load i64, i64* %rcx.22351.reg2mem
  %rax.02152.reload = load i64, i64* %rax.02152.reg2mem
  %.reload = load i64, i64* %.reg2mem
  %92 = icmp slt i64 %.reload, 37, !insn.addr !938
  br i1 %92, label %dec_label_pc_151b, label %dec_label_pc_14ef, !insn.addr !938

dec_label_pc_14ef:                                ; preds = %dec_label_pc_14e9
  %93 = icmp eq i64 %.reload, 1879048187, !insn.addr !939
  br i1 %93, label %dec_label_pc_162d, label %dec_label_pc_14fc, !insn.addr !940

dec_label_pc_14fc:                                ; preds = %dec_label_pc_14ef
  %94 = icmp sgt i64 %.reload, 1879048187, !insn.addr !941
  br i1 %94, label %dec_label_pc_1591, label %dec_label_pc_1502, !insn.addr !941

dec_label_pc_1502:                                ; preds = %dec_label_pc_14fc
  %95 = icmp sgt i64 %.reload, 1879047932, !insn.addr !942
  br i1 %95, label %dec_label_pc_1578, label %dec_label_pc_150b, !insn.addr !942

dec_label_pc_150b:                                ; preds = %dec_label_pc_1502
  %96 = icmp slt i64 %.reload, 1879047931, !insn.addr !943
  store i64 0, i64* %merge.reg2mem, !insn.addr !943
  br i1 %96, label %dec_label_pc_156a, label %dec_label_pc_1556, !insn.addr !943

dec_label_pc_151b:                                ; preds = %dec_label_pc_14e9
  %97 = icmp sgt i64 %.reload, 22, !insn.addr !944
  %98 = add i64 %.reload, -2, !insn.addr !945
  %99 = icmp ult i64 %98, 7
  %or.cond9 = or i1 %97, %99
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !944
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !944
  store i64 %rax.02152.reload, i64* %merge.reg2mem, !insn.addr !944
  br i1 %or.cond9, label %dec_label_pc_1556, label %dec_label_pc_152b, !insn.addr !944

dec_label_pc_152b:                                ; preds = %dec_label_pc_151b, %dec_label_pc_1636, %dec_label_pc_162d, %dec_label_pc_1617, %dec_label_pc_15b4, %dec_label_pc_15a7, %dec_label_pc_1581, %dec_label_pc_1578, %dec_label_pc_1573, %dec_label_pc_156a
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %100 = add nuw nsw i64 %rcx.22351.reload, 1, !insn.addr !946
  %101 = trunc i64 %100 to i32, !insn.addr !932
  %102 = icmp eq i32 %72, %101, !insn.addr !932
  store i64 %rdi.0.reload, i64* %rdi.118.reg2mem, !insn.addr !933
  store i64 %r15.0.reload, i64* %r15.115.reg2mem, !insn.addr !933
  br i1 %102, label %dec_label_pc_1642, label %dec_label_pc_153b, !insn.addr !933

dec_label_pc_153b:                                ; preds = %dec_label_pc_152b
  %103 = add i64 %rax.02152.reload, 16, !insn.addr !947
  %104 = and i64 %100, 4294967295, !insn.addr !946
  %105 = add i64 %rax.02152.reload, 8, !insn.addr !934
  %106 = inttoptr i64 %105 to i64*, !insn.addr !934
  %107 = load i64, i64* %106, align 8, !insn.addr !934
  %108 = icmp eq i64 %107, 0, !insn.addr !935
  %109 = icmp eq i1 %108, false, !insn.addr !936
  store i64 %107, i64* %.reg2mem, !insn.addr !936
  store i64 %103, i64* %rax.02152.reg2mem, !insn.addr !936
  store i64 %104, i64* %rcx.22351.reg2mem, !insn.addr !936
  store i64 %rdi.0.reload, i64* %rdi.12450.reg2mem, !insn.addr !936
  store i64 %r15.0.reload, i64* %r15.12549.reg2mem, !insn.addr !936
  store i32 %101, i32* %.lcssa.reg2mem, !insn.addr !936
  store i64 %r15.0.reload, i64* %r15.125.lcssa.reg2mem, !insn.addr !936
  store i64 %rdi.0.reload, i64* %rdi.124.lcssa.reg2mem, !insn.addr !936
  br i1 %109, label %dec_label_pc_14e9, label %dec_label_pc_1544, !insn.addr !936

dec_label_pc_1544:                                ; preds = %dec_label_pc_153b, %dec_label_pc_153b.lr.ph
  %rdi.124.lcssa.reload = load i64, i64* %rdi.124.lcssa.reg2mem
  %r15.125.lcssa.reload = load i64, i64* %r15.125.lcssa.reg2mem
  %.lcssa.reload = load i32, i32* %.lcssa.reg2mem
  store i32 %.lcssa.reload, i32* %74, align 4, !insn.addr !948
  store i64 %rdi.124.lcssa.reload, i64* %rdi.118.reg2mem, !insn.addr !949
  store i64 %r15.125.lcssa.reload, i64* %r15.115.reg2mem, !insn.addr !949
  br label %dec_label_pc_1642, !insn.addr !949

dec_label_pc_1556:                                ; preds = %dec_label_pc_1443, %dec_label_pc_151b, %dec_label_pc_150b, %dec_label_pc_1591, %dec_label_pc_13d6, %dec_label_pc_13b0, %dec_label_pc_17ef, %dec_label_pc_17d5, %dec_label_pc_17b4, %dec_label_pc_1790, %dec_label_pc_176c, %dec_label_pc_16eb, %dec_label_pc_16de, %dec_label_pc_1480, %dec_label_pc_146d, %dec_label_pc_1642, %dec_label_pc_166c, %dec_label_pc_169a
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !950

dec_label_pc_156a:                                ; preds = %dec_label_pc_150b
  %110 = icmp eq i64 %.reload, 1879047925, !insn.addr !951
  %111 = icmp eq i1 %110, false, !insn.addr !952
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !952
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !952
  br i1 %111, label %dec_label_pc_152b, label %dec_label_pc_1573, !insn.addr !952

dec_label_pc_1573:                                ; preds = %dec_label_pc_156a
  %112 = inttoptr i64 %rax.02152.reload to i64*, !insn.addr !953
  %113 = load i64, i64* %112, align 8, !insn.addr !953
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !954
  store i64 %113, i64* %r15.0.reg2mem, !insn.addr !954
  br label %dec_label_pc_152b, !insn.addr !954

dec_label_pc_1578:                                ; preds = %dec_label_pc_1502
  %114 = icmp eq i64 %.reload, 1879048176, !insn.addr !955
  %115 = icmp eq i1 %114, false, !insn.addr !956
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !956
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !956
  br i1 %115, label %dec_label_pc_152b, label %dec_label_pc_1581, !insn.addr !956

dec_label_pc_1581:                                ; preds = %dec_label_pc_1578
  %116 = inttoptr i64 %rax.02152.reload to i64*, !insn.addr !957
  %117 = load i64, i64* %116, align 8, !insn.addr !957
  %118 = load i8, i8* %84, align 1, !insn.addr !958
  %119 = or i8 %118, 16, !insn.addr !958
  store i8 %119, i8* %84, align 1, !insn.addr !958
  store i64 %117, i64* %86, align 8, !insn.addr !959
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !960
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !960
  br label %dec_label_pc_152b, !insn.addr !960

dec_label_pc_1591:                                ; preds = %dec_label_pc_14fc
  store i64 0, i64* %merge.reg2mem
  switch i64 %.reload, label %dec_label_pc_15a7 [
    i64 1879048189, label %dec_label_pc_1617
    i64 2147483647, label %dec_label_pc_1556
  ]

dec_label_pc_15a7:                                ; preds = %dec_label_pc_1591
  %120 = icmp eq i64 %.reload, 1879048188, !insn.addr !961
  %121 = icmp eq i1 %120, false, !insn.addr !962
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !962
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !962
  br i1 %121, label %dec_label_pc_152b, label %dec_label_pc_15b4, !insn.addr !962

dec_label_pc_15b4:                                ; preds = %dec_label_pc_15a7
  %122 = inttoptr i64 %rax.02152.reload to i64*, !insn.addr !963
  %123 = load i64, i64* %122, align 8, !insn.addr !963
  store i64 %123, i64* %90, align 8, !insn.addr !964
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !965
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !965
  br label %dec_label_pc_152b, !insn.addr !965

dec_label_pc_1617:                                ; preds = %dec_label_pc_1591
  %124 = inttoptr i64 %rax.02152.reload to i64*, !insn.addr !966
  %125 = load i64, i64* %124, align 8, !insn.addr !966
  store i64 %125, i64* %88, align 8, !insn.addr !967
  store i64 1, i64* %rdi.0.reg2mem, !insn.addr !968
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !968
  br label %dec_label_pc_152b, !insn.addr !968

dec_label_pc_162d:                                ; preds = %dec_label_pc_14ef
  %126 = inttoptr i64 %rax.02152.reload to i8*, !insn.addr !969
  %127 = load i8, i8* %126, align 1, !insn.addr !969
  %128 = urem i8 %127, 2, !insn.addr !969
  %129 = icmp eq i8 %128, 0, !insn.addr !969
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !970
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !970
  br i1 %129, label %dec_label_pc_152b, label %dec_label_pc_1636, !insn.addr !970

dec_label_pc_1636:                                ; preds = %dec_label_pc_162d
  %130 = load i8, i8* %84, align 1, !insn.addr !971
  %131 = or i8 %130, 32, !insn.addr !971
  store i8 %131, i8* %84, align 1, !insn.addr !971
  store i64 %rdi.12450.reload, i64* %rdi.0.reg2mem, !insn.addr !972
  store i64 %r15.12549.reload, i64* %r15.0.reg2mem, !insn.addr !972
  br label %dec_label_pc_152b, !insn.addr !972

dec_label_pc_1642:                                ; preds = %dec_label_pc_152b, %dec_label_pc_14c2, %dec_label_pc_1544
  %132 = add i64 %arg2, 64, !insn.addr !973
  %133 = inttoptr i64 %132 to i64*, !insn.addr !973
  %134 = load i64, i64* %133, align 8, !insn.addr !973
  %135 = icmp eq i64 %134, 0, !insn.addr !974
  store i64 0, i64* %merge.reg2mem, !insn.addr !975
  br i1 %135, label %dec_label_pc_166c, label %dec_label_pc_1556, !insn.addr !975

dec_label_pc_166c:                                ; preds = %dec_label_pc_1642
  %136 = add i64 %arg2, 120, !insn.addr !976
  %137 = inttoptr i64 %136 to i64*, !insn.addr !976
  %138 = load i64, i64* %137, align 8, !insn.addr !976
  %139 = icmp eq i64 %138, 0, !insn.addr !977
  store i64 0, i64* %merge.reg2mem, !insn.addr !978
  br i1 %139, label %dec_label_pc_169a, label %dec_label_pc_1556, !insn.addr !978

dec_label_pc_169a:                                ; preds = %dec_label_pc_166c
  %140 = add i64 %arg2, 136, !insn.addr !979
  %141 = inttoptr i64 %140 to i64*, !insn.addr !979
  %142 = load i64, i64* %141, align 8, !insn.addr !979
  %143 = icmp eq i64 %142, 0, !insn.addr !980
  store i64 0, i64* %merge.reg2mem, !insn.addr !981
  br i1 %143, label %dec_label_pc_16c4, label %dec_label_pc_1556, !insn.addr !981

dec_label_pc_16c4:                                ; preds = %dec_label_pc_169a
  %r15.115.reload = load i64, i64* %r15.115.reg2mem
  %144 = add i64 %arg2, 96, !insn.addr !982
  %145 = inttoptr i64 %144 to i64*, !insn.addr !982
  %146 = load i64, i64* %145, align 8, !insn.addr !982
  %147 = icmp eq i64 %146, 0, !insn.addr !982
  br i1 %147, label %dec_label_pc_16de, label %dec_label_pc_16cb, !insn.addr !983

dec_label_pc_16cb:                                ; preds = %dec_label_pc_16c4
  %rdi.118.reload = load i64, i64* %rdi.118.reg2mem
  %148 = trunc i64 %rdi.118.reload to i32, !insn.addr !984
  %149 = icmp eq i32 %148, 0, !insn.addr !984
  %150 = icmp eq i1 %149, false, !insn.addr !985
  br i1 %150, label %dec_label_pc_16d7, label %dec_label_pc_16cf, !insn.addr !985

dec_label_pc_16cf:                                ; preds = %dec_label_pc_16cb
  store i64 0, i64* %145, align 8, !insn.addr !986
  br label %dec_label_pc_16de, !insn.addr !987

dec_label_pc_16d7:                                ; preds = %dec_label_pc_16cb
  %151 = add i64 %arg2, 208, !insn.addr !988
  %152 = inttoptr i64 %151 to i8*, !insn.addr !988
  %153 = load i8, i8* %152, align 1, !insn.addr !988
  %154 = or i8 %153, 8, !insn.addr !988
  store i8 %154, i8* %152, align 1, !insn.addr !988
  br label %dec_label_pc_16de, !insn.addr !988

dec_label_pc_16de:                                ; preds = %dec_label_pc_16d7, %dec_label_pc_16cf, %dec_label_pc_16c4
  %155 = add i64 %arg2, 48, !insn.addr !989
  %156 = inttoptr i64 %155 to i64*, !insn.addr !989
  %157 = load i64, i64* %156, align 8, !insn.addr !989
  %158 = icmp eq i64 %157, 0, !insn.addr !990
  store i64 0, i64* %merge.reg2mem, !insn.addr !991
  br i1 %158, label %dec_label_pc_1556, label %dec_label_pc_16eb, !insn.addr !991

dec_label_pc_16eb:                                ; preds = %dec_label_pc_16de
  %159 = add i64 %arg2, 56, !insn.addr !992
  %160 = inttoptr i64 %159 to i64*, !insn.addr !992
  %161 = load i64, i64* %160, align 8, !insn.addr !992
  %162 = icmp eq i64 %r15.115.reload, 0, !insn.addr !993
  %163 = icmp eq i64 %161, 0, !insn.addr !994
  %or.cond = or i1 %162, %163
  store i64 0, i64* %merge.reg2mem, !insn.addr !995
  br i1 %or.cond, label %dec_label_pc_1556, label %dec_label_pc_1701, !insn.addr !995

dec_label_pc_1701:                                ; preds = %dec_label_pc_16eb
  %164 = icmp ugt i64 %157, %arg1, !insn.addr !996
  store i64 %r15.115.reload, i64* %r15.2.reg2mem, !insn.addr !997
  br i1 %164, label %dec_label_pc_174e, label %dec_label_pc_173b, !insn.addr !997

dec_label_pc_173b:                                ; preds = %dec_label_pc_1701
  %165 = add i64 %157, %arg1, !insn.addr !998
  %166 = add i64 %161, %arg1, !insn.addr !999
  store i64 %165, i64* %156, align 8, !insn.addr !1000
  store i64 %166, i64* %160, align 8, !insn.addr !1001
  %167 = add i64 %arg2, 112, !insn.addr !1002
  %168 = inttoptr i64 %167 to i64*, !insn.addr !1002
  %169 = load i64, i64* %168, align 8, !insn.addr !1002
  %170 = icmp eq i64 %169, 0, !insn.addr !1003
  br i1 %170, label %dec_label_pc_174b, label %dec_label_pc_1744, !insn.addr !1004

dec_label_pc_1744:                                ; preds = %dec_label_pc_173b
  %171 = add i64 %169, %arg1, !insn.addr !1005
  store i64 %171, i64* %168, align 8, !insn.addr !1006
  br label %dec_label_pc_174b, !insn.addr !1006

dec_label_pc_174b:                                ; preds = %dec_label_pc_1744, %dec_label_pc_173b
  %172 = add i64 %r15.115.reload, %arg1, !insn.addr !1007
  store i64 %172, i64* %r15.2.reg2mem, !insn.addr !1007
  br label %dec_label_pc_174e, !insn.addr !1007

dec_label_pc_174e:                                ; preds = %dec_label_pc_174b, %dec_label_pc_1701
  %r15.2.reload = load i64, i64* %r15.2.reg2mem
  %173 = load i64, i64* %145, align 8, !insn.addr !1008
  %174 = icmp eq i64 %173, 0, !insn.addr !1009
  %175 = icmp ult i64 %173, %arg1, !insn.addr !1010
  %176 = icmp eq i1 %175, false, !insn.addr !1011
  %or.cond6 = or i1 %174, %176
  br i1 %or.cond6, label %dec_label_pc_1763, label %dec_label_pc_175c, !insn.addr !1012

dec_label_pc_175c:                                ; preds = %dec_label_pc_174e
  %177 = add i64 %173, %arg1, !insn.addr !1013
  store i64 %177, i64* %145, align 8, !insn.addr !1014
  br label %dec_label_pc_1763, !insn.addr !1014

dec_label_pc_1763:                                ; preds = %dec_label_pc_175c, %dec_label_pc_174e
  %178 = load i64, i64* %133, align 8, !insn.addr !1015
  %179 = icmp eq i64 %178, 0, !insn.addr !1016
  br i1 %179, label %dec_label_pc_1787, label %dec_label_pc_176c, !insn.addr !1017

dec_label_pc_176c:                                ; preds = %dec_label_pc_1763
  %180 = call i64 @.Lparse_bcj.0(i64 %arg2, i64 %178, i64 -1, i64 4, i64 %61), !insn.addr !1018
  %181 = trunc i64 %180 to i32, !insn.addr !1019
  %182 = icmp eq i32 %181, 0, !insn.addr !1019
  store i64 0, i64* %merge.reg2mem, !insn.addr !1020
  br i1 %182, label %dec_label_pc_1556, label %dec_label_pc_1787, !insn.addr !1020

dec_label_pc_1787:                                ; preds = %dec_label_pc_176c, %dec_label_pc_1763
  %183 = load i64, i64* %137, align 8, !insn.addr !1021
  %184 = icmp eq i64 %183, 0, !insn.addr !1022
  br i1 %184, label %dec_label_pc_17a8, label %dec_label_pc_1790, !insn.addr !1023

dec_label_pc_1790:                                ; preds = %dec_label_pc_1787
  %185 = call i64 @.Lparse_bcj.0(i64 %arg2, i64 %183, i64 -1, i64 4, i64 %61), !insn.addr !1024
  %186 = trunc i64 %185 to i32, !insn.addr !1025
  %187 = icmp eq i32 %186, 0, !insn.addr !1025
  store i64 0, i64* %merge.reg2mem, !insn.addr !1026
  br i1 %187, label %dec_label_pc_1556, label %dec_label_pc_17a8, !insn.addr !1026

dec_label_pc_17a8:                                ; preds = %dec_label_pc_1790, %dec_label_pc_1787
  %188 = load i64, i64* %141, align 8, !insn.addr !1027
  %189 = icmp eq i64 %188, 0, !insn.addr !1028
  br i1 %189, label %dec_label_pc_17cc, label %dec_label_pc_17b4, !insn.addr !1029

dec_label_pc_17b4:                                ; preds = %dec_label_pc_17a8
  %190 = call i64 @.Lparse_bcj.0(i64 %arg2, i64 %188, i64 -1, i64 4, i64 %61), !insn.addr !1030
  %191 = trunc i64 %190 to i32, !insn.addr !1031
  %192 = icmp eq i32 %191, 0, !insn.addr !1031
  store i64 0, i64* %merge.reg2mem, !insn.addr !1032
  br i1 %192, label %dec_label_pc_1556, label %dec_label_pc_17cc, !insn.addr !1032

dec_label_pc_17cc:                                ; preds = %dec_label_pc_17b4, %dec_label_pc_17a8
  %193 = load i64, i64* %145, align 8, !insn.addr !1033
  %194 = icmp eq i64 %193, 0, !insn.addr !1034
  br i1 %194, label %dec_label_pc_17ef, label %dec_label_pc_17d5, !insn.addr !1035

dec_label_pc_17d5:                                ; preds = %dec_label_pc_17cc
  %195 = add i64 %arg2, 104, !insn.addr !1036
  %196 = inttoptr i64 %195 to i64*, !insn.addr !1036
  %197 = load i64, i64* %196, align 8, !insn.addr !1036
  %198 = mul i64 %197, 20, !insn.addr !1036
  %199 = call i64 @.Lparse_bcj.0(i64 %arg2, i64 %193, i64 %198, i64 4, i64 %61), !insn.addr !1037
  %200 = trunc i64 %199 to i32, !insn.addr !1038
  %201 = icmp eq i32 %200, 0, !insn.addr !1038
  store i64 0, i64* %merge.reg2mem, !insn.addr !1039
  br i1 %201, label %dec_label_pc_1556, label %dec_label_pc_17ef, !insn.addr !1039

dec_label_pc_17ef:                                ; preds = %dec_label_pc_17d5, %dec_label_pc_17cc
  %202 = inttoptr i64 %r15.2.reload to i32*, !insn.addr !1040
  %203 = load i32, i32* %202, align 4, !insn.addr !1040
  %204 = zext i32 %203 to i64, !insn.addr !1040
  %205 = add i64 %arg2, 216, !insn.addr !1041
  %206 = inttoptr i64 %205 to i32*, !insn.addr !1041
  store i32 %203, i32* %206, align 4, !insn.addr !1041
  %207 = add i64 %r15.2.reload, 8, !insn.addr !1042
  %208 = inttoptr i64 %207 to i32*, !insn.addr !1042
  %209 = load i32, i32* %208, align 4, !insn.addr !1042
  %210 = add i64 %r15.2.reload, 4, !insn.addr !1043
  %211 = inttoptr i64 %210 to i32*, !insn.addr !1043
  %212 = load i32, i32* %211, align 4, !insn.addr !1043
  %213 = add i32 %209, -1, !insn.addr !1044
  %214 = mul i32 %209, 2, !insn.addr !1045
  %215 = zext i32 %214 to i64, !insn.addr !1045
  %216 = add i64 %arg2, 220, !insn.addr !1046
  %217 = inttoptr i64 %216 to i32*, !insn.addr !1046
  store i32 %213, i32* %217, align 4, !insn.addr !1046
  %218 = add i64 %r15.2.reload, 16, !insn.addr !1047
  %219 = add i64 %r15.2.reload, 12, !insn.addr !1048
  %220 = inttoptr i64 %219 to i32*, !insn.addr !1048
  %221 = load i32, i32* %220, align 4, !insn.addr !1048
  %222 = add i64 %arg2, 232, !insn.addr !1049
  %223 = inttoptr i64 %222 to i64*, !insn.addr !1049
  store i64 %218, i64* %223, align 8, !insn.addr !1049
  %224 = mul i64 %215, 4, !insn.addr !1050
  %225 = add i64 %224, %218, !insn.addr !1050
  %226 = zext i32 %212 to i64, !insn.addr !1051
  %227 = sub nsw i64 %204, %226, !insn.addr !1052
  %228 = add i64 %arg2, 224, !insn.addr !1053
  %229 = inttoptr i64 %228 to i32*, !insn.addr !1053
  store i32 %221, i32* %229, align 4, !insn.addr !1053
  %230 = add i64 %arg2, 240, !insn.addr !1054
  %231 = inttoptr i64 %230 to i64*, !insn.addr !1054
  store i64 %225, i64* %231, align 8, !insn.addr !1054
  %232 = mul i64 %227, 4, !insn.addr !1055
  %233 = add i64 %225, %232, !insn.addr !1055
  %234 = add i64 %arg2, 248, !insn.addr !1056
  %235 = inttoptr i64 %234 to i64*, !insn.addr !1056
  store i64 %233, i64* %235, align 8, !insn.addr !1056
  store i64 1, i64* %merge.reg2mem, !insn.addr !1057
  br label %dec_label_pc_1556, !insn.addr !1057

; uselistorder directives
  uselistorder i64 %225, { 1, 0 }
  uselistorder i64 %r15.2.reload, { 3, 4, 1, 2, 0 }
  uselistorder i64* %145, { 1, 0, 2, 3, 4 }
  uselistorder i64 %r15.115.reload, { 2, 0, 1 }
  uselistorder i64 %100, { 1, 0 }
  uselistorder i64 %rdi.0.reload, { 1, 2, 0 }
  uselistorder i64 %r15.0.reload, { 1, 2, 0 }
  uselistorder i64 %.reload, { 3, 1, 5, 6, 0, 8, 4, 2, 7, 9, 10 }
  uselistorder i64 %rax.02152.reload, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i64 %rdi.12450.reload, { 7, 8, 5, 6, 3, 4, 1, 2, 0 }
  uselistorder i64 %r15.12549.reload, { 7, 8, 6, 4, 5, 2, 3, 1, 0 }
  uselistorder i8* %84, { 1, 0, 2, 3 }
  uselistorder i32 %72, { 1, 0, 2 }
  uselistorder i64 %68, { 1, 0, 2, 3 }
  uselistorder i64 %64, { 1, 0 }
  uselistorder i64 %61, { 3, 2, 1, 0, 6, 5, 4 }
  uselistorder i64 %r9.1.reload, { 1, 0, 2, 3 }
  uselistorder i64 %storemerge31.reload, { 4, 1, 2, 0, 3 }
  uselistorder i64 %r9.028.reload, { 1, 2, 0, 4, 3 }
  uselistorder i64 %rcx.027.reload, { 1, 2, 0 }
  uselistorder i64 %11, { 1, 0, 2 }
  uselistorder i16 %10, { 1, 0, 2 }
  uselistorder i64* %storemerge31.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r13.029.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r9.028.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.027.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.1.reg2mem, { 0, 3, 4, 2, 1 }
  uselistorder i64* %r9.1.reg2mem, { 0, 3, 4, 2, 1 }
  uselistorder i64* %.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.02152.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.22351.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdi.12450.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r15.12549.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdi.0.reg2mem, { 9, 10, 8, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i64* %r15.0.reg2mem, { 9, 10, 8, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i64* %merge.reg2mem, { 18, 17, 16, 15, 14, 13, 12, 7, 8, 9, 3, 0, 2, 4, 11, 10, 1, 5, 6 }
  uselistorder i64* %rdi.118.reg2mem, { 0, 3, 1, 2 }
  uselistorder i64* %r15.115.reg2mem, { 0, 3, 1, 2 }
  uselistorder i64 %arg2, { 14, 15, 16, 17, 18, 19, 13, 12, 11, 10, 9, 8, 20, 21, 23, 22, 24, 25, 26, 6, 7, 4, 5, 29, 27, 28, 1, 3, 2, 30, 31, 32, 33, 0 }
  uselistorder i64 %arg1, { 0, 6, 1, 2, 3, 4, 7, 8, 5, 11, 10, 9, 12 }
  uselistorder label %dec_label_pc_1642, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1556, { 6, 7, 8, 9, 10, 11, 12, 17, 16, 15, 3, 1, 2, 13, 14, 0, 4, 5 }
  uselistorder label %dec_label_pc_152b, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder label %dec_label_pc_14e9, { 1, 0 }
  uselistorder label %dec_label_pc_1416, { 1, 0 }
}

define i64 @.Lcrc_init.0(i64 %arg1, i64 %arg2, i32 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1860:
  %0 = alloca i64
  %r12.0.reg2mem = alloca i64, !insn.addr !1058
  %stack_var_-52.07.reg2mem = alloca i32, !insn.addr !1058
  %r13.08.reg2mem = alloca i64, !insn.addr !1058
  %stack_var_-64.0.reg2mem = alloca i64, !insn.addr !1058
  %storemerge9.reg2mem = alloca i64, !insn.addr !1058
  %1 = load i64, i64* %0
  %2 = sext i32 %arg3 to i64, !insn.addr !1059
  %3 = call i64 @.Llzma_index_iter_rewind.cold(i64 88, i64 15, i64 3, i32 0, i64 %2), !insn.addr !1059
  %4 = trunc i64 %3 to i32, !insn.addr !1060
  %5 = icmp eq i32 %4, 0, !insn.addr !1060
  %6 = icmp eq i1 %5, false, !insn.addr !1061
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1061
  br i1 %6, label %dec_label_pc_189e, label %dec_label_pc_1ac5, !insn.addr !1061

dec_label_pc_189e:                                ; preds = %dec_label_pc_1860
  %7 = icmp eq i32 %arg3, 0, !insn.addr !1062
  br i1 %7, label %dec_label_pc_18b2, label %dec_label_pc_18a5, !insn.addr !1063

dec_label_pc_18a5:                                ; preds = %dec_label_pc_189e
  %8 = add i64 %arg1, 208, !insn.addr !1064
  %9 = inttoptr i64 %8 to i8*, !insn.addr !1064
  %10 = load i8, i8* %9, align 1, !insn.addr !1064
  %11 = and i8 %10, 24, !insn.addr !1065
  %12 = icmp eq i8 %11, 24, !insn.addr !1066
  %13 = icmp eq i1 %12, false, !insn.addr !1067
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1067
  br i1 %13, label %dec_label_pc_1ac5, label %dec_label_pc_18b2, !insn.addr !1067

dec_label_pc_18b2:                                ; preds = %dec_label_pc_18a5, %dec_label_pc_189e
  %14 = add i64 %arg1, 216, !insn.addr !1068
  %15 = inttoptr i64 %14 to i32*, !insn.addr !1068
  %16 = load i32, i32* %15, align 4, !insn.addr !1068
  %17 = icmp ne i32 %16, 0, !insn.addr !1068
  %18 = icmp eq i1 %17, false, !insn.addr !1069
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1069
  br i1 %18, label %dec_label_pc_1ac5, label %dec_label_pc_18be.lr.ph, !insn.addr !1069

dec_label_pc_18be.lr.ph:                          ; preds = %dec_label_pc_18b2
  %19 = add i64 %arg1, 240, !insn.addr !1070
  %20 = inttoptr i64 %19 to i64*, !insn.addr !1070
  %21 = add i64 %arg1, 248
  %22 = inttoptr i64 %21 to i64*
  %23 = add i64 %arg1, 56
  %24 = inttoptr i64 %23 to i64*
  %25 = add i64 %arg1, 48
  %26 = inttoptr i64 %25 to i64*
  %27 = trunc i64 %arg2 to i32
  %28 = add i64 %arg1, 112
  %29 = inttoptr i64 %28 to i64*
  %30 = add i64 %arg1, 208
  %31 = inttoptr i64 %30 to i8*
  %32 = add i64 %arg1, 96
  %33 = inttoptr i64 %32 to i64*
  %34 = add i64 %arg1, 104
  %35 = inttoptr i64 %34 to i64*
  store i64 0, i64* %storemerge9.reg2mem
  br label %dec_label_pc_18be

dec_label_pc_18be:                                ; preds = %dec_label_pc_18be.lr.ph, %dec_label_pc_1963
  %storemerge9.reload = load i64, i64* %storemerge9.reg2mem
  %36 = load i64, i64* %20, align 8, !insn.addr !1070
  %37 = mul i64 %storemerge9.reload, 4, !insn.addr !1071
  %38 = add i64 %36, %37, !insn.addr !1072
  %39 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %38, i64 4, i64 4, i64 %1), !insn.addr !1073
  %40 = trunc i64 %39 to i32, !insn.addr !1074
  %41 = icmp eq i32 %40, 0, !insn.addr !1074
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1075
  br i1 %41, label %dec_label_pc_1ac5, label %dec_label_pc_18e5, !insn.addr !1075

dec_label_pc_18e5:                                ; preds = %dec_label_pc_18be
  %42 = inttoptr i64 %38 to i32*, !insn.addr !1076
  %43 = load i32, i32* %42, align 4, !insn.addr !1076
  %44 = zext i32 %43 to i64, !insn.addr !1076
  %45 = load i64, i64* %22, align 8, !insn.addr !1077
  %46 = mul i64 %44, 4, !insn.addr !1078
  %47 = add i64 %46, %45, !insn.addr !1078
  %48 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %47, i64 8, i64 4, i64 %1), !insn.addr !1079
  %49 = trunc i64 %48 to i32, !insn.addr !1080
  %50 = icmp eq i32 %49, 0, !insn.addr !1080
  store i64 %47, i64* %stack_var_-64.0.reg2mem, !insn.addr !1081
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1081
  br i1 %50, label %dec_label_pc_1ac5, label %dec_label_pc_1912, !insn.addr !1081

dec_label_pc_1912:                                ; preds = %dec_label_pc_18e5, %dec_label_pc_1952
  %stack_var_-64.0.reload = load i64, i64* %stack_var_-64.0.reg2mem
  %51 = load i64, i64* %22, align 8, !insn.addr !1082
  %52 = sub i64 %stack_var_-64.0.reload, %51, !insn.addr !1082
  %53 = udiv i64 %52, 4
  %54 = and i64 %53, 4294967295, !insn.addr !1083
  %narrow = mul nuw nsw i64 %54, 24
  %55 = load i64, i64* %24, align 8, !insn.addr !1084
  %56 = add i64 %narrow, %55, !insn.addr !1084
  %57 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %56, i64 ptrtoint (i32** @global_var_18 to i64), i64 4, i64 %1), !insn.addr !1085
  %58 = trunc i64 %57 to i32, !insn.addr !1086
  %59 = icmp eq i32 %58, 0, !insn.addr !1086
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1087
  br i1 %59, label %dec_label_pc_1ac5, label %dec_label_pc_194a, !insn.addr !1087

dec_label_pc_194a:                                ; preds = %dec_label_pc_1912
  %60 = add i64 %56, 8, !insn.addr !1088
  %61 = inttoptr i64 %60 to i64*, !insn.addr !1088
  %62 = load i64, i64* %61, align 8, !insn.addr !1088
  %63 = icmp eq i64 %62, 0, !insn.addr !1088
  %64 = icmp eq i1 %63, false, !insn.addr !1089
  br i1 %64, label %dec_label_pc_196b, label %dec_label_pc_1952, !insn.addr !1089

dec_label_pc_1952:                                ; preds = %dec_label_pc_1a61, %dec_label_pc_1a20, %dec_label_pc_1a3d, %dec_label_pc_1a55, %dec_label_pc_1a6a, %dec_label_pc_1a8e, %dec_label_pc_19fe, %dec_label_pc_19dd, %dec_label_pc_199c, %dec_label_pc_196b, %dec_label_pc_194a
  %65 = add i64 %stack_var_-64.0.reload, 4, !insn.addr !1090
  %66 = inttoptr i64 %stack_var_-64.0.reload to i8*, !insn.addr !1091
  %67 = load i8, i8* %66, align 1, !insn.addr !1091
  %68 = urem i8 %67, 2, !insn.addr !1091
  %69 = icmp eq i8 %68, 0, !insn.addr !1091
  store i64 %65, i64* %stack_var_-64.0.reg2mem, !insn.addr !1092
  br i1 %69, label %dec_label_pc_1912, label %dec_label_pc_1963, !insn.addr !1092

dec_label_pc_1963:                                ; preds = %dec_label_pc_1952
  %70 = add nuw nsw i64 %storemerge9.reload, 1, !insn.addr !1093
  %71 = and i64 %70, 4294967295, !insn.addr !1093
  %72 = trunc i64 %70 to i32, !insn.addr !1068
  %73 = load i32, i32* %15, align 4, !insn.addr !1068
  %74 = icmp ugt i32 %73, %72, !insn.addr !1068
  %75 = icmp eq i1 %74, false, !insn.addr !1069
  store i64 %71, i64* %storemerge9.reg2mem, !insn.addr !1069
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1069
  br i1 %75, label %dec_label_pc_1ac5, label %dec_label_pc_18be, !insn.addr !1069

dec_label_pc_196b:                                ; preds = %dec_label_pc_194a
  %76 = add i64 %56, 6, !insn.addr !1094
  %77 = inttoptr i64 %76 to i16*, !insn.addr !1094
  %78 = load i16, i16* %77, align 2, !insn.addr !1094
  %79 = icmp eq i16 %78, 0, !insn.addr !1094
  br i1 %79, label %dec_label_pc_1952, label %dec_label_pc_1974, !insn.addr !1095

dec_label_pc_1974:                                ; preds = %dec_label_pc_196b
  %80 = inttoptr i64 %56 to i32*, !insn.addr !1096
  %81 = load i32, i32* %80, align 4, !insn.addr !1096
  %82 = zext i32 %81 to i64, !insn.addr !1096
  %83 = load i64, i64* %26, align 8, !insn.addr !1097
  %84 = add i64 %83, %82, !insn.addr !1097
  %85 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %84, i64 1, i64 4, i64 %1), !insn.addr !1098
  %86 = trunc i64 %85 to i32, !insn.addr !1099
  %87 = icmp eq i32 %86, 0, !insn.addr !1099
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1100
  br i1 %87, label %dec_label_pc_1ac5, label %dec_label_pc_199c, !insn.addr !1100

dec_label_pc_199c:                                ; preds = %dec_label_pc_1974
  %88 = call i64 @.Lsimple_coder_update.0(i64 %84, i32 0, i64 1, i64 4), !insn.addr !1101
  %89 = trunc i64 %88 to i32, !insn.addr !1102
  %90 = icmp eq i32 %89, %27, !insn.addr !1102
  %91 = icmp eq i1 %90, false, !insn.addr !1103
  br i1 %91, label %dec_label_pc_1952, label %dec_label_pc_19ae, !insn.addr !1103

dec_label_pc_19ae:                                ; preds = %dec_label_pc_199c
  store i64 %56, i64* %r12.0.reg2mem, !insn.addr !1104
  br i1 %7, label %dec_label_pc_1ac5, label %dec_label_pc_19b9, !insn.addr !1104

dec_label_pc_19b9:                                ; preds = %dec_label_pc_19ae
  %92 = mul i64 %54, 2, !insn.addr !1105
  %93 = load i64, i64* %29, align 8, !insn.addr !1106
  %94 = add i64 %93, %92, !insn.addr !1106
  %95 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %94, i64 2, i64 4, i64 %1), !insn.addr !1107
  %96 = trunc i64 %95 to i32, !insn.addr !1108
  %97 = icmp eq i32 %96, 0, !insn.addr !1108
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !1109
  br i1 %97, label %dec_label_pc_1ac5, label %dec_label_pc_19dd, !insn.addr !1109

dec_label_pc_19dd:                                ; preds = %dec_label_pc_19b9
  %98 = load i8, i8* %31, align 1, !insn.addr !1110
  %99 = inttoptr i64 %94 to i16*, !insn.addr !1111
  %100 = load i16, i16* %99, align 2, !insn.addr !1111
  %101 = and i8 %98, ptrtoint (i32** @global_var_18 to i8), !insn.addr !1112
  %102 = icmp eq i8 %101, 24, !insn.addr !1113
  %103 = icmp eq i1 %102, false, !insn.addr !1114
  %104 = and i16 %100, 32766
  %105 = icmp eq i16 %104, 0, !insn.addr !1115
  %or.cond = or i1 %103, %105
  br i1 %or.cond, label %dec_label_pc_1952, label %dec_label_pc_19fe, !insn.addr !1114

dec_label_pc_19fe:                                ; preds = %dec_label_pc_19dd
  %106 = load i64, i64* %35, align 8, !insn.addr !1116
  %107 = icmp ne i64 %106, 0, !insn.addr !1116
  %108 = icmp eq i1 %107, false, !insn.addr !1117
  br i1 %108, label %dec_label_pc_1952, label %dec_label_pc_1a20.lr.ph, !insn.addr !1117

dec_label_pc_1a20.lr.ph:                          ; preds = %dec_label_pc_19fe
  %109 = urem i16 %100, -32768
  %110 = load i64, i64* %33, align 8, !insn.addr !1118
  store i64 %110, i64* %r13.08.reg2mem
  store i32 0, i32* %stack_var_-52.07.reg2mem
  br label %dec_label_pc_1a20

dec_label_pc_1a20:                                ; preds = %dec_label_pc_1a20.lr.ph, %dec_label_pc_1a61
  %r13.08.reload = load i64, i64* %r13.08.reg2mem
  %111 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %r13.08.reload, i64 20, i64 4, i64 %1), !insn.addr !1119
  %112 = trunc i64 %111 to i32, !insn.addr !1120
  %113 = icmp eq i32 %112, 0, !insn.addr !1120
  br i1 %113, label %dec_label_pc_1952, label %dec_label_pc_1a3d, !insn.addr !1121

dec_label_pc_1a3d:                                ; preds = %dec_label_pc_1a20
  %114 = inttoptr i64 %r13.08.reload to i16*, !insn.addr !1122
  %115 = load i16, i16* %114, align 2, !insn.addr !1122
  %116 = icmp eq i16 %115, 1, !insn.addr !1122
  %117 = icmp eq i1 %116, false, !insn.addr !1123
  br i1 %117, label %dec_label_pc_1952, label %dec_label_pc_1a49, !insn.addr !1123

dec_label_pc_1a49:                                ; preds = %dec_label_pc_1a3d
  %stack_var_-52.07.reload = load i32, i32* %stack_var_-52.07.reg2mem
  %118 = add i64 %r13.08.reload, 4, !insn.addr !1124
  %119 = inttoptr i64 %118 to i16*, !insn.addr !1124
  %120 = load i16, i16* %119, align 2, !insn.addr !1124
  %121 = icmp eq i16 %109, %120, !insn.addr !1124
  br i1 %121, label %dec_label_pc_1a6a, label %dec_label_pc_1a55, !insn.addr !1125

dec_label_pc_1a55:                                ; preds = %dec_label_pc_1ab5, %dec_label_pc_1a49
  %122 = add i64 %r13.08.reload, 16, !insn.addr !1126
  %123 = inttoptr i64 %122 to i32*, !insn.addr !1126
  %124 = load i32, i32* %123, align 4, !insn.addr !1126
  %125 = icmp eq i32 %124, 0, !insn.addr !1127
  br i1 %125, label %dec_label_pc_1952, label %dec_label_pc_1a61, !insn.addr !1128

dec_label_pc_1a61:                                ; preds = %dec_label_pc_1a55
  %126 = zext i32 %124 to i64, !insn.addr !1126
  %127 = add i32 %stack_var_-52.07.reload, 1, !insn.addr !1129
  %128 = add i64 %r13.08.reload, %126, !insn.addr !1130
  %129 = zext i32 %127 to i64, !insn.addr !1131
  %130 = load i64, i64* %35, align 8, !insn.addr !1116
  %131 = icmp ugt i64 %130, %129, !insn.addr !1116
  %132 = icmp eq i1 %131, false, !insn.addr !1117
  store i64 %128, i64* %r13.08.reg2mem, !insn.addr !1117
  store i32 %127, i32* %stack_var_-52.07.reg2mem, !insn.addr !1117
  br i1 %132, label %dec_label_pc_1952, label %dec_label_pc_1a20, !insn.addr !1117

dec_label_pc_1a6a:                                ; preds = %dec_label_pc_1a49
  %133 = add i64 %r13.08.reload, 12, !insn.addr !1132
  %134 = inttoptr i64 %133 to i32*, !insn.addr !1132
  %135 = load i32, i32* %134, align 4, !insn.addr !1132
  %136 = zext i32 %135 to i64, !insn.addr !1132
  %137 = add i64 %r13.08.reload, %136, !insn.addr !1133
  %138 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %137, i64 8, i64 4, i64 %1), !insn.addr !1134
  %139 = trunc i64 %138 to i32, !insn.addr !1135
  %140 = icmp eq i32 %139, 0, !insn.addr !1135
  br i1 %140, label %dec_label_pc_1952, label %dec_label_pc_1a8e, !insn.addr !1136

dec_label_pc_1a8e:                                ; preds = %dec_label_pc_1a6a
  %141 = inttoptr i64 %137 to i32*, !insn.addr !1137
  %142 = load i32, i32* %141, align 4, !insn.addr !1137
  %143 = zext i32 %142 to i64, !insn.addr !1137
  %144 = load i64, i64* %26, align 8, !insn.addr !1138
  %145 = add i64 %144, %143, !insn.addr !1138
  %146 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %145, i64 1, i64 4, i64 %1), !insn.addr !1139
  %147 = trunc i64 %146 to i32, !insn.addr !1140
  %148 = icmp eq i32 %147, 0, !insn.addr !1140
  br i1 %148, label %dec_label_pc_1952, label %dec_label_pc_1ab5, !insn.addr !1141

dec_label_pc_1ab5:                                ; preds = %dec_label_pc_1a8e
  %149 = call i64 @.Lsimple_coder_update.0(i64 %145, i32 0, i64 1, i64 4), !insn.addr !1142
  %150 = trunc i64 %149 to i32, !insn.addr !1143
  %151 = icmp eq i32 %150, %arg3, !insn.addr !1143
  %152 = icmp eq i1 %151, false, !insn.addr !1144
  store i64 %56, i64* %r12.0.reg2mem, !insn.addr !1144
  br i1 %152, label %dec_label_pc_1a55, label %dec_label_pc_1ac5, !insn.addr !1144

dec_label_pc_1ac5:                                ; preds = %dec_label_pc_18e5, %dec_label_pc_18be, %dec_label_pc_1963, %dec_label_pc_1912, %dec_label_pc_1974, %dec_label_pc_19b9, %dec_label_pc_19ae, %dec_label_pc_1ab5, %dec_label_pc_18b2, %dec_label_pc_1860, %dec_label_pc_18a5
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  ret i64 %r12.0.reload, !insn.addr !1145

; uselistorder directives
  uselistorder i32 %124, { 1, 0 }
  uselistorder i64 %r13.08.reload, { 6, 3, 5, 0, 2, 1, 4 }
  uselistorder i64 %56, { 1, 0, 4, 3, 2, 5 }
  uselistorder i64 %stack_var_-64.0.reload, { 1, 2, 0 }
  uselistorder i64* %35, { 1, 0 }
  uselistorder i32* %15, { 1, 0 }
  uselistorder i64 %1, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i64* %storemerge9.reg2mem, { 1, 0, 2 }
  uselistorder i64* %stack_var_-64.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r13.08.reg2mem, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52.07.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r12.0.reg2mem, { 0, 8, 6, 7, 5, 3, 4, 1, 2, 9, 11, 10 }
  uselistorder i64 %arg1, { 1, 2, 4, 8, 10, 12, 14, 16, 3, 5, 6, 7, 9, 11, 13, 17, 15, 0 }
  uselistorder label %dec_label_pc_1ac5, { 7, 5, 6, 4, 2, 3, 0, 1, 8, 10, 9 }
  uselistorder label %dec_label_pc_1a20, { 1, 0 }
  uselistorder label %dec_label_pc_1952, { 5, 4, 0, 3, 2, 1, 6, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_1912, { 1, 0 }
  uselistorder label %dec_label_pc_18be, { 1, 0 }
}

define i64 @.Lcrc64_generic.0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1ae0:
  %0 = alloca i64
  %1 = load i64, i64* %0
  %2 = call i64 @.Lcrc_init.0(i64 %arg1, i64 %arg2, i32 0, i64 %1), !insn.addr !1146
  %3 = icmp eq i64 %2, 0, !insn.addr !1147
  br i1 %3, label %dec_label_pc_1b0e, label %dec_label_pc_1af4, !insn.addr !1148

dec_label_pc_1af4:                                ; preds = %dec_label_pc_1ae0
  %4 = add i64 %2, 8, !insn.addr !1149
  %5 = inttoptr i64 %4 to i64*, !insn.addr !1149
  %6 = load i64, i64* %5, align 8, !insn.addr !1149
  %7 = icmp eq i64 %6, 0, !insn.addr !1150
  br i1 %7, label %dec_label_pc_1b0e, label %dec_label_pc_1afd, !insn.addr !1151

dec_label_pc_1afd:                                ; preds = %dec_label_pc_1af4
  %8 = add i64 %2, 6, !insn.addr !1152
  %9 = inttoptr i64 %8 to i16*, !insn.addr !1152
  %10 = load i16, i16* %9, align 2, !insn.addr !1152
  %11 = icmp eq i16 %10, 0, !insn.addr !1152
  %12 = add i64 %6, %arg1
  %spec.select = select i1 %11, i64 0, i64 %12
  ret i64 %spec.select

dec_label_pc_1b0e:                                ; preds = %dec_label_pc_1af4, %dec_label_pc_1ae0
  ret i64 0, !insn.addr !1153
}

define i64 @function_1b10(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1b10:
  %rcx.1.reg2mem = alloca i64, !insn.addr !1154
  %rcx.0.in.reg2mem = alloca i64, !insn.addr !1154
  %0 = icmp ult i64 %arg2, %arg1, !insn.addr !1155
  %1 = icmp eq i1 %0, false, !insn.addr !1156
  br i1 %1, label %dec_label_pc_1b3c, label %dec_label_pc_1b18, !insn.addr !1156

dec_label_pc_1b18:                                ; preds = %dec_label_pc_1b10
  %2 = add i64 %arg3, %arg2, !insn.addr !1157
  %3 = icmp ugt i64 %2, %arg1, !insn.addr !1158
  %4 = icmp eq i1 %3, false, !insn.addr !1159
  br i1 %4, label %dec_label_pc_1b3c, label %dec_label_pc_1b21, !insn.addr !1159

dec_label_pc_1b21:                                ; preds = %dec_label_pc_1b18
  %5 = icmp eq i64 %arg3, 0, !insn.addr !1160
  store i64 %arg3, i64* %rcx.0.in.reg2mem, !insn.addr !1161
  br i1 %5, label %dec_label_pc_1b3b, label %dec_label_pc_1b2a, !insn.addr !1161

dec_label_pc_1b2a:                                ; preds = %dec_label_pc_1b21, %dec_label_pc_1b2a
  %rcx.0.in.reload = load i64, i64* %rcx.0.in.reg2mem
  %rcx.0 = add i64 %rcx.0.in.reload, -1
  %6 = add i64 %rcx.0, %arg2, !insn.addr !1162
  %7 = inttoptr i64 %6 to i8*, !insn.addr !1162
  %8 = load i8, i8* %7, align 1, !insn.addr !1162
  %9 = add i64 %rcx.0, %arg1, !insn.addr !1163
  %10 = inttoptr i64 %9 to i8*, !insn.addr !1163
  store i8 %8, i8* %10, align 1, !insn.addr !1163
  %11 = icmp eq i64 %rcx.0, 0, !insn.addr !1164
  %12 = icmp eq i1 %11, false, !insn.addr !1165
  store i64 %rcx.0, i64* %rcx.0.in.reg2mem, !insn.addr !1165
  br i1 %12, label %dec_label_pc_1b2a, label %dec_label_pc_1b3b, !insn.addr !1165

dec_label_pc_1b3b:                                ; preds = %dec_label_pc_1b2a, %dec_label_pc_1b46, %dec_label_pc_1b3c, %dec_label_pc_1b21
  ret i64 %arg1, !insn.addr !1166

dec_label_pc_1b3c:                                ; preds = %dec_label_pc_1b18, %dec_label_pc_1b10
  %13 = icmp eq i64 %arg3, 0, !insn.addr !1167
  store i64 0, i64* %rcx.1.reg2mem, !insn.addr !1168
  br i1 %13, label %dec_label_pc_1b3b, label %dec_label_pc_1b46, !insn.addr !1168

dec_label_pc_1b46:                                ; preds = %dec_label_pc_1b3c, %dec_label_pc_1b46
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %14 = add i64 %rcx.1.reload, %arg2, !insn.addr !1169
  %15 = inttoptr i64 %14 to i8*, !insn.addr !1169
  %16 = load i8, i8* %15, align 1, !insn.addr !1169
  %17 = add i64 %rcx.1.reload, %arg1, !insn.addr !1170
  %18 = inttoptr i64 %17 to i8*, !insn.addr !1170
  store i8 %16, i8* %18, align 1, !insn.addr !1170
  %19 = add i64 %rcx.1.reload, 1, !insn.addr !1171
  %20 = icmp eq i64 %19, %arg3, !insn.addr !1172
  %21 = icmp eq i1 %20, false, !insn.addr !1173
  store i64 %19, i64* %rcx.1.reg2mem, !insn.addr !1173
  br i1 %21, label %dec_label_pc_1b46, label %dec_label_pc_1b3b, !insn.addr !1173

; uselistorder directives
  uselistorder i64 %rcx.1.reload, { 0, 2, 1 }
  uselistorder i64 %rcx.0, { 0, 3, 1, 2 }
  uselistorder i64* %rcx.0.in.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rcx.1.reg2mem, { 2, 0, 1 }
  uselistorder i64 %arg3, { 2, 4, 0, 3, 1 }
  uselistorder i64 %arg1, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_1b46, { 1, 0 }
  uselistorder label %dec_label_pc_1b3b, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_1b2a, { 1, 0 }
}

define i64 @.Linit_pric_table.part.1(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1b60:
  %0 = and i64 %arg3, 4294967295, !insn.addr !1174
  %1 = call i64 @.Lcrc64_generic.0(i64 %arg1, i64 %0, i64 %arg3), !insn.addr !1175
  ret i64 %1, !insn.addr !1175

; uselistorder directives
  uselistorder i64 %arg3, { 1, 0 }
}

define i64 @.Lstream_encoder_update.0(i64 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1b70:
  %rax.2.reg2mem = alloca i64, !insn.addr !1176
  %rax.1.reg2mem = alloca i64, !insn.addr !1176
  %rdx.1.lcssa.reg2mem = alloca i64, !insn.addr !1176
  %rax.0.reg2mem = alloca i64, !insn.addr !1176
  %rdx.13.reg2mem = alloca i64, !insn.addr !1176
  %0 = add i64 %arg1, 208, !insn.addr !1177
  %1 = inttoptr i64 %0 to i8*, !insn.addr !1177
  %2 = load i8, i8* %1, align 1, !insn.addr !1177
  %3 = and i8 %2, 2, !insn.addr !1177
  %4 = icmp eq i8 %3, 0, !insn.addr !1177
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1178
  br i1 %4, label %dec_label_pc_1c03, label %dec_label_pc_1b81, !insn.addr !1178

dec_label_pc_1b81:                                ; preds = %dec_label_pc_1b70
  %5 = add i64 %arg1, 128, !insn.addr !1179
  %6 = inttoptr i64 %5 to i32*, !insn.addr !1179
  %7 = load i32, i32* %6, align 4, !insn.addr !1179
  %8 = icmp eq i32 %7, 0, !insn.addr !1180
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1181
  br i1 %8, label %dec_label_pc_1c03, label %dec_label_pc_1b8b, !insn.addr !1181

dec_label_pc_1b8b:                                ; preds = %dec_label_pc_1b81
  %9 = sext i32 %arg5 to i64
  %10 = zext i32 %7 to i64, !insn.addr !1179
  %11 = icmp eq i32 %arg5, 0, !insn.addr !1182
  %12 = icmp ult i64 %9, %10, !insn.addr !1183
  %13 = icmp eq i1 %12, false, !insn.addr !1184
  store i64 %9, i64* %rdx.1.lcssa.reg2mem, !insn.addr !1184
  br i1 %13, label %dec_label_pc_1bec, label %dec_label_pc_1bb1.lr.ph, !insn.addr !1184

dec_label_pc_1bb1.lr.ph:                          ; preds = %dec_label_pc_1b8b
  %14 = sext i32 %arg4 to i64
  %15 = sext i32 %arg3 to i64
  %16 = sub i64 %arg2, %arg1, !insn.addr !1185
  %17 = add i64 %arg1, 120, !insn.addr !1186
  %18 = inttoptr i64 %17 to i64*, !insn.addr !1186
  %19 = load i64, i64* %18, align 8, !insn.addr !1186
  %20 = icmp eq i64 %arg2, 0
  %21 = icmp eq i1 %20, false
  %22 = icmp eq i32 %arg3, 0
  store i64 %9, i64* %rdx.13.reg2mem
  br label %dec_label_pc_1bb1

dec_label_pc_1bb1:                                ; preds = %dec_label_pc_1bb1.lr.ph, %dec_label_pc_1be7
  %rdx.13.reload = load i64, i64* %rdx.13.reg2mem
  %23 = mul i64 %rdx.13.reload, ptrtoint (i32** @global_var_18 to i64), !insn.addr !1187
  %24 = add i64 %23, %19, !insn.addr !1186
  %25 = add i64 %24, 8, !insn.addr !1188
  %26 = inttoptr i64 %25 to i32*, !insn.addr !1188
  %27 = load i32, i32* %26, align 4, !insn.addr !1188
  %28 = icmp eq i32 %27, 8, !insn.addr !1188
  %29 = icmp eq i1 %28, false, !insn.addr !1189
  br i1 %29, label %dec_label_pc_1be7, label %dec_label_pc_1bbf, !insn.addr !1189

dec_label_pc_1bbf:                                ; preds = %dec_label_pc_1bb1
  %30 = add i64 %24, 16, !insn.addr !1190
  %31 = inttoptr i64 %30 to i64*, !insn.addr !1190
  %32 = load i64, i64* %31, align 8, !insn.addr !1190
  br i1 %21, label %dec_label_pc_1bcd, label %dec_label_pc_1bc8, !insn.addr !1191

dec_label_pc_1bc8:                                ; preds = %dec_label_pc_1bbf
  %33 = add i64 %32, %arg1, !insn.addr !1192
  store i64 %33, i64* %rax.0.reg2mem, !insn.addr !1193
  br label %dec_label_pc_1bdd, !insn.addr !1193

dec_label_pc_1bcd:                                ; preds = %dec_label_pc_1bbf
  %34 = icmp eq i64 %32, %16, !insn.addr !1194
  %35 = icmp eq i1 %34, false, !insn.addr !1195
  br i1 %35, label %dec_label_pc_1be7, label %dec_label_pc_1bd2, !insn.addr !1195

dec_label_pc_1bd2:                                ; preds = %dec_label_pc_1bcd
  %36 = inttoptr i64 %24 to i64*, !insn.addr !1196
  %37 = load i64, i64* %36, align 8, !insn.addr !1196
  %38 = add i64 %37, %arg1, !insn.addr !1197
  store i64 %38, i64* %rax.0.reg2mem, !insn.addr !1198
  store i64 %38, i64* %rax.1.reg2mem, !insn.addr !1198
  br i1 %22, label %dec_label_pc_1bf8, label %dec_label_pc_1bdd, !insn.addr !1198

dec_label_pc_1bdd:                                ; preds = %dec_label_pc_1bd2, %dec_label_pc_1bc8
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %39 = icmp uge i64 %rax.0.reload, %15, !insn.addr !1199
  %40 = icmp ugt i64 %rax.0.reload, %14, !insn.addr !1200
  %41 = icmp eq i1 %40, false, !insn.addr !1201
  %or.cond = icmp eq i1 %39, %41
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !1202
  br i1 %or.cond, label %dec_label_pc_1bf8, label %dec_label_pc_1be7, !insn.addr !1202

dec_label_pc_1be7:                                ; preds = %dec_label_pc_1bdd, %dec_label_pc_1bcd, %dec_label_pc_1bb1
  %42 = add i64 %rdx.13.reload, 1, !insn.addr !1203
  %43 = icmp ult i64 %42, %10, !insn.addr !1183
  %44 = icmp eq i1 %43, false, !insn.addr !1184
  store i64 %42, i64* %rdx.13.reg2mem, !insn.addr !1184
  store i64 %42, i64* %rdx.1.lcssa.reg2mem, !insn.addr !1184
  br i1 %44, label %dec_label_pc_1bec, label %dec_label_pc_1bb1, !insn.addr !1184

dec_label_pc_1bec:                                ; preds = %dec_label_pc_1be7, %dec_label_pc_1b8b
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1204
  br i1 %11, label %dec_label_pc_1c03, label %dec_label_pc_1bf1, !insn.addr !1204

dec_label_pc_1bf1:                                ; preds = %dec_label_pc_1bec
  %rdx.1.lcssa.reload = load i64, i64* %rdx.1.lcssa.reg2mem
  %45 = inttoptr i64 %9 to i64*, !insn.addr !1205
  store i64 %rdx.1.lcssa.reload, i64* %45, align 8, !insn.addr !1205
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1205
  br label %dec_label_pc_1c03, !insn.addr !1205

dec_label_pc_1bf8:                                ; preds = %dec_label_pc_1bdd, %dec_label_pc_1bd2
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !1206
  br i1 %11, label %dec_label_pc_1c03, label %dec_label_pc_1bfd, !insn.addr !1206

dec_label_pc_1bfd:                                ; preds = %dec_label_pc_1bf8
  %46 = add i64 %rdx.13.reload, 1, !insn.addr !1207
  %47 = inttoptr i64 %9 to i64*, !insn.addr !1208
  store i64 %46, i64* %47, align 8, !insn.addr !1208
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !1208
  br label %dec_label_pc_1c03, !insn.addr !1208

dec_label_pc_1c03:                                ; preds = %dec_label_pc_1b70, %dec_label_pc_1b81, %dec_label_pc_1bec, %dec_label_pc_1bf1, %dec_label_pc_1bfd, %dec_label_pc_1bf8
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !1209

; uselistorder directives
  uselistorder i64 %rax.0.reload, { 0, 2, 1 }
  uselistorder i64 %32, { 1, 0 }
  uselistorder i64 %rdx.13.reload, { 2, 1, 0 }
  uselistorder i64 %10, { 1, 0 }
  uselistorder i64 %9, { 3, 4, 1, 0, 2 }
  uselistorder i32 %7, { 1, 0 }
  uselistorder i64* %rdx.13.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.2.reg2mem, { 0, 5, 6, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1c03, { 4, 5, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1bb1, { 1, 0 }
}

define i64 @.Lstream_encoder_update.1(i64 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1c10:
  %r13.1.reg2mem = alloca i64, !insn.addr !1210
  %r13.0.reg2mem = alloca i64, !insn.addr !1210
  %rbx.1.lcssa.reg2mem = alloca i64, !insn.addr !1210
  %storemerge.reg2mem = alloca i64, !insn.addr !1210
  %r9.3.reg2mem = alloca i64, !insn.addr !1210
  %r9.2.lcssa.reg2mem = alloca i64, !insn.addr !1210
  %r9.1.reg2mem = alloca i64, !insn.addr !1210
  %rsi.0.reg2mem = alloca i64, !insn.addr !1210
  %rsi.120.reg2mem = alloca i64, !insn.addr !1210
  %r9.221.reg2mem = alloca i64, !insn.addr !1210
  %r14.022.reg2mem = alloca i64, !insn.addr !1210
  %.in.reg2mem = alloca i64, !insn.addr !1210
  %rbx.123.reg2mem = alloca i64, !insn.addr !1210
  %r9.027.reg2mem = alloca i64, !insn.addr !1210
  %r10.028.reg2mem = alloca i64, !insn.addr !1210
  %0 = add i64 %arg1, 208, !insn.addr !1211
  %1 = inttoptr i64 %0 to i8*, !insn.addr !1211
  %2 = load i8, i8* %1, align 1, !insn.addr !1211
  %3 = and i8 %2, 4, !insn.addr !1211
  %4 = icmp eq i8 %3, 0, !insn.addr !1211
  store i64 0, i64* %r13.1.reg2mem, !insn.addr !1212
  br i1 %4, label %dec_label_pc_1d84, label %dec_label_pc_1c36, !insn.addr !1212

dec_label_pc_1c36:                                ; preds = %dec_label_pc_1c10
  %5 = add i64 %arg1, 144, !insn.addr !1213
  %6 = inttoptr i64 %5 to i32*, !insn.addr !1213
  %7 = load i32, i32* %6, align 4, !insn.addr !1213
  %8 = icmp eq i64 %arg2, 0, !insn.addr !1214
  %9 = icmp eq i32 %7, 0, !insn.addr !1215
  %or.cond = or i1 %8, %9
  store i64 0, i64* %r13.1.reg2mem, !insn.addr !1216
  br i1 %or.cond, label %dec_label_pc_1d84, label %dec_label_pc_1c50, !insn.addr !1216

dec_label_pc_1c50:                                ; preds = %dec_label_pc_1c36
  %10 = sext i32 %arg5 to i64
  %11 = zext i32 %7 to i64, !insn.addr !1213
  %12 = icmp eq i32 %arg5, 0, !insn.addr !1217
  %13 = icmp ult i64 %10, %11, !insn.addr !1218
  %14 = icmp eq i1 %13, false, !insn.addr !1219
  store i64 %10, i64* %rbx.1.lcssa.reg2mem, !insn.addr !1219
  br i1 %14, label %dec_label_pc_1d6a, label %dec_label_pc_1c7e.lr.ph, !insn.addr !1219

dec_label_pc_1c7e.lr.ph:                          ; preds = %dec_label_pc_1c50
  %15 = sext i32 %arg3 to i64
  %16 = sub i64 %arg2, %arg1, !insn.addr !1220
  %17 = add i64 %arg1, 136, !insn.addr !1221
  %18 = inttoptr i64 %17 to i64*, !insn.addr !1221
  %19 = sext i32 %arg4 to i64
  store i64 0, i64* %r10.028.reg2mem
  store i64 %15, i64* %r9.027.reg2mem
  store i64 %10, i64* %rbx.123.reg2mem
  br label %dec_label_pc_1c7e

dec_label_pc_1c7e:                                ; preds = %dec_label_pc_1c7e.lr.ph, %dec_label_pc_1d62
  %rbx.123.reload = load i64, i64* %rbx.123.reg2mem
  %r9.027.reload = load i64, i64* %r9.027.reg2mem
  %20 = load i64, i64* %18, align 8, !insn.addr !1221
  %21 = mul i64 %rbx.123.reload, 8, !insn.addr !1222
  %22 = add i64 %20, %21, !insn.addr !1222
  %23 = inttoptr i64 %22 to i64*, !insn.addr !1222
  %24 = load i64, i64* %23, align 8, !insn.addr !1222
  %25 = urem i64 %24, 2
  %26 = icmp eq i64 %25, 0, !insn.addr !1223
  %27 = icmp eq i1 %26, false, !insn.addr !1224
  br i1 %27, label %dec_label_pc_1cf9.preheader, label %dec_label_pc_1c93, !insn.addr !1224

dec_label_pc_1cf9.preheader:                      ; preds = %dec_label_pc_1c7e
  %r10.028.reload = load i64, i64* %r10.028.reg2mem
  %28 = icmp ult i64 %24, 2
  %29 = icmp eq i1 %28, false, !insn.addr !1225
  store i64 %r9.027.reload, i64* %r9.2.lcssa.reg2mem, !insn.addr !1225
  br i1 %29, label %dec_label_pc_1cef.preheader, label %dec_label_pc_1d5b, !insn.addr !1225

dec_label_pc_1cef.preheader:                      ; preds = %dec_label_pc_1cf9.preheader
  %30 = add i64 %r10.028.reload, %arg1, !insn.addr !1226
  store i64 %24, i64* %.in.reg2mem
  store i64 %24, i64* %r14.022.reg2mem
  store i64 %r9.027.reload, i64* %r9.221.reg2mem
  store i64 %30, i64* %rsi.120.reg2mem
  br label %dec_label_pc_1cef

dec_label_pc_1c93:                                ; preds = %dec_label_pc_1c7e
  %31 = add i64 %24, %arg1, !insn.addr !1227
  %32 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %31, i64 8, i64 4, i64 %10), !insn.addr !1228
  %33 = trunc i64 %32 to i32, !insn.addr !1229
  %34 = icmp eq i32 %33, 0, !insn.addr !1229
  store i64 0, i64* %r13.1.reg2mem, !insn.addr !1230
  br i1 %34, label %dec_label_pc_1d84, label %dec_label_pc_1cbb, !insn.addr !1230

dec_label_pc_1cbb:                                ; preds = %dec_label_pc_1c93
  %35 = inttoptr i64 %31 to i64*, !insn.addr !1231
  %36 = load i64, i64* %35, align 8, !insn.addr !1231
  %37 = icmp eq i64 %36, %16, !insn.addr !1231
  %sext = mul i64 %r9.027.reload, 4294967296
  %38 = ashr exact i64 %sext, 32, !insn.addr !1232
  %39 = icmp eq i1 %37, false, !insn.addr !1233
  br i1 %39, label %dec_label_pc_1ce9, label %dec_label_pc_1cd0, !insn.addr !1233

dec_label_pc_1cd0:                                ; preds = %dec_label_pc_1cbb
  %40 = icmp eq i64 %sext, 0, !insn.addr !1234
  store i64 %31, i64* %r13.0.reg2mem, !insn.addr !1235
  br i1 %40, label %dec_label_pc_1d78, label %dec_label_pc_1cd9, !insn.addr !1235

dec_label_pc_1cd9:                                ; preds = %dec_label_pc_1cd0
  %41 = icmp uge i64 %31, %38, !insn.addr !1236
  %42 = icmp ugt i64 %31, %19, !insn.addr !1237
  %43 = icmp eq i1 %42, false, !insn.addr !1238
  %or.cond40 = icmp eq i1 %41, %43
  store i64 %31, i64* %r13.0.reg2mem, !insn.addr !1239
  br i1 %or.cond40, label %dec_label_pc_1d78, label %dec_label_pc_1ce9, !insn.addr !1239

dec_label_pc_1ce9:                                ; preds = %dec_label_pc_1cd9, %dec_label_pc_1cbb
  %44 = add i64 %24, 8, !insn.addr !1240
  store i64 %38, i64* %r9.3.reg2mem, !insn.addr !1241
  store i64 %44, i64* %storemerge.reg2mem, !insn.addr !1241
  br label %dec_label_pc_1d62, !insn.addr !1241

dec_label_pc_1cef:                                ; preds = %dec_label_pc_1cef.preheader, %dec_label_pc_1cf5
  %rsi.120.reload = load i64, i64* %rsi.120.reg2mem
  %r9.221.reload = load i64, i64* %r9.221.reg2mem
  %r14.022.reload = load i64, i64* %r14.022.reg2mem
  %.in.reload = load i64, i64* %.in.reg2mem
  %45 = and i64 %r14.022.reload, 2
  %46 = icmp eq i64 %45, 0, !insn.addr !1242
  %47 = icmp eq i1 %46, false, !insn.addr !1243
  store i64 %rsi.120.reload, i64* %rsi.0.reg2mem, !insn.addr !1243
  store i64 %r9.221.reload, i64* %r9.1.reg2mem, !insn.addr !1243
  br i1 %47, label %dec_label_pc_1d00, label %dec_label_pc_1cf5, !insn.addr !1243

dec_label_pc_1cf5:                                ; preds = %dec_label_pc_1d4d, %dec_label_pc_1d2a, %dec_label_pc_1cef
  %48 = udiv i64 %.in.reload, 2
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %49 = add i64 %rsi.0.reload, 8, !insn.addr !1244
  %50 = icmp ult i64 %.in.reload, 4
  %51 = icmp eq i1 %50, false, !insn.addr !1225
  store i64 %48, i64* %.in.reg2mem, !insn.addr !1225
  store i64 %48, i64* %r14.022.reg2mem, !insn.addr !1225
  store i64 %r9.1.reload, i64* %r9.221.reg2mem, !insn.addr !1225
  store i64 %49, i64* %rsi.120.reg2mem, !insn.addr !1225
  store i64 %r9.1.reload, i64* %r9.2.lcssa.reg2mem, !insn.addr !1225
  br i1 %51, label %dec_label_pc_1cef, label %dec_label_pc_1d5b, !insn.addr !1225

dec_label_pc_1d00:                                ; preds = %dec_label_pc_1cef
  %52 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %rsi.120.reload, i64 8, i64 4, i64 %10), !insn.addr !1245
  %53 = trunc i64 %52 to i32, !insn.addr !1246
  %54 = icmp eq i32 %53, 0, !insn.addr !1246
  store i64 0, i64* %r13.1.reg2mem, !insn.addr !1247
  br i1 %54, label %dec_label_pc_1d84, label %dec_label_pc_1d2a, !insn.addr !1247

dec_label_pc_1d2a:                                ; preds = %dec_label_pc_1d00
  %sext4 = mul i64 %rsi.120.reload, 4294967296
  %55 = ashr exact i64 %sext4, 32, !insn.addr !1248
  %56 = inttoptr i64 %55 to i64*, !insn.addr !1249
  %57 = load i64, i64* %56, align 8, !insn.addr !1249
  %58 = icmp eq i64 %57, %16, !insn.addr !1249
  %sext5 = mul i64 %r9.221.reload, 4294967296
  %59 = ashr exact i64 %sext5, 32, !insn.addr !1250
  %60 = icmp eq i1 %58, false, !insn.addr !1251
  store i64 %55, i64* %rsi.0.reg2mem, !insn.addr !1251
  store i64 %59, i64* %r9.1.reg2mem, !insn.addr !1251
  br i1 %60, label %dec_label_pc_1cf5, label %dec_label_pc_1d48, !insn.addr !1251

dec_label_pc_1d48:                                ; preds = %dec_label_pc_1d2a
  %61 = icmp eq i64 %sext5, 0, !insn.addr !1252
  store i64 %rsi.120.reload, i64* %r13.0.reg2mem, !insn.addr !1253
  br i1 %61, label %dec_label_pc_1d78, label %dec_label_pc_1d4d, !insn.addr !1253

dec_label_pc_1d4d:                                ; preds = %dec_label_pc_1d48
  %62 = icmp ugt i64 %59, %55
  %63 = icmp ugt i64 %55, %19, !insn.addr !1254
  %or.cond7 = or i1 %63, %62
  store i64 %55, i64* %rsi.0.reg2mem, !insn.addr !1255
  store i64 %59, i64* %r9.1.reg2mem, !insn.addr !1255
  store i64 %rsi.120.reload, i64* %r13.0.reg2mem, !insn.addr !1255
  br i1 %or.cond7, label %dec_label_pc_1cf5, label %dec_label_pc_1d78, !insn.addr !1255

dec_label_pc_1d5b:                                ; preds = %dec_label_pc_1cf5, %dec_label_pc_1cf9.preheader
  %r9.2.lcssa.reload = load i64, i64* %r9.2.lcssa.reg2mem
  %64 = add i64 %r10.028.reload, 504, !insn.addr !1256
  store i64 %r9.2.lcssa.reload, i64* %r9.3.reg2mem, !insn.addr !1256
  store i64 %64, i64* %storemerge.reg2mem, !insn.addr !1256
  br label %dec_label_pc_1d62, !insn.addr !1256

dec_label_pc_1d62:                                ; preds = %dec_label_pc_1d5b, %dec_label_pc_1ce9
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %r9.3.reload = load i64, i64* %r9.3.reg2mem
  %65 = add i64 %rbx.123.reload, 1, !insn.addr !1257
  %66 = icmp ult i64 %65, %11, !insn.addr !1218
  %67 = icmp eq i1 %66, false, !insn.addr !1219
  store i64 %storemerge.reload, i64* %r10.028.reg2mem, !insn.addr !1219
  store i64 %r9.3.reload, i64* %r9.027.reg2mem, !insn.addr !1219
  store i64 %65, i64* %rbx.123.reg2mem, !insn.addr !1219
  store i64 %65, i64* %rbx.1.lcssa.reg2mem, !insn.addr !1219
  br i1 %67, label %dec_label_pc_1d6a, label %dec_label_pc_1c7e, !insn.addr !1219

dec_label_pc_1d6a:                                ; preds = %dec_label_pc_1d62, %dec_label_pc_1c50
  store i64 0, i64* %r13.1.reg2mem, !insn.addr !1258
  br i1 %12, label %dec_label_pc_1d84, label %dec_label_pc_1d6f, !insn.addr !1258

dec_label_pc_1d6f:                                ; preds = %dec_label_pc_1d6a
  %rbx.1.lcssa.reload = load i64, i64* %rbx.1.lcssa.reg2mem
  %68 = inttoptr i64 %10 to i64*, !insn.addr !1259
  store i64 %rbx.1.lcssa.reload, i64* %68, align 8, !insn.addr !1259
  store i64 0, i64* %r13.1.reg2mem, !insn.addr !1259
  br label %dec_label_pc_1d84, !insn.addr !1259

dec_label_pc_1d78:                                ; preds = %dec_label_pc_1cd9, %dec_label_pc_1cd0, %dec_label_pc_1d4d, %dec_label_pc_1d48
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  store i64 %r13.0.reload, i64* %r13.1.reg2mem, !insn.addr !1260
  br i1 %12, label %dec_label_pc_1d84, label %dec_label_pc_1d7d, !insn.addr !1260

dec_label_pc_1d7d:                                ; preds = %dec_label_pc_1d78
  %69 = add i64 %rbx.123.reload, 1, !insn.addr !1261
  %70 = inttoptr i64 %10 to i64*, !insn.addr !1262
  store i64 %69, i64* %70, align 8, !insn.addr !1262
  store i64 %r13.0.reload, i64* %r13.1.reg2mem, !insn.addr !1262
  br label %dec_label_pc_1d84, !insn.addr !1262

dec_label_pc_1d84:                                ; preds = %dec_label_pc_1c93, %dec_label_pc_1d00, %dec_label_pc_1c10, %dec_label_pc_1c36, %dec_label_pc_1d6a, %dec_label_pc_1d6f, %dec_label_pc_1d7d, %dec_label_pc_1d78
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  ret i64 %r13.1.reload, !insn.addr !1263

; uselistorder directives
  uselistorder i64 %59, { 0, 2, 1 }
  uselistorder i64 %sext5, { 1, 0 }
  uselistorder i64 %55, { 0, 2, 4, 1, 3 }
  uselistorder i64 %.in.reload, { 1, 0 }
  uselistorder i64 %r9.221.reload, { 1, 0 }
  uselistorder i64 %rsi.120.reload, { 0, 1, 4, 3, 2 }
  uselistorder i64 %sext, { 1, 0 }
  uselistorder i64 %31, { 0, 2, 3, 1, 4, 5 }
  uselistorder i64 %24, { 5, 4, 0, 1, 2, 3 }
  uselistorder i64 %r9.027.reload, { 2, 1, 0 }
  uselistorder i64 %rbx.123.reload, { 1, 0, 2 }
  uselistorder i64 %19, { 1, 0 }
  uselistorder i64 %16, { 1, 0 }
  uselistorder i64 %11, { 1, 0 }
  uselistorder i64 %10, { 4, 6, 5, 3, 1, 0, 2 }
  uselistorder i32 %7, { 1, 0 }
  uselistorder i64* %r10.028.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r9.027.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.123.reg2mem, { 1, 0, 2 }
  uselistorder i64* %.in.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r14.022.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r9.221.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rsi.120.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rsi.0.reg2mem, { 2, 3, 0, 1 }
  uselistorder i64* %r9.1.reg2mem, { 2, 3, 0, 1 }
  uselistorder i64* %r9.3.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 2, 1 }
  uselistorder i64* %r13.0.reg2mem, { 0, 3, 4, 1, 2 }
  uselistorder i64* %r13.1.reg2mem, { 0, 7, 8, 6, 5, 2, 1, 4, 3 }
  uselistorder i64 %arg1, { 4, 3, 1, 0, 2, 5, 6, 7 }
  uselistorder label %dec_label_pc_1d84, { 6, 7, 5, 4, 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_1d78, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1cef, { 1, 0 }
  uselistorder label %dec_label_pc_1c7e, { 1, 0 }
}

define i64 @.Llz_encode.1(i64 %arg1, i64 %arg2, i32 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1da0:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !1264
  %rdx.12.reg2mem = alloca i64, !insn.addr !1264
  %r13.03.reg2mem = alloca i64, !insn.addr !1264
  %1 = load i64, i64* %0
  %2 = call i64 @.Llzma2_decoder_end.1(i32 0, i64 103, i64 5, i64 4, i64 %arg5, i64 %1), !insn.addr !1265
  %3 = trunc i64 %2 to i32, !insn.addr !1266
  %4 = icmp eq i32 %3, 0, !insn.addr !1266
  %5 = icmp eq i32 %arg3, 0, !insn.addr !1267
  %or.cond = or i1 %5, %4
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1268
  br i1 %or.cond, label %dec_label_pc_1e2f, label %dec_label_pc_1de0.lr.ph, !insn.addr !1268

dec_label_pc_1de0.lr.ph:                          ; preds = %dec_label_pc_1da0
  %6 = zext i32 %arg3 to i64, !insn.addr !1269
  %7 = add i64 %arg1, 56
  %8 = inttoptr i64 %7 to i64*
  %9 = add i64 %arg1, 48
  %10 = inttoptr i64 %9 to i64*
  %11 = trunc i64 %arg5 to i32
  store i64 %arg2, i64* %r13.03.reg2mem
  store i64 0, i64* %rdx.12.reg2mem
  br label %dec_label_pc_1de0

dec_label_pc_1de0:                                ; preds = %dec_label_pc_1de0.lr.ph, %dec_label_pc_1deb
  %rdx.12.reload = load i64, i64* %rdx.12.reg2mem
  %r13.03.reload = load i64, i64* %r13.03.reg2mem
  %12 = add i64 %r13.03.reload, 8, !insn.addr !1270
  %13 = inttoptr i64 %12 to i64*, !insn.addr !1270
  %14 = load i64, i64* %13, align 8, !insn.addr !1270
  %15 = and i64 %14, 4294967295, !insn.addr !1271
  %16 = icmp eq i64 %15, %arg4, !insn.addr !1272
  br i1 %16, label %dec_label_pc_1df9, label %dec_label_pc_1deb, !insn.addr !1273

dec_label_pc_1deb:                                ; preds = %dec_label_pc_1e0c, %dec_label_pc_1df9, %dec_label_pc_1de0
  %17 = add nuw nsw i64 %rdx.12.reload, 1, !insn.addr !1274
  %18 = add i64 %r13.03.reload, ptrtoint (i32** @global_var_18 to i64), !insn.addr !1275
  %19 = icmp ult i64 %17, %6, !insn.addr !1267
  store i64 %18, i64* %r13.03.reg2mem, !insn.addr !1276
  store i64 %17, i64* %rdx.12.reg2mem, !insn.addr !1276
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1276
  br i1 %19, label %dec_label_pc_1de0, label %dec_label_pc_1e2f, !insn.addr !1276

dec_label_pc_1df9:                                ; preds = %dec_label_pc_1de0
  %20 = udiv i64 %14, 4294967296, !insn.addr !1277
  %narrow = mul nuw nsw i64 %20, 24
  %21 = load i64, i64* %8, align 8, !insn.addr !1278
  %22 = add i64 %21, %narrow, !insn.addr !1278
  %23 = add i64 %22, 6, !insn.addr !1279
  %24 = inttoptr i64 %23 to i16*, !insn.addr !1279
  %25 = load i16, i16* %24, align 2, !insn.addr !1279
  %26 = icmp eq i16 %25, 0, !insn.addr !1279
  %27 = icmp eq i1 %26, false, !insn.addr !1280
  br i1 %27, label %dec_label_pc_1deb, label %dec_label_pc_1e0c, !insn.addr !1280

dec_label_pc_1e0c:                                ; preds = %dec_label_pc_1df9
  %28 = inttoptr i64 %22 to i32*, !insn.addr !1281
  %29 = load i32, i32* %28, align 4, !insn.addr !1281
  %30 = zext i32 %29 to i64, !insn.addr !1281
  %31 = load i64, i64* %10, align 8, !insn.addr !1282
  %32 = add i64 %31, %30, !insn.addr !1282
  %33 = call i64 @.Lsimple_coder_update.0(i64 %32, i32 0, i64 %rdx.12.reload, i64 %arg4), !insn.addr !1283
  %34 = trunc i64 %33 to i32, !insn.addr !1284
  %35 = icmp eq i32 %34, %11, !insn.addr !1284
  %36 = icmp eq i1 %35, false, !insn.addr !1285
  br i1 %36, label %dec_label_pc_1deb, label %dec_label_pc_1e28, !insn.addr !1285

dec_label_pc_1e28:                                ; preds = %dec_label_pc_1e0c
  %37 = inttoptr i64 %r13.03.reload to i64*, !insn.addr !1286
  %38 = load i64, i64* %37, align 8, !insn.addr !1286
  %39 = add i64 %38, %32, !insn.addr !1287
  store i64 %39, i64* %storemerge.reg2mem, !insn.addr !1287
  br label %dec_label_pc_1e2f, !insn.addr !1287

dec_label_pc_1e2f:                                ; preds = %dec_label_pc_1deb, %dec_label_pc_1da0, %dec_label_pc_1e28
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1288

; uselistorder directives
  uselistorder i64 %r13.03.reload, { 2, 1, 0 }
  uselistorder i64 %rdx.12.reload, { 1, 0 }
  uselistorder i64* %r13.03.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.12.reg2mem, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 1, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_1e2f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1de0, { 1, 0 }
}

define i64 @.Ldelta_coder_end.1(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1e40:
  %0 = add i64 %arg1, 208, !insn.addr !1289
  %1 = inttoptr i64 %0 to i8*, !insn.addr !1289
  %2 = load i8, i8* %1, align 1, !insn.addr !1289
  %3 = urem i8 %2, 2, !insn.addr !1289
  %4 = icmp eq i8 %3, 0, !insn.addr !1289
  br i1 %4, label %dec_label_pc_1e65, label %dec_label_pc_1e50, !insn.addr !1290

dec_label_pc_1e50:                                ; preds = %dec_label_pc_1e40
  %5 = add i64 %arg1, ptrtoint (i32** @global_var_48 to i64), !insn.addr !1291
  %6 = inttoptr i64 %5 to i32*, !insn.addr !1291
  %7 = load i32, i32* %6, align 4, !insn.addr !1291
  %8 = icmp eq i32 %7, 0, !insn.addr !1292
  br i1 %8, label %dec_label_pc_1e65, label %dec_label_pc_1e57, !insn.addr !1293

dec_label_pc_1e57:                                ; preds = %dec_label_pc_1e50
  %9 = and i64 %arg2, 4294967295, !insn.addr !1294
  %10 = add i64 %arg1, 64, !insn.addr !1295
  %11 = inttoptr i64 %10 to i64*, !insn.addr !1295
  %12 = load i64, i64* %11, align 8, !insn.addr !1295
  %13 = call i64 @.Llz_encode.1(i64 %arg1, i64 %12, i32 %7, i64 7, i64 %9), !insn.addr !1296
  ret i64 %13, !insn.addr !1296

dec_label_pc_1e65:                                ; preds = %dec_label_pc_1e50, %dec_label_pc_1e40
  ret i64 0, !insn.addr !1297

; uselistorder directives
  uselistorder i64 %arg1, { 1, 0, 2, 3 }
}

define i64 @.Ldelta_decode.part.0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1e70:
  %0 = add i64 %arg1, 208, !insn.addr !1298
  %1 = inttoptr i64 %0 to i8*, !insn.addr !1298
  %2 = load i8, i8* %1, align 1, !insn.addr !1298
  %3 = and i8 %2, 2, !insn.addr !1298
  %4 = icmp eq i8 %3, 0, !insn.addr !1298
  br i1 %4, label %dec_label_pc_1e98, label %dec_label_pc_1e80, !insn.addr !1299

dec_label_pc_1e80:                                ; preds = %dec_label_pc_1e70
  %5 = add i64 %arg1, 128, !insn.addr !1300
  %6 = inttoptr i64 %5 to i32*, !insn.addr !1300
  %7 = load i32, i32* %6, align 4, !insn.addr !1300
  %8 = icmp eq i32 %7, 0, !insn.addr !1301
  br i1 %8, label %dec_label_pc_1e98, label %dec_label_pc_1e8a, !insn.addr !1302

dec_label_pc_1e8a:                                ; preds = %dec_label_pc_1e80
  %9 = and i64 %arg2, 4294967295, !insn.addr !1303
  %10 = add i64 %arg1, 120, !insn.addr !1304
  %11 = inttoptr i64 %10 to i64*, !insn.addr !1304
  %12 = load i64, i64* %11, align 8, !insn.addr !1304
  %13 = call i64 @.Llz_encode.1(i64 %arg1, i64 %12, i32 %7, i64 6, i64 %9), !insn.addr !1305
  ret i64 %13, !insn.addr !1305

dec_label_pc_1e98:                                ; preds = %dec_label_pc_1e80, %dec_label_pc_1e70
  ret i64 0, !insn.addr !1306

; uselistorder directives
  uselistorder i64 (i64, i64, i32, i64, i64)* @.Llz_encode.1, { 1, 0 }
  uselistorder i64 %arg1, { 1, 0, 2, 3 }
}

define i64 @.Llzma_check_update.0(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1ea0:
  %0 = alloca i64
  %rax.1.reg2mem = alloca i64, !insn.addr !1307
  %rax.0.reg2mem = alloca i64, !insn.addr !1307
  %rdx.1.reg2mem = alloca i64, !insn.addr !1307
  %storemerge1.reg2mem = alloca i64, !insn.addr !1307
  %1 = load i64, i64* %0
  %2 = call i64 @.Llzma2_decoder_end.1(i32 0, i64 203, i64 7, i64 12, i64 %1, i64 %arg4), !insn.addr !1308
  %3 = trunc i64 %2 to i32, !insn.addr !1309
  %4 = icmp eq i32 %3, 0, !insn.addr !1309
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !1310
  br i1 %4, label %dec_label_pc_1f49, label %dec_label_pc_1ecc, !insn.addr !1310

dec_label_pc_1ecc:                                ; preds = %dec_label_pc_1ea0
  %5 = add i64 %arg1, 152, !insn.addr !1311
  %6 = inttoptr i64 %5 to i64*, !insn.addr !1311
  %7 = load i64, i64* %6, align 8, !insn.addr !1311
  %8 = icmp eq i64 %7, 0, !insn.addr !1312
  %9 = icmp eq i1 %8, false, !insn.addr !1313
  br i1 %9, label %dec_label_pc_1ee3, label %dec_label_pc_1edb, !insn.addr !1313

dec_label_pc_1edb:                                ; preds = %dec_label_pc_1ecc
  %10 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !1314
  %11 = inttoptr i64 %10 to i16*, !insn.addr !1314
  %12 = load i16, i16* %11, align 2, !insn.addr !1314
  %13 = icmp ne i16 %12, 0, !insn.addr !1315
  %14 = icmp eq i1 %13, false, !insn.addr !1316
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1316
  br i1 %14, label %dec_label_pc_1f49, label %dec_label_pc_1ef3.lr.ph, !insn.addr !1316

dec_label_pc_1ef3.lr.ph:                          ; preds = %dec_label_pc_1edb
  %15 = zext i16 %12 to i32, !insn.addr !1315
  %16 = add i64 %arg1, 16, !insn.addr !1317
  %17 = inttoptr i64 %16 to i64*, !insn.addr !1317
  %18 = load i64, i64* %17, align 8, !insn.addr !1317
  store i64 0, i64* %storemerge1.reg2mem
  br label %dec_label_pc_1ef3

dec_label_pc_1ee3:                                ; preds = %dec_label_pc_1ecc
  %19 = add i64 %arg1, 160, !insn.addr !1318
  %20 = inttoptr i64 %19 to i64*, !insn.addr !1318
  %21 = load i64, i64* %20, align 8, !insn.addr !1318
  store i64 %21, i64* %rdx.1.reg2mem, !insn.addr !1319
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !1319
  br label %dec_label_pc_1f45, !insn.addr !1319

dec_label_pc_1eec:                                ; preds = %dec_label_pc_1f00, %dec_label_pc_1ef3
  %22 = add i64 %storemerge1.reload, 1, !insn.addr !1320
  %23 = trunc i64 %22 to i32, !insn.addr !1315
  %24 = icmp ult i32 %23, %15, !insn.addr !1315
  %25 = icmp eq i1 %24, false, !insn.addr !1316
  store i64 %22, i64* %storemerge1.reg2mem, !insn.addr !1316
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1316
  br i1 %25, label %dec_label_pc_1f49, label %dec_label_pc_1ef3, !insn.addr !1316

dec_label_pc_1ef3:                                ; preds = %dec_label_pc_1ef3.lr.ph, %dec_label_pc_1eec
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  %26 = mul i64 %storemerge1.reload, 56, !insn.addr !1321
  %27 = add i64 %26, %18, !insn.addr !1317
  %28 = inttoptr i64 %27 to i32*, !insn.addr !1322
  %29 = load i32, i32* %28, align 4, !insn.addr !1322
  %30 = icmp eq i32 %29, 1, !insn.addr !1322
  %31 = icmp eq i1 %30, false, !insn.addr !1323
  br i1 %31, label %dec_label_pc_1eec, label %dec_label_pc_1f00, !insn.addr !1323

dec_label_pc_1f00:                                ; preds = %dec_label_pc_1ef3
  %32 = add i64 %27, 4, !insn.addr !1324
  %33 = inttoptr i64 %32 to i8*, !insn.addr !1324
  %34 = load i8, i8* %33, align 1, !insn.addr !1324
  %35 = urem i8 %34, 2, !insn.addr !1324
  %36 = icmp eq i8 %35, 0, !insn.addr !1324
  br i1 %36, label %dec_label_pc_1eec, label %dec_label_pc_1f06, !insn.addr !1325

dec_label_pc_1f06:                                ; preds = %dec_label_pc_1f00
  %37 = add i64 %27, 40, !insn.addr !1326
  %38 = inttoptr i64 %37 to i64*, !insn.addr !1326
  %39 = load i64, i64* %38, align 8, !insn.addr !1326
  %40 = add i64 %arg1, 8, !insn.addr !1327
  %41 = inttoptr i64 %40 to i64*, !insn.addr !1327
  %42 = load i64, i64* %41, align 8, !insn.addr !1327
  %43 = add i64 %27, 16, !insn.addr !1328
  %44 = inttoptr i64 %43 to i64*, !insn.addr !1328
  %45 = load i64, i64* %44, align 8, !insn.addr !1328
  %46 = sub i64 %45, %42, !insn.addr !1328
  %47 = add i64 %46, %39, !insn.addr !1329
  %48 = and i64 %46, -4096, !insn.addr !1330
  %49 = urem i64 %47, 4096
  %50 = icmp eq i64 %49, 0, !insn.addr !1331
  %51 = add i64 %47, 4096
  %52 = and i64 %51, -4096
  %rdx.0 = select i1 %50, i64 %47, i64 %52
  %53 = sub i64 %rdx.0, %48, !insn.addr !1332
  store i64 %48, i64* %6, align 8, !insn.addr !1333
  %54 = add i64 %arg1, 160, !insn.addr !1334
  %55 = inttoptr i64 %54 to i64*, !insn.addr !1334
  store i64 %53, i64* %55, align 8, !insn.addr !1334
  store i64 %53, i64* %rdx.1.reg2mem, !insn.addr !1334
  store i64 %48, i64* %rax.0.reg2mem, !insn.addr !1334
  br label %dec_label_pc_1f45, !insn.addr !1334

dec_label_pc_1f45:                                ; preds = %dec_label_pc_1f06, %dec_label_pc_1ee3
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  store i64 %rdx.1.reload, i64* %arg2, align 8, !insn.addr !1335
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !1335
  br label %dec_label_pc_1f49, !insn.addr !1335

dec_label_pc_1f49:                                ; preds = %dec_label_pc_1eec, %dec_label_pc_1edb, %dec_label_pc_1f45, %dec_label_pc_1ea0
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !1336

; uselistorder directives
  uselistorder i64 %48, { 0, 2, 1 }
  uselistorder i64 %47, { 1, 2, 0 }
  uselistorder i64 %46, { 1, 0 }
  uselistorder i64 %storemerge1.reload, { 1, 0 }
  uselistorder i16 %12, { 1, 0 }
  uselistorder i64 %7, { 0, 2, 1, 3 }
  uselistorder i64* %rax.1.reg2mem, { 0, 3, 1, 2, 4 }
  uselistorder i64 %arg1, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_1f49, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1ef3, { 1, 0 }
}

define i64 @.Lindex_tree_append.part.0(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_1f50:
  %0 = alloca i64
  %rax.2.reg2mem = alloca i64, !insn.addr !1337
  %r9.1.reg2mem = alloca i64, !insn.addr !1337
  %rdi.1.reg2mem = alloca i64, !insn.addr !1337
  %rax.1.reg2mem = alloca i64, !insn.addr !1337
  %rax.02.reg2mem = alloca i64, !insn.addr !1337
  %rdi.03.reg2mem = alloca i64, !insn.addr !1337
  %r8.04.reg2mem = alloca i64, !insn.addr !1337
  %r9.05.reg2mem = alloca i64, !insn.addr !1337
  %1 = load i64, i64* %0
  %stack_var_-32 = alloca i64, align 8
  %2 = call i64 @.Llzma_index_iter_rewind.cold(i64 189, i64 14, i64 11, i32 0, i64 %1), !insn.addr !1338
  %3 = trunc i64 %2 to i32, !insn.addr !1339
  %4 = icmp eq i32 %3, 0, !insn.addr !1339
  %5 = icmp eq i1 %4, false, !insn.addr !1340
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1340
  br i1 %5, label %dec_label_pc_1f84, label %dec_label_pc_206c, !insn.addr !1340

dec_label_pc_1f84:                                ; preds = %dec_label_pc_1f50
  %6 = add i64 %arg1, 168, !insn.addr !1341
  %7 = inttoptr i64 %6 to i64*, !insn.addr !1341
  %8 = load i64, i64* %7, align 8, !insn.addr !1341
  store i64 0, i64* %stack_var_-32, align 8, !insn.addr !1342
  %9 = icmp eq i64 %8, 0, !insn.addr !1343
  br i1 %9, label %dec_label_pc_1faa, label %dec_label_pc_1f9a, !insn.addr !1344

dec_label_pc_1f9a:                                ; preds = %dec_label_pc_1f84
  %10 = add i64 %arg1, 176, !insn.addr !1345
  %11 = inttoptr i64 %10 to i64*, !insn.addr !1345
  %12 = load i64, i64* %11, align 8, !insn.addr !1345
  store i64 %12, i64* %arg2, align 8, !insn.addr !1346
  store i64 %8, i64* %rax.2.reg2mem, !insn.addr !1347
  br label %dec_label_pc_206c, !insn.addr !1347

dec_label_pc_1faa:                                ; preds = %dec_label_pc_1f84
  %13 = call i64 @.Llzma_check_update.0(i64 %arg1, i64* nonnull %stack_var_-32, i64 11, i64 0), !insn.addr !1348
  %14 = icmp eq i64 %13, 0, !insn.addr !1349
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1350
  br i1 %14, label %dec_label_pc_206c, label %dec_label_pc_1fbf, !insn.addr !1350

dec_label_pc_1fbf:                                ; preds = %dec_label_pc_1faa
  %15 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !1351
  %16 = inttoptr i64 %15 to i16*, !insn.addr !1351
  %17 = load i16, i16* %16, align 2, !insn.addr !1351
  %18 = icmp ne i16 %17, 0, !insn.addr !1352
  %19 = icmp eq i1 %18, false, !insn.addr !1353
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1353
  br i1 %19, label %dec_label_pc_206c, label %dec_label_pc_1fd8.lr.ph, !insn.addr !1353

dec_label_pc_1fd8.lr.ph:                          ; preds = %dec_label_pc_1fbf
  %20 = load i64, i64* %stack_var_-32, align 8, !insn.addr !1354
  %21 = add i64 %20, %13, !insn.addr !1354
  %22 = zext i16 %17 to i32, !insn.addr !1352
  %23 = add i64 %arg1, 16, !insn.addr !1355
  %24 = inttoptr i64 %23 to i64*, !insn.addr !1355
  %25 = load i64, i64* %24, align 8, !insn.addr !1355
  %26 = add i64 %arg1, 8
  %27 = inttoptr i64 %26 to i64*
  store i64 0, i64* %r9.05.reg2mem
  store i64 0, i64* %r8.04.reg2mem
  store i64 0, i64* %rdi.03.reg2mem
  store i64 0, i64* %rax.02.reg2mem
  br label %dec_label_pc_1fd8

dec_label_pc_1fd8:                                ; preds = %dec_label_pc_1fd8.lr.ph, %dec_label_pc_204c
  %rax.02.reload = load i64, i64* %rax.02.reg2mem
  %rdi.03.reload = load i64, i64* %rdi.03.reg2mem
  %r8.04.reload = load i64, i64* %r8.04.reg2mem
  %r9.05.reload = load i64, i64* %r9.05.reg2mem
  %28 = mul i64 %r8.04.reload, 56, !insn.addr !1356
  %29 = add i64 %28, %25, !insn.addr !1355
  %30 = inttoptr i64 %29 to i32*, !insn.addr !1357
  %31 = load i32, i32* %30, align 4, !insn.addr !1357
  %32 = icmp eq i32 %31, 1, !insn.addr !1357
  %33 = icmp eq i1 %32, false, !insn.addr !1358
  store i64 %rax.02.reload, i64* %rax.1.reg2mem, !insn.addr !1358
  store i64 %rdi.03.reload, i64* %rdi.1.reg2mem, !insn.addr !1358
  store i64 %r9.05.reload, i64* %r9.1.reg2mem, !insn.addr !1358
  br i1 %33, label %dec_label_pc_204c, label %dec_label_pc_1fe5, !insn.addr !1358

dec_label_pc_1fe5:                                ; preds = %dec_label_pc_1fd8
  %34 = add i64 %29, 4, !insn.addr !1359
  %35 = inttoptr i64 %34 to i32*, !insn.addr !1359
  %36 = load i32, i32* %35, align 4, !insn.addr !1359
  %37 = urem i32 %36, 8, !insn.addr !1360
  %38 = icmp eq i32 %37, 4, !insn.addr !1361
  %39 = icmp eq i1 %38, false, !insn.addr !1362
  store i64 %rax.02.reload, i64* %rax.1.reg2mem, !insn.addr !1362
  store i64 %rdi.03.reload, i64* %rdi.1.reg2mem, !insn.addr !1362
  store i64 %r9.05.reload, i64* %r9.1.reg2mem, !insn.addr !1362
  br i1 %39, label %dec_label_pc_204c, label %dec_label_pc_1ff0, !insn.addr !1362

dec_label_pc_1ff0:                                ; preds = %dec_label_pc_1fe5
  %40 = add i64 %29, 40, !insn.addr !1363
  %41 = inttoptr i64 %40 to i64*, !insn.addr !1363
  %42 = load i64, i64* %41, align 8, !insn.addr !1363
  %43 = load i64, i64* %27, align 8, !insn.addr !1364
  %44 = sub i64 189, %43, !insn.addr !1364
  %45 = add i64 %29, 16, !insn.addr !1365
  %46 = inttoptr i64 %45 to i64*, !insn.addr !1365
  %47 = load i64, i64* %46, align 8, !insn.addr !1365
  %48 = add i64 %44, %47, !insn.addr !1365
  %49 = and i64 %48, -4096, !insn.addr !1366
  %50 = icmp ult i64 %49, %21, !insn.addr !1367
  store i64 %rax.02.reload, i64* %rax.1.reg2mem, !insn.addr !1368
  store i64 %rdi.03.reload, i64* %rdi.1.reg2mem, !insn.addr !1368
  store i64 %r9.05.reload, i64* %r9.1.reg2mem, !insn.addr !1368
  br i1 %50, label %dec_label_pc_204c, label %dec_label_pc_2028, !insn.addr !1368

dec_label_pc_2028:                                ; preds = %dec_label_pc_1ff0
  %51 = add i64 %48, %42, !insn.addr !1369
  %52 = urem i64 %51, 4096
  %53 = icmp eq i64 %52, 0, !insn.addr !1370
  %54 = add i64 %51, 4096
  %55 = and i64 %54, -4096
  %rcx.0 = select i1 %53, i64 %51, i64 %55
  %56 = trunc i64 %r9.05.reload to i32, !insn.addr !1371
  %57 = icmp eq i32 %56, 0, !insn.addr !1371
  %58 = icmp eq i1 %57, false, !insn.addr !1372
  br i1 %58, label %dec_label_pc_203e, label %dec_label_pc_202d, !insn.addr !1372

dec_label_pc_202d:                                ; preds = %dec_label_pc_2028
  %59 = sub i64 %rcx.0, %49, !insn.addr !1373
  store i64 %49, i64* %rax.1.reg2mem, !insn.addr !1374
  store i64 %59, i64* %rdi.1.reg2mem, !insn.addr !1374
  store i64 1, i64* %r9.1.reg2mem, !insn.addr !1374
  br label %dec_label_pc_204c, !insn.addr !1374

dec_label_pc_203e:                                ; preds = %dec_label_pc_2028
  %60 = icmp ult i64 %49, %rax.02.reload, !insn.addr !1375
  %61 = icmp eq i1 %60, false, !insn.addr !1376
  %62 = sub i64 %rcx.0, %49
  %spec.select = select i1 %61, i64 %rax.02.reload, i64 %49
  %spec.select1 = select i1 %61, i64 %rdi.03.reload, i64 %62
  store i64 %spec.select, i64* %rax.1.reg2mem
  store i64 %spec.select1, i64* %rdi.1.reg2mem
  store i64 %r9.05.reload, i64* %r9.1.reg2mem
  br label %dec_label_pc_204c

dec_label_pc_204c:                                ; preds = %dec_label_pc_203e, %dec_label_pc_202d, %dec_label_pc_1ff0, %dec_label_pc_1fe5, %dec_label_pc_1fd8
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %63 = add i64 %r8.04.reload, 1, !insn.addr !1377
  %64 = trunc i64 %63 to i32, !insn.addr !1352
  %65 = icmp ult i32 %64, %22, !insn.addr !1352
  %66 = icmp eq i1 %65, false, !insn.addr !1353
  store i64 %r9.1.reload, i64* %r9.05.reg2mem, !insn.addr !1353
  store i64 %63, i64* %r8.04.reg2mem, !insn.addr !1353
  store i64 %rdi.1.reload, i64* %rdi.03.reg2mem, !insn.addr !1353
  store i64 %rax.1.reload, i64* %rax.02.reg2mem, !insn.addr !1353
  br i1 %66, label %dec_label_pc_2051, label %dec_label_pc_1fd8, !insn.addr !1353

dec_label_pc_2051:                                ; preds = %dec_label_pc_204c
  %67 = trunc i64 %r9.1.reload to i32, !insn.addr !1378
  %68 = icmp eq i32 %67, 0, !insn.addr !1378
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1379
  br i1 %68, label %dec_label_pc_206c, label %dec_label_pc_205a, !insn.addr !1379

dec_label_pc_205a:                                ; preds = %dec_label_pc_2051
  store i64 %rax.1.reload, i64* %7, align 8, !insn.addr !1380
  %69 = add i64 %arg1, 176, !insn.addr !1381
  %70 = inttoptr i64 %69 to i64*, !insn.addr !1381
  store i64 %rdi.1.reload, i64* %70, align 8, !insn.addr !1381
  store i64 %rdi.1.reload, i64* %arg2, align 8, !insn.addr !1382
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !1382
  br label %dec_label_pc_206c, !insn.addr !1382

dec_label_pc_206c:                                ; preds = %dec_label_pc_1fbf, %dec_label_pc_1f50, %dec_label_pc_1faa, %dec_label_pc_2051, %dec_label_pc_205a, %dec_label_pc_1f9a
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !1383

; uselistorder directives
  uselistorder i64 %rdi.1.reload, { 1, 0, 2 }
  uselistorder i64 %51, { 1, 2, 0 }
  uselistorder i64 %49, { 1, 4, 3, 0, 5, 2 }
  uselistorder i64 %r9.05.reload, { 0, 4, 1, 2, 3 }
  uselistorder i64 %rdi.03.reload, { 3, 0, 1, 2 }
  uselistorder i64 %rax.02.reload, { 3, 4, 0, 1, 2 }
  uselistorder i16 %17, { 1, 0 }
  uselistorder i64* %stack_var_-32, { 1, 0, 2 }
  uselistorder i64* %r9.05.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r8.04.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdi.03.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.02.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.2.reg2mem, { 0, 6, 4, 1, 3, 5, 2 }
  uselistorder i64 %arg1, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_206c, { 4, 3, 0, 2, 5, 1 }
  uselistorder label %dec_label_pc_1fd8, { 1, 0 }
}

define i64 @.Llzip_decode.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2080:
  %0 = alloca i64
  %rbx.1.reg2mem = alloca i64, !insn.addr !1384
  %rdx.0.reg2mem = alloca i64, !insn.addr !1384
  %rdx.12.reg2mem = alloca i64, !insn.addr !1384
  %rbx.03.reg2mem = alloca i64, !insn.addr !1384
  %rbx.0.ph.reg2mem = alloca i64, !insn.addr !1384
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %3 = load i64, i64* %0
  %4 = load i64, i64* %0
  %stack_var_-48 = alloca i64, align 8
  %5 = call i64 @.Llzma_index_iter_rewind.cold(i64 182, i64 7, i64 10, i32 0, i64 %4), !insn.addr !1385
  %6 = trunc i64 %5 to i32, !insn.addr !1386
  %7 = icmp eq i32 %6, 0, !insn.addr !1386
  %8 = icmp eq i1 %7, false, !insn.addr !1387
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !1387
  br i1 %8, label %dec_label_pc_20b6, label %dec_label_pc_211e, !insn.addr !1387

dec_label_pc_20b6:                                ; preds = %dec_label_pc_2080
  store i64 0, i64* %stack_var_-48, align 8, !insn.addr !1388
  %9 = call i64 @.Lindex_tree_append.part.0(i64 %arg1, i64* nonnull %stack_var_-48, i64 10, i64 0, i64 %2, i64 %1), !insn.addr !1389
  %10 = icmp eq i64 %9, 0, !insn.addr !1390
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !1391
  br i1 %10, label %dec_label_pc_211e, label %dec_label_pc_20d2, !insn.addr !1391

dec_label_pc_20d2:                                ; preds = %dec_label_pc_20b6
  %11 = load i64, i64* %stack_var_-48, align 8, !insn.addr !1392
  %12 = icmp ult i64 %11, 44
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !1393
  br i1 %12, label %dec_label_pc_211e, label %dec_label_pc_20dd, !insn.addr !1393

dec_label_pc_20dd:                                ; preds = %dec_label_pc_20d2
  %13 = add i64 %11, %9, !insn.addr !1394
  %14 = icmp eq i64 %arg3, 0, !insn.addr !1395
  store i64 %9, i64* %rbx.0.ph.reg2mem, !insn.addr !1396
  br i1 %14, label %dec_label_pc_2105.preheader, label %dec_label_pc_20e5, !insn.addr !1396

dec_label_pc_20e5:                                ; preds = %dec_label_pc_20dd
  %15 = icmp ugt i64 %13, %arg3, !insn.addr !1397
  %16 = icmp eq i1 %15, false, !insn.addr !1398
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !1398
  br i1 %16, label %dec_label_pc_211e, label %dec_label_pc_20ea, !insn.addr !1398

dec_label_pc_20ea:                                ; preds = %dec_label_pc_20e5
  %17 = icmp ult i64 %9, %arg3, !insn.addr !1399
  %18 = select i1 %17, i64 %arg3, i64 %9, !insn.addr !1400
  store i64 %18, i64* %rbx.0.ph.reg2mem, !insn.addr !1401
  br label %dec_label_pc_2105.preheader, !insn.addr !1401

dec_label_pc_2105.preheader:                      ; preds = %dec_label_pc_20dd, %dec_label_pc_20ea
  %rbx.0.ph.reload = load i64, i64* %rbx.0.ph.reg2mem
  %19 = icmp ult i64 %rbx.0.ph.reload, %13, !insn.addr !1402
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !1403
  br i1 %19, label %dec_label_pc_20f3.lr.ph, label %dec_label_pc_211e, !insn.addr !1403

dec_label_pc_20f3.lr.ph:                          ; preds = %dec_label_pc_2105.preheader
  %20 = trunc i64 %3 to i32
  %21 = trunc i64 %13 to i32, !insn.addr !1404
  %22 = icmp eq i32 %20, 0
  %23 = and i64 %3, 4294967295
  store i64 %rbx.0.ph.reload, i64* %rbx.03.reg2mem
  store i64 10, i64* %rdx.12.reg2mem
  br label %dec_label_pc_20f3

dec_label_pc_20f3:                                ; preds = %dec_label_pc_20f3.lr.ph, %dec_label_pc_2102
  %rdx.12.reload = load i64, i64* %rdx.12.reg2mem
  %rbx.03.reload = load i64, i64* %rbx.03.reg2mem
  %24 = call i64 @.Lsimple_coder_update.0(i64 %rbx.03.reload, i32 %21, i64 %rdx.12.reload, i64 0), !insn.addr !1404
  %25 = trunc i64 %24 to i32
  %26 = icmp eq i32 %25, 0, !insn.addr !1405
  %27 = icmp eq i1 %26, false, !insn.addr !1406
  store i64 %rdx.12.reload, i64* %rdx.0.reg2mem, !insn.addr !1406
  br i1 %27, label %dec_label_pc_210c, label %dec_label_pc_2102, !insn.addr !1406

dec_label_pc_2102:                                ; preds = %dec_label_pc_2114, %dec_label_pc_20f3
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %28 = add nuw i64 %rbx.03.reload, 1, !insn.addr !1407
  %29 = icmp ult i64 %28, %13, !insn.addr !1402
  store i64 %28, i64* %rbx.03.reg2mem, !insn.addr !1403
  store i64 %rdx.0.reload, i64* %rdx.12.reg2mem, !insn.addr !1403
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !1403
  br i1 %29, label %dec_label_pc_20f3, label %dec_label_pc_211e, !insn.addr !1403

dec_label_pc_210c:                                ; preds = %dec_label_pc_20f3
  br i1 %22, label %dec_label_pc_211a, label %dec_label_pc_2114, !insn.addr !1408

dec_label_pc_2114:                                ; preds = %dec_label_pc_210c
  %30 = icmp eq i32 %20, %25, !insn.addr !1409
  %31 = icmp eq i1 %30, false, !insn.addr !1410
  store i64 %23, i64* %rdx.0.reg2mem, !insn.addr !1410
  store i64 %rbx.03.reload, i64* %rbx.1.reg2mem, !insn.addr !1410
  br i1 %31, label %dec_label_pc_2102, label %dec_label_pc_211e, !insn.addr !1410

dec_label_pc_211a:                                ; preds = %dec_label_pc_210c
  %32 = inttoptr i64 %arg2 to i32*, !insn.addr !1411
  store i32 %25, i32* %32, align 4, !insn.addr !1411
  store i64 %rbx.03.reload, i64* %rbx.1.reg2mem, !insn.addr !1411
  br label %dec_label_pc_211e, !insn.addr !1411

dec_label_pc_211e:                                ; preds = %dec_label_pc_2114, %dec_label_pc_2102, %dec_label_pc_2105.preheader, %dec_label_pc_2080, %dec_label_pc_20b6, %dec_label_pc_20d2, %dec_label_pc_20e5, %dec_label_pc_211a
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  ret i64 %rbx.1.reload, !insn.addr !1412

; uselistorder directives
  uselistorder i64 %rbx.03.reload, { 1, 0, 3, 2 }
  uselistorder i32 %20, { 1, 0 }
  uselistorder i64 %13, { 2, 3, 0, 1 }
  uselistorder i64 %9, { 2, 3, 0, 1, 4 }
  uselistorder i64* %stack_var_-48, { 1, 0, 2 }
  uselistorder i64 %3, { 1, 0 }
  uselistorder i64* %rbx.0.ph.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbx.03.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.12.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rbx.1.reg2mem, { 0, 8, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i64* %0, { 3, 2, 1, 0 }
  uselistorder i64 %arg3, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_211e, { 7, 0, 1, 2, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_20f3, { 1, 0 }
  uselistorder label %dec_label_pc_2105.preheader, { 1, 0 }
}

define i64 @.Lmicrolzma_decode.0(i64 %arg1, i64* %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_2130:
  %rax.2.reg2mem = alloca i64, !insn.addr !1413
  %r12.0.reg2mem = alloca i64, !insn.addr !1413
  %r11.0.reg2mem = alloca i64, !insn.addr !1413
  %rbx.0.reg2mem = alloca i64, !insn.addr !1413
  %rax.0.reg2mem = alloca i64, !insn.addr !1413
  %rax.17.reg2mem = alloca i64, !insn.addr !1413
  %rbx.18.reg2mem = alloca i64, !insn.addr !1413
  %r10.09.reg2mem = alloca i64, !insn.addr !1413
  %r11.110.reg2mem = alloca i64, !insn.addr !1413
  %r12.111.reg2mem = alloca i64, !insn.addr !1413
  %0 = add i64 %arg1, 184, !insn.addr !1414
  %1 = inttoptr i64 %0 to i64*, !insn.addr !1414
  %2 = load i64, i64* %1, align 8, !insn.addr !1414
  %3 = icmp eq i64 %2, 0, !insn.addr !1415
  %4 = icmp eq i1 %3, false, !insn.addr !1416
  br i1 %4, label %dec_label_pc_2163, label %dec_label_pc_2148, !insn.addr !1416

dec_label_pc_2148:                                ; preds = %dec_label_pc_2130
  %5 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !1417
  %6 = inttoptr i64 %5 to i16*, !insn.addr !1417
  %7 = load i16, i16* %6, align 2, !insn.addr !1417
  %8 = icmp eq i16 %7, 0, !insn.addr !1418
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1419
  br i1 %8, label %dec_label_pc_22a5, label %dec_label_pc_218f.lr.ph, !insn.addr !1419

dec_label_pc_218f.lr.ph:                          ; preds = %dec_label_pc_2148
  %9 = and i64 %arg3, 4294967295, !insn.addr !1420
  %10 = add i64 %arg1, 16, !insn.addr !1421
  %11 = inttoptr i64 %10 to i64*, !insn.addr !1421
  %12 = load i64, i64* %11, align 8, !insn.addr !1421
  %13 = add i64 %arg1, 8
  %14 = inttoptr i64 %13 to i64*
  %zext = zext i16 %7 to i64
  store i64 0, i64* %r12.111.reg2mem
  store i64 0, i64* %r11.110.reg2mem
  store i64 0, i64* %r10.09.reg2mem
  store i64 0, i64* %rbx.18.reg2mem
  store i64 %2, i64* %rax.17.reg2mem
  br label %dec_label_pc_218f

dec_label_pc_2163:                                ; preds = %dec_label_pc_2130
  %15 = trunc i64 %arg3 to i32, !insn.addr !1422
  %16 = icmp eq i32 %15, 0, !insn.addr !1422
  %17 = icmp eq i1 %16, false, !insn.addr !1423
  br i1 %17, label %dec_label_pc_2172, label %dec_label_pc_2167, !insn.addr !1423

dec_label_pc_2167:                                ; preds = %dec_label_pc_2163
  %18 = add i64 %arg1, 192, !insn.addr !1424
  %19 = inttoptr i64 %18 to i64*, !insn.addr !1424
  %20 = load i64, i64* %19, align 8, !insn.addr !1424
  store i64 %20, i64* %arg2, align 8, !insn.addr !1425
  ret i64 %2, !insn.addr !1426

dec_label_pc_2172:                                ; preds = %dec_label_pc_2163
  %21 = add i64 %arg1, 200, !insn.addr !1427
  %22 = inttoptr i64 %21 to i64*, !insn.addr !1427
  %23 = load i64, i64* %22, align 8, !insn.addr !1427
  store i64 %23, i64* %arg2, align 8, !insn.addr !1428
  %24 = sub i64 %2, %23, !insn.addr !1429
  %25 = icmp eq i64 %23, 0, !insn.addr !1430
  %26 = icmp eq i1 %25, false, !insn.addr !1431
  %spec.select = select i1 %26, i64 %24, i64 0
  ret i64 %spec.select, !insn.addr !1432

dec_label_pc_218f:                                ; preds = %dec_label_pc_218f.lr.ph, %dec_label_pc_219c
  %rax.17.reload = load i64, i64* %rax.17.reg2mem
  %rbx.18.reload = load i64, i64* %rbx.18.reg2mem
  %r10.09.reload = load i64, i64* %r10.09.reg2mem
  %r11.110.reload = load i64, i64* %r11.110.reg2mem
  %r12.111.reload = load i64, i64* %r12.111.reg2mem
  %27 = mul nuw nsw i64 %r10.09.reload, 56, !insn.addr !1433
  %28 = add i64 %27, %12, !insn.addr !1421
  %29 = inttoptr i64 %28 to i32*, !insn.addr !1434
  %30 = load i32, i32* %29, align 4, !insn.addr !1434
  %31 = icmp eq i32 %30, 1, !insn.addr !1434
  store i64 %rax.17.reload, i64* %rax.0.reg2mem, !insn.addr !1435
  store i64 %rbx.18.reload, i64* %rbx.0.reg2mem, !insn.addr !1435
  store i64 %r11.110.reload, i64* %r11.0.reg2mem, !insn.addr !1435
  store i64 %r12.111.reload, i64* %r12.0.reg2mem, !insn.addr !1435
  br i1 %31, label %dec_label_pc_21ac, label %dec_label_pc_219c, !insn.addr !1435

dec_label_pc_219c:                                ; preds = %dec_label_pc_2213, %dec_label_pc_21ff, %dec_label_pc_21ac, %dec_label_pc_218f
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %32 = add nuw nsw i64 %r10.09.reload, 1, !insn.addr !1436
  %33 = icmp ult i64 %32, %zext
  store i64 %r12.0.reload, i64* %r12.111.reg2mem, !insn.addr !1419
  store i64 %r11.0.reload, i64* %r11.110.reg2mem, !insn.addr !1419
  store i64 %32, i64* %r10.09.reg2mem, !insn.addr !1419
  store i64 %rbx.0.reload, i64* %rbx.18.reg2mem, !insn.addr !1419
  store i64 %rax.0.reload, i64* %rax.17.reg2mem, !insn.addr !1419
  br i1 %33, label %dec_label_pc_218f, label %dec_label_pc_222d, !insn.addr !1419

dec_label_pc_21ac:                                ; preds = %dec_label_pc_218f
  %34 = add i64 %28, 4, !insn.addr !1437
  %35 = inttoptr i64 %34 to i32*, !insn.addr !1437
  %36 = load i32, i32* %35, align 4, !insn.addr !1437
  %37 = urem i32 %36, 8, !insn.addr !1438
  %38 = icmp eq i32 %37, 6, !insn.addr !1439
  %39 = icmp eq i1 %38, false, !insn.addr !1440
  store i64 %rax.17.reload, i64* %rax.0.reg2mem, !insn.addr !1440
  store i64 %rbx.18.reload, i64* %rbx.0.reg2mem, !insn.addr !1440
  store i64 %r11.110.reload, i64* %r11.0.reg2mem, !insn.addr !1440
  store i64 %r12.111.reload, i64* %r12.0.reg2mem, !insn.addr !1440
  br i1 %39, label %dec_label_pc_219c, label %dec_label_pc_21ba, !insn.addr !1440

dec_label_pc_21ba:                                ; preds = %dec_label_pc_21ac
  %40 = add i64 %28, 40, !insn.addr !1441
  %41 = inttoptr i64 %40 to i64*, !insn.addr !1441
  %42 = load i64, i64* %41, align 8, !insn.addr !1441
  %43 = add i64 %28, 32, !insn.addr !1442
  %44 = inttoptr i64 %43 to i64*, !insn.addr !1442
  %45 = load i64, i64* %44, align 8, !insn.addr !1442
  %46 = icmp ult i64 %42, %45, !insn.addr !1442
  %47 = icmp eq i1 %46, false, !insn.addr !1443
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1443
  br i1 %47, label %dec_label_pc_21cb, label %dec_label_pc_22a5, !insn.addr !1443

dec_label_pc_21cb:                                ; preds = %dec_label_pc_21ba
  %48 = load i64, i64* %14, align 8, !insn.addr !1444
  %49 = sub i64 %9, %48, !insn.addr !1444
  %50 = add i64 %28, 16, !insn.addr !1445
  %51 = inttoptr i64 %50 to i64*, !insn.addr !1445
  %52 = load i64, i64* %51, align 8, !insn.addr !1445
  %53 = add i64 %49, %52, !insn.addr !1445
  %54 = add i64 %53, %42, !insn.addr !1446
  %55 = and i64 %53, -4096, !insn.addr !1447
  %56 = urem i64 %54, 4096
  %57 = icmp eq i64 %56, 0, !insn.addr !1448
  %58 = add i64 %54, 4096
  %59 = and i64 %58, -4096
  %r15.0 = select i1 %57, i64 %54, i64 %59
  %60 = trunc i64 %r11.110.reload to i32, !insn.addr !1449
  %61 = icmp eq i32 %60, 0, !insn.addr !1449
  %62 = icmp eq i1 %61, false, !insn.addr !1450
  br i1 %62, label %dec_label_pc_2213, label %dec_label_pc_21ff, !insn.addr !1450

dec_label_pc_21ff:                                ; preds = %dec_label_pc_21cb
  %63 = sub i64 %r15.0, %55, !insn.addr !1451
  store i64 %r10.09.reload, i64* %rax.0.reg2mem, !insn.addr !1452
  store i64 %55, i64* %rbx.0.reg2mem, !insn.addr !1452
  store i64 1, i64* %r11.0.reg2mem, !insn.addr !1452
  store i64 %63, i64* %r12.0.reg2mem, !insn.addr !1452
  br label %dec_label_pc_219c, !insn.addr !1452

dec_label_pc_2213:                                ; preds = %dec_label_pc_21cb
  %64 = add i64 %rbx.18.reload, %r12.111.reload, !insn.addr !1453
  %65 = icmp ult i64 %64, %r15.0, !insn.addr !1454
  %66 = icmp eq i1 %65, false, !insn.addr !1455
  %67 = sub i64 %r15.0, %55
  %spec.select1 = select i1 %66, i64 %rax.17.reload, i64 %r10.09.reload
  %spec.select2 = select i1 %66, i64 %rbx.18.reload, i64 %55
  %spec.select3 = select i1 %66, i64 %r12.111.reload, i64 %67
  store i64 %spec.select1, i64* %rax.0.reg2mem
  store i64 %spec.select2, i64* %rbx.0.reg2mem
  store i64 %r11.110.reload, i64* %r11.0.reg2mem
  store i64 %spec.select3, i64* %r12.0.reg2mem
  br label %dec_label_pc_219c

dec_label_pc_222d:                                ; preds = %dec_label_pc_219c
  %68 = trunc i64 %r11.0.reload to i32, !insn.addr !1456
  %69 = icmp eq i32 %68, 0, !insn.addr !1456
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1457
  br i1 %69, label %dec_label_pc_22a5, label %dec_label_pc_2232, !insn.addr !1457

dec_label_pc_2232:                                ; preds = %dec_label_pc_222d
  %70 = and i64 %rax.0.reload, 4294967295, !insn.addr !1458
  %71 = load i64, i64* %14, align 8, !insn.addr !1459
  %72 = sub i64 %9, %71, !insn.addr !1459
  %narrow = mul nuw nsw i64 %70, 56
  %73 = add i64 %12, %narrow, !insn.addr !1460
  %74 = add i64 %73, 40, !insn.addr !1461
  %75 = inttoptr i64 %74 to i64*, !insn.addr !1461
  %76 = load i64, i64* %75, align 8, !insn.addr !1461
  %77 = add i64 %73, 16, !insn.addr !1462
  %78 = inttoptr i64 %77 to i64*, !insn.addr !1462
  %79 = load i64, i64* %78, align 8, !insn.addr !1462
  %80 = add i64 %79, %72, !insn.addr !1462
  %81 = add i64 %80, %76, !insn.addr !1463
  %82 = add i64 %73, 32, !insn.addr !1464
  %83 = inttoptr i64 %82 to i64*, !insn.addr !1464
  %84 = load i64, i64* %83, align 8, !insn.addr !1464
  %85 = add i64 %80, %84, !insn.addr !1464
  %86 = urem i64 %81, 4096
  %87 = icmp eq i64 %86, 0, !insn.addr !1465
  %88 = add i64 %81, 4096
  %89 = and i64 %88, -4096
  %rdx.0 = select i1 %87, i64 %81, i64 %89
  %90 = sub i64 %rdx.0, %81, !insn.addr !1466
  store i64 %85, i64* %1, align 8, !insn.addr !1467
  %91 = sub i64 %rdx.0, %85, !insn.addr !1468
  %92 = add i64 %arg1, 200, !insn.addr !1469
  %93 = inttoptr i64 %92 to i64*, !insn.addr !1469
  store i64 %90, i64* %93, align 8, !insn.addr !1469
  %94 = add i64 %arg1, 192, !insn.addr !1470
  %95 = inttoptr i64 %94 to i64*, !insn.addr !1470
  store i64 %91, i64* %95, align 8, !insn.addr !1470
  %96 = trunc i64 %arg3 to i32, !insn.addr !1471
  %97 = icmp eq i32 %96, 0, !insn.addr !1471
  %98 = icmp eq i1 %97, false, !insn.addr !1472
  br i1 %98, label %dec_label_pc_2296, label %dec_label_pc_2291, !insn.addr !1472

dec_label_pc_2291:                                ; preds = %dec_label_pc_2232
  store i64 %91, i64* %arg2, align 8, !insn.addr !1473
  store i64 %85, i64* %rax.2.reg2mem, !insn.addr !1474
  br label %dec_label_pc_22a5, !insn.addr !1474

dec_label_pc_2296:                                ; preds = %dec_label_pc_2232
  store i64 %90, i64* %arg2, align 8, !insn.addr !1475
  %99 = icmp eq i64 %90, 0, !insn.addr !1476
  %spec.select4 = select i1 %99, i64 0, i64 %81
  ret i64 %spec.select4

dec_label_pc_22a5:                                ; preds = %dec_label_pc_21ba, %dec_label_pc_2148, %dec_label_pc_222d, %dec_label_pc_2291
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !1477

; uselistorder directives
  uselistorder i64 %rdx.0, { 1, 0 }
  uselistorder i64 %81, { 1, 3, 2, 4, 0 }
  uselistorder i64 %80, { 1, 0 }
  uselistorder i64 %73, { 2, 1, 0 }
  uselistorder i64 %55, { 1, 3, 0, 2 }
  uselistorder i64 %54, { 1, 2, 0 }
  uselistorder i64 %53, { 1, 0 }
  uselistorder i64 %28, { 0, 2, 1, 3, 4 }
  uselistorder i64 %r12.111.reload, { 2, 3, 1, 0 }
  uselistorder i64 %r11.110.reload, { 0, 3, 2, 1 }
  uselistorder i64 %r10.09.reload, { 3, 0, 1, 2 }
  uselistorder i64 %rbx.18.reload, { 2, 3, 1, 0 }
  uselistorder i64 %rax.17.reload, { 2, 1, 0 }
  uselistorder i64 %23, { 2, 1, 0 }
  uselistorder i64 %2, { 2, 1, 0, 3 }
  uselistorder i64* %r12.111.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r11.110.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r10.09.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.18.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.17.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.0.reg2mem, { 1, 3, 4, 0, 2 }
  uselistorder i64* %rbx.0.reg2mem, { 1, 3, 4, 0, 2 }
  uselistorder i64* %r11.0.reg2mem, { 1, 3, 4, 0, 2 }
  uselistorder i64* %r12.0.reg2mem, { 1, 3, 4, 0, 2 }
  uselistorder i64* %rax.2.reg2mem, { 0, 4, 3, 1, 2 }
  uselistorder i64* %arg2, { 2, 3, 0, 1 }
  uselistorder i64 %arg1, { 0, 1, 5, 6, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_22a5, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_218f, { 1, 0 }
}

define i64 @.Lauto_decode.1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_22b0:
  %rax.0.reg2mem = alloca i64, !insn.addr !1478
  %0 = call i64 @.Lparse_bcj.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 2, i64 %arg5), !insn.addr !1479
  %1 = trunc i64 %0 to i32, !insn.addr !1480
  %2 = icmp eq i32 %1, 0, !insn.addr !1480
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !1481
  br i1 %2, label %dec_label_pc_2344, label %dec_label_pc_22d7, !insn.addr !1481

dec_label_pc_22d7:                                ; preds = %dec_label_pc_22b0
  %3 = trunc i64 %arg4 to i32, !insn.addr !1482
  %4 = icmp eq i32 %3, 0, !insn.addr !1482
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !1483
  br i1 %4, label %dec_label_pc_2344, label %dec_label_pc_22e1, !insn.addr !1483

dec_label_pc_22e1:                                ; preds = %dec_label_pc_22d7
  %5 = add i64 %arg1, 76, !insn.addr !1484
  %6 = inttoptr i64 %5 to i32*, !insn.addr !1484
  %7 = load i32, i32* %6, align 4, !insn.addr !1484
  %8 = icmp eq i32 %7, 0, !insn.addr !1484
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !1485
  br i1 %8, label %dec_label_pc_2344, label %dec_label_pc_22e8, !insn.addr !1485

dec_label_pc_22e8:                                ; preds = %dec_label_pc_22e1
  %9 = add i64 %arg1, 88, !insn.addr !1486
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1486
  %11 = load i64, i64* %10, align 8, !insn.addr !1486
  %12 = add i64 %arg1, 8, !insn.addr !1487
  %13 = inttoptr i64 %12 to i64*, !insn.addr !1487
  %14 = load i64, i64* %13, align 8, !insn.addr !1487
  %15 = sub i64 %arg1, %14, !insn.addr !1487
  %16 = add i64 %arg1, 80, !insn.addr !1488
  %17 = inttoptr i64 %16 to i64*, !insn.addr !1488
  %18 = load i64, i64* %17, align 8, !insn.addr !1488
  %19 = add i64 %15, %18, !insn.addr !1488
  %20 = add i64 %19, %11, !insn.addr !1489
  %21 = and i64 %19, -4096, !insn.addr !1490
  %22 = urem i64 %20, 4096
  %23 = icmp eq i64 %22, 0, !insn.addr !1491
  %24 = add i64 %20, 4096
  %25 = and i64 %24, -4096
  %rcx.0 = select i1 %23, i64 %20, i64 %25
  %26 = icmp ugt i64 %21, %arg2, !insn.addr !1492
  %27 = icmp eq i1 %26, false, !insn.addr !1493
  %28 = icmp ugt i64 %rcx.0, %arg2, !insn.addr !1494
  %29 = icmp eq i1 %27, false, !insn.addr !1495
  %30 = icmp eq i1 %29, false, !insn.addr !1496
  %or.cond = icmp eq i1 %28, %30
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1497
  br i1 %or.cond, label %dec_label_pc_2344, label %dec_label_pc_232b, !insn.addr !1497

dec_label_pc_232b:                                ; preds = %dec_label_pc_22e8
  %31 = add i64 %arg3, %arg2, !insn.addr !1498
  %32 = icmp ult i64 %21, %31, !insn.addr !1499
  %33 = or i1 %32, %27
  %34 = icmp ult i64 %rcx.0, %31, !insn.addr !1500
  %35 = icmp eq i1 %34, false, !insn.addr !1501
  %36 = icmp eq i1 %33, %35
  %37 = icmp ne i1 %36, true
  %38 = zext i1 %37 to i64, !insn.addr !1502
  store i64 %38, i64* %rax.0.reg2mem, !insn.addr !1503
  br label %dec_label_pc_2344, !insn.addr !1503

dec_label_pc_2344:                                ; preds = %dec_label_pc_22e8, %dec_label_pc_232b, %dec_label_pc_22e1, %dec_label_pc_22d7, %dec_label_pc_22b0
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1504

; uselistorder directives
  uselistorder i64 %31, { 1, 0 }
  uselistorder i64 %21, { 1, 0 }
  uselistorder i64 %20, { 1, 2, 0 }
  uselistorder i64 %19, { 1, 0 }
  uselistorder i64* %rax.0.reg2mem, { 0, 2, 1, 3, 4, 5 }
  uselistorder i64 %arg1, { 4, 0, 2, 3, 1, 5 }
  uselistorder label %dec_label_pc_2344, { 1, 0, 2, 3, 4 }
}

define i64 @.Lhc_find_func.1(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2350:
  %storemerge.reg2mem = alloca i64, !insn.addr !1505
  %rbx.0.reg2mem = alloca i64, !insn.addr !1505
  %0 = icmp eq i64* %arg2, null, !insn.addr !1506
  %1 = icmp ult i64 %arg1, 16777216
  %or.cond2 = or i1 %1, %0
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1507
  br i1 %or.cond2, label %dec_label_pc_2406, label %dec_label_pc_237a, !insn.addr !1507

dec_label_pc_237a:                                ; preds = %dec_label_pc_2350
  %2 = ptrtoint i64* %arg2 to i64
  %3 = add i64 %2, %arg1, !insn.addr !1508
  %4 = and i64 %arg1, -4096, !insn.addr !1509
  %5 = icmp ult i64 %4, %3, !insn.addr !1510
  %6 = icmp eq i1 %5, false, !insn.addr !1511
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !1511
  br i1 %6, label %dec_label_pc_2406, label %dec_label_pc_238a, !insn.addr !1511

dec_label_pc_238a:                                ; preds = %dec_label_pc_237a
  %7 = icmp eq i64 %arg3, 0, !insn.addr !1512
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1513
  br i1 %7, label %dec_label_pc_2406, label %dec_label_pc_239b.preheader, !insn.addr !1513

dec_label_pc_239b.preheader:                      ; preds = %dec_label_pc_238a
  %8 = add i64 %arg3, 16, !insn.addr !1514
  %9 = inttoptr i64 %8 to i64*, !insn.addr !1514
  %10 = load i64, i64* %9, align 8, !insn.addr !1514
  %11 = icmp eq i64 %10, 0, !insn.addr !1515
  %12 = add i64 %10, 80
  %13 = inttoptr i64 %12 to i64*
  %14 = add i64 %10, 64
  %15 = inttoptr i64 %14 to i64*
  %16 = inttoptr i64 %10 to i32*
  store i64 %4, i64* %rbx.0.reg2mem
  br label %dec_label_pc_239b

dec_label_pc_239b:                                ; preds = %dec_label_pc_239b.preheader, %dec_label_pc_23ed
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1516
  br i1 %11, label %dec_label_pc_2406, label %dec_label_pc_23a5, !insn.addr !1516

dec_label_pc_23a5:                                ; preds = %dec_label_pc_239b
  %17 = load i64, i64* %13, align 8, !insn.addr !1517
  %18 = icmp eq i64 %17, 0, !insn.addr !1517
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1518
  br i1 %18, label %dec_label_pc_2406, label %dec_label_pc_23ac, !insn.addr !1518

dec_label_pc_23ac:                                ; preds = %dec_label_pc_23a5
  %19 = load i64, i64* %15, align 8, !insn.addr !1519
  %20 = icmp eq i64 %19, 0, !insn.addr !1520
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1521
  br i1 %20, label %dec_label_pc_2406, label %dec_label_pc_23b5, !insn.addr !1521

dec_label_pc_23b5:                                ; preds = %dec_label_pc_23ac
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %21 = trunc i64 %19 to i32, !insn.addr !1522
  %22 = icmp slt i32 %21, 0, !insn.addr !1522
  %23 = icmp eq i1 %22, false, !insn.addr !1523
  br i1 %23, label %dec_label_pc_23ed, label %dec_label_pc_23d5, !insn.addr !1523

dec_label_pc_23d5:                                ; preds = %dec_label_pc_23b5
  %24 = load i32, i32* %16, align 4, !insn.addr !1524
  %25 = icmp ne i32 %24, 14, !insn.addr !1524
  %26 = icmp eq i64 %rbx.0.reload, 0, !insn.addr !1525
  %27 = icmp eq i1 %26, false, !insn.addr !1526
  %or.cond = icmp eq i1 %27, %25
  br i1 %or.cond, label %dec_label_pc_23ed, label %dec_label_pc_23e7, !insn.addr !1527

dec_label_pc_23e7:                                ; preds = %dec_label_pc_23d5
  store i32 0, i32* %16, align 4, !insn.addr !1528
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1529
  br label %dec_label_pc_2406, !insn.addr !1529

dec_label_pc_23ed:                                ; preds = %dec_label_pc_23d5, %dec_label_pc_23b5
  %28 = add i64 %rbx.0.reload, 4096, !insn.addr !1530
  %29 = icmp ult i64 %28, %3, !insn.addr !1531
  %30 = icmp eq i1 %29, false, !insn.addr !1532
  store i64 %28, i64* %rbx.0.reg2mem, !insn.addr !1532
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !1532
  br i1 %30, label %dec_label_pc_2406, label %dec_label_pc_239b, !insn.addr !1532

dec_label_pc_2406:                                ; preds = %dec_label_pc_23ed, %dec_label_pc_239b, %dec_label_pc_23a5, %dec_label_pc_23ac, %dec_label_pc_2350, %dec_label_pc_237a, %dec_label_pc_238a, %dec_label_pc_23e7
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1533

; uselistorder directives
  uselistorder i64* %rbx.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 1, 8, 4, 3, 2, 7, 6, 5 }
  uselistorder i64 4096, { 12, 6, 0, 8, 1, 7, 2, 9, 3, 10, 4, 11, 5 }
  uselistorder i64* %arg2, { 1, 0 }
  uselistorder i64 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_2406, { 0, 7, 3, 2, 1, 6, 5, 4 }
  uselistorder label %dec_label_pc_239b, { 1, 0 }
}

define i64 @.Llzma_simple_props_encode.1(i64* %arg1) local_unnamed_addr {
dec_label_pc_2420:
  %0 = ptrtoint i64* %arg1 to i64
  %1 = call i64 @__tls_get_addr(i64 %0), !insn.addr !1534
  ret i64 %1, !insn.addr !1535
}

define i64 @function_2440() local_unnamed_addr {
dec_label_pc_2440:
  %stack_var_-24 = alloca i64, align 8
  store i64 0, i64* %stack_var_-24, align 8, !insn.addr !1536
  %0 = call i64 @.Llzma_simple_props_encode.1(i64* nonnull %stack_var_-24), !insn.addr !1537
  ret i64 %0, !insn.addr !1538
}

define i64 @.Lstream_decoder_mt_end.0(i64 %arg1) local_unnamed_addr {
dec_label_pc_2470:
  %0 = load i64, i64* @global_var_cae0, align 8, !insn.addr !1539
  %1 = add i64 %0, 384
  ret i64 %1, !insn.addr !1540
}

define i64 @.Llzma_lz_encoder_memusage.1(i64 %arg1) local_unnamed_addr {
dec_label_pc_24d0:
  %0 = load i64, i64* @global_var_cad8, align 8, !insn.addr !1541
  %1 = add i64 %0, 672
  ret i64 %1, !insn.addr !1542
}

define i64 @function_2530(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2530:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i8
  %storemerge.reg2mem = alloca i64, !insn.addr !1543
  %r13.1.reg2mem = alloca i64, !insn.addr !1543
  %r9.09.reg2mem = alloca i64, !insn.addr !1543
  %r9.0.ph11.reg2mem = alloca i64, !insn.addr !1543
  %r13.0.ph12.reg2mem = alloca i64, !insn.addr !1543
  %rdx.0.reg2mem = alloca i64, !insn.addr !1543
  %3 = load i64, i64* %0
  %4 = load i8, i8* %2
  %5 = load i64, i64* %0
  %6 = load i32, i32* %1
  %7 = load i8, i8* %2
  %8 = load i32, i32* %1
  %9 = load i32, i32* %1
  %stack_var_-128 = alloca i64, align 8
  %stack_var_-136 = alloca i64, align 8
  store i64 0, i64* %stack_var_-136, align 8, !insn.addr !1544
  %10 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !1545
  %11 = add i64 %10, 16, !insn.addr !1546
  %12 = inttoptr i64 %11 to i64*, !insn.addr !1546
  store i64 %arg3, i64* %12, align 8, !insn.addr !1546
  %13 = call i64 @.Llzma_check_update.0(i64 %arg2, i64* nonnull %stack_var_-136, i64 %arg3, i64 %arg4), !insn.addr !1547
  %14 = icmp eq i64 %13, 0, !insn.addr !1548
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1549
  br i1 %14, label %dec_label_pc_2732, label %dec_label_pc_2579, !insn.addr !1549

dec_label_pc_2579:                                ; preds = %dec_label_pc_2530
  %15 = load i64, i64* %stack_var_-136, align 8, !insn.addr !1550
  %16 = call i64 @lzma_alloc(i64 1880, i64 %10, i64 %arg3, i64 %arg4), !insn.addr !1551
  %17 = add i64 %arg4, 112, !insn.addr !1552
  %18 = inttoptr i64 %17 to i64*, !insn.addr !1552
  store i64 %16, i64* %18, align 8, !insn.addr !1552
  %19 = icmp eq i64 %16, 0, !insn.addr !1553
  br i1 %19, label %dec_label_pc_25a2, label %dec_label_pc_259b, !insn.addr !1554

dec_label_pc_259b:                                ; preds = %dec_label_pc_2579
  %20 = add i64 %arg4, 288, !insn.addr !1555
  %21 = inttoptr i64 %20 to i32*, !insn.addr !1555
  %22 = load i32, i32* %21, align 4, !insn.addr !1555
  %23 = add i32 %22, 1, !insn.addr !1555
  store i32 %23, i32* %21, align 4, !insn.addr !1555
  br label %dec_label_pc_25a2, !insn.addr !1555

dec_label_pc_25a2:                                ; preds = %dec_label_pc_259b, %dec_label_pc_2579
  %24 = call i64 @.Ldelta_decode.part.0(i64 %arg2, i64 552), !insn.addr !1556
  %25 = icmp eq i64 %24, 0, !insn.addr !1557
  %26 = icmp eq i1 %25, false, !insn.addr !1558
  store i64 %arg3, i64* %rdx.0.reg2mem, !insn.addr !1558
  br i1 %26, label %dec_label_pc_25cd, label %dec_label_pc_25b9, !insn.addr !1558

dec_label_pc_25b9:                                ; preds = %dec_label_pc_2715, %dec_label_pc_271d, %dec_label_pc_263d, %dec_label_pc_25cd, %dec_label_pc_25a2
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %27 = load i64, i64* %18, align 8, !insn.addr !1559
  %28 = call i64 @lzma_free(i64 %27, i64 %10, i64 %rdx.0.reload), !insn.addr !1560
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1560
  br label %dec_label_pc_2732, !insn.addr !1560

dec_label_pc_25cd:                                ; preds = %dec_label_pc_25a2
  %29 = add i64 %15, %13, !insn.addr !1561
  %30 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i32** @global_var_18 to i64), i64 552) to i64*), align 8, !insn.addr !1562
  %31 = add i64 %30, 552, !insn.addr !1562
  %32 = icmp ult i64 %31, %29, !insn.addr !1563
  %33 = icmp eq i1 %32, false, !insn.addr !1564
  %34 = icmp ult i64 %31, %13, !insn.addr !1565
  %or.cond = or i1 %34, %33
  store i64 %arg3, i64* %rdx.0.reg2mem, !insn.addr !1564
  br i1 %or.cond, label %dec_label_pc_25b9, label %dec_label_pc_25df, !insn.addr !1564

dec_label_pc_25df:                                ; preds = %dec_label_pc_25cd
  %35 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !1566
  call void @__asm_rep_stosd_memset(i8* nonnull %35, i32 0, i64 22), !insn.addr !1566
  %36 = call i64 @.Lcrc_init.0(i64 %arg3, i64 248, i32 0, i64 0), !insn.addr !1567
  %37 = icmp eq i64 %36, 0, !insn.addr !1568
  br i1 %37, label %dec_label_pc_263d, label %dec_label_pc_2628, !insn.addr !1569

dec_label_pc_2628:                                ; preds = %dec_label_pc_25df
  %38 = add i64 %36, 8, !insn.addr !1570
  %39 = inttoptr i64 %38 to i64*, !insn.addr !1570
  %40 = load i64, i64* %39, align 8, !insn.addr !1570
  %41 = add i64 %arg4, 288, !insn.addr !1571
  %42 = inttoptr i64 %41 to i32*, !insn.addr !1571
  %43 = load i32, i32* %42, align 4, !insn.addr !1571
  %44 = add i32 %43, 1, !insn.addr !1571
  store i32 %44, i32* %42, align 4, !insn.addr !1571
  %45 = add i64 %arg4, 240, !insn.addr !1572
  %46 = inttoptr i64 %45 to i64*, !insn.addr !1572
  store i64 %40, i64* %46, align 8, !insn.addr !1572
  br label %dec_label_pc_263d, !insn.addr !1572

dec_label_pc_263d:                                ; preds = %dec_label_pc_2628, %dec_label_pc_25df
  %47 = add i64 %30, 1064, !insn.addr !1573
  %48 = icmp ugt i64 %29, %47
  %49 = select i1 %48, i64 %47, i64 %29, !insn.addr !1574
  %50 = icmp ult i64 %31, %49, !insn.addr !1575
  %51 = icmp eq i1 %50, false, !insn.addr !1576
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !1576
  br i1 %51, label %dec_label_pc_25b9, label %dec_label_pc_264e.lr.ph.lr.ph, !insn.addr !1576

dec_label_pc_264e.lr.ph.lr.ph:                    ; preds = %dec_label_pc_263d
  %52 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !1577
  %53 = sext i32 %8 to i64
  %54 = icmp eq i32 %9, 269
  %55 = icmp eq i1 %54, false
  %56 = and i8 %7, ptrtoint (i32** @global_var_48 to i8)
  %57 = icmp eq i8 %56, ptrtoint (i32** @global_var_48 to i8)
  %58 = and i32 %6, -256
  %59 = icmp eq i32 %58, 84344832
  %60 = add i64 %5, %53
  %61 = icmp eq i32 %9, 383
  %62 = icmp eq i1 %61, false
  %63 = icmp eq i32 %58, 84017152
  %64 = icmp eq i1 %63, false
  %65 = urem i8 %4, 2
  %66 = icmp eq i8 %65, 0
  %or.cond5 = or i1 %66, %64
  %67 = icmp eq i1 %59, %57
  store i64 0, i64* %r13.0.ph12.reg2mem
  store i64 %31, i64* %r9.0.ph11.reg2mem
  br label %dec_label_pc_264e.lr.ph

dec_label_pc_264e.lr.ph:                          ; preds = %dec_label_pc_264e.lr.ph.lr.ph, %dec_label_pc_2715
  %r9.0.ph11.reload = load i64, i64* %r9.0.ph11.reg2mem
  %r13.0.ph12.reload = load i64, i64* %r13.0.ph12.reg2mem
  store i64 %r9.0.ph11.reload, i64* %r9.09.reg2mem
  br label %dec_label_pc_264e

dec_label_pc_264e:                                ; preds = %dec_label_pc_264e.lr.ph, %dec_label_pc_271d
  %r9.09.reload = load i64, i64* %r9.09.reg2mem
  %68 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-128, i64 %r9.09.reload, i64 %49, i64 %52, i64 %3, i64 %r9.09.reload), !insn.addr !1578
  %69 = trunc i64 %68 to i32, !insn.addr !1579
  %70 = icmp eq i32 %69, 0, !insn.addr !1579
  br i1 %70, label %dec_label_pc_271d, label %dec_label_pc_2672, !insn.addr !1580

dec_label_pc_2672:                                ; preds = %dec_label_pc_264e
  br i1 %55, label %dec_label_pc_26b9, label %dec_label_pc_2682, !insn.addr !1581

dec_label_pc_2682:                                ; preds = %dec_label_pc_2672
  store i64 %r13.0.ph12.reload, i64* %r13.1.reg2mem, !insn.addr !1582
  br i1 %67, label %dec_label_pc_269e, label %dec_label_pc_2715, !insn.addr !1582

dec_label_pc_269e:                                ; preds = %dec_label_pc_2682
  %71 = load i64, i64* %stack_var_-128, align 8, !insn.addr !1583
  %72 = add i64 %71, %60, !insn.addr !1584
  %73 = icmp ult i64 %72, %13, !insn.addr !1585
  store i64 %r13.0.ph12.reload, i64* %r13.1.reg2mem, !insn.addr !1586
  br i1 %73, label %dec_label_pc_2715, label %dec_label_pc_26b0, !insn.addr !1586

dec_label_pc_26b0:                                ; preds = %dec_label_pc_269e
  %74 = icmp ult i64 %72, %29, !insn.addr !1587
  %75 = select i1 %74, i64 %72, i64 %r13.0.ph12.reload, !insn.addr !1588
  store i64 %75, i64* %r13.1.reg2mem, !insn.addr !1589
  br label %dec_label_pc_2715, !insn.addr !1589

dec_label_pc_26b9:                                ; preds = %dec_label_pc_2672
  %76 = icmp eq i64 %r13.0.ph12.reload, 0, !insn.addr !1590
  %or.cond3 = or i1 %62, %76
  %brmerge17 = or i1 %or.cond5, %or.cond3
  store i64 %r13.0.ph12.reload, i64* %r13.1.reg2mem, !insn.addr !1591
  br i1 %brmerge17, label %dec_label_pc_2715, label %dec_label_pc_26d9, !insn.addr !1591

dec_label_pc_26d9:                                ; preds = %dec_label_pc_26b9
  %77 = load i64, i64* %stack_var_-128, align 8, !insn.addr !1592
  %78 = add i64 %77, %60, !insn.addr !1593
  %79 = icmp eq i64 %24, %78, !insn.addr !1594
  %80 = icmp eq i1 %79, false, !insn.addr !1595
  store i64 %r13.0.ph12.reload, i64* %r13.1.reg2mem, !insn.addr !1595
  br i1 %80, label %dec_label_pc_2715, label %dec_label_pc_26ed, !insn.addr !1595

dec_label_pc_26ed:                                ; preds = %dec_label_pc_26d9
  %81 = call i64 @.Lcrc_init.0(i64 %arg3, i64 3168, i32 0, i64 %52), !insn.addr !1596
  %82 = icmp eq i64 %81, 0, !insn.addr !1597
  br i1 %82, label %dec_label_pc_2725, label %dec_label_pc_2701, !insn.addr !1598

dec_label_pc_2701:                                ; preds = %dec_label_pc_26ed
  %83 = add i64 %81, 8, !insn.addr !1599
  %84 = inttoptr i64 %83 to i64*, !insn.addr !1599
  %85 = load i64, i64* %84, align 8, !insn.addr !1599
  %86 = add i64 %arg4, 88, !insn.addr !1600
  %87 = inttoptr i64 %86 to i64*, !insn.addr !1600
  store i64 %85, i64* %87, align 8, !insn.addr !1600
  %88 = add i64 %arg4, 288, !insn.addr !1601
  %89 = inttoptr i64 %88 to i32*, !insn.addr !1601
  %90 = load i32, i32* %89, align 4, !insn.addr !1601
  %91 = add i32 %90, 1, !insn.addr !1601
  store i32 %91, i32* %89, align 4, !insn.addr !1601
  br label %dec_label_pc_2725, !insn.addr !1602

dec_label_pc_2715:                                ; preds = %dec_label_pc_2682, %dec_label_pc_26b9, %dec_label_pc_26d9, %dec_label_pc_26b0, %dec_label_pc_269e
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %92 = add i64 %r9.09.reload, %53, !insn.addr !1603
  %93 = icmp ult i64 %92, %49, !insn.addr !1575
  %94 = icmp eq i1 %93, false, !insn.addr !1576
  store i64 %53, i64* %rdx.0.reg2mem, !insn.addr !1576
  store i64 %r13.1.reload, i64* %r13.0.ph12.reg2mem, !insn.addr !1576
  store i64 %92, i64* %r9.0.ph11.reg2mem, !insn.addr !1576
  br i1 %94, label %dec_label_pc_25b9, label %dec_label_pc_264e.lr.ph, !insn.addr !1576

dec_label_pc_271d:                                ; preds = %dec_label_pc_264e
  %95 = add i64 %r9.09.reload, 1, !insn.addr !1604
  %96 = icmp ult i64 %95, %49, !insn.addr !1575
  %97 = icmp eq i1 %96, false, !insn.addr !1576
  store i64 %49, i64* %rdx.0.reg2mem, !insn.addr !1576
  store i64 %95, i64* %r9.09.reg2mem, !insn.addr !1576
  br i1 %97, label %dec_label_pc_25b9, label %dec_label_pc_264e, !insn.addr !1576

dec_label_pc_2725:                                ; preds = %dec_label_pc_2701, %dec_label_pc_26ed
  store i64 %r13.0.ph12.reload, i64* %arg1, align 8, !insn.addr !1605
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !1606
  br label %dec_label_pc_2732, !insn.addr !1606

dec_label_pc_2732:                                ; preds = %dec_label_pc_2530, %dec_label_pc_25b9, %dec_label_pc_2725
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1607

; uselistorder directives
  uselistorder i64 %72, { 1, 0, 2 }
  uselistorder i64 %r9.09.reload, { 2, 3, 1, 0 }
  uselistorder i64 %r13.0.ph12.reload, { 6, 2, 3, 4, 5, 0, 1 }
  uselistorder i64 %53, { 0, 2, 1 }
  uselistorder i64 %49, { 0, 3, 2, 4, 1 }
  uselistorder i64 %29, { 0, 2, 3, 1 }
  uselistorder i64 %16, { 1, 0 }
  uselistorder i64 %13, { 2, 1, 0, 3 }
  uselistorder i64* %stack_var_-136, { 1, 0, 2 }
  uselistorder i64* %stack_var_-128, { 2, 3, 0, 4, 1 }
  uselistorder i32 %9, { 1, 0 }
  uselistorder i64* %rdx.0.reg2mem, { 2, 1, 3, 5, 0, 4 }
  uselistorder i64* %r13.0.ph12.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r9.0.ph11.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r9.09.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r13.1.reg2mem, { 0, 4, 5, 1, 2, 3 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 2, 1 }
  uselistorder i8* %2, { 1, 0 }
  uselistorder i32* %1, { 2, 1, 0 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 %arg4, { 3, 4, 1, 2, 0, 5, 6, 7 }
  uselistorder i64 %arg3, { 2, 3, 1, 0, 4, 6, 5 }
  uselistorder label %dec_label_pc_2732, { 2, 1, 0 }
  uselistorder label %dec_label_pc_2715, { 2, 1, 3, 4, 0 }
  uselistorder label %dec_label_pc_264e, { 1, 0 }
  uselistorder label %dec_label_pc_264e.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_25b9, { 1, 0, 2, 3, 4 }
}

define i64 @function_2750(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2750:
  %rax.0.reg2mem = alloca i64, !insn.addr !1608
  %0 = icmp eq i64 %arg1, 0, !insn.addr !1608
  br i1 %0, label %dec_label_pc_27ab, label %dec_label_pc_2755, !insn.addr !1609

dec_label_pc_2755:                                ; preds = %dec_label_pc_2750
  %1 = add i64 %arg1, 64, !insn.addr !1610
  %2 = inttoptr i64 %1 to i64*, !insn.addr !1610
  %3 = load i64, i64* %2, align 8, !insn.addr !1610
  %4 = icmp eq i64 %3, 0, !insn.addr !1611
  br i1 %4, label %dec_label_pc_2772, label %dec_label_pc_275e, !insn.addr !1612

dec_label_pc_275e:                                ; preds = %dec_label_pc_2755
  %5 = add i64 %arg1, ptrtoint (i32** @global_var_48 to i64), !insn.addr !1613
  %6 = inttoptr i64 %5 to i32*, !insn.addr !1613
  %7 = load i32, i32* %6, align 4, !insn.addr !1613
  %8 = inttoptr i64 %3 to i32*, !insn.addr !1614
  store i32 %7, i32* %8, align 4, !insn.addr !1614
  %9 = add i64 %arg1, 248, !insn.addr !1615
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1615
  %11 = load i64, i64* %10, align 8, !insn.addr !1615
  %12 = icmp eq i64 %11, 0, !insn.addr !1616
  br i1 %12, label %dec_label_pc_2772, label %dec_label_pc_276f, !insn.addr !1617

dec_label_pc_276f:                                ; preds = %dec_label_pc_275e
  %13 = inttoptr i64 %11 to i64*, !insn.addr !1618
  store i64 %3, i64* %13, align 8, !insn.addr !1618
  br label %dec_label_pc_2772, !insn.addr !1618

dec_label_pc_2772:                                ; preds = %dec_label_pc_276f, %dec_label_pc_275e, %dec_label_pc_2755
  %14 = add i64 %arg1, 80, !insn.addr !1619
  %15 = inttoptr i64 %14 to i64*, !insn.addr !1619
  %16 = load i64, i64* %15, align 8, !insn.addr !1619
  %17 = icmp eq i64 %16, 0, !insn.addr !1620
  br i1 %17, label %dec_label_pc_2780, label %dec_label_pc_277b, !insn.addr !1621

dec_label_pc_277b:                                ; preds = %dec_label_pc_2772
  %18 = add i64 %arg1, 88, !insn.addr !1622
  %19 = inttoptr i64 %18 to i32*, !insn.addr !1622
  %20 = load i32, i32* %19, align 4, !insn.addr !1622
  %21 = inttoptr i64 %16 to i32*, !insn.addr !1623
  store i32 %20, i32* %21, align 4, !insn.addr !1623
  br label %dec_label_pc_2780, !insn.addr !1623

dec_label_pc_2780:                                ; preds = %dec_label_pc_277b, %dec_label_pc_2772
  %22 = add i64 %arg1, 96, !insn.addr !1624
  %23 = inttoptr i64 %22 to i64*, !insn.addr !1624
  %24 = load i64, i64* %23, align 8, !insn.addr !1624
  %25 = icmp eq i64 %24, 0, !insn.addr !1625
  br i1 %25, label %dec_label_pc_2790, label %dec_label_pc_2789, !insn.addr !1626

dec_label_pc_2789:                                ; preds = %dec_label_pc_2780
  %26 = add i64 %arg1, 104, !insn.addr !1627
  %27 = inttoptr i64 %26 to i8*, !insn.addr !1627
  %28 = load i8, i8* %27, align 1, !insn.addr !1627
  %29 = sub i8 0, %28
  %30 = sub i8 %29, 1
  %31 = inttoptr i64 %24 to i8*, !insn.addr !1628
  %32 = load i8, i8* %31, align 1, !insn.addr !1628
  %33 = and i8 %32, %30, !insn.addr !1628
  store i8 %33, i8* %31, align 1, !insn.addr !1628
  br label %dec_label_pc_2790, !insn.addr !1628

dec_label_pc_2790:                                ; preds = %dec_label_pc_2789, %dec_label_pc_2780
  %34 = add i64 %arg1, 120, !insn.addr !1629
  %35 = inttoptr i64 %34 to i64*, !insn.addr !1629
  %36 = load i64, i64* %35, align 8, !insn.addr !1629
  %37 = icmp eq i64 %36, 0, !insn.addr !1630
  br i1 %37, label %dec_label_pc_279d, label %dec_label_pc_2799, !insn.addr !1631

dec_label_pc_2799:                                ; preds = %dec_label_pc_2790
  %38 = inttoptr i64 %36 to i32*, !insn.addr !1632
  store i32 0, i32* %38, align 4, !insn.addr !1632
  br label %dec_label_pc_279d, !insn.addr !1632

dec_label_pc_279d:                                ; preds = %dec_label_pc_2799, %dec_label_pc_2790
  %39 = add i64 %arg1, 112, !insn.addr !1633
  %40 = inttoptr i64 %39 to i64*, !insn.addr !1633
  %41 = load i64, i64* %40, align 8, !insn.addr !1633
  %42 = icmp eq i64 %41, 0, !insn.addr !1634
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1635
  br i1 %42, label %dec_label_pc_27ab, label %dec_label_pc_27a6, !insn.addr !1635

dec_label_pc_27a6:                                ; preds = %dec_label_pc_279d
  %43 = inttoptr i64 %41 to i64*, !insn.addr !1636
  store i64 0, i64* %43, align 8, !insn.addr !1636
  store i64 %41, i64* %rax.0.reg2mem, !insn.addr !1636
  br label %dec_label_pc_27ab, !insn.addr !1636

dec_label_pc_27ab:                                ; preds = %dec_label_pc_27a6, %dec_label_pc_279d, %dec_label_pc_2750
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1637

; uselistorder directives
  uselistorder i64 %arg1, { 4, 5, 3, 6, 2, 7, 0, 1, 8, 9 }
}

define i64 @.Llzma_delta_decoder_init.part.0(i64* %arg1) local_unnamed_addr {
dec_label_pc_27b0:
  %rax.0.reg2mem = alloca i64, !insn.addr !1638
  %0 = icmp eq i64* %arg1, null, !insn.addr !1639
  store i64 5, i64* %rax.0.reg2mem, !insn.addr !1640
  br i1 %0, label %dec_label_pc_2821, label %dec_label_pc_27be, !insn.addr !1640

dec_label_pc_27be:                                ; preds = %dec_label_pc_27b0
  %1 = ptrtoint i64* %arg1 to i64
  %2 = add i64 %1, 56, !insn.addr !1641
  %3 = inttoptr i64 %2 to i64*, !insn.addr !1641
  store i64 ptrtoint (i32* @global_var_cb40 to i64), i64* %3, align 8, !insn.addr !1641
  %4 = add i64 %1, 48, !insn.addr !1642
  %5 = inttoptr i64 %4 to i64*, !insn.addr !1642
  %6 = load i64, i64* %5, align 8, !insn.addr !1642
  %7 = icmp eq i64 %6, 0, !insn.addr !1642
  %8 = icmp eq i1 %7, false, !insn.addr !1643
  store i64 zext (i32 xor (i32 ptrtoint (i32* @global_var_cb40 to i32), i32 ptrtoint (i32* @global_var_cb40 to i32)) to i64), i64* %rax.0.reg2mem, !insn.addr !1643
  br i1 %8, label %dec_label_pc_2821, label %dec_label_pc_27d2, !insn.addr !1643

dec_label_pc_27d2:                                ; preds = %dec_label_pc_27be
  %9 = add i64 %1, 104, !insn.addr !1644
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1644
  store i64 4, i64* %10, align 8, !insn.addr !1644
  %11 = add i64 %1, 64, !insn.addr !1645
  %12 = inttoptr i64 %11 to i64*, !insn.addr !1645
  store i64 10416, i64* %12, align 8, !insn.addr !1645
  %13 = load i64, i64* inttoptr (i64 10220 to i64*), align 8, !insn.addr !1646
  %14 = add i64 %1, ptrtoint (i32** @global_var_48 to i64), !insn.addr !1647
  %15 = inttoptr i64 %14 to i64*, !insn.addr !1647
  store i64 %13, i64* %15, align 8, !insn.addr !1647
  %16 = load i64, i64* inttoptr (i64 10231 to i64*), align 8, !insn.addr !1648
  %17 = add i64 %1, 80, !insn.addr !1649
  %18 = inttoptr i64 %17 to i64*, !insn.addr !1649
  store i64 %16, i64* %18, align 8, !insn.addr !1649
  %19 = load i64, i64* inttoptr (i64 10242 to i64*), align 8, !insn.addr !1650
  %20 = add i64 %1, 88, !insn.addr !1651
  %21 = inttoptr i64 %20 to i64*, !insn.addr !1651
  store i64 %19, i64* %21, align 8, !insn.addr !1651
  %22 = load i64, i64* inttoptr (i64 10253 to i64*), align 8, !insn.addr !1652
  %23 = add i64 %1, 112, !insn.addr !1653
  %24 = inttoptr i64 %23 to i64*, !insn.addr !1653
  store i64 %22, i64* %24, align 8, !insn.addr !1653
  %25 = load i64, i64* inttoptr (i64 10264 to i64*), align 8, !insn.addr !1654
  %26 = add i64 %1, 120, !insn.addr !1655
  %27 = inttoptr i64 %26 to i64*, !insn.addr !1655
  store i64 %25, i64* %27, align 8, !insn.addr !1655
  store i64 101, i64* %rax.0.reg2mem, !insn.addr !1656
  br label %dec_label_pc_2821, !insn.addr !1656

dec_label_pc_2821:                                ; preds = %dec_label_pc_27d2, %dec_label_pc_27be, %dec_label_pc_27b0
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1657

; uselistorder directives
  uselistorder i64 %1, { 0, 1, 2, 3, 4, 5, 7, 6, 8 }
  uselistorder i64* %arg1, { 1, 0 }
}

define i64 @.Llzma_delta_props_decode.part.0(i64 %arg1) local_unnamed_addr {
dec_label_pc_2830:
  %rax.0.reg2mem = alloca i64, !insn.addr !1658
  %0 = icmp eq i64 %arg1, 0, !insn.addr !1659
  store i64 5, i64* %rax.0.reg2mem, !insn.addr !1660
  br i1 %0, label %dec_label_pc_2860, label %dec_label_pc_283e, !insn.addr !1660

dec_label_pc_283e:                                ; preds = %dec_label_pc_2830
  %1 = load i64, i64* inttoptr (i64 10309 to i64*), align 8, !insn.addr !1661
  %2 = inttoptr i64 %arg1 to i64*, !insn.addr !1662
  store i64 %1, i64* %2, align 8, !insn.addr !1662
  %3 = load i64, i64* inttoptr (i64 10319 to i64*), align 8, !insn.addr !1663
  %4 = add i64 %arg1, 8, !insn.addr !1664
  %5 = inttoptr i64 %4 to i64*, !insn.addr !1664
  store i64 %3, i64* %5, align 8, !insn.addr !1664
  %6 = load i64, i64* inttoptr (i64 10330 to i64*), align 8, !insn.addr !1665
  %7 = add i64 %arg1, 16, !insn.addr !1666
  %8 = inttoptr i64 %7 to i64*, !insn.addr !1666
  store i64 %6, i64* %8, align 8, !insn.addr !1666
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1667
  br label %dec_label_pc_2860, !insn.addr !1667

dec_label_pc_2860:                                ; preds = %dec_label_pc_283e, %dec_label_pc_2830
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1667
}

define i64 @function_2870(i64 %arg1) local_unnamed_addr {
dec_label_pc_2870:
  %rax.0.reg2mem = alloca i64, !insn.addr !1668
  %0 = add i64 %arg1, 288, !insn.addr !1668
  %1 = inttoptr i64 %0 to i32*, !insn.addr !1668
  %2 = load i32, i32* %1, align 4, !insn.addr !1668
  %3 = icmp eq i32 %2, 29, !insn.addr !1668
  %4 = icmp eq i1 %3, false, !insn.addr !1669
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1669
  br i1 %4, label %dec_label_pc_28ab, label %dec_label_pc_2879, !insn.addr !1669

dec_label_pc_2879:                                ; preds = %dec_label_pc_2870
  %5 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !1670
  %6 = inttoptr i64 %5 to i64*, !insn.addr !1670
  %7 = load i64, i64* %6, align 8, !insn.addr !1670
  %8 = icmp eq i64 %7, 0, !insn.addr !1670
  %9 = icmp eq i1 %8, false, !insn.addr !1671
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !1671
  br i1 %9, label %dec_label_pc_28ab, label %dec_label_pc_2885, !insn.addr !1671

dec_label_pc_2885:                                ; preds = %dec_label_pc_2879
  %10 = add i64 %arg1, 32, !insn.addr !1672
  %11 = inttoptr i64 %10 to i64*, !insn.addr !1672
  %12 = load i64, i64* %11, align 8, !insn.addr !1672
  %13 = icmp eq i64 %12, 0, !insn.addr !1672
  %14 = icmp eq i1 %13, false, !insn.addr !1673
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !1673
  br i1 %14, label %dec_label_pc_28ab, label %dec_label_pc_288c, !insn.addr !1673

dec_label_pc_288c:                                ; preds = %dec_label_pc_2885
  %15 = add i64 %arg1, 40, !insn.addr !1674
  %16 = inttoptr i64 %15 to i64*, !insn.addr !1674
  %17 = load i64, i64* %16, align 8, !insn.addr !1674
  %18 = icmp eq i64 %17, 0, !insn.addr !1674
  %19 = icmp eq i1 %18, false, !insn.addr !1675
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !1675
  br i1 %19, label %dec_label_pc_28ab, label %dec_label_pc_2893, !insn.addr !1675

dec_label_pc_2893:                                ; preds = %dec_label_pc_288c
  store i64 28496, i64* %6, align 8, !insn.addr !1676
  store i64 10288, i64* %16, align 8, !insn.addr !1677
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1677
  br label %dec_label_pc_28ab, !insn.addr !1677

dec_label_pc_28ab:                                ; preds = %dec_label_pc_2870, %dec_label_pc_2893, %dec_label_pc_288c, %dec_label_pc_2885, %dec_label_pc_2879
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1678

; uselistorder directives
  uselistorder i64* %rax.0.reg2mem, { 0, 2, 3, 4, 5, 1 }
  uselistorder i64 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_28ab, { 1, 2, 3, 4, 0 }
}

define i64 @function_28b0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_28b0:
  %rdx.0.reg2mem = alloca i64, !insn.addr !1679
  %rcx.1.reg2mem = alloca i64, !insn.addr !1679
  %storemerge1.in.in.in.reg2mem = alloca i64, !insn.addr !1679
  %rcx.0.reg2mem = alloca i64, !insn.addr !1679
  %0 = load i32, i32* @global_var_cb40, align 4, !insn.addr !1680
  %1 = sext i32 %0 to i64, !insn.addr !1680
  %2 = add nsw i64 %1, 304, !insn.addr !1681
  %3 = inttoptr i64 %2 to i32*, !insn.addr !1681
  %4 = load i32, i32* %3, align 4, !insn.addr !1681
  %5 = icmp eq i32 %4, 0, !insn.addr !1681
  %6 = icmp eq i1 %5, false, !insn.addr !1682
  br i1 %6, label %dec_label_pc_2a14, label %dec_label_pc_28de, !insn.addr !1682

dec_label_pc_28de:                                ; preds = %dec_label_pc_28b0
  %7 = add nsw i64 %1, 256, !insn.addr !1683
  %8 = inttoptr i64 %7 to i64*, !insn.addr !1683
  %9 = load i64, i64* %8, align 8, !insn.addr !1683
  %10 = icmp ult i64 %9, %arg7, !insn.addr !1684
  %11 = icmp eq i1 %10, false, !insn.addr !1685
  br i1 %11, label %dec_label_pc_2a08, label %dec_label_pc_2906, !insn.addr !1685

dec_label_pc_2906:                                ; preds = %dec_label_pc_28de
  %12 = sub i64 %arg7, %9, !insn.addr !1686
  %13 = add nsw i64 %1, 264, !insn.addr !1687
  %14 = inttoptr i64 %13 to i64*, !insn.addr !1687
  %15 = load i64, i64* %14, align 8, !insn.addr !1687
  %16 = add i64 %15, %9, !insn.addr !1687
  %17 = icmp ult i64 %16, %12, !insn.addr !1688
  br i1 %17, label %dec_label_pc_2a08, label %dec_label_pc_291d, !insn.addr !1689

dec_label_pc_291d:                                ; preds = %dec_label_pc_2906
  %18 = add nsw i64 %1, 296, !insn.addr !1690
  %19 = inttoptr i64 %18 to i64*, !insn.addr !1690
  %20 = load i64, i64* %19, align 8, !insn.addr !1690
  %21 = load i64, i64* inttoptr (i64 10469 to i64*), align 8, !insn.addr !1691
  %22 = inttoptr i64 %21 to i64*, !insn.addr !1692
  %23 = load i64, i64* %22, align 8, !insn.addr !1692
  %24 = add i64 %23, 16, !insn.addr !1693
  %25 = inttoptr i64 %24 to i64*, !insn.addr !1693
  %26 = load i64, i64* %25, align 8, !insn.addr !1693
  %27 = add i64 %26, 104, !insn.addr !1694
  %28 = inttoptr i64 %27 to i64*, !insn.addr !1694
  %29 = load i64, i64* %28, align 8, !insn.addr !1694
  %30 = call i64 @.Lsimple_coder_update.0(i64 %arg6, i32 0, i64 %12, i64 %arg4), !insn.addr !1695
  %31 = add i64 %20, ptrtoint (i32** @global_var_18 to i64), !insn.addr !1696
  %32 = inttoptr i64 %31 to i64*, !insn.addr !1696
  %33 = load i64, i64* %32, align 8, !insn.addr !1696
  %34 = trunc i64 %30 to i32, !insn.addr !1697
  %35 = icmp eq i32 %34, 464, !insn.addr !1697
  %36 = icmp eq i1 %35, false, !insn.addr !1698
  %37 = icmp eq i64 %33, 0, !insn.addr !1699
  %or.cond = or i1 %37, %36
  br i1 %or.cond, label %dec_label_pc_2970, label %dec_label_pc_2937, !insn.addr !1698

dec_label_pc_2937:                                ; preds = %dec_label_pc_291d
  %38 = inttoptr i64 %33 to i64*, !insn.addr !1700
  %39 = load i64, i64* %38, align 8, !insn.addr !1700
  %40 = icmp ult i64 %39, 16777216
  store i64 %arg4, i64* %rcx.1.reg2mem, !insn.addr !1701
  store i64 %33, i64* %rdx.0.reg2mem, !insn.addr !1701
  br i1 %40, label %dec_label_pc_2a00, label %dec_label_pc_2946, !insn.addr !1701

dec_label_pc_2946:                                ; preds = %dec_label_pc_2937
  %41 = inttoptr i64 %20 to i64*, !insn.addr !1702
  store i64 %39, i64* %41, align 8, !insn.addr !1702
  %42 = add nsw i64 %1, 272, !insn.addr !1703
  %43 = inttoptr i64 %42 to i64*, !insn.addr !1703
  %44 = load i64, i64* %43, align 8, !insn.addr !1703
  store i64 %44, i64* %38, align 8, !insn.addr !1704
  %45 = icmp ule i64 %arg1, %arg7
  %46 = icmp ugt i64 %29, %arg1, !insn.addr !1705
  %47 = icmp eq i1 %46, false, !insn.addr !1706
  %or.cond6 = or i1 %45, %47
  store i64 %arg4, i64* %rcx.1.reg2mem, !insn.addr !1707
  store i64 %33, i64* %rdx.0.reg2mem, !insn.addr !1707
  br i1 %or.cond6, label %dec_label_pc_2a00, label %dec_label_pc_2967, !insn.addr !1707

dec_label_pc_2967:                                ; preds = %dec_label_pc_2946
  %48 = add i64 %arg1, 8, !insn.addr !1708
  %49 = inttoptr i64 %48 to i64*, !insn.addr !1708
  store i64 %44, i64* %49, align 8, !insn.addr !1708
  store i64 %arg4, i64* %rcx.1.reg2mem, !insn.addr !1709
  store i64 %33, i64* %rdx.0.reg2mem, !insn.addr !1709
  br label %dec_label_pc_2a00, !insn.addr !1709

dec_label_pc_2970:                                ; preds = %dec_label_pc_291d
  %50 = add i64 %20, 32, !insn.addr !1710
  %51 = inttoptr i64 %50 to i64*, !insn.addr !1710
  %52 = load i64, i64* %51, align 8, !insn.addr !1710
  %53 = icmp eq i64 %52, 0, !insn.addr !1711
  %54 = icmp eq i32 %34, 1296, !insn.addr !1712
  %55 = icmp eq i1 %54, false, !insn.addr !1713
  %or.cond12 = or i1 %55, %53
  br i1 %or.cond12, label %dec_label_pc_29ba, label %dec_label_pc_2980, !insn.addr !1714

dec_label_pc_2980:                                ; preds = %dec_label_pc_2970
  %56 = inttoptr i64 %52 to i64*, !insn.addr !1715
  %57 = load i64, i64* %56, align 8, !insn.addr !1715
  %58 = icmp ult i64 %57, 16777216
  store i64 %arg4, i64* %rcx.1.reg2mem, !insn.addr !1716
  store i64 %52, i64* %rdx.0.reg2mem, !insn.addr !1716
  br i1 %58, label %dec_label_pc_2a00, label %dec_label_pc_298b, !insn.addr !1716

dec_label_pc_298b:                                ; preds = %dec_label_pc_2980
  %59 = add i64 %20, 8, !insn.addr !1717
  %60 = inttoptr i64 %59 to i64*, !insn.addr !1717
  store i64 %57, i64* %60, align 8, !insn.addr !1717
  %61 = add nsw i64 %1, 280, !insn.addr !1718
  %62 = inttoptr i64 %61 to i64*, !insn.addr !1718
  %63 = load i64, i64* %62, align 8, !insn.addr !1718
  store i64 %63, i64* %56, align 8, !insn.addr !1719
  %64 = icmp ule i64 %arg1, %arg7
  %65 = icmp ugt i64 %29, %arg1, !insn.addr !1720
  %66 = icmp eq i1 %65, false, !insn.addr !1721
  %or.cond8 = or i1 %64, %66
  br i1 %or.cond8, label %dec_label_pc_29a8, label %dec_label_pc_29a4, !insn.addr !1722

dec_label_pc_29a4:                                ; preds = %dec_label_pc_298b
  %67 = add i64 %arg1, 8, !insn.addr !1723
  %68 = inttoptr i64 %67 to i64*, !insn.addr !1723
  store i64 %63, i64* %68, align 8, !insn.addr !1723
  br label %dec_label_pc_29a8, !insn.addr !1723

dec_label_pc_29a8:                                ; preds = %dec_label_pc_298b, %dec_label_pc_29a4
  %69 = add i64 %20, 40, !insn.addr !1724
  %70 = inttoptr i64 %69 to i64*, !insn.addr !1724
  %71 = load i64, i64* %70, align 8, !insn.addr !1724
  %72 = icmp eq i64 %71, 0, !insn.addr !1725
  store i64 %arg4, i64* %rcx.0.reg2mem, !insn.addr !1726
  store i64 %71, i64* %storemerge1.in.in.in.reg2mem, !insn.addr !1726
  store i64 %arg4, i64* %rcx.1.reg2mem, !insn.addr !1726
  store i64 %52, i64* %rdx.0.reg2mem, !insn.addr !1726
  br i1 %72, label %dec_label_pc_2a00, label %dec_label_pc_29fe, !insn.addr !1726

dec_label_pc_29ba:                                ; preds = %dec_label_pc_2970
  %73 = add i64 %20, 40, !insn.addr !1727
  %74 = inttoptr i64 %73 to i64*, !insn.addr !1727
  %75 = load i64, i64* %74, align 8, !insn.addr !1727
  %76 = icmp eq i32 %34, 1944, !insn.addr !1728
  %77 = icmp eq i1 %76, false, !insn.addr !1729
  %78 = icmp eq i64 %75, 0, !insn.addr !1730
  %or.cond4 = or i1 %77, %78
  br i1 %or.cond4, label %dec_label_pc_2a14, label %dec_label_pc_29ca, !insn.addr !1729

dec_label_pc_29ca:                                ; preds = %dec_label_pc_29ba
  %79 = inttoptr i64 %75 to i64*, !insn.addr !1731
  %80 = load i64, i64* %79, align 8, !insn.addr !1731
  %81 = icmp ult i64 %80, 16777216
  store i64 %75, i64* %rcx.1.reg2mem, !insn.addr !1732
  store i64 %52, i64* %rdx.0.reg2mem, !insn.addr !1732
  br i1 %81, label %dec_label_pc_2a00, label %dec_label_pc_29d5, !insn.addr !1732

dec_label_pc_29d5:                                ; preds = %dec_label_pc_29ca
  %82 = add i64 %20, 16, !insn.addr !1733
  %83 = inttoptr i64 %82 to i64*, !insn.addr !1733
  store i64 %80, i64* %83, align 8, !insn.addr !1733
  %84 = add nsw i64 %1, 288, !insn.addr !1734
  %85 = inttoptr i64 %84 to i64*, !insn.addr !1734
  %86 = load i64, i64* %85, align 8, !insn.addr !1734
  store i64 %86, i64* %79, align 8, !insn.addr !1735
  %87 = icmp ule i64 %arg1, %arg7
  %88 = icmp ugt i64 %29, %arg1, !insn.addr !1736
  %89 = icmp eq i1 %88, false, !insn.addr !1737
  %or.cond10 = or i1 %87, %89
  br i1 %or.cond10, label %dec_label_pc_29f2, label %dec_label_pc_29ee, !insn.addr !1738

dec_label_pc_29ee:                                ; preds = %dec_label_pc_29d5
  %90 = add i64 %arg1, 8, !insn.addr !1739
  %91 = inttoptr i64 %90 to i64*, !insn.addr !1739
  store i64 %86, i64* %91, align 8, !insn.addr !1739
  br label %dec_label_pc_29f2, !insn.addr !1739

dec_label_pc_29f2:                                ; preds = %dec_label_pc_29d5, %dec_label_pc_29ee
  store i64 %75, i64* %rcx.0.reg2mem, !insn.addr !1740
  store i64 %52, i64* %storemerge1.in.in.in.reg2mem, !insn.addr !1740
  store i64 %75, i64* %rcx.1.reg2mem, !insn.addr !1740
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !1740
  br i1 %53, label %dec_label_pc_2a00, label %dec_label_pc_29fe, !insn.addr !1740

dec_label_pc_29fe:                                ; preds = %dec_label_pc_29f2, %dec_label_pc_29a8
  %storemerge1.in.in.in.reload = load i64, i64* %storemerge1.in.in.in.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %storemerge1.in.in = inttoptr i64 %storemerge1.in.in.in.reload to i64*
  %storemerge1.in = load i64, i64* %storemerge1.in.in, align 8
  %92 = icmp ult i64 %storemerge1.in, 16777216
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !1741
  store i64 %52, i64* %rdx.0.reg2mem, !insn.addr !1741
  br i1 %92, label %dec_label_pc_2a14, label %dec_label_pc_2a00, !insn.addr !1741

dec_label_pc_2a00:                                ; preds = %dec_label_pc_2946, %dec_label_pc_29fe, %dec_label_pc_29f2, %dec_label_pc_29ca, %dec_label_pc_29a8, %dec_label_pc_2980, %dec_label_pc_2967, %dec_label_pc_2937
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %93 = call i64 @function_2750(i64 %1, i64 0, i64 %rdx.0.reload, i64 %rcx.1.reload), !insn.addr !1742
  br label %dec_label_pc_2a08, !insn.addr !1742

dec_label_pc_2a08:                                ; preds = %dec_label_pc_2a00, %dec_label_pc_2906, %dec_label_pc_28de
  store i32 1, i32* %3, align 4, !insn.addr !1743
  br label %dec_label_pc_2a14, !insn.addr !1743

dec_label_pc_2a14:                                ; preds = %dec_label_pc_2a08, %dec_label_pc_29fe, %dec_label_pc_29ba, %dec_label_pc_28b0
  %94 = add i64 %arg1, 8, !insn.addr !1744
  %95 = inttoptr i64 %94 to i64*, !insn.addr !1744
  %96 = load i64, i64* %95, align 8, !insn.addr !1744
  ret i64 %96, !insn.addr !1745

; uselistorder directives
  uselistorder i64 %75, { 0, 2, 1, 3, 4 }
  uselistorder i1 %53, { 1, 0 }
  uselistorder i64 %52, { 2, 4, 3, 0, 1, 5, 6 }
  uselistorder i32 %34, { 1, 0, 2 }
  uselistorder i64 %33, { 1, 0, 2, 3, 4 }
  uselistorder i64 %20, { 3, 4, 1, 2, 5, 0, 6 }
  uselistorder i64 %1, { 3, 2, 1, 0, 6, 4, 5, 7 }
  uselistorder i64* %rcx.1.reg2mem, { 0, 6, 7, 8, 4, 5, 2, 1, 3 }
  uselistorder i64* %rdx.0.reg2mem, { 0, 6, 7, 8, 4, 5, 2, 1, 3 }
  uselistorder i64 %arg7, { 2, 1, 0, 3, 4 }
  uselistorder i64 %arg4, { 3, 5, 4, 1, 0, 2, 6 }
  uselistorder i64 %arg1, { 9, 8, 0, 7, 6, 1, 5, 4, 2, 3 }
  uselistorder label %dec_label_pc_2a00, { 1, 2, 3, 4, 5, 6, 0, 7 }
  uselistorder label %dec_label_pc_29f2, { 1, 0 }
  uselistorder label %dec_label_pc_29a8, { 1, 0 }
}

define i64 @function_2a30(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64* %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_2a30:
  %rax.0.reg2mem = alloca i64, !insn.addr !1746
  %0 = ptrtoint i64* %arg6 to i64
  %1 = mul i64 %arg1, 32, !insn.addr !1746
  %2 = and i64 %1, 137438953440, !insn.addr !1747
  %3 = add i64 %2, %0, !insn.addr !1748
  %4 = add i64 %3, 8, !insn.addr !1749
  %5 = inttoptr i64 %4 to i64*, !insn.addr !1749
  %6 = load i64, i64* %5, align 8, !insn.addr !1749
  %7 = icmp eq i64 %6, 0, !insn.addr !1750
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1751
  br i1 %7, label %dec_label_pc_2ae3, label %dec_label_pc_2a49, !insn.addr !1751

dec_label_pc_2a49:                                ; preds = %dec_label_pc_2a30
  %8 = inttoptr i64 %arg2 to i64*, !insn.addr !1752
  store i64 %6, i64* %8, align 8, !insn.addr !1752
  %9 = add i64 %3, 16, !insn.addr !1753
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1753
  %11 = load i64, i64* %10, align 8, !insn.addr !1753
  %12 = inttoptr i64 %arg3 to i64*, !insn.addr !1754
  store i64 %11, i64* %12, align 8, !insn.addr !1754
  %13 = call i64 @.Lstream_encoder_update.0(i64 %arg5, i64 %arg2, i32 0, i32 0, i32 0), !insn.addr !1755
  %14 = inttoptr i64 %arg4 to i64*, !insn.addr !1756
  store i64 %13, i64* %14, align 8, !insn.addr !1756
  %15 = icmp eq i64 %13, 0, !insn.addr !1757
  br i1 %15, label %dec_label_pc_2a9e, label %dec_label_pc_2a7c, !insn.addr !1758

dec_label_pc_2a7c:                                ; preds = %dec_label_pc_2a9e, %dec_label_pc_2a49
  %16 = call i64 @.Lauto_decode.1(i64 %arg5, i64 -8, i64 16, i64 1, i64 0), !insn.addr !1759
  %17 = trunc i64 %16 to i32, !insn.addr !1760
  %18 = icmp eq i32 %17, 0, !insn.addr !1760
  %19 = icmp eq i1 %18, false, !insn.addr !1761
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1761
  br i1 %19, label %dec_label_pc_2abb, label %dec_label_pc_2ae3, !insn.addr !1761

dec_label_pc_2a9e:                                ; preds = %dec_label_pc_2a49
  %20 = call i64 @.Lstream_encoder_update.1(i64 %arg5, i64 %arg2, i32 0, i32 0, i32 0), !insn.addr !1762
  store i64 %20, i64* %14, align 8, !insn.addr !1763
  %21 = icmp eq i64 %20, 0, !insn.addr !1764
  %22 = icmp eq i1 %21, false, !insn.addr !1765
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1765
  br i1 %22, label %dec_label_pc_2a7c, label %dec_label_pc_2ae3, !insn.addr !1765

dec_label_pc_2abb:                                ; preds = %dec_label_pc_2a7c
  %23 = inttoptr i64 %arg7 to i32*, !insn.addr !1766
  %24 = load i32, i32* %23, align 4, !insn.addr !1766
  %25 = icmp eq i32 %24, 0, !insn.addr !1766
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !1767
  br i1 %25, label %dec_label_pc_2ae3, label %dec_label_pc_2aca, !insn.addr !1767

dec_label_pc_2aca:                                ; preds = %dec_label_pc_2abb
  %26 = call i64 @.Llzma_block_buffer_encode.0(i64 -8, i64 -4, i64 57904), !insn.addr !1768
  %27 = trunc i64 %26 to i32, !insn.addr !1769
  %28 = icmp eq i32 %27, 0, !insn.addr !1769
  %29 = icmp eq i1 %28, false, !insn.addr !1770
  %30 = zext i1 %29 to i64, !insn.addr !1771
  store i64 %30, i64* %rax.0.reg2mem, !insn.addr !1771
  br label %dec_label_pc_2ae3, !insn.addr !1771

dec_label_pc_2ae3:                                ; preds = %dec_label_pc_2a30, %dec_label_pc_2a7c, %dec_label_pc_2a9e, %dec_label_pc_2aca, %dec_label_pc_2abb
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1772

; uselistorder directives
  uselistorder i64 %20, { 1, 0 }
  uselistorder i64 %13, { 1, 0 }
  uselistorder i64* %rax.0.reg2mem, { 0, 4, 5, 3, 2, 1 }
  uselistorder i64 %arg5, { 1, 0, 2 }
  uselistorder label %dec_label_pc_2ae3, { 3, 4, 2, 1, 0 }
}

define i64 @function_2af0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_2af0:
  %0 = alloca i64
  %1 = alloca i32
  %storemerge.reg2mem = alloca i64, !insn.addr !1773
  %r14.0.reg2mem = alloca i64, !insn.addr !1773
  %rbx.0.reg2mem = alloca i64, !insn.addr !1773
  %2 = load i64, i64* %0
  %stack_var_-136 = alloca i64, align 8
  %3 = load i32, i32* %1
  %4 = load i64, i64* %0
  %stack_var_-128 = alloca i64, align 8
  %5 = icmp eq i64 %arg1, %arg2, !insn.addr !1774
  %6 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !1775
  call void @__asm_rep_stosd_memset(i8* nonnull %6, i32 0, i64 22), !insn.addr !1775
  %7 = icmp eq i64 %arg1, 0, !insn.addr !1776
  %8 = or i1 %7, %5
  %9 = icmp eq i64 %arg2, 0, !insn.addr !1777
  %10 = or i1 %9, %8
  %11 = icmp eq i1 %10, false
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1778
  br i1 %11, label %dec_label_pc_2b41, label %dec_label_pc_2c24, !insn.addr !1778

dec_label_pc_2b41:                                ; preds = %dec_label_pc_2af0
  %12 = sub i64 %arg2, %arg1, !insn.addr !1779
  %13 = icmp ugt i64 %arg2, %arg1, !insn.addr !1780
  %14 = sub i64 %arg1, %arg2
  %spec.select = select i1 %13, i64 %12, i64 %14
  %15 = icmp sgt i64 %spec.select, 15, !insn.addr !1781
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1781
  br i1 %15, label %dec_label_pc_2c24, label %dec_label_pc_2b5b, !insn.addr !1781

dec_label_pc_2b5b:                                ; preds = %dec_label_pc_2b41
  %16 = add i64 %arg5, 616, !insn.addr !1782
  %17 = inttoptr i64 %16 to i64*, !insn.addr !1782
  %18 = load i64, i64* %17, align 8, !insn.addr !1782
  %19 = icmp eq i64 %18, 0, !insn.addr !1783
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1784
  br i1 %19, label %dec_label_pc_2c24, label %dec_label_pc_2b67, !insn.addr !1784

dec_label_pc_2b67:                                ; preds = %dec_label_pc_2b5b
  %20 = add i64 %arg5, 648, !insn.addr !1785
  %21 = inttoptr i64 %20 to i64*, !insn.addr !1785
  %22 = load i64, i64* %21, align 8, !insn.addr !1785
  %23 = icmp eq i64 %22, 0, !insn.addr !1786
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1787
  br i1 %23, label %dec_label_pc_2c24, label %dec_label_pc_2b73, !insn.addr !1787

dec_label_pc_2b73:                                ; preds = %dec_label_pc_2b67
  %24 = add i64 %arg5, 656, !insn.addr !1788
  %25 = inttoptr i64 %24 to i64*, !insn.addr !1788
  %26 = load i64, i64* %25, align 8, !insn.addr !1788
  %27 = call i64 @.Llzma_mt_block_size.1(i64 %22, i64 %26, i64* nonnull %stack_var_-128, i64 %18), !insn.addr !1789
  %28 = trunc i64 %27 to i32, !insn.addr !1790
  %29 = icmp eq i32 %28, 0, !insn.addr !1790
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1791
  br i1 %29, label %dec_label_pc_2c24, label %dec_label_pc_2b8b, !insn.addr !1791

dec_label_pc_2b8b:                                ; preds = %dec_label_pc_2b73
  %30 = load i64, i64* %stack_var_-128, align 8, !insn.addr !1792
  %31 = add i64 %30, %4, !insn.addr !1793
  %32 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-128, i64 %31, i64 %26, i64 %18, i64 %arg5, i64 %arg6), !insn.addr !1794
  %33 = trunc i64 %32 to i32, !insn.addr !1795
  %34 = icmp eq i32 %33, 0, !insn.addr !1795
  %35 = icmp eq i32 %3, 360, !insn.addr !1796
  %36 = icmp eq i1 %35, false, !insn.addr !1797
  %or.cond3 = or i1 %36, %34
  store i64 %30, i64* %rbx.0.reg2mem, !insn.addr !1798
  store i64 %26, i64* %r14.0.reg2mem, !insn.addr !1798
  br i1 %or.cond3, label %dec_label_pc_2bea, label %dec_label_pc_2bb3, !insn.addr !1798

dec_label_pc_2bb3:                                ; preds = %dec_label_pc_2b8b
  %37 = trunc i64 %arg6 to i32
  %38 = add i64 %4, %2, !insn.addr !1799
  store i64 0, i64* %stack_var_-136, align 8, !insn.addr !1800
  %39 = load i64, i64* %stack_var_-128, align 8, !insn.addr !1801
  %40 = add i64 %38, %39, !insn.addr !1801
  %41 = call i64 @.Llzma2_encoder_init.1(i64 %40, i32 0, i64* nonnull %stack_var_-136, i64 %arg3, i64 %arg4, i32 %37), !insn.addr !1802
  %42 = load i64, i64* %stack_var_-136, align 8, !insn.addr !1803
  store i64 %40, i64* %rbx.0.reg2mem, !insn.addr !1803
  store i64 %42, i64* %r14.0.reg2mem, !insn.addr !1803
  br label %dec_label_pc_2bea, !insn.addr !1803

dec_label_pc_2bea:                                ; preds = %dec_label_pc_2bb3, %dec_label_pc_2b8b
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %43 = call i64 @.Llzma_properties_size.0(i64 %rbx.0.reload, i64 %r14.0.reload, i64 0, i64 265, i64 %arg1), !insn.addr !1804
  %44 = trunc i64 %43 to i32, !insn.addr !1805
  %45 = icmp eq i32 %44, 0, !insn.addr !1805
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !1806
  br i1 %45, label %dec_label_pc_2c24, label %dec_label_pc_2c07, !insn.addr !1806

dec_label_pc_2c07:                                ; preds = %dec_label_pc_2bea
  %46 = call i64 @.Llzma_properties_size.0(i64 %rbx.0.reload, i64 %r14.0.reload, i64 0, i64 265, i64 %arg2), !insn.addr !1807
  %47 = trunc i64 %46 to i32, !insn.addr !1808
  %48 = icmp eq i32 %47, 0, !insn.addr !1808
  %49 = icmp eq i1 %48, false, !insn.addr !1809
  %50 = zext i1 %49 to i64, !insn.addr !1810
  store i64 %50, i64* %storemerge.reg2mem, !insn.addr !1810
  br label %dec_label_pc_2c24, !insn.addr !1810

dec_label_pc_2c24:                                ; preds = %dec_label_pc_2af0, %dec_label_pc_2b41, %dec_label_pc_2b5b, %dec_label_pc_2b67, %dec_label_pc_2b73, %dec_label_pc_2bea, %dec_label_pc_2c07
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1811

; uselistorder directives
  uselistorder i64 %rbx.0.reload, { 1, 0 }
  uselistorder i64 %r14.0.reload, { 1, 0 }
  uselistorder i64* %stack_var_-128, { 3, 0, 4, 1, 2 }
  uselistorder i64 %4, { 1, 0 }
  uselistorder i64* %stack_var_-136, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 (i64, i64, i64*, i64)* @.Llzma_mt_block_size.1, { 2, 1, 0 }
  uselistorder i64 %arg2, { 2, 1, 4, 3, 0, 5 }
  uselistorder i64 %arg1, { 1, 0, 3, 2, 5, 4 }
  uselistorder label %dec_label_pc_2c24, { 6, 5, 4, 3, 2, 1, 0 }
}

define i64 @function_2c40(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_2c40:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i8
  %rax.1.reg2mem = alloca i64, !insn.addr !1812
  %r13.0.be.reg2mem = alloca i64, !insn.addr !1812
  %r13.02.reg2mem = alloca i64, !insn.addr !1812
  %3 = load i64, i64* %0
  %4 = load i64, i64* %0
  %5 = load i32, i32* %1
  %6 = load i8, i8* %2
  %7 = load i8, i8* %2
  %stack_var_-128 = alloca i64, align 8
  %8 = mul i64 %arg1, 32, !insn.addr !1813
  %9 = and i64 %8, 137438953440, !insn.addr !1814
  %10 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !1815
  call void @__asm_rep_stosd_memset(i8* nonnull %10, i32 0, i64 22), !insn.addr !1815
  %11 = add i64 %9, %arg2, !insn.addr !1816
  %12 = add i64 %11, 8, !insn.addr !1817
  %13 = inttoptr i64 %12 to i64*, !insn.addr !1817
  %14 = load i64, i64* %13, align 8, !insn.addr !1817
  %15 = icmp eq i64 %14, 0, !insn.addr !1818
  %16 = icmp eq i1 %15, false, !insn.addr !1819
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !1819
  br i1 %16, label %dec_label_pc_2c76, label %dec_label_pc_2cf5, !insn.addr !1819

dec_label_pc_2c76:                                ; preds = %dec_label_pc_2c40
  %17 = add i64 %11, 16, !insn.addr !1820
  %18 = inttoptr i64 %17 to i64*, !insn.addr !1820
  %19 = load i64, i64* %18, align 8, !insn.addr !1820
  %20 = icmp ult i64 %14, %19, !insn.addr !1821
  %21 = icmp eq i1 %20, false, !insn.addr !1822
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !1822
  br i1 %21, label %dec_label_pc_2cf5, label %dec_label_pc_2c8b.lr.ph, !insn.addr !1822

dec_label_pc_2c8b.lr.ph:                          ; preds = %dec_label_pc_2c76
  %22 = add i64 %arg4, -4, !insn.addr !1823
  %23 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !1824
  %24 = and i8 %7, ptrtoint (i32** @global_var_48 to i8)
  %25 = icmp eq i8 %24, ptrtoint (i32** @global_var_48 to i8)
  %26 = urem i8 %6, 2
  %27 = icmp eq i8 %26, 0
  %28 = icmp eq i1 %27, false
  %29 = icmp eq i64 %arg3, 0
  %30 = add i32 %5, -83886080
  %31 = and i32 %30, -16711936
  %32 = icmp eq i32 %31, 0
  %33 = icmp eq i1 %32, false
  %34 = add i64 %4, %3
  store i64 %14, i64* %r13.02.reg2mem
  br label %dec_label_pc_2c8b

dec_label_pc_2c8b:                                ; preds = %dec_label_pc_2c8b.lr.ph, %dec_label_pc_2c86.backedge
  %r13.02.reload = load i64, i64* %r13.02.reg2mem
  %35 = call i64 @.Llzma_properties_size.0(i64 %r13.02.reload, i64 %19, i64 %23, i64 267, i64 0), !insn.addr !1825
  %36 = trunc i64 %35 to i32, !insn.addr !1826
  %37 = icmp eq i32 %36, 0, !insn.addr !1826
  br i1 %37, label %dec_label_pc_2cf0, label %dec_label_pc_2ca5, !insn.addr !1827

dec_label_pc_2ca5:                                ; preds = %dec_label_pc_2c8b
  br i1 %25, label %dec_label_pc_2ce9, label %dec_label_pc_2cb0, !insn.addr !1828

dec_label_pc_2cb0:                                ; preds = %dec_label_pc_2ca5
  br i1 %28, label %dec_label_pc_2cbe, label %dec_label_pc_2cb7, !insn.addr !1829

dec_label_pc_2cb7:                                ; preds = %dec_label_pc_2cb0
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !1830
  br i1 %29, label %dec_label_pc_2cf5, label %dec_label_pc_2ce9, !insn.addr !1830

dec_label_pc_2cbe:                                ; preds = %dec_label_pc_2cb0
  %38 = load i64, i64* %stack_var_-128, align 8
  %39 = add i64 %34, %38
  %rax.0 = select i1 %33, i64 %4, i64 %39
  %40 = icmp uge i64 %rax.0, %arg3, !insn.addr !1831
  %41 = icmp ult i64 %22, %rax.0, !insn.addr !1832
  %42 = icmp eq i1 %41, false, !insn.addr !1833
  %or.cond = icmp eq i1 %40, %42
  store i64 %rax.0, i64* %rax.1.reg2mem, !insn.addr !1834
  br i1 %or.cond, label %dec_label_pc_2cf5, label %dec_label_pc_2ce9, !insn.addr !1834

dec_label_pc_2ce9:                                ; preds = %dec_label_pc_2cbe, %dec_label_pc_2cb7, %dec_label_pc_2ca5
  %43 = add i64 %r13.02.reload, %3, !insn.addr !1835
  store i64 %43, i64* %r13.0.be.reg2mem, !insn.addr !1836
  br label %dec_label_pc_2c86.backedge, !insn.addr !1836

dec_label_pc_2c86.backedge:                       ; preds = %dec_label_pc_2ce9, %dec_label_pc_2cf0
  %r13.0.be.reload = load i64, i64* %r13.0.be.reg2mem
  %44 = icmp ult i64 %r13.0.be.reload, %19, !insn.addr !1821
  %45 = icmp eq i1 %44, false, !insn.addr !1822
  store i64 %r13.0.be.reload, i64* %r13.02.reg2mem, !insn.addr !1822
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !1822
  br i1 %45, label %dec_label_pc_2cf5, label %dec_label_pc_2c8b, !insn.addr !1822

dec_label_pc_2cf0:                                ; preds = %dec_label_pc_2c8b
  %46 = add i64 %r13.02.reload, 1, !insn.addr !1837
  store i64 %46, i64* %r13.0.be.reg2mem, !insn.addr !1838
  br label %dec_label_pc_2c86.backedge, !insn.addr !1838

dec_label_pc_2cf5:                                ; preds = %dec_label_pc_2cb7, %dec_label_pc_2c86.backedge, %dec_label_pc_2cbe, %dec_label_pc_2c76, %dec_label_pc_2c40
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !1839

; uselistorder directives
  uselistorder i64 %r13.0.be.reload, { 1, 0 }
  uselistorder i64 %rax.0, { 0, 2, 1 }
  uselistorder i64 %r13.02.reload, { 0, 2, 1 }
  uselistorder i64 %19, { 1, 2, 0 }
  uselistorder i64* %stack_var_-128, { 1, 2, 0 }
  uselistorder i64 %3, { 1, 0 }
  uselistorder i64* %r13.02.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r13.0.be.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.1.reg2mem, { 0, 2, 3, 1, 4, 5 }
  uselistorder i8* %2, { 1, 0 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 -4, { 1, 0, 2 }
  uselistorder i64 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_2cf5, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_2c86.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_2c8b, { 1, 0 }
}

define i64 @function_2d10(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_2d10:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i8
  %rax.5.reg2mem = alloca i64, !insn.addr !1840
  %r12.0.reg2mem = alloca i64, !insn.addr !1840
  %rax.4.reg2mem = alloca i64, !insn.addr !1840
  %rdx.3.reg2mem = alloca i64, !insn.addr !1840
  %.reg2mem5 = alloca i64, !insn.addr !1840
  %rdx.2.reg2mem = alloca i64, !insn.addr !1840
  %rax.3.reg2mem = alloca i64, !insn.addr !1840
  %rax.2.reg2mem = alloca i64, !insn.addr !1840
  %r13.0.be.reg2mem = alloca i64, !insn.addr !1840
  %r13.03.reg2mem = alloca i64, !insn.addr !1840
  %rcx.1.reg2mem = alloca i64, !insn.addr !1840
  %rcx.0.reg2mem = alloca i64, !insn.addr !1840
  %rax.1.reg2mem = alloca i64, !insn.addr !1840
  %r15.0.reg2mem = alloca i64, !insn.addr !1840
  %.reg2mem = alloca i64, !insn.addr !1840
  %rdx.0.reg2mem = alloca i64, !insn.addr !1840
  %rax.0.reg2mem = alloca i64, !insn.addr !1840
  %3 = load i64, i64* %0
  %4 = load i64, i64* %0
  %5 = load i64, i64* %0
  %6 = load i32, i32* %1
  %7 = load i8, i8* %2
  %8 = load i64, i64* %0
  %9 = load i32, i32* %1
  %10 = load i32, i32* %1
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-136 = alloca i64, align 8
  %stack_var_-144 = alloca i64, align 8
  %stack_var_-128 = alloca i64, align 8
  store i64 16, i64* %rax.0.reg2mem, !insn.addr !1841
  store i64 %arg2, i64* %rdx.0.reg2mem, !insn.addr !1841
  br label %dec_label_pc_2d30, !insn.addr !1841

dec_label_pc_2d30:                                ; preds = %dec_label_pc_2d30, %dec_label_pc_2d10
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %11 = trunc i64 %rax.0.reload to i32, !insn.addr !1842
  %12 = inttoptr i64 %rdx.0.reload to i32*, !insn.addr !1842
  store i32 %11, i32* %12, align 4, !insn.addr !1842
  %13 = add nuw nsw i64 %rax.0.reload, 8, !insn.addr !1843
  %14 = and i64 %13, 4294967295, !insn.addr !1843
  %15 = add i64 %rdx.0.reload, 32, !insn.addr !1844
  %16 = trunc i64 %13 to i32, !insn.addr !1845
  %17 = icmp eq i32 %16, 232, !insn.addr !1845
  %18 = icmp eq i1 %17, false, !insn.addr !1846
  store i64 %14, i64* %rax.0.reg2mem, !insn.addr !1846
  store i64 %15, i64* %rdx.0.reg2mem, !insn.addr !1846
  br i1 %18, label %dec_label_pc_2d30, label %dec_label_pc_2d40, !insn.addr !1846

dec_label_pc_2d40:                                ; preds = %dec_label_pc_2d30
  %19 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !1847
  call void @__asm_rep_stosd_memset(i8* nonnull %19, i32 0, i64 22), !insn.addr !1847
  store i64 0, i64* %stack_var_-144, align 8, !insn.addr !1848
  store i64 0, i64* %stack_var_-136, align 8, !insn.addr !1849
  %20 = call i64 @.Llzma_check_update.0(i64 %arg1, i64* nonnull %stack_var_-144, i64 0, i64 0), !insn.addr !1850
  %21 = icmp eq i64 %20, 0, !insn.addr !1851
  %22 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !1852
  store i64 %22, i64* %rax.5.reg2mem, !insn.addr !1853
  br i1 %21, label %dec_label_pc_2fb6, label %dec_label_pc_2d7f, !insn.addr !1853

dec_label_pc_2d7f:                                ; preds = %dec_label_pc_2d40
  %23 = load i64, i64* %stack_var_-144, align 8, !insn.addr !1854
  %24 = icmp ult i64 %23, 17
  store i64 %22, i64* %rax.5.reg2mem, !insn.addr !1855
  br i1 %24, label %dec_label_pc_2fb6, label %dec_label_pc_2d8e, !insn.addr !1855

dec_label_pc_2d8e:                                ; preds = %dec_label_pc_2d7f
  %25 = ptrtoint i32* %stack_var_-148 to i64, !insn.addr !1856
  %26 = add i64 %23, %20, !insn.addr !1857
  store i32 0, i32* %stack_var_-148, align 4, !insn.addr !1858
  %27 = call i64 @.Llzip_decode.0(i64 %arg1, i64 %25, i64 0, i64 0), !insn.addr !1859
  %28 = icmp eq i64 %27, 0, !insn.addr !1860
  store i64 %27, i64* %.reg2mem, !insn.addr !1861
  br i1 %28, label %dec_label_pc_2dfc, label %dec_label_pc_2dbd.preheader, !insn.addr !1861

dec_label_pc_2dbd.preheader:                      ; preds = %dec_label_pc_2d8e, %dec_label_pc_2df5
  %.reload = load i64, i64* %.reg2mem
  store i64 0, i64* %r15.0.reg2mem
  br label %dec_label_pc_2dbd

dec_label_pc_2dbd:                                ; preds = %dec_label_pc_2dbd.preheader, %dec_label_pc_2de8
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %29 = add i64 %r15.0.reload, %arg2
  %30 = add i64 %29, 24, !insn.addr !1862
  %31 = inttoptr i64 %30 to i64*, !insn.addr !1862
  %32 = load i64, i64* %31, align 8, !insn.addr !1862
  %33 = icmp eq i64 %32, 0, !insn.addr !1862
  %34 = icmp eq i1 %33, false, !insn.addr !1863
  br i1 %34, label %dec_label_pc_2de8, label %dec_label_pc_2dc5, !insn.addr !1863

dec_label_pc_2dc5:                                ; preds = %dec_label_pc_2dbd
  %35 = load i32, i32* %stack_var_-148, align 4, !insn.addr !1864
  %36 = inttoptr i64 %29 to i32*, !insn.addr !1865
  %37 = load i32, i32* %36, align 4, !insn.addr !1865
  %38 = icmp eq i32 %37, %35, !insn.addr !1865
  %39 = icmp eq i1 %38, false, !insn.addr !1866
  br i1 %39, label %dec_label_pc_2de8, label %dec_label_pc_2dd0, !insn.addr !1866

dec_label_pc_2dd0:                                ; preds = %dec_label_pc_2dc5
  %40 = call i64 @.Lstream_encode.1(i64 %20, i64 %26, i64 %.reload), !insn.addr !1867
  %41 = icmp eq i64 %40, 0, !insn.addr !1868
  br i1 %41, label %dec_label_pc_2de8, label %dec_label_pc_2de3, !insn.addr !1869

dec_label_pc_2de3:                                ; preds = %dec_label_pc_2dd0
  store i64 %40, i64* %31, align 8, !insn.addr !1870
  br label %dec_label_pc_2de8, !insn.addr !1870

dec_label_pc_2de8:                                ; preds = %dec_label_pc_2de3, %dec_label_pc_2dd0, %dec_label_pc_2dc5, %dec_label_pc_2dbd
  %42 = add nuw nsw i64 %r15.0.reload, 32, !insn.addr !1871
  %43 = icmp eq i64 %r15.0.reload, 832, !insn.addr !1872
  %44 = icmp eq i1 %43, false, !insn.addr !1873
  store i64 %42, i64* %r15.0.reg2mem, !insn.addr !1873
  br i1 %44, label %dec_label_pc_2dbd, label %dec_label_pc_2df5, !insn.addr !1873

dec_label_pc_2df5:                                ; preds = %dec_label_pc_2de8
  %45 = add i64 %.reload, 1, !insn.addr !1874
  store i32 0, i32* %stack_var_-148, align 4, !insn.addr !1858
  %46 = call i64 @.Llzip_decode.0(i64 %arg1, i64 %25, i64 %45, i64 0), !insn.addr !1859
  %47 = icmp eq i64 %46, 0, !insn.addr !1860
  store i64 %46, i64* %.reg2mem, !insn.addr !1861
  br i1 %47, label %dec_label_pc_2dfc, label %dec_label_pc_2dbd.preheader, !insn.addr !1861

dec_label_pc_2dfc:                                ; preds = %dec_label_pc_2df5, %dec_label_pc_2d8e
  %48 = add i64 %arg2, 8, !insn.addr !1875
  %49 = add i64 %arg2, 872, !insn.addr !1876
  store i64 %48, i64* %rax.1.reg2mem, !insn.addr !1877
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !1877
  br label %dec_label_pc_2e0a, !insn.addr !1877

dec_label_pc_2e0a:                                ; preds = %dec_label_pc_2e38, %dec_label_pc_2dfc
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %50 = add i64 %rax.1.reload, 16, !insn.addr !1878
  %51 = inttoptr i64 %50 to i64*, !insn.addr !1878
  %52 = load i64, i64* %51, align 8, !insn.addr !1878
  %53 = icmp eq i64 %52, 0, !insn.addr !1879
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !1880
  br i1 %53, label %dec_label_pc_2e38, label %dec_label_pc_2e13, !insn.addr !1880

dec_label_pc_2e13:                                ; preds = %dec_label_pc_2e0a
  %54 = icmp ult i64 %52, %20, !insn.addr !1881
  %55 = icmp eq i1 %54, false, !insn.addr !1882
  br i1 %55, label %dec_label_pc_2e2b, label %dec_label_pc_2e18, !insn.addr !1882

dec_label_pc_2e18:                                ; preds = %dec_label_pc_2e33, %dec_label_pc_2e13
  %56 = add i64 %rax.1.reload, 8, !insn.addr !1883
  %57 = inttoptr i64 %56 to i64*, !insn.addr !1883
  %58 = load i64, i64* %57, align 8, !insn.addr !1883
  %59 = add i64 %58, -1, !insn.addr !1884
  %60 = icmp ult i64 %59, %20, !insn.addr !1885
  store i64 %58, i64* %rcx.1.reg2mem, !insn.addr !1886
  br i1 %60, label %dec_label_pc_2e38, label %dec_label_pc_2e25, !insn.addr !1886

dec_label_pc_2e25:                                ; preds = %dec_label_pc_2e18
  store i64 %20, i64* %57, align 8, !insn.addr !1887
  store i64 %58, i64* %rcx.1.reg2mem, !insn.addr !1888
  br label %dec_label_pc_2e38, !insn.addr !1888

dec_label_pc_2e2b:                                ; preds = %dec_label_pc_2e13
  %61 = inttoptr i64 %rax.1.reload to i64*, !insn.addr !1889
  %62 = load i64, i64* %61, align 8, !insn.addr !1889
  %63 = icmp ult i64 %62, %20, !insn.addr !1889
  %64 = icmp eq i1 %63, false, !insn.addr !1890
  br i1 %64, label %dec_label_pc_2e33, label %dec_label_pc_2e30, !insn.addr !1890

dec_label_pc_2e30:                                ; preds = %dec_label_pc_2e2b
  store i64 %20, i64* %61, align 8, !insn.addr !1891
  br label %dec_label_pc_2e33, !insn.addr !1891

dec_label_pc_2e33:                                ; preds = %dec_label_pc_2e30, %dec_label_pc_2e2b
  %65 = icmp eq i64 %20, %52, !insn.addr !1892
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !1893
  br i1 %65, label %dec_label_pc_2e18, label %dec_label_pc_2e38, !insn.addr !1893

dec_label_pc_2e38:                                ; preds = %dec_label_pc_2e33, %dec_label_pc_2e25, %dec_label_pc_2e18, %dec_label_pc_2e0a
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %66 = add i64 %rax.1.reload, 32, !insn.addr !1894
  %67 = icmp eq i64 %66, %49, !insn.addr !1895
  %68 = icmp eq i1 %67, false, !insn.addr !1896
  store i64 %66, i64* %rax.1.reg2mem, !insn.addr !1896
  store i64 %rcx.1.reload, i64* %rcx.0.reg2mem, !insn.addr !1896
  br i1 %68, label %dec_label_pc_2e0a, label %dec_label_pc_2e44.preheader, !insn.addr !1896

dec_label_pc_2e44.preheader:                      ; preds = %dec_label_pc_2e38
  %69 = icmp ult i64 %20, %26, !insn.addr !1897
  %70 = icmp eq i1 %69, false, !insn.addr !1898
  br i1 %70, label %dec_label_pc_2f24.preheader, label %dec_label_pc_2e4d.lr.ph, !insn.addr !1898

dec_label_pc_2e4d.lr.ph:                          ; preds = %dec_label_pc_2e44.preheader
  %71 = sext i32 %10 to i64
  %72 = icmp eq i32 %9, 360
  %73 = icmp eq i1 %72, false
  %74 = icmp eq i64 %8, 0
  %75 = icmp eq i32 %9, 42494
  %76 = icmp eq i32 %9, 269
  %77 = and i8 %7, ptrtoint (i32** @global_var_48 to i8)
  %78 = icmp eq i8 %77, ptrtoint (i32** @global_var_48 to i8)
  %79 = add i32 %6, -83886080
  %80 = and i32 %79, -16711936
  %81 = icmp eq i32 %80, 0
  %82 = icmp eq i1 %78, %76
  %83 = icmp eq i1 %81, %82
  store i64 %20, i64* %r13.03.reg2mem
  br label %dec_label_pc_2e4d

dec_label_pc_2f24.preheader:                      ; preds = %dec_label_pc_2e44.backedge, %dec_label_pc_2e44.preheader
  %84 = ptrtoint i64* %stack_var_-136 to i64, !insn.addr !1899
  %85 = trunc i64 %20 to i32, !insn.addr !1900
  %86 = trunc i64 %26 to i32, !insn.addr !1900
  %87 = trunc i64 %84 to i32, !insn.addr !1900
  %88 = call i64 @.Lstream_encoder_update.0(i64 %arg1, i64 0, i32 %85, i32 %86, i32 %87), !insn.addr !1900
  %89 = icmp eq i64 %88, 0, !insn.addr !1901
  store i64 %88, i64* %.reg2mem5, !insn.addr !1902
  br i1 %89, label %dec_label_pc_2f96.preheader, label %dec_label_pc_2f41.preheader, !insn.addr !1902

dec_label_pc_2e4d:                                ; preds = %dec_label_pc_2e4d.lr.ph, %dec_label_pc_2e44.backedge
  %r13.03.reload = load i64, i64* %r13.03.reg2mem
  %90 = add i64 %r13.03.reload, 1, !insn.addr !1903
  %91 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-128, i64 %r13.03.reload, i64 %26, i64 %rcx.1.reload, i64 %4, i64 %3), !insn.addr !1904
  %92 = trunc i64 %91 to i32, !insn.addr !1905
  %93 = icmp eq i32 %92, 0, !insn.addr !1905
  store i64 %90, i64* %r13.0.be.reg2mem, !insn.addr !1906
  br i1 %93, label %dec_label_pc_2e44.backedge, label %dec_label_pc_2e64, !insn.addr !1906

dec_label_pc_2e44.backedge:                       ; preds = %dec_label_pc_2e98, %dec_label_pc_2f11, %dec_label_pc_2e4d, %dec_label_pc_2e7e, %dec_label_pc_2ec5, %dec_label_pc_2ece
  %r13.0.be.reload = load i64, i64* %r13.0.be.reg2mem
  %94 = icmp ult i64 %r13.0.be.reload, %26, !insn.addr !1897
  %95 = icmp eq i1 %94, false, !insn.addr !1898
  store i64 %r13.0.be.reload, i64* %r13.03.reg2mem, !insn.addr !1898
  br i1 %95, label %dec_label_pc_2f24.preheader, label %dec_label_pc_2e4d, !insn.addr !1898

dec_label_pc_2e64:                                ; preds = %dec_label_pc_2e4d
  %96 = load i64, i64* %stack_var_-128, align 8, !insn.addr !1907
  %97 = add i64 %96, %71
  br i1 %73, label %dec_label_pc_2e90, label %dec_label_pc_2e7e, !insn.addr !1908

dec_label_pc_2e7e:                                ; preds = %dec_label_pc_2e64
  store i64 %97, i64* %r13.0.be.reg2mem, !insn.addr !1909
  br i1 %74, label %dec_label_pc_2e44.backedge, label %dec_label_pc_2e88, !insn.addr !1909

dec_label_pc_2e88:                                ; preds = %dec_label_pc_2e7e
  %98 = add i64 %97, %8, !insn.addr !1910
  store i64 %98, i64* %rax.2.reg2mem, !insn.addr !1911
  br label %dec_label_pc_2ec5, !insn.addr !1911

dec_label_pc_2e90:                                ; preds = %dec_label_pc_2e64
  store i64 %96, i64* %rax.2.reg2mem, !insn.addr !1912
  br i1 %75, label %dec_label_pc_2ec5, label %dec_label_pc_2e98, !insn.addr !1912

dec_label_pc_2e98:                                ; preds = %dec_label_pc_2e90
  store i64 %97, i64* %r13.0.be.reg2mem, !insn.addr !1913
  br i1 %83, label %dec_label_pc_2ebb, label %dec_label_pc_2e44.backedge, !insn.addr !1913

dec_label_pc_2ebb:                                ; preds = %dec_label_pc_2e98
  %99 = add i64 %97, %5, !insn.addr !1914
  store i64 %99, i64* %rax.3.reg2mem, !insn.addr !1915
  br label %dec_label_pc_2ece, !insn.addr !1915

dec_label_pc_2ec5:                                ; preds = %dec_label_pc_2e90, %dec_label_pc_2e88
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %100 = icmp eq i64 %rax.2.reload, 0, !insn.addr !1916
  store i64 %97, i64* %r13.0.be.reg2mem, !insn.addr !1917
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !1917
  br i1 %100, label %dec_label_pc_2e44.backedge, label %dec_label_pc_2ece, !insn.addr !1917

dec_label_pc_2ece:                                ; preds = %dec_label_pc_2ec5, %dec_label_pc_2ebb
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %101 = icmp ugt i64 %20, %rax.3.reload
  %102 = icmp ult i64 %26, %rax.3.reload, !insn.addr !1918
  %or.cond = or i1 %101, %102
  store i64 %97, i64* %r13.0.be.reg2mem, !insn.addr !1919
  store i64 %48, i64* %rdx.2.reg2mem, !insn.addr !1919
  br i1 %or.cond, label %dec_label_pc_2e44.backedge, label %dec_label_pc_2ee3, !insn.addr !1919

dec_label_pc_2ee3:                                ; preds = %dec_label_pc_2ece, %dec_label_pc_2f11
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %103 = add i64 %rdx.2.reload, 16, !insn.addr !1920
  %104 = inttoptr i64 %103 to i64*, !insn.addr !1920
  %105 = load i64, i64* %104, align 8, !insn.addr !1920
  %106 = icmp eq i64 %105, 0, !insn.addr !1921
  br i1 %106, label %dec_label_pc_2f11, label %dec_label_pc_2eec, !insn.addr !1922

dec_label_pc_2eec:                                ; preds = %dec_label_pc_2ee3
  %107 = icmp ult i64 %105, %rax.3.reload, !insn.addr !1923
  %108 = icmp eq i1 %107, false, !insn.addr !1924
  br i1 %108, label %dec_label_pc_2f04, label %dec_label_pc_2ef1, !insn.addr !1924

dec_label_pc_2ef1:                                ; preds = %dec_label_pc_2f0c, %dec_label_pc_2eec
  %109 = add i64 %rdx.2.reload, 8, !insn.addr !1925
  %110 = inttoptr i64 %109 to i64*, !insn.addr !1925
  %111 = load i64, i64* %110, align 8, !insn.addr !1925
  %112 = add i64 %111, -1, !insn.addr !1926
  %113 = icmp ult i64 %112, %rax.3.reload, !insn.addr !1927
  br i1 %113, label %dec_label_pc_2f11, label %dec_label_pc_2efe, !insn.addr !1928

dec_label_pc_2efe:                                ; preds = %dec_label_pc_2ef1
  store i64 %rax.3.reload, i64* %110, align 8, !insn.addr !1929
  br label %dec_label_pc_2f11, !insn.addr !1930

dec_label_pc_2f04:                                ; preds = %dec_label_pc_2eec
  %114 = inttoptr i64 %rdx.2.reload to i64*, !insn.addr !1931
  %115 = load i64, i64* %114, align 8, !insn.addr !1931
  %116 = icmp ult i64 %115, %rax.3.reload, !insn.addr !1931
  %117 = icmp eq i1 %116, false, !insn.addr !1932
  br i1 %117, label %dec_label_pc_2f0c, label %dec_label_pc_2f09, !insn.addr !1932

dec_label_pc_2f09:                                ; preds = %dec_label_pc_2f04
  store i64 %rax.3.reload, i64* %114, align 8, !insn.addr !1933
  br label %dec_label_pc_2f0c, !insn.addr !1933

dec_label_pc_2f0c:                                ; preds = %dec_label_pc_2f09, %dec_label_pc_2f04
  %118 = icmp eq i64 %105, %rax.3.reload, !insn.addr !1934
  br i1 %118, label %dec_label_pc_2ef1, label %dec_label_pc_2f11, !insn.addr !1935

dec_label_pc_2f11:                                ; preds = %dec_label_pc_2f0c, %dec_label_pc_2efe, %dec_label_pc_2ef1, %dec_label_pc_2ee3
  %119 = add i64 %rdx.2.reload, 32, !insn.addr !1936
  %120 = icmp eq i64 %119, %49, !insn.addr !1937
  %121 = icmp eq i1 %120, false, !insn.addr !1938
  store i64 %97, i64* %r13.0.be.reg2mem, !insn.addr !1938
  store i64 %119, i64* %rdx.2.reg2mem, !insn.addr !1938
  br i1 %121, label %dec_label_pc_2ee3, label %dec_label_pc_2e44.backedge, !insn.addr !1938

dec_label_pc_2f24.loopexit:                       ; preds = %dec_label_pc_2f6e
  %122 = call i64 @.Lstream_encoder_update.0(i64 %arg1, i64 0, i32 %85, i32 %86, i32 %87), !insn.addr !1900
  %123 = icmp eq i64 %122, 0, !insn.addr !1901
  store i64 %122, i64* %.reg2mem5, !insn.addr !1902
  br i1 %123, label %dec_label_pc_2f96.preheader, label %dec_label_pc_2f41.preheader, !insn.addr !1902

dec_label_pc_2f41.preheader:                      ; preds = %dec_label_pc_2f24.preheader, %dec_label_pc_2f24.loopexit
  %.reload6 = load i64, i64* %.reg2mem5
  store i64 %48, i64* %rdx.3.reg2mem
  br label %dec_label_pc_2f41

dec_label_pc_2f96.preheader:                      ; preds = %dec_label_pc_2f24.loopexit, %dec_label_pc_2f24.preheader
  store i64 %48, i64* %r12.0.reg2mem
  br label %dec_label_pc_2f96

dec_label_pc_2f41:                                ; preds = %dec_label_pc_2f41.preheader, %dec_label_pc_2f6e
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %124 = add i64 %rdx.3.reload, 16, !insn.addr !1939
  %125 = inttoptr i64 %124 to i64*, !insn.addr !1939
  %126 = load i64, i64* %125, align 8, !insn.addr !1939
  %127 = icmp eq i64 %126, 0, !insn.addr !1940
  br i1 %127, label %dec_label_pc_2f6e, label %dec_label_pc_2f4a, !insn.addr !1941

dec_label_pc_2f4a:                                ; preds = %dec_label_pc_2f41
  %128 = icmp ult i64 %126, %.reload6, !insn.addr !1942
  %129 = icmp eq i1 %128, false, !insn.addr !1943
  br i1 %129, label %dec_label_pc_2f61, label %dec_label_pc_2f4f, !insn.addr !1943

dec_label_pc_2f4f:                                ; preds = %dec_label_pc_2f69, %dec_label_pc_2f4a
  %130 = add i64 %rdx.3.reload, 8, !insn.addr !1944
  %131 = inttoptr i64 %130 to i64*, !insn.addr !1944
  %132 = load i64, i64* %131, align 8, !insn.addr !1944
  %133 = add i64 %132, -1, !insn.addr !1945
  %134 = icmp ult i64 %133, %.reload6, !insn.addr !1946
  br i1 %134, label %dec_label_pc_2f6e, label %dec_label_pc_2f5b, !insn.addr !1947

dec_label_pc_2f5b:                                ; preds = %dec_label_pc_2f4f
  store i64 %.reload6, i64* %131, align 8, !insn.addr !1948
  br label %dec_label_pc_2f6e, !insn.addr !1949

dec_label_pc_2f61:                                ; preds = %dec_label_pc_2f4a
  %135 = inttoptr i64 %rdx.3.reload to i64*, !insn.addr !1950
  %136 = load i64, i64* %135, align 8, !insn.addr !1950
  %137 = icmp ult i64 %136, %.reload6, !insn.addr !1950
  %138 = icmp eq i1 %137, false, !insn.addr !1951
  br i1 %138, label %dec_label_pc_2f69, label %dec_label_pc_2f66, !insn.addr !1951

dec_label_pc_2f66:                                ; preds = %dec_label_pc_2f61
  store i64 %.reload6, i64* %135, align 8, !insn.addr !1952
  br label %dec_label_pc_2f69, !insn.addr !1952

dec_label_pc_2f69:                                ; preds = %dec_label_pc_2f66, %dec_label_pc_2f61
  %139 = icmp eq i64 %.reload6, %126, !insn.addr !1953
  br i1 %139, label %dec_label_pc_2f4f, label %dec_label_pc_2f6e, !insn.addr !1954

dec_label_pc_2f6e:                                ; preds = %dec_label_pc_2f69, %dec_label_pc_2f5b, %dec_label_pc_2f4f, %dec_label_pc_2f41
  %140 = add i64 %rdx.3.reload, 32, !insn.addr !1955
  %141 = icmp eq i64 %140, %49, !insn.addr !1956
  %142 = icmp eq i1 %141, false, !insn.addr !1957
  store i64 %140, i64* %rdx.3.reg2mem, !insn.addr !1957
  br i1 %142, label %dec_label_pc_2f41, label %dec_label_pc_2f24.loopexit, !insn.addr !1957

dec_label_pc_2f7e:                                ; preds = %dec_label_pc_2fa0
  %143 = inttoptr i64 %r12.0.reload to i64*, !insn.addr !1958
  %144 = load i64, i64* %143, align 8, !insn.addr !1958
  %145 = icmp ult i64 %144, %26, !insn.addr !1958
  %146 = icmp eq i1 %145, false, !insn.addr !1959
  br i1 %146, label %dec_label_pc_2f88, label %dec_label_pc_2f84, !insn.addr !1959

dec_label_pc_2f84:                                ; preds = %dec_label_pc_2f7e
  store i64 %26, i64* %143, align 8, !insn.addr !1960
  br label %dec_label_pc_2f88, !insn.addr !1960

dec_label_pc_2f88:                                ; preds = %dec_label_pc_2f84, %dec_label_pc_2f7e
  %147 = icmp eq i64 %152, %26, !insn.addr !1961
  store i64 %152, i64* %rax.4.reg2mem, !insn.addr !1962
  br i1 %147, label %dec_label_pc_2fa2, label %dec_label_pc_2f8d, !insn.addr !1962

dec_label_pc_2f8d:                                ; preds = %dec_label_pc_2faf, %dec_label_pc_2fa2, %dec_label_pc_2f88, %dec_label_pc_2f96
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %148 = add i64 %r12.0.reload, 32, !insn.addr !1963
  %149 = icmp eq i64 %148, %49, !insn.addr !1964
  store i64 %148, i64* %r12.0.reg2mem, !insn.addr !1965
  store i64 %rax.4.reload, i64* %rax.5.reg2mem, !insn.addr !1965
  br i1 %149, label %dec_label_pc_2fb6, label %dec_label_pc_2f96, !insn.addr !1965

dec_label_pc_2f96:                                ; preds = %dec_label_pc_2f96.preheader, %dec_label_pc_2f8d
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %150 = add i64 %r12.0.reload, 16, !insn.addr !1966
  %151 = inttoptr i64 %150 to i64*, !insn.addr !1966
  %152 = load i64, i64* %151, align 8, !insn.addr !1966
  %153 = icmp eq i64 %152, 0, !insn.addr !1967
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !1968
  br i1 %153, label %dec_label_pc_2f8d, label %dec_label_pc_2fa0, !insn.addr !1968

dec_label_pc_2fa0:                                ; preds = %dec_label_pc_2f96
  %154 = icmp ult i64 %152, %26, !insn.addr !1969
  br i1 %154, label %dec_label_pc_2fa2, label %dec_label_pc_2f7e, !insn.addr !1970

dec_label_pc_2fa2:                                ; preds = %dec_label_pc_2f88, %dec_label_pc_2fa0
  %155 = add i64 %r12.0.reload, 8, !insn.addr !1971
  %156 = inttoptr i64 %155 to i64*, !insn.addr !1971
  %157 = load i64, i64* %156, align 8, !insn.addr !1971
  %158 = add i64 %157, -1, !insn.addr !1972
  %159 = icmp ult i64 %158, %26, !insn.addr !1973
  store i64 %158, i64* %rax.4.reg2mem, !insn.addr !1974
  br i1 %159, label %dec_label_pc_2f8d, label %dec_label_pc_2faf, !insn.addr !1974

dec_label_pc_2faf:                                ; preds = %dec_label_pc_2fa2
  store i64 %26, i64* %156, align 8, !insn.addr !1975
  store i64 %158, i64* %rax.4.reg2mem, !insn.addr !1976
  br label %dec_label_pc_2f8d, !insn.addr !1976

dec_label_pc_2fb6:                                ; preds = %dec_label_pc_2f8d, %dec_label_pc_2d7f, %dec_label_pc_2d40
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  ret i64 %rax.5.reload, !insn.addr !1977

; uselistorder directives
  uselistorder i64 %152, { 2, 3, 1, 0 }
  uselistorder i64 %r12.0.reload, { 2, 0, 3, 1 }
  uselistorder i64 %rdx.3.reload, { 1, 2, 3, 0 }
  uselistorder i64 %.reload6, { 2, 5, 4, 1, 0, 3 }
  uselistorder i64 %rdx.2.reload, { 1, 2, 3, 0 }
  uselistorder i64 %rax.3.reload, { 4, 1, 2, 5, 6, 3, 7, 0 }
  uselistorder i64 %97, { 0, 3, 4, 5, 2, 6, 1 }
  uselistorder i64 %r13.0.be.reload, { 1, 0 }
  uselistorder i64 %r13.03.reload, { 1, 0 }
  uselistorder i32 %87, { 1, 0 }
  uselistorder i32 %86, { 1, 0 }
  uselistorder i32 %85, { 1, 0 }
  uselistorder i64 %rax.1.reload, { 1, 2, 3, 0 }
  uselistorder i64 %49, { 2, 1, 0, 3 }
  uselistorder i64 %.reload, { 1, 0 }
  uselistorder i64 %26, { 6, 5, 7, 4, 9, 8, 1, 11, 3, 10, 0, 2 }
  uselistorder i64 %25, { 1, 0 }
  uselistorder i64 %20, { 10, 11, 0, 2, 6, 9, 8, 5, 4, 7, 3, 1, 12 }
  uselistorder i64 %rax.0.reload, { 1, 0 }
  uselistorder i64 %rdx.0.reload, { 1, 0 }
  uselistorder i64* %stack_var_-128, { 2, 0, 3, 1 }
  uselistorder i64* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-148, { 2, 3, 0, 1 }
  uselistorder i32 %9, { 2, 1, 0 }
  uselistorder i64 %8, { 1, 0 }
  uselistorder i64* %rax.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r15.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.1.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r13.03.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r13.0.be.reg2mem, { 1, 4, 5, 3, 2, 0, 6 }
  uselistorder i64* %rax.2.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.3.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rdx.2.reg2mem, { 2, 0, 1 }
  uselistorder i64* %.reg2mem5, { 0, 2, 1 }
  uselistorder i64* %rdx.3.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.4.reg2mem, { 2, 3, 4, 0, 1 }
  uselistorder i64* %r12.0.reg2mem, { 0, 2, 1 }
  uselistorder i32* %1, { 2, 1, 0 }
  uselistorder i64* %0, { 3, 2, 1, 0 }
  uselistorder i32 269, { 1, 2, 3, 0, 4 }
  uselistorder i32 360, { 1, 0, 2 }
  uselistorder i64 %arg2, { 3, 2, 1, 0 }
  uselistorder i64 %arg1, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_2fa2, { 1, 0 }
  uselistorder label %dec_label_pc_2f96, { 1, 0 }
  uselistorder label %dec_label_pc_2f8d, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_2f41, { 1, 0 }
  uselistorder label %dec_label_pc_2f41.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_2ee3, { 1, 0 }
  uselistorder label %dec_label_pc_2e44.backedge, { 1, 5, 4, 0, 3, 2 }
  uselistorder label %dec_label_pc_2e4d, { 1, 0 }
  uselistorder label %dec_label_pc_2dbd, { 1, 0 }
  uselistorder label %dec_label_pc_2dbd.preheader, { 1, 0 }
}

define i64 @function_2fd0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_2fd0:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i8
  %rax.2.reg2mem = alloca i64, !insn.addr !1978
  %rsi.2.reg2mem = alloca i64, !insn.addr !1978
  %rbx.4.reg2mem = alloca i64, !insn.addr !1978
  %rcx.5.reg2mem = alloca i64, !insn.addr !1978
  %rsi.1.reg2mem = alloca i64, !insn.addr !1978
  %rbx.3.reg2mem = alloca i64, !insn.addr !1978
  %rcx.4.reg2mem = alloca i64, !insn.addr !1978
  %rax.1.reg2mem = alloca i64, !insn.addr !1978
  %rbx.2.reg2mem = alloca i64, !insn.addr !1978
  %rcx.3.reg2mem = alloca i64, !insn.addr !1978
  %rcx.210.reg2mem = alloca i64, !insn.addr !1978
  %rbx.111.reg2mem = alloca i64, !insn.addr !1978
  %rbx.1.reg2mem = alloca i64, !insn.addr !1978
  %r11.2.reg2mem = alloca i64, !insn.addr !1978
  %rsi.0.reg2mem = alloca i64, !insn.addr !1978
  %rbx.0.reg2mem = alloca i64, !insn.addr !1978
  %rcx.0.reg2mem = alloca i64, !insn.addr !1978
  %r11.1.reg2mem = alloca i64, !insn.addr !1978
  %storemerge4.in.reg2mem = alloca i32, !insn.addr !1978
  %r11.0.reg2mem = alloca i64, !insn.addr !1978
  %r15.0.reg2mem = alloca i64, !insn.addr !1978
  %r9.0.reg2mem = alloca i64, !insn.addr !1978
  %3 = load i8, i8* %2
  %4 = load i32, i32* %1
  %5 = load i8, i8* %2
  %6 = load i32, i32* %1
  %7 = load i8, i8* %2
  %8 = load i32, i32* %1
  %9 = load i32, i32* %1
  %10 = load i32, i32* %1
  %11 = load i64, i64* %0
  %12 = load i8, i8* %2
  %stack_var_-128 = alloca i64, align 8
  %13 = inttoptr i64 %arg5 to i64*, !insn.addr !1979
  store i64 0, i64* %13, align 8, !insn.addr !1979
  %14 = icmp ult i64 %arg1, %arg2, !insn.addr !1980
  %15 = icmp eq i1 %14, false, !insn.addr !1981
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1981
  br i1 %15, label %dec_label_pc_3285, label %dec_label_pc_2ffd, !insn.addr !1981

dec_label_pc_2ffd:                                ; preds = %dec_label_pc_2fd0
  %16 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !1982
  call void @__asm_rep_stosd_memset(i8* nonnull %16, i32 0, i64 22), !insn.addr !1982
  %17 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !1983
  %18 = urem i8 %12, 2
  %19 = icmp eq i8 %18, 0
  %20 = sext i32 %9 to i64
  %21 = and i32 %10, -16711936
  %22 = icmp eq i32 %21, 83886080
  %23 = icmp eq i1 %22, false
  %24 = and i32 %8, 4160
  %25 = icmp eq i32 %24, 0
  %26 = and i32 %8, 64
  %27 = icmp eq i32 %26, 0
  %28 = zext i8 %7 to i64
  %29 = and i32 %8, 32
  %30 = icmp eq i32 %29, 0
  %31 = mul i32 %6, 2
  %32 = and i32 %31, 510
  %33 = and i8 %12, 16
  %34 = icmp eq i8 %33, 0
  %35 = zext i8 %5 to i64
  %36 = mul i32 %6, 8
  %37 = and i32 %36, 2040
  %38 = add i64 %arg6, 96
  %39 = inttoptr i64 %38 to i64*
  %40 = icmp eq i32 %4, 265
  %41 = icmp eq i1 %40, false
  %42 = and i32 %31, 8
  %43 = zext i8 %33 to i64
  %44 = and i32 %36, 8
  %45 = zext i8 %3 to i64
  %46 = icmp eq i32 %4, 267
  %47 = icmp eq i1 %46, false
  %48 = icmp eq i1 %27, false
  %49 = icmp eq i1 %25, false
  %50 = icmp eq i1 %34, false
  %.tr = trunc i32 %6 to i8
  %51 = mul i8 %.tr, 2
  %52 = and i8 %51, 8
  %53 = or i8 %52, %7
  %54 = zext i8 %53 to i64
  %55 = add i64 %arg6, 32
  %56 = inttoptr i64 %55 to i64*
  %brmerge = or i1 %23, %19
  %.mux = select i1 %19, i64 0, i64 %20
  %brmerge6 = or i1 %30, %34
  %narrow = select i1 %34, i8 0, i8 %5
  %.mux7 = zext i8 %narrow to i64
  store i64 %arg6, i64* %r9.0.reg2mem, !insn.addr !1983
  store i64 %arg1, i64* %r15.0.reg2mem, !insn.addr !1983
  br label %dec_label_pc_301e, !insn.addr !1983

dec_label_pc_301e:                                ; preds = %dec_label_pc_324b, %dec_label_pc_2ffd
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %57 = call i64 @.Llzma_filters_update.0(i64 %r15.0.reload, i64 %arg2, i64 1, i64 1, i64 %17), !insn.addr !1984
  %58 = trunc i64 %57 to i32, !insn.addr !1985
  %59 = icmp eq i32 %58, 0, !insn.addr !1985
  store i64 %57, i64* %rax.2.reg2mem, !insn.addr !1986
  br i1 %59, label %dec_label_pc_3285, label %dec_label_pc_3042, !insn.addr !1986

dec_label_pc_3042:                                ; preds = %dec_label_pc_301e
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %60 = load i64, i64* %stack_var_-128, align 8, !insn.addr !1987
  store i64 0, i64* %r11.1.reg2mem, !insn.addr !1988
  br i1 %25, label %dec_label_pc_30ba, label %dec_label_pc_3081, !insn.addr !1988

dec_label_pc_3081:                                ; preds = %dec_label_pc_3042
  br i1 %27, label %dec_label_pc_309b, label %dec_label_pc_3089, !insn.addr !1989

dec_label_pc_3089:                                ; preds = %dec_label_pc_3081
  store i64 %28, i64* %r11.0.reg2mem, !insn.addr !1990
  store i32 %32, i32* %storemerge4.in.reg2mem, !insn.addr !1990
  store i64 %28, i64* %r11.1.reg2mem, !insn.addr !1990
  br i1 %30, label %dec_label_pc_30ba, label %dec_label_pc_30b4, !insn.addr !1990

dec_label_pc_309b:                                ; preds = %dec_label_pc_3081
  store i64 %35, i64* %r11.0.reg2mem, !insn.addr !1991
  store i32 %37, i32* %storemerge4.in.reg2mem, !insn.addr !1991
  store i64 %.mux7, i64* %r11.1.reg2mem, !insn.addr !1991
  br i1 %brmerge6, label %dec_label_pc_30ba, label %dec_label_pc_30b4, !insn.addr !1991

dec_label_pc_30b4:                                ; preds = %dec_label_pc_309b, %dec_label_pc_3089
  %storemerge4.in.reload = load i32, i32* %storemerge4.in.reg2mem
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %61 = and i32 %storemerge4.in.reload, 8
  %62 = zext i32 %61 to i64, !insn.addr !1992
  %63 = or i64 %r11.0.reload, %62, !insn.addr !1993
  store i64 %63, i64* %r11.1.reg2mem, !insn.addr !1993
  br label %dec_label_pc_30ba, !insn.addr !1993

dec_label_pc_30ba:                                ; preds = %dec_label_pc_309b, %dec_label_pc_30b4, %dec_label_pc_3089, %dec_label_pc_3042
  %64 = add i64 %60, %20
  %65 = add i64 %64, %11
  %r9.1 = select i1 %brmerge, i64 %r9.0.reload, i64 %64
  %r12.0 = select i1 %brmerge, i64 %.mux, i64 %65
  %66 = add i64 %60, %11, !insn.addr !1994
  %67 = icmp ult i64 %r12.0, %arg3, !insn.addr !1995
  %68 = icmp ult i64 %r12.0, %arg4, !insn.addr !1996
  %69 = icmp eq i1 %68, false, !insn.addr !1997
  %or.cond = or i1 %67, %69
  br i1 %or.cond, label %dec_label_pc_324b, label %dec_label_pc_30da, !insn.addr !1998

dec_label_pc_30da:                                ; preds = %dec_label_pc_30ba
  %r11.1.reload = load i64, i64* %r11.1.reg2mem
  %70 = load i64, i64* %39, align 8, !insn.addr !1999
  %71 = add i64 %66, 64, !insn.addr !2000
  %72 = icmp ugt i64 %71, %70
  %73 = select i1 %72, i64 %70, i64 %71, !insn.addr !2001
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !2002
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !2002
  store i64 %66, i64* %rsi.0.reg2mem, !insn.addr !2002
  store i64 %r11.1.reload, i64* %r11.2.reg2mem, !insn.addr !2002
  br label %dec_label_pc_30f0, !insn.addr !2002

dec_label_pc_30f0:                                ; preds = %dec_label_pc_3232, %dec_label_pc_30da
  %r11.2.reload = load i64, i64* %r11.2.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %74 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-128, i64 %rsi.0.reload, i64 %73, i64 %rcx.0.reload, i64 %73, i64 %r9.1), !insn.addr !2003
  %75 = trunc i64 %74 to i32, !insn.addr !2004
  %76 = icmp eq i32 %75, 0, !insn.addr !2004
  br i1 %76, label %dec_label_pc_323c, label %dec_label_pc_312b, !insn.addr !2005

dec_label_pc_312b:                                ; preds = %dec_label_pc_30f0
  %77 = load i64, i64* %stack_var_-128, align 8, !insn.addr !2006
  %78 = add i64 %77, %11
  br i1 %41, label %dec_label_pc_31aa, label %dec_label_pc_3140, !insn.addr !2007

dec_label_pc_3140:                                ; preds = %dec_label_pc_312b
  br i1 %25, label %dec_label_pc_3199, label %dec_label_pc_3152, !insn.addr !2008

dec_label_pc_3152:                                ; preds = %dec_label_pc_3140
  %79 = and i64 %rcx.0.reload, -256
  br i1 %27, label %dec_label_pc_316d, label %dec_label_pc_3156, !insn.addr !2009

dec_label_pc_3156:                                ; preds = %dec_label_pc_3152
  %80 = or i64 %79, %28, !insn.addr !2010
  store i64 %80, i64* %rcx.3.reg2mem, !insn.addr !2011
  store i64 %45, i64* %rbx.2.reg2mem, !insn.addr !2011
  br i1 %30, label %dec_label_pc_3226, label %dec_label_pc_3217.thread9, !insn.addr !2011

dec_label_pc_3217.thread9:                        ; preds = %dec_label_pc_3156
  %81 = trunc i64 %80 to i32, !insn.addr !2012
  %82 = or i32 %42, %81, !insn.addr !2012
  %83 = zext i32 %82 to i64, !insn.addr !2012
  store i64 %45, i64* %rbx.111.reg2mem
  store i64 %83, i64* %rcx.210.reg2mem
  br label %dec_label_pc_3219

dec_label_pc_316d:                                ; preds = %dec_label_pc_3152
  %84 = or i64 %79, %43, !insn.addr !2013
  store i64 %84, i64* %rcx.3.reg2mem, !insn.addr !2014
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !2014
  br i1 %34, label %dec_label_pc_3226, label %dec_label_pc_317a, !insn.addr !2014

dec_label_pc_317a:                                ; preds = %dec_label_pc_316d
  %85 = or i64 %79, %35, !insn.addr !2015
  store i64 %85, i64* %rcx.3.reg2mem, !insn.addr !2016
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !2016
  br i1 %30, label %dec_label_pc_3226, label %dec_label_pc_3187, !insn.addr !2016

dec_label_pc_3187:                                ; preds = %dec_label_pc_317a
  %86 = trunc i64 %85 to i32, !insn.addr !2017
  %87 = or i32 %44, %86, !insn.addr !2017
  %88 = zext i32 %87 to i64, !insn.addr !2017
  store i64 %88, i64* %rcx.3.reg2mem, !insn.addr !2018
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !2018
  br label %dec_label_pc_3226, !insn.addr !2018

dec_label_pc_3199:                                ; preds = %dec_label_pc_3140
  store i64 %45, i64* %rbx.1.reg2mem, !insn.addr !2019
  store i64 %rcx.0.reload, i64* %rcx.3.reg2mem, !insn.addr !2019
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !2019
  br i1 %27, label %dec_label_pc_3226, label %dec_label_pc_3217, !insn.addr !2019

dec_label_pc_31aa:                                ; preds = %dec_label_pc_312b
  store i64 %rcx.0.reload, i64* %rcx.3.reg2mem, !insn.addr !2020
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !2020
  br i1 %47, label %dec_label_pc_3226, label %dec_label_pc_31b1, !insn.addr !2020

dec_label_pc_31b1:                                ; preds = %dec_label_pc_31aa
  br i1 %48, label %dec_label_pc_31c9, label %dec_label_pc_31c2, !insn.addr !2021

dec_label_pc_31c2:                                ; preds = %dec_label_pc_31b1
  store i64 %rcx.0.reload, i64* %rcx.3.reg2mem, !insn.addr !2022
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !2022
  br i1 %49, label %dec_label_pc_31ff, label %dec_label_pc_3226, !insn.addr !2022

dec_label_pc_31c9:                                ; preds = %dec_label_pc_31b1
  %89 = and i64 %rcx.0.reload, -256, !insn.addr !2023
  %90 = or i64 %89, %45, !insn.addr !2023
  br i1 %30, label %dec_label_pc_31f4, label %dec_label_pc_31d1, !insn.addr !2024

dec_label_pc_31d1:                                ; preds = %dec_label_pc_31c9
  %91 = trunc i64 %90 to i32, !insn.addr !2025
  %92 = or i32 %44, %91, !insn.addr !2025
  %93 = zext i32 %92 to i64, !insn.addr !2025
  %spec.select = select i1 %25, i64 %rbx.0.reload, i64 %54
  store i64 %93, i64* %rcx.3.reg2mem
  store i64 %spec.select, i64* %rbx.2.reg2mem
  br label %dec_label_pc_3226

dec_label_pc_31f4:                                ; preds = %dec_label_pc_31c9
  %spec.select8 = select i1 %25, i64 %rbx.0.reload, i64 %28
  store i64 %90, i64* %rcx.3.reg2mem
  store i64 %spec.select8, i64* %rbx.2.reg2mem
  br label %dec_label_pc_3226

dec_label_pc_31ff:                                ; preds = %dec_label_pc_31c2
  store i64 %35, i64* %rbx.1.reg2mem, !insn.addr !2026
  br i1 %50, label %dec_label_pc_3217, label %dec_label_pc_3208, !insn.addr !2026

dec_label_pc_3208:                                ; preds = %dec_label_pc_31ff
  %94 = trunc i64 %r11.2.reload to i8, !insn.addr !2027
  %95 = trunc i64 %rcx.0.reload to i8, !insn.addr !2027
  %96 = icmp eq i8 %94, %95, !insn.addr !2027
  %97 = icmp eq i1 %96, false, !insn.addr !2028
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2028
  store i64 %rcx.0.reload, i64* %rcx.4.reg2mem, !insn.addr !2028
  store i64 %43, i64* %rbx.3.reg2mem, !insn.addr !2028
  store i64 %78, i64* %rsi.1.reg2mem, !insn.addr !2028
  store i64 %rcx.0.reload, i64* %rcx.5.reg2mem, !insn.addr !2028
  store i64 %43, i64* %rbx.4.reg2mem, !insn.addr !2028
  store i64 %78, i64* %rsi.2.reg2mem, !insn.addr !2028
  br i1 %97, label %dec_label_pc_323f, label %dec_label_pc_3232, !insn.addr !2028

dec_label_pc_3217:                                ; preds = %dec_label_pc_3199, %dec_label_pc_31ff
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  store i64 %rbx.1.reload, i64* %rbx.111.reg2mem, !insn.addr !2029
  store i64 %rcx.0.reload, i64* %rcx.210.reg2mem, !insn.addr !2029
  store i64 %rcx.0.reload, i64* %rcx.3.reg2mem, !insn.addr !2029
  store i64 %rbx.1.reload, i64* %rbx.2.reg2mem, !insn.addr !2029
  br i1 %30, label %dec_label_pc_3226, label %dec_label_pc_3219, !insn.addr !2029

dec_label_pc_3219:                                ; preds = %dec_label_pc_3217.thread9, %dec_label_pc_3217
  %rcx.210.reload = load i64, i64* %rcx.210.reg2mem
  %rbx.111.reload = load i64, i64* %rbx.111.reg2mem
  %98 = trunc i64 %rbx.111.reload to i32, !insn.addr !2030
  %99 = or i32 %44, %98, !insn.addr !2030
  %100 = zext i32 %99 to i64, !insn.addr !2030
  store i64 %rcx.210.reload, i64* %rcx.3.reg2mem, !insn.addr !2030
  store i64 %100, i64* %rbx.2.reg2mem, !insn.addr !2030
  br label %dec_label_pc_3226, !insn.addr !2030

dec_label_pc_3226:                                ; preds = %dec_label_pc_3156, %dec_label_pc_31f4, %dec_label_pc_31d1, %dec_label_pc_31c2, %dec_label_pc_3219, %dec_label_pc_3217, %dec_label_pc_31aa, %dec_label_pc_3199, %dec_label_pc_3187, %dec_label_pc_317a, %dec_label_pc_316d
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %101 = trunc i64 %r11.2.reload to i8, !insn.addr !2031
  %102 = trunc i64 %rcx.3.reload to i8, !insn.addr !2031
  %103 = icmp eq i8 %101, %102, !insn.addr !2031
  %104 = icmp eq i1 %103, false, !insn.addr !2032
  store i64 %rcx.3.reload, i64* %rcx.5.reg2mem, !insn.addr !2032
  store i64 %rbx.2.reload, i64* %rbx.4.reg2mem, !insn.addr !2032
  store i64 %78, i64* %rsi.2.reg2mem, !insn.addr !2032
  br i1 %104, label %dec_label_pc_323f, label %dec_label_pc_322b, !insn.addr !2032

dec_label_pc_322b:                                ; preds = %dec_label_pc_3226
  %105 = trunc i64 %rbx.2.reload to i8, !insn.addr !2033
  %106 = icmp eq i8 %105, 7, !insn.addr !2033
  br i1 %106, label %dec_label_pc_325b, label %dec_label_pc_3230, !insn.addr !2034

dec_label_pc_3230:                                ; preds = %dec_label_pc_322b
  %107 = and i64 %rbx.2.reload, 4294967295, !insn.addr !2035
  store i64 %107, i64* %rax.1.reg2mem, !insn.addr !2035
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem, !insn.addr !2035
  store i64 %rbx.2.reload, i64* %rbx.3.reg2mem, !insn.addr !2035
  store i64 %78, i64* %rsi.1.reg2mem, !insn.addr !2035
  br label %dec_label_pc_3232, !insn.addr !2035

dec_label_pc_3232:                                ; preds = %dec_label_pc_3208, %dec_label_pc_3244, %dec_label_pc_3230
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %108 = and i64 %rbx.3.reload, 4294967295, !insn.addr !2036
  store i64 %rcx.4.reload, i64* %rcx.0.reg2mem, !insn.addr !2037
  store i64 %rax.1.reload, i64* %rbx.0.reg2mem, !insn.addr !2037
  store i64 %rsi.1.reload, i64* %rsi.0.reg2mem, !insn.addr !2037
  store i64 %108, i64* %r11.2.reg2mem, !insn.addr !2037
  br label %dec_label_pc_30f0, !insn.addr !2037

dec_label_pc_323c:                                ; preds = %dec_label_pc_30f0
  %109 = add i64 %rsi.0.reload, 1, !insn.addr !2038
  store i64 %rcx.0.reload, i64* %rcx.5.reg2mem, !insn.addr !2038
  store i64 %rbx.0.reload, i64* %rbx.4.reg2mem, !insn.addr !2038
  store i64 %109, i64* %rsi.2.reg2mem, !insn.addr !2038
  br label %dec_label_pc_323f, !insn.addr !2038

dec_label_pc_323f:                                ; preds = %dec_label_pc_323c, %dec_label_pc_3226, %dec_label_pc_3208
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %110 = icmp ult i64 %rsi.2.reload, %73, !insn.addr !2039
  %111 = icmp eq i1 %110, false, !insn.addr !2040
  br i1 %111, label %dec_label_pc_324b, label %dec_label_pc_3244, !insn.addr !2040

dec_label_pc_3244:                                ; preds = %dec_label_pc_323f
  %rbx.4.reload = load i64, i64* %rbx.4.reg2mem
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %112 = and i64 %rbx.4.reload, 4294967295, !insn.addr !2041
  store i64 %112, i64* %rax.1.reg2mem, !insn.addr !2042
  store i64 %rcx.5.reload, i64* %rcx.4.reg2mem, !insn.addr !2042
  store i64 %r11.2.reload, i64* %rbx.3.reg2mem, !insn.addr !2042
  store i64 %rsi.2.reload, i64* %rsi.1.reg2mem, !insn.addr !2042
  br label %dec_label_pc_3232, !insn.addr !2042

dec_label_pc_324b:                                ; preds = %dec_label_pc_323f, %dec_label_pc_325b, %dec_label_pc_30ba
  %113 = icmp ult i64 %66, %arg2, !insn.addr !2043
  store i64 %r9.1, i64* %r9.0.reg2mem, !insn.addr !2044
  store i64 %66, i64* %r15.0.reg2mem, !insn.addr !2044
  store i64 %arg2, i64* %rax.2.reg2mem, !insn.addr !2044
  br i1 %113, label %dec_label_pc_301e, label %dec_label_pc_3285, !insn.addr !2044

dec_label_pc_325b:                                ; preds = %dec_label_pc_322b
  %114 = load i64, i64* %56, align 8, !insn.addr !2045
  %115 = add i64 %114, 168, !insn.addr !2046
  %116 = inttoptr i64 %115 to i64*, !insn.addr !2046
  %117 = load i64, i64* %116, align 8, !insn.addr !2046
  %118 = call i64 @.Llzma_optimum_normal.0(i64 %78, i64 %73, i64 %117, i64 %17), !insn.addr !2047
  %119 = trunc i64 %118 to i32, !insn.addr !2048
  %120 = icmp eq i32 %119, 0, !insn.addr !2048
  br i1 %120, label %dec_label_pc_324b, label %dec_label_pc_3281, !insn.addr !2049

dec_label_pc_3281:                                ; preds = %dec_label_pc_325b
  store i64 %r12.0, i64* %13, align 8, !insn.addr !2050
  store i64 %118, i64* %rax.2.reg2mem, !insn.addr !2050
  br label %dec_label_pc_3285, !insn.addr !2050

dec_label_pc_3285:                                ; preds = %dec_label_pc_324b, %dec_label_pc_301e, %dec_label_pc_3281, %dec_label_pc_2fd0
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !2051

; uselistorder directives
  uselistorder i64 %rsi.2.reload, { 1, 0 }
  uselistorder i64 %rcx.3.reload, { 1, 0, 2 }
  uselistorder i64 %rbx.2.reload, { 1, 2, 3, 0 }
  uselistorder i64 %85, { 1, 0 }
  uselistorder i64 %80, { 1, 0 }
  uselistorder i64 %78, { 4, 3, 1, 0, 2 }
  uselistorder i64 %rcx.0.reload, { 1, 5, 7, 0, 2, 10, 9, 4, 6, 3, 11, 8 }
  uselistorder i64 %rbx.0.reload, { 0, 8, 7, 5, 6, 4, 1, 2, 3 }
  uselistorder i64 %rsi.0.reload, { 1, 0 }
  uselistorder i64 %73, { 3, 2, 0, 1 }
  uselistorder i64 %66, { 1, 2, 0, 3 }
  uselistorder i64 %r12.0, { 0, 2, 1 }
  uselistorder i64 %64, { 1, 0 }
  uselistorder i64 %45, { 3, 2, 1, 0 }
  uselistorder i32 %44, { 2, 0, 1 }
  uselistorder i32 %36, { 1, 0 }
  uselistorder i64 %35, { 0, 2, 1 }
  uselistorder i1 %34, { 3, 1, 0, 2 }
  uselistorder i32 %31, { 1, 0 }
  uselistorder i1 %30, { 1, 2, 5, 4, 3, 0 }
  uselistorder i64 %28, { 3, 2, 0, 1 }
  uselistorder i1 %27, { 2, 1, 3, 0 }
  uselistorder i1 %25, { 2, 1, 3, 4, 0 }
  uselistorder i1 %19, { 1, 0 }
  uselistorder i64* %stack_var_-128, { 2, 0, 3, 4, 1 }
  uselistorder i64 %11, { 2, 1, 0 }
  uselistorder i32 %8, { 2, 0, 1 }
  uselistorder i8 %7, { 1, 0 }
  uselistorder i32 %6, { 0, 2, 1 }
  uselistorder i8 %5, { 1, 0 }
  uselistorder i32 %4, { 1, 0 }
  uselistorder i64* %r9.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r15.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r11.1.reg2mem, { 0, 2, 3, 1, 4 }
  uselistorder i64* %rcx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rsi.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r11.2.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.1.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rcx.3.reg2mem, { 0, 9, 10, 2, 3, 8, 11, 7, 4, 5, 6, 1 }
  uselistorder i64* %rbx.2.reg2mem, { 0, 9, 10, 2, 3, 8, 11, 7, 4, 5, 6, 1 }
  uselistorder i64* %rax.1.reg2mem, { 3, 0, 2, 1 }
  uselistorder i64* %rcx.4.reg2mem, { 3, 0, 2, 1 }
  uselistorder i64* %rbx.3.reg2mem, { 3, 0, 2, 1 }
  uselistorder i64* %rsi.1.reg2mem, { 3, 0, 2, 1 }
  uselistorder i64* %rcx.5.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64* %rbx.4.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64* %rsi.2.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64* %rax.2.reg2mem, { 0, 3, 1, 2, 4 }
  uselistorder i8* %2, { 3, 2, 1, 0 }
  uselistorder i32* %1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_3285, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_324b, { 1, 0, 2 }
  uselistorder label %dec_label_pc_3232, { 1, 2, 0 }
  uselistorder label %dec_label_pc_3226, { 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_3219, { 1, 0 }
  uselistorder label %dec_label_pc_3217, { 1, 0 }
  uselistorder label %dec_label_pc_30ba, { 1, 0, 2, 3 }
}

define i64 @.Llzma_auto_decode.1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_32a0:
  %rax.0.reg2mem = alloca i64, !insn.addr !2052
  %.reg2mem = alloca i64, !insn.addr !2052
  %stack_var_-44 = alloca i64, align 8
  %sext = mul i64 %arg2, 4294967296
  %0 = ashr exact i64 %sext, 32, !insn.addr !2053
  store i64 %0, i64* %stack_var_-44, align 8, !insn.addr !2053
  %1 = call i64 @.Llzma_index_iter_rewind.cold(i64 210, i64 4, i64 13, i32 0, i64 %0), !insn.addr !2054
  %2 = trunc i64 %1 to i32, !insn.addr !2055
  %3 = icmp eq i32 %2, 0, !insn.addr !2055
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2056
  br i1 %3, label %dec_label_pc_330d, label %dec_label_pc_32df.preheader, !insn.addr !2056

dec_label_pc_32df.preheader:                      ; preds = %dec_label_pc_32a0
  %4 = ptrtoint i64* %stack_var_-44 to i64, !insn.addr !2057
  %5 = call i64 @.Llzip_decode.0(i64 %arg1, i64 %4, i64 0, i64 0), !insn.addr !2058
  %6 = icmp eq i64 %5, 0, !insn.addr !2059
  store i64 %5, i64* %.reg2mem, !insn.addr !2060
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2060
  br i1 %6, label %dec_label_pc_330d, label %dec_label_pc_32f2, !insn.addr !2060

dec_label_pc_32df:                                ; preds = %dec_label_pc_32f2
  %7 = add i64 %.reload, 1, !insn.addr !2061
  %8 = call i64 @.Llzip_decode.0(i64 %arg1, i64 %4, i64 %7, i64 0), !insn.addr !2058
  %9 = icmp eq i64 %8, 0, !insn.addr !2059
  store i64 %8, i64* %.reg2mem, !insn.addr !2060
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2060
  br i1 %9, label %dec_label_pc_330d, label %dec_label_pc_32f2, !insn.addr !2060

dec_label_pc_32f2:                                ; preds = %dec_label_pc_32df.preheader, %dec_label_pc_32df
  %.reload = load i64, i64* %.reg2mem
  %10 = call i64 @.Lstream_encode.1(i64 %arg3, i64 %arg4, i64 %.reload), !insn.addr !2062
  %11 = icmp eq i64 %10, 0, !insn.addr !2063
  %12 = icmp eq i1 %11, false, !insn.addr !2064
  store i64 %10, i64* %rax.0.reg2mem, !insn.addr !2064
  br i1 %12, label %dec_label_pc_330d, label %dec_label_pc_32df, !insn.addr !2064

dec_label_pc_330d:                                ; preds = %dec_label_pc_32f2, %dec_label_pc_32df, %dec_label_pc_32df.preheader, %dec_label_pc_32a0
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2065

; uselistorder directives
  uselistorder i64 %.reload, { 1, 0 }
  uselistorder i64 %4, { 1, 0 }
  uselistorder i64* %stack_var_-44, { 1, 0 }
  uselistorder i64* %.reg2mem, { 0, 2, 1 }
  uselistorder i64 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_32f2, { 1, 0 }
}

define i64 @function_3320(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64* %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_3320:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i16
  %3 = alloca i8
  %storemerge.reg2mem = alloca i64, !insn.addr !2066
  %rdx.0.reg2mem = alloca i64, !insn.addr !2066
  %rax.3.reg2mem = alloca i8, !insn.addr !2066
  %storemerge5.in.reg2mem = alloca i32, !insn.addr !2066
  %rax.2.reg2mem = alloca i8, !insn.addr !2066
  %rcx.225.reg2mem = alloca i64, !insn.addr !2066
  %rsi.027.reg2mem = alloca i64, !insn.addr !2066
  %r8.4.reg2mem = alloca i64, !insn.addr !2066
  %r8.3.reg2mem = alloca i64, !insn.addr !2066
  %rax.1.reg2mem = alloca i8, !insn.addr !2066
  %r8.2.reg2mem = alloca i64, !insn.addr !2066
  %rcx.1.ph34.reg2mem = alloca i64, !insn.addr !2066
  %r8.1.ph35.reg2mem = alloca i64, !insn.addr !2066
  %r14.0.ph37.reg2mem = alloca i64, !insn.addr !2066
  %r8.0.reg2mem = alloca i64, !insn.addr !2066
  %rcx.0.reg2mem = alloca i64, !insn.addr !2066
  %r14.023.reg2mem = alloca i64, !insn.addr !2066
  %4 = load i64, i64* %0
  %5 = load i32, i32* %1
  %6 = load i32, i32* %1
  %7 = load i64, i64* %0
  %8 = load i64, i64* %0
  %9 = load i8, i8* %3
  %10 = load i8, i8* %3
  %11 = load i32, i32* %1
  %12 = load i16, i16* %2
  %13 = load i32, i32* %1
  %14 = load i32, i32* %1
  %stack_var_-128 = alloca i64, align 8
  %15 = load i8, i8* %3
  %16 = load i8, i8* %3
  %17 = load i8, i8* %3
  %18 = load i8, i8* %3
  %19 = load i32, i32* %1
  %20 = load i16, i16* %2
  %21 = load i64, i64* %0
  %22 = load i8, i8* %3
  %23 = load i32, i32* %1
  %stack_var_-216 = alloca i64, align 8
  %24 = bitcast i64* %stack_var_-216 to i8*, !insn.addr !2067
  call void @__asm_rep_stosd_memset(i8* nonnull %24, i32 0, i64 22), !insn.addr !2067
  store i64 0, i64* %arg5, align 8, !insn.addr !2068
  %25 = call i64 @.Llzma_auto_decode.1(i64 %arg6, i64 480, i64 %arg3, i64 %arg4), !insn.addr !2069
  %26 = icmp eq i64 %25, 0, !insn.addr !2070
  %27 = icmp eq i1 %26, false, !insn.addr !2071
  %28 = icmp ult i64 %25, %arg4, !insn.addr !2072
  %or.cond47 = icmp eq i1 %28, %27
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2071
  br i1 %or.cond47, label %dec_label_pc_337d.lr.ph.lr.ph, label %dec_label_pc_3648, !insn.addr !2071

dec_label_pc_337d.lr.ph.lr.ph:                    ; preds = %dec_label_pc_3320
  %29 = ptrtoint i64* %arg5 to i64
  %30 = and i32 %23, -3
  %31 = icmp eq i32 %30, 177
  %32 = icmp eq i1 %31, false
  %33 = icmp eq i8 %22, 3
  %34 = and i16 %20, 32
  %35 = icmp eq i16 %34, 0
  %36 = and i32 %19, 8
  %37 = icmp eq i32 %36, 0
  %38 = icmp eq i1 %37, false
  %39 = and i16 %20, 64
  %sext = mul i16 %20, 256
  %40 = ashr exact i16 %sext, 8
  %41 = and i16 %40, 4160
  %42 = icmp eq i16 %41, 0
  %43 = icmp eq i1 %42, false
  %44 = icmp eq i16 %39, 0
  %45 = icmp eq i1 %44, false
  %46 = zext i8 %18 to i64
  %47 = mul i32 %19, 2
  %48 = and i32 %47, 8
  %.tr = trunc i32 %19 to i8
  %49 = mul i8 %.tr, 8
  %50 = and i8 %49, 8
  %51 = or i8 %50, %17
  %52 = and i8 %16, 16
  %53 = icmp eq i8 %52, 0
  %54 = zext i8 %52 to i64
  %55 = zext i8 %15 to i64
  %56 = mul i32 %19, 8
  %57 = and i32 %56, 8
  %58 = bitcast i64* %stack_var_-128 to i8*
  %59 = icmp eq i32 %14, 265
  %60 = icmp eq i1 %59, false
  %61 = and i32 %13, -16711936
  %62 = icmp eq i32 %61, 83886080
  %63 = icmp eq i1 %62, false
  %64 = and i16 %12, 4160
  %65 = icmp eq i16 %64, 0
  %66 = and i16 %12, 64
  %67 = icmp eq i16 %66, 0
  %68 = and i16 %12, 32
  %69 = icmp eq i16 %68, 0
  %70 = mul i32 %11, 2
  %71 = and i32 %70, 510
  %72 = and i8 %10, 16
  %73 = icmp eq i8 %72, 0
  %74 = mul i32 %11, 8
  %75 = and i32 %74, 2040
  %76 = urem i8 %10, 2
  %77 = icmp eq i8 %76, 0
  %78 = add i64 %8, %7
  %79 = icmp eq i32 %14, 42494
  %80 = icmp eq i32 %23, 327
  %81 = icmp eq i1 %80, false
  %82 = and i32 %6, -256
  %83 = icmp eq i32 %82, 83886080
  %84 = and i8 %16, 8
  %85 = icmp eq i8 %84, 0
  %86 = icmp eq i32 %5, 0
  %87 = icmp eq i1 %86, %83
  %88 = sext i32 %5 to i64
  %89 = urem i8 %16, 2
  %90 = icmp eq i8 %89, 0
  %91 = add i64 %21, %4
  %92 = icmp eq i32 %23, 42494
  %93 = icmp eq i1 %92, false
  %.not = icmp ne i1 %38, true
  %brmerge = or i1 %35, %.not
  %or.cond50 = icmp eq i1 %brmerge, %33
  %brmerge48 = or i1 %73, %69
  %.mux = select i1 %73, i8 0, i8 %9
  %94 = icmp eq i1 %87, %37
  %95 = icmp ne i1 %94, true
  %96 = or i1 %95, %85
  store i64 %25, i64* %r14.0.ph37.reg2mem
  store i64 %29, i64* %r8.1.ph35.reg2mem
  store i64 %arg4, i64* %rcx.1.ph34.reg2mem
  br label %dec_label_pc_337d.lr.ph

dec_label_pc_337d:                                ; preds = %dec_label_pc_337d.lr.ph, %dec_label_pc_3637
  %r14.023.reload = load i64, i64* %r14.023.reg2mem
  %97 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-216, i64 %r14.023.reload, i64 %arg4, i64 %rcx.1.ph34.reload, i64 %r8.1.ph35.reload, i64 %arg6), !insn.addr !2073
  %98 = trunc i64 %97 to i32, !insn.addr !2074
  %99 = icmp eq i32 %98, 0, !insn.addr !2074
  br i1 %99, label %dec_label_pc_3637, label %dec_label_pc_3395, !insn.addr !2075

dec_label_pc_3395:                                ; preds = %dec_label_pc_337d
  br i1 %32, label %dec_label_pc_35a3, label %dec_label_pc_33aa, !insn.addr !2076

dec_label_pc_33aa:                                ; preds = %dec_label_pc_3395
  store i64 %rcx.1.ph34.reload, i64* %rcx.0.reg2mem, !insn.addr !2077
  store i64 %r8.1.ph35.reload, i64* %r8.0.reg2mem, !insn.addr !2077
  br i1 %or.cond50, label %dec_label_pc_33cf, label %dec_label_pc_33b1, !insn.addr !2077

dec_label_pc_33b1:                                ; preds = %dec_label_pc_3485, %dec_label_pc_3589, %dec_label_pc_3594, %dec_label_pc_35aa, %dec_label_pc_344b, %dec_label_pc_3608, %dec_label_pc_361c, %dec_label_pc_35e1, %dec_label_pc_343d, %dec_label_pc_33aa
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %100 = add i64 %r14.023.reload, %21, !insn.addr !2078
  %101 = icmp ult i64 %100, %arg4, !insn.addr !2072
  store i64 %100, i64* %r14.0.ph37.reg2mem, !insn.addr !2079
  store i64 %r8.0.reload, i64* %r8.1.ph35.reg2mem, !insn.addr !2079
  store i64 %rcx.0.reload, i64* %rcx.1.ph34.reg2mem, !insn.addr !2079
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2079
  br i1 %101, label %dec_label_pc_337d.lr.ph, label %dec_label_pc_3648, !insn.addr !2079

dec_label_pc_337d.lr.ph:                          ; preds = %dec_label_pc_337d.lr.ph.lr.ph, %dec_label_pc_33b1
  %rcx.1.ph34.reload = load i64, i64* %rcx.1.ph34.reg2mem
  %r8.1.ph35.reload = load i64, i64* %r8.1.ph35.reg2mem
  %r14.0.ph37.reload = load i64, i64* %r14.0.ph37.reg2mem
  store i64 %r14.0.ph37.reload, i64* %r14.023.reg2mem
  br label %dec_label_pc_337d

dec_label_pc_33cf:                                ; preds = %dec_label_pc_33aa
  br i1 %43, label %dec_label_pc_33e1, label %dec_label_pc_33db, !insn.addr !2080

dec_label_pc_33db:                                ; preds = %dec_label_pc_33cf
  store i64 0, i64* %r8.4.reg2mem, !insn.addr !2081
  br i1 %45, label %dec_label_pc_3425, label %dec_label_pc_344b, !insn.addr !2081

dec_label_pc_33e1:                                ; preds = %dec_label_pc_33cf
  %102 = and i64 %r8.1.ph35.reload, -256
  br i1 %44, label %dec_label_pc_3401, label %dec_label_pc_33e5, !insn.addr !2082

dec_label_pc_33e5:                                ; preds = %dec_label_pc_33e1
  %103 = or i64 %102, %46, !insn.addr !2083
  store i64 %103, i64* %r8.3.reg2mem, !insn.addr !2084
  br i1 %35, label %dec_label_pc_343d, label %dec_label_pc_33f2, !insn.addr !2084

dec_label_pc_33f2:                                ; preds = %dec_label_pc_33e5
  %104 = trunc i64 %103 to i32, !insn.addr !2085
  %105 = or i32 %48, %104, !insn.addr !2085
  %106 = zext i32 %105 to i64, !insn.addr !2085
  store i64 %106, i64* %r8.2.reg2mem, !insn.addr !2086
  br label %dec_label_pc_3430, !insn.addr !2086

dec_label_pc_3401:                                ; preds = %dec_label_pc_33e1
  %107 = or i64 %102, %54, !insn.addr !2087
  store i64 %107, i64* %r8.4.reg2mem, !insn.addr !2088
  br i1 %53, label %dec_label_pc_344b, label %dec_label_pc_340c, !insn.addr !2088

dec_label_pc_340c:                                ; preds = %dec_label_pc_3401
  %108 = or i64 %102, %55, !insn.addr !2089
  store i8 0, i8* %rax.1.reg2mem, !insn.addr !2090
  store i64 %108, i64* %r8.3.reg2mem, !insn.addr !2090
  br i1 %35, label %dec_label_pc_343d, label %dec_label_pc_3415, !insn.addr !2090

dec_label_pc_3415:                                ; preds = %dec_label_pc_340c
  %109 = trunc i64 %108 to i32, !insn.addr !2091
  %110 = or i32 %57, %109, !insn.addr !2091
  %111 = zext i32 %110 to i64, !insn.addr !2091
  store i8 0, i8* %rax.1.reg2mem, !insn.addr !2092
  store i64 %111, i64* %r8.3.reg2mem, !insn.addr !2092
  br label %dec_label_pc_343d, !insn.addr !2092

dec_label_pc_3425:                                ; preds = %dec_label_pc_33db
  store i64 0, i64* %r8.2.reg2mem, !insn.addr !2093
  store i64 0, i64* %r8.3.reg2mem, !insn.addr !2093
  br i1 %35, label %dec_label_pc_343d, label %dec_label_pc_3430, !insn.addr !2093

dec_label_pc_3430:                                ; preds = %dec_label_pc_3425, %dec_label_pc_33f2
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  store i8 %51, i8* %rax.1.reg2mem, !insn.addr !2094
  store i64 %r8.2.reload, i64* %r8.3.reg2mem, !insn.addr !2094
  br label %dec_label_pc_343d, !insn.addr !2094

dec_label_pc_343d:                                ; preds = %dec_label_pc_3430, %dec_label_pc_3425, %dec_label_pc_3415, %dec_label_pc_340c, %dec_label_pc_33e5
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %rax.1.reload = load i8, i8* %rax.1.reg2mem
  %112 = trunc i64 %r8.3.reload to i8, !insn.addr !2095
  %113 = icmp eq i8 %rax.1.reload, %112, !insn.addr !2095
  %114 = icmp eq i1 %113, false, !insn.addr !2096
  store i64 %rcx.1.ph34.reload, i64* %rcx.0.reg2mem, !insn.addr !2096
  store i64 %r8.3.reload, i64* %r8.0.reg2mem, !insn.addr !2096
  store i64 %r8.3.reload, i64* %r8.4.reg2mem, !insn.addr !2096
  br i1 %114, label %dec_label_pc_33b1, label %dec_label_pc_344b, !insn.addr !2096

dec_label_pc_344b:                                ; preds = %dec_label_pc_33db, %dec_label_pc_343d, %dec_label_pc_3401
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  call void @__asm_rep_stosd_memset(i8* nonnull %58, i32 0, i64 22), !insn.addr !2097
  %115 = load i64, i64* %stack_var_-216, align 8, !insn.addr !2098
  %116 = add i64 %115, %21, !insn.addr !2098
  %117 = icmp ult i64 %116, %arg4, !insn.addr !2099
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !2100
  store i64 %r8.4.reload, i64* %r8.0.reg2mem, !insn.addr !2100
  br i1 %117, label %dec_label_pc_3485.lr.ph, label %dec_label_pc_33b1, !insn.addr !2100

dec_label_pc_3485.lr.ph:                          ; preds = %dec_label_pc_344b
  %118 = trunc i64 %r8.4.reload to i8
  store i64 %116, i64* %rsi.027.reg2mem
  store i64 0, i64* %rcx.225.reg2mem
  br label %dec_label_pc_3485

dec_label_pc_3485:                                ; preds = %dec_label_pc_3485.lr.ph, %dec_label_pc_3594
  %rcx.225.reload = load i64, i64* %rcx.225.reg2mem
  %rsi.027.reload = load i64, i64* %rsi.027.reg2mem
  %119 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-128, i64 %rsi.027.reload, i64 %arg4, i64 %rcx.225.reload, i64 %r8.4.reload, i64 %arg6), !insn.addr !2101
  %120 = trunc i64 %119 to i32, !insn.addr !2102
  %121 = icmp eq i32 %120, 0, !insn.addr !2102
  store i64 %rcx.225.reload, i64* %rcx.0.reg2mem, !insn.addr !2103
  store i64 %r8.4.reload, i64* %r8.0.reg2mem, !insn.addr !2103
  br i1 %121, label %dec_label_pc_33b1, label %dec_label_pc_34a8, !insn.addr !2103

dec_label_pc_34a8:                                ; preds = %dec_label_pc_3485
  br i1 %60, label %dec_label_pc_3589, label %dec_label_pc_34c8, !insn.addr !2104

dec_label_pc_34c8:                                ; preds = %dec_label_pc_34a8
  br i1 %63, label %dec_label_pc_3594, label %dec_label_pc_34df, !insn.addr !2105

dec_label_pc_34df:                                ; preds = %dec_label_pc_34c8
  store i8 0, i8* %rax.3.reg2mem, !insn.addr !2106
  br i1 %65, label %dec_label_pc_3538, label %dec_label_pc_34ed, !insn.addr !2106

dec_label_pc_34ed:                                ; preds = %dec_label_pc_34df
  br i1 %67, label %dec_label_pc_3511, label %dec_label_pc_34f9, !insn.addr !2107

dec_label_pc_34f9:                                ; preds = %dec_label_pc_34ed
  store i32 %71, i32* %storemerge5.in.reg2mem, !insn.addr !2108
  br i1 %69, label %dec_label_pc_3538, label %dec_label_pc_3533, !insn.addr !2108

dec_label_pc_3511:                                ; preds = %dec_label_pc_34ed
  store i32 %75, i32* %storemerge5.in.reg2mem, !insn.addr !2109
  store i8 %.mux, i8* %rax.3.reg2mem, !insn.addr !2109
  br i1 %brmerge48, label %dec_label_pc_3538, label %dec_label_pc_3533, !insn.addr !2109

dec_label_pc_3533:                                ; preds = %dec_label_pc_3511, %dec_label_pc_34f9
  %storemerge5.in.reload = load i32, i32* %storemerge5.in.reg2mem
  %rax.2.reload = load i8, i8* %rax.2.reg2mem
  %122 = trunc i32 %storemerge5.in.reload to i8
  %123 = and i8 %122, 8, !insn.addr !2110
  %124 = or i8 %123, %rax.2.reload, !insn.addr !2111
  store i8 %124, i8* %rax.3.reg2mem, !insn.addr !2111
  br label %dec_label_pc_3538, !insn.addr !2111

dec_label_pc_3538:                                ; preds = %dec_label_pc_3511, %dec_label_pc_3533, %dec_label_pc_34f9, %dec_label_pc_34df
  %rax.3.reload = load i8, i8* %rax.3.reg2mem
  %125 = icmp eq i8 %rax.3.reload, %118, !insn.addr !2112
  %126 = icmp eq i1 %125, false, !insn.addr !2113
  br i1 %126, label %dec_label_pc_3594, label %dec_label_pc_353d, !insn.addr !2113

dec_label_pc_353d:                                ; preds = %dec_label_pc_3538
  %127 = load i64, i64* %stack_var_-128, align 8
  %128 = add i64 %78, %127
  %rax.4 = select i1 %77, i64 0, i64 %128
  %129 = add i64 %rax.4, -24, !insn.addr !2114
  %130 = icmp ult i64 %129, %arg1, !insn.addr !2115
  %131 = icmp eq i64 %rax.4, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2116
  %132 = or i1 %131, %130
  %133 = icmp eq i1 %132, false
  %134 = icmp eq i1 %133, false, !insn.addr !2117
  %135 = add i64 %rax.4, 4, !insn.addr !2118
  %136 = icmp ugt i64 %135, %arg2, !insn.addr !2119
  %or.cond10 = or i1 %136, %134
  store i64 %129, i64* %rdx.0.reg2mem, !insn.addr !2120
  br i1 %or.cond10, label %dec_label_pc_3594, label %dec_label_pc_363f, !insn.addr !2120

dec_label_pc_3589:                                ; preds = %dec_label_pc_34a8
  store i64 %rcx.225.reload, i64* %rcx.0.reg2mem, !insn.addr !2121
  store i64 %r8.4.reload, i64* %r8.0.reg2mem, !insn.addr !2121
  br i1 %79, label %dec_label_pc_33b1, label %dec_label_pc_3594, !insn.addr !2121

dec_label_pc_3594:                                ; preds = %dec_label_pc_3589, %dec_label_pc_353d, %dec_label_pc_3538, %dec_label_pc_34c8
  %137 = add i64 %rsi.027.reload, %7, !insn.addr !2122
  %138 = add nuw nsw i64 %rcx.225.reload, 1, !insn.addr !2123
  %139 = and i64 %138, 4294967295, !insn.addr !2123
  %140 = icmp ult i64 %137, %arg4, !insn.addr !2099
  %141 = trunc i64 %138 to i32, !insn.addr !2124
  %142 = icmp ult i32 %141, 6
  %or.cond8 = icmp eq i1 %140, %142
  store i64 %139, i64* %rcx.0.reg2mem, !insn.addr !2100
  store i64 %r8.4.reload, i64* %r8.0.reg2mem, !insn.addr !2100
  store i64 %137, i64* %rsi.027.reg2mem, !insn.addr !2100
  store i64 %139, i64* %rcx.225.reg2mem, !insn.addr !2100
  br i1 %or.cond8, label %dec_label_pc_3485, label %dec_label_pc_33b1, !insn.addr !2100

dec_label_pc_35a3:                                ; preds = %dec_label_pc_3395
  br i1 %81, label %dec_label_pc_361c, label %dec_label_pc_35aa, !insn.addr !2125

dec_label_pc_35aa:                                ; preds = %dec_label_pc_35a3
  store i64 %rcx.1.ph34.reload, i64* %rcx.0.reg2mem, !insn.addr !2126
  store i64 %r8.1.ph35.reload, i64* %r8.0.reg2mem, !insn.addr !2126
  br i1 %96, label %dec_label_pc_33b1, label %dec_label_pc_35e1, !insn.addr !2126

dec_label_pc_35e1:                                ; preds = %dec_label_pc_35aa
  %143 = load i64, i64* %stack_var_-216, align 8
  %144 = add i64 %91, %143
  %rax.5 = select i1 %90, i64 %88, i64 %144
  %145 = add i64 %rax.5, 4, !insn.addr !2127
  %146 = icmp ugt i64 %145, %arg2, !insn.addr !2128
  store i64 %rcx.1.ph34.reload, i64* %rcx.0.reg2mem, !insn.addr !2129
  store i64 %r8.1.ph35.reload, i64* %r8.0.reg2mem, !insn.addr !2129
  br i1 %146, label %dec_label_pc_33b1, label %dec_label_pc_3608, !insn.addr !2129

dec_label_pc_3608:                                ; preds = %dec_label_pc_35e1
  %147 = add i64 %rax.5, -24, !insn.addr !2130
  %148 = icmp ult i64 %147, %arg1
  %149 = icmp eq i64 %147, 0, !insn.addr !2131
  %or.cond = or i1 %148, %149
  store i64 %rcx.1.ph34.reload, i64* %rcx.0.reg2mem, !insn.addr !2132
  store i64 %r8.1.ph35.reload, i64* %r8.0.reg2mem, !insn.addr !2132
  store i64 %147, i64* %rdx.0.reg2mem, !insn.addr !2132
  br i1 %or.cond, label %dec_label_pc_33b1, label %dec_label_pc_363f, !insn.addr !2132

dec_label_pc_361c:                                ; preds = %dec_label_pc_35a3
  %150 = load i64, i64* %stack_var_-216, align 8, !insn.addr !2133
  %151 = icmp eq i64 %150, %arg3, !insn.addr !2133
  %or.cond16 = or i1 %93, %151
  store i64 %rcx.1.ph34.reload, i64* %rcx.0.reg2mem, !insn.addr !2134
  store i64 %r8.1.ph35.reload, i64* %r8.0.reg2mem, !insn.addr !2134
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2134
  br i1 %or.cond16, label %dec_label_pc_33b1, label %dec_label_pc_3648, !insn.addr !2134

dec_label_pc_3637:                                ; preds = %dec_label_pc_337d
  %152 = add i64 %r14.023.reload, 1, !insn.addr !2135
  %153 = icmp ult i64 %152, %arg4, !insn.addr !2072
  store i64 %152, i64* %r14.023.reg2mem, !insn.addr !2079
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2079
  br i1 %153, label %dec_label_pc_337d, label %dec_label_pc_3648, !insn.addr !2079

dec_label_pc_363f:                                ; preds = %dec_label_pc_3608, %dec_label_pc_353d
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  store i64 %rdx.0.reload, i64* %arg5, align 8, !insn.addr !2136
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !2137
  br label %dec_label_pc_3648, !insn.addr !2137

dec_label_pc_3648:                                ; preds = %dec_label_pc_33b1, %dec_label_pc_361c, %dec_label_pc_3637, %dec_label_pc_3320, %dec_label_pc_363f
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2138

; uselistorder directives
  uselistorder i64 %147, { 0, 2, 1 }
  uselistorder i64 %rax.5, { 1, 0 }
  uselistorder i64 %rax.4, { 2, 1, 0 }
  uselistorder i64 %rsi.027.reload, { 1, 0 }
  uselistorder i64 %rcx.225.reload, { 1, 2, 3, 0 }
  uselistorder i64 %r8.4.reload, { 3, 4, 5, 1, 0, 2 }
  uselistorder i64 %r8.3.reload, { 0, 2, 1 }
  uselistorder i64 %108, { 1, 0 }
  uselistorder i64 %103, { 1, 0 }
  uselistorder i64 %r8.1.ph35.reload, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i64 %rcx.1.ph34.reload, { 1, 4, 3, 2, 5, 0, 6 }
  uselistorder i64 %r14.023.reload, { 0, 2, 1 }
  uselistorder i1 %69, { 1, 0 }
  uselistorder i1 %44, { 1, 0 }
  uselistorder i1 %35, { 3, 1, 2, 0 }
  uselistorder i64* %stack_var_-216, { 0, 3, 4, 1, 2 }
  uselistorder i32 %23, { 2, 1, 0 }
  uselistorder i64 %21, { 0, 2, 1 }
  uselistorder i16 %20, { 2, 0, 1 }
  uselistorder i32 %19, { 3, 1, 2, 0 }
  uselistorder i8 %16, { 2, 1, 0 }
  uselistorder i64* %stack_var_-128, { 2, 0, 1 }
  uselistorder i32 %14, { 1, 0 }
  uselistorder i16 %12, { 2, 0, 1 }
  uselistorder i32 %11, { 1, 0 }
  uselistorder i8 %10, { 1, 0 }
  uselistorder i64 %7, { 1, 0 }
  uselistorder i64* %r14.023.reg2mem, { 1, 2, 0 }
  uselistorder i64* %rcx.0.reg2mem, { 10, 7, 8, 9, 3, 2, 1, 4, 6, 0, 5 }
  uselistorder i64* %r8.0.reg2mem, { 10, 7, 8, 9, 3, 2, 1, 4, 6, 0, 5 }
  uselistorder i64* %r8.3.reg2mem, { 0, 2, 1, 4, 5, 3 }
  uselistorder i64* %r8.4.reg2mem, { 0, 2, 3, 1 }
  uselistorder i64* %rsi.027.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.225.reg2mem, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 5, 3, 2, 1, 4 }
  uselistorder i8* %3, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16* %2, { 1, 0 }
  uselistorder i32* %1, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i64* %0, { 3, 2, 1, 0 }
  uselistorder i64* %arg5, { 0, 2, 1 }
  uselistorder i64 %arg4, { 6, 4, 5, 2, 3, 7, 0, 1, 8 }
  uselistorder i64 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_3648, { 4, 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_3538, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_3485, { 1, 0 }
  uselistorder label %dec_label_pc_344b, { 1, 2, 0 }
  uselistorder label %dec_label_pc_337d.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_33b1, { 6, 5, 7, 3, 2, 1, 0, 4, 8, 9 }
  uselistorder label %dec_label_pc_337d, { 1, 0 }
}

define i64 @.Llzma_buf_cpy.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_3660:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i16
  %3 = alloca i8
  %storemerge.reg2mem = alloca i64, !insn.addr !2139
  %rsi.0.reg2mem = alloca i64, !insn.addr !2139
  %rdx.0.reg2mem = alloca i64, !insn.addr !2139
  %rcx.011.reg2mem = alloca i64, !insn.addr !2139
  %rax.0.reg2mem = alloca i64, !insn.addr !2139
  %r13.1.reg2mem = alloca i64, !insn.addr !2139
  %.reg2mem = alloca i64, !insn.addr !2139
  %r14.2.reg2mem = alloca i64, !insn.addr !2139
  %storemerge3.in.reg2mem = alloca i32, !insn.addr !2139
  %r14.1.reg2mem = alloca i64, !insn.addr !2139
  %rbx.0.reg2mem = alloca i64, !insn.addr !2139
  %r14.0.ph8.reg2mem = alloca i64, !insn.addr !2139
  %rbx.0.ph7.reg2mem = alloca i64, !insn.addr !2139
  %r14.0.ph.reg2mem = alloca i64, !insn.addr !2139
  %r13.0.ph.reg2mem = alloca i64, !insn.addr !2139
  %r10.0.ph.reg2mem = alloca i64, !insn.addr !2139
  %rbx.0.ph.reg2mem = alloca i64, !insn.addr !2139
  %4 = load i64, i64* %0
  %5 = load i32, i32* %1
  %6 = load i8, i8* %3
  %7 = load i8, i8* %3
  %8 = load i32, i32* %1
  %9 = load i8, i8* %3
  %10 = load i16, i16* %2
  %11 = load i64, i64* %0
  %stack_var_-256 = alloca i64, align 8
  %stack_var_-168 = alloca i64, align 8
  %stack_var_-312 = alloca i64, align 8
  store i64 0, i64* %arg6, align 8, !insn.addr !2140
  %12 = add i64 %arg5, 8, !insn.addr !2141
  %13 = inttoptr i64 %12 to i64*, !insn.addr !2141
  %14 = load i64, i64* %13, align 8, !insn.addr !2141
  %15 = icmp eq i64 %14, 0, !insn.addr !2142
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2143
  br i1 %15, label %dec_label_pc_3835, label %dec_label_pc_3695, !insn.addr !2143

dec_label_pc_3695:                                ; preds = %dec_label_pc_3660
  %16 = ptrtoint i64* %stack_var_-312 to i64, !insn.addr !2144
  %17 = bitcast i64* %stack_var_-168 to i8*, !insn.addr !2145
  call void @__asm_rep_stosd_memset(i8* nonnull %17, i32 0, i64 32), !insn.addr !2145
  %18 = bitcast i64* %stack_var_-256 to i8*, !insn.addr !2146
  call void @__asm_rep_stosd_memset(i8* nonnull %18, i32 0, i64 22), !insn.addr !2146
  %19 = ptrtoint i64* %stack_var_-256 to i64, !insn.addr !2147
  %sext = mul i64 %19, 4294967296
  %20 = ashr exact i64 %sext, 32
  %21 = and i16 %10, 4160
  %22 = icmp eq i16 %21, 0
  %23 = and i16 %10, 64
  %24 = icmp eq i16 %23, 0
  %25 = zext i8 %9 to i64
  %26 = and i16 %10, 32
  %27 = icmp eq i16 %26, 0
  %28 = mul i32 %8, 2
  %29 = and i32 %28, 510
  %30 = and i8 %7, 16
  %31 = icmp eq i8 %30, 0
  %32 = zext i8 %6 to i64
  %33 = mul i32 %8, 8
  %34 = and i32 %33, 2040
  %35 = urem i8 %7, 2
  %36 = icmp eq i8 %35, 0
  %37 = add i32 %5, -83886080
  %38 = and i32 %37, -16711936
  %39 = icmp eq i32 %38, 0
  %40 = icmp eq i1 %39, false
  %41 = add i64 %11, %4
  %42 = add i64 %16, 144
  %brmerge = or i1 %36, %40
  store i64 %arg3, i64* %rbx.0.ph.reg2mem, !insn.addr !2147
  store i64 0, i64* %r10.0.ph.reg2mem, !insn.addr !2147
  store i64 0, i64* %r13.0.ph.reg2mem, !insn.addr !2147
  store i64 255, i64* %r14.0.ph.reg2mem, !insn.addr !2147
  br label %dec_label_pc_36cb.outer, !insn.addr !2147

dec_label_pc_36cb.outer:                          ; preds = %dec_label_pc_37cd, %dec_label_pc_3695
  %r14.0.ph.reload = load i64, i64* %r14.0.ph.reg2mem
  %r13.0.ph.reload = load i64, i64* %r13.0.ph.reg2mem
  %r10.0.ph.reload = load i64, i64* %r10.0.ph.reg2mem
  %rbx.0.ph.reload = load i64, i64* %rbx.0.ph.reg2mem
  store i64 %rbx.0.ph.reload, i64* %rbx.0.ph7.reg2mem
  store i64 %r14.0.ph.reload, i64* %r14.0.ph8.reg2mem
  br label %dec_label_pc_36cb.outer6

dec_label_pc_36cb.outer6:                         ; preds = %dec_label_pc_36cb.outer, %dec_label_pc_376d
  %r14.0.ph8.reload = load i64, i64* %r14.0.ph8.reg2mem
  %rbx.0.ph7.reload = load i64, i64* %rbx.0.ph7.reg2mem
  store i64 %rbx.0.ph7.reload, i64* %rbx.0.reg2mem
  br label %dec_label_pc_36cb

dec_label_pc_36cb:                                ; preds = %dec_label_pc_36cb.outer6, %dec_label_pc_36fb
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %43 = icmp ult i64 %rbx.0.reload, %arg4, !insn.addr !2148
  %44 = icmp eq i1 %43, false, !insn.addr !2149
  br i1 %44, label %dec_label_pc_37df, label %dec_label_pc_36d9, !insn.addr !2149

dec_label_pc_36d9:                                ; preds = %dec_label_pc_36cb
  %45 = call i64 @.Llzma_optimum_normal.0(i64 %rbx.0.reload, i64 %arg4, i64 %14, i64 %20), !insn.addr !2150
  %46 = trunc i64 %45 to i32, !insn.addr !2151
  %47 = icmp eq i32 %46, 0, !insn.addr !2151
  br i1 %47, label %dec_label_pc_37df, label %dec_label_pc_36fb, !insn.addr !2152

dec_label_pc_36fb:                                ; preds = %dec_label_pc_36d9
  %48 = load i64, i64* %stack_var_-256, align 8, !insn.addr !2153
  %49 = add i64 %48, %11, !insn.addr !2153
  %50 = add i64 %49, 32, !insn.addr !2154
  %51 = call i64 @.Llzma_properties_size.0(i64 %49, i64 %50, i64 %20, i64 265, i64 0), !insn.addr !2155
  %52 = trunc i64 %51 to i32, !insn.addr !2156
  %53 = icmp eq i32 %52, 0, !insn.addr !2156
  store i64 %49, i64* %rbx.0.reg2mem, !insn.addr !2157
  br i1 %53, label %dec_label_pc_36cb, label %dec_label_pc_3727, !insn.addr !2157

dec_label_pc_3727:                                ; preds = %dec_label_pc_36fb
  store i64 %r14.0.ph8.reload, i64* %r14.2.reg2mem, !insn.addr !2158
  br i1 %22, label %dec_label_pc_3768, label %dec_label_pc_3730, !insn.addr !2158

dec_label_pc_3730:                                ; preds = %dec_label_pc_3727
  br i1 %24, label %dec_label_pc_374a, label %dec_label_pc_3738, !insn.addr !2159

dec_label_pc_3738:                                ; preds = %dec_label_pc_3730
  store i64 %25, i64* %r14.1.reg2mem, !insn.addr !2160
  store i32 %29, i32* %storemerge3.in.reg2mem, !insn.addr !2160
  store i64 %25, i64* %r14.2.reg2mem, !insn.addr !2160
  br i1 %27, label %dec_label_pc_3768, label %dec_label_pc_3762, !insn.addr !2160

dec_label_pc_374a:                                ; preds = %dec_label_pc_3730
  br i1 %31, label %dec_label_pc_377c, label %dec_label_pc_3751, !insn.addr !2161

dec_label_pc_3751:                                ; preds = %dec_label_pc_374a
  store i64 %32, i64* %r14.1.reg2mem, !insn.addr !2162
  store i32 %34, i32* %storemerge3.in.reg2mem, !insn.addr !2162
  store i64 %32, i64* %r14.2.reg2mem, !insn.addr !2162
  br i1 %27, label %dec_label_pc_3768, label %dec_label_pc_3762, !insn.addr !2162

dec_label_pc_3762:                                ; preds = %dec_label_pc_3751, %dec_label_pc_3738
  %storemerge3.in.reload = load i32, i32* %storemerge3.in.reg2mem
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %54 = and i32 %storemerge3.in.reload, 8
  %55 = zext i32 %54 to i64, !insn.addr !2163
  %56 = or i64 %r14.1.reload, %55, !insn.addr !2164
  store i64 %56, i64* %r14.2.reg2mem, !insn.addr !2164
  br label %dec_label_pc_3768, !insn.addr !2164

dec_label_pc_3768:                                ; preds = %dec_label_pc_3762, %dec_label_pc_3751, %dec_label_pc_3738, %dec_label_pc_3727
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  %57 = trunc i64 %r14.2.reload to i8, !insn.addr !2165
  %58 = icmp eq i8 %57, 0, !insn.addr !2165
  br i1 %58, label %dec_label_pc_377c, label %dec_label_pc_376d, !insn.addr !2166

dec_label_pc_376d:                                ; preds = %dec_label_pc_3768
  %59 = load i64, i64* %stack_var_-256, align 8, !insn.addr !2167
  %60 = add i64 %59, %11, !insn.addr !2167
  store i64 %60, i64* %rbx.0.ph7.reg2mem, !insn.addr !2168
  store i64 %r14.2.reload, i64* %r14.0.ph8.reg2mem, !insn.addr !2168
  br label %dec_label_pc_36cb.outer6, !insn.addr !2168

dec_label_pc_377c:                                ; preds = %dec_label_pc_3768, %dec_label_pc_374a
  %r10.0.ph.mux = select i1 %36, i64 %r10.0.ph.reload, i64 %4
  %61 = load i64, i64* %stack_var_-256, align 8
  %62 = add i64 %41, %61
  %r10.1 = select i1 %brmerge, i64 %r10.0.ph.mux, i64 %62
  %63 = icmp ult i64 %r10.1, %arg1, !insn.addr !2169
  %64 = icmp ult i64 %r10.1, %arg2, !insn.addr !2170
  %65 = icmp eq i1 %64, false, !insn.addr !2171
  %or.cond = or i1 %63, %65
  store i64 %61, i64* %.reg2mem, !insn.addr !2172
  store i64 %r13.0.ph.reload, i64* %r13.1.reg2mem, !insn.addr !2172
  br i1 %or.cond, label %dec_label_pc_37cd, label %dec_label_pc_37b6, !insn.addr !2172

dec_label_pc_37b6:                                ; preds = %dec_label_pc_377c
  %66 = add i64 %r13.0.ph.reload, 1, !insn.addr !2173
  %67 = and i64 %66, 4294967295, !insn.addr !2173
  %68 = mul i64 %r13.0.ph.reload, 8, !insn.addr !2174
  %69 = and i64 %68, 2040, !insn.addr !2175
  %70 = add i64 %42, %69, !insn.addr !2175
  %71 = inttoptr i64 %70 to i64*, !insn.addr !2175
  store i64 %r10.1, i64* %71, align 8, !insn.addr !2175
  %72 = trunc i64 %66 to i8, !insn.addr !2176
  %73 = icmp ult i8 %72, 16
  store i64 %67, i64* %rax.0.reg2mem, !insn.addr !2177
  br i1 %73, label %dec_label_pc_37b6.dec_label_pc_37cd_crit_edge, label %dec_label_pc_37e2, !insn.addr !2177

dec_label_pc_37b6.dec_label_pc_37cd_crit_edge:    ; preds = %dec_label_pc_37b6
  %.pre = load i64, i64* %stack_var_-256, align 8
  store i64 %.pre, i64* %.reg2mem
  store i64 %67, i64* %r13.1.reg2mem
  br label %dec_label_pc_37cd

dec_label_pc_37cd:                                ; preds = %dec_label_pc_37b6.dec_label_pc_37cd_crit_edge, %dec_label_pc_377c
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2178
  %74 = add i64 %.reload, %11, !insn.addr !2178
  store i64 %74, i64* %rbx.0.ph.reg2mem, !insn.addr !2179
  store i64 %r10.1, i64* %r10.0.ph.reg2mem, !insn.addr !2179
  store i64 %r13.1.reload, i64* %r13.0.ph.reg2mem, !insn.addr !2179
  store i64 0, i64* %r14.0.ph.reg2mem, !insn.addr !2179
  br label %dec_label_pc_36cb.outer, !insn.addr !2179

dec_label_pc_37df:                                ; preds = %dec_label_pc_36d9, %dec_label_pc_36cb
  %75 = and i64 %r13.0.ph.reload, 4294967295, !insn.addr !2180
  store i64 %75, i64* %rax.0.reg2mem, !insn.addr !2180
  br label %dec_label_pc_37e2, !insn.addr !2180

dec_label_pc_37e2:                                ; preds = %dec_label_pc_37b6, %dec_label_pc_37df
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %76 = ptrtoint i64* %stack_var_-168 to i64, !insn.addr !2181
  %77 = trunc i64 %rax.0.reload to i32
  %78 = urem i32 %77, 256, !insn.addr !2182
  %79 = icmp ne i32 %78, 0, !insn.addr !2182
  %80 = icmp eq i1 %79, false, !insn.addr !2183
  store i64 0, i64* %rcx.011.reg2mem, !insn.addr !2183
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2183
  br i1 %80, label %dec_label_pc_3835, label %dec_label_pc_37f3, !insn.addr !2183

dec_label_pc_37f3:                                ; preds = %dec_label_pc_37e2, %dec_label_pc_382e
  %rcx.011.reload = load i64, i64* %rcx.011.reg2mem
  %81 = mul i64 %rcx.011.reload, 8, !insn.addr !2184
  %82 = add i64 %81, %76, !insn.addr !2184
  %83 = inttoptr i64 %82 to i64*, !insn.addr !2184
  %84 = load i64, i64* %83, align 8, !insn.addr !2184
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !2185
  br label %dec_label_pc_37f9, !insn.addr !2185

dec_label_pc_37f9:                                ; preds = %dec_label_pc_3827, %dec_label_pc_37f3
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %85 = mul i64 %rdx.0.reload, 8, !insn.addr !2186
  %86 = add i64 %85, %76, !insn.addr !2186
  %87 = inttoptr i64 %86 to i64*, !insn.addr !2186
  %88 = load i64, i64* %87, align 8, !insn.addr !2186
  %89 = add i64 %88, -8, !insn.addr !2187
  %90 = icmp eq i64 %84, %89, !insn.addr !2188
  %91 = icmp eq i1 %90, false, !insn.addr !2189
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !2187
  br label %dec_label_pc_3803, !insn.addr !2187

dec_label_pc_3803:                                ; preds = %dec_label_pc_3820, %dec_label_pc_37f9
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  br i1 %91, label %dec_label_pc_3820, label %dec_label_pc_3808, !insn.addr !2189

dec_label_pc_3808:                                ; preds = %dec_label_pc_3803
  %92 = mul i64 %rsi.0.reload, 8, !insn.addr !2190
  %93 = add i64 %92, %76, !insn.addr !2190
  %94 = inttoptr i64 %93 to i64*, !insn.addr !2190
  %95 = load i64, i64* %94, align 8, !insn.addr !2190
  %96 = add i64 %95, -8, !insn.addr !2191
  %97 = icmp eq i64 %88, %96, !insn.addr !2192
  %98 = icmp eq i1 %97, false, !insn.addr !2193
  br i1 %98, label %dec_label_pc_3820, label %dec_label_pc_3815, !insn.addr !2193

dec_label_pc_3815:                                ; preds = %dec_label_pc_3808
  store i64 %84, i64* %arg6, align 8, !insn.addr !2194
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !2195
  br label %dec_label_pc_3835, !insn.addr !2195

dec_label_pc_3820:                                ; preds = %dec_label_pc_3808, %dec_label_pc_3803
  %99 = add nuw nsw i64 %rsi.0.reload, 1, !insn.addr !2196
  %100 = trunc i64 %99 to i32, !insn.addr !2197
  %101 = icmp ugt i32 %78, %100, !insn.addr !2197
  store i64 %99, i64* %rsi.0.reg2mem, !insn.addr !2198
  br i1 %101, label %dec_label_pc_3803, label %dec_label_pc_3827, !insn.addr !2198

dec_label_pc_3827:                                ; preds = %dec_label_pc_3820
  %102 = add nuw nsw i64 %rdx.0.reload, 1, !insn.addr !2199
  %103 = trunc i64 %102 to i32, !insn.addr !2200
  %104 = icmp ugt i32 %78, %103, !insn.addr !2200
  store i64 %102, i64* %rdx.0.reg2mem, !insn.addr !2201
  br i1 %104, label %dec_label_pc_37f9, label %dec_label_pc_382e, !insn.addr !2201

dec_label_pc_382e:                                ; preds = %dec_label_pc_3827
  %105 = add i64 %rcx.011.reload, 1, !insn.addr !2202
  %106 = trunc i64 %105 to i32, !insn.addr !2182
  %107 = icmp ugt i32 %78, %106, !insn.addr !2182
  %108 = icmp eq i1 %107, false, !insn.addr !2183
  store i64 %105, i64* %rcx.011.reg2mem, !insn.addr !2183
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2183
  br i1 %108, label %dec_label_pc_3835, label %dec_label_pc_37f3, !insn.addr !2183

dec_label_pc_3835:                                ; preds = %dec_label_pc_382e, %dec_label_pc_37e2, %dec_label_pc_3660, %dec_label_pc_3815
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2203

; uselistorder directives
  uselistorder i32 %78, { 0, 2, 1, 3 }
  uselistorder i64 %67, { 1, 0 }
  uselistorder i64 %r10.1, { 0, 2, 3, 1 }
  uselistorder i64 %r14.2.reload, { 1, 0 }
  uselistorder i64 %rbx.0.reload, { 1, 0 }
  uselistorder i64 %r13.0.ph.reload, { 2, 3, 1, 0 }
  uselistorder i1 %27, { 1, 0 }
  uselistorder i64* %stack_var_-168, { 1, 0 }
  uselistorder i64* %stack_var_-256, { 0, 2, 3, 4, 5, 1 }
  uselistorder i64 %11, { 3, 1, 0, 2 }
  uselistorder i16 %10, { 2, 0, 1 }
  uselistorder i32 %8, { 1, 0 }
  uselistorder i8 %7, { 1, 0 }
  uselistorder i64* %rbx.0.ph.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r10.0.ph.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r13.0.ph.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r14.0.ph.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rbx.0.ph7.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r14.0.ph8.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r14.2.reg2mem, { 0, 2, 3, 1, 4 }
  uselistorder i64* %rax.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rcx.011.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rdx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rsi.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 1, 4, 2, 3 }
  uselistorder i8* %3, { 2, 1, 0 }
  uselistorder i32* %1, { 1, 0 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder label %dec_label_pc_3835, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_37f3, { 1, 0 }
  uselistorder label %dec_label_pc_37e2, { 1, 0 }
  uselistorder label %dec_label_pc_36cb, { 1, 0 }
  uselistorder label %dec_label_pc_36cb.outer6, { 1, 0 }
}

define i64 @.Llzma_check_finish.0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3850:
  %0 = alloca i64
  %r12.0.reg2mem = alloca i64, !insn.addr !2204
  %1 = load i64, i64* %0
  %stack_var_-128 = alloca i64, align 8
  %2 = add i64 %arg3, 40, !insn.addr !2205
  %3 = inttoptr i64 %2 to i64*, !insn.addr !2205
  %4 = load i64, i64* %3, align 8, !insn.addr !2205
  %5 = icmp eq i64 %4, 0, !insn.addr !2206
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !2207
  br i1 %5, label %dec_label_pc_38d8, label %dec_label_pc_386b, !insn.addr !2207

dec_label_pc_386b:                                ; preds = %dec_label_pc_3850
  %6 = add i64 %arg3, 48, !insn.addr !2208
  %7 = inttoptr i64 %6 to i64*, !insn.addr !2208
  %8 = load i64, i64* %7, align 8, !insn.addr !2208
  %9 = call i64 @.Lstream_encoder_mt_init.1(i64 %4, i64 %8, i32 0, i64 %arg1), !insn.addr !2209
  %10 = trunc i64 %9 to i32, !insn.addr !2210
  %11 = icmp eq i32 %10, 0, !insn.addr !2210
  %12 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !2211
  %13 = icmp eq i1 %11, false, !insn.addr !2212
  %14 = zext i1 %13 to i64, !insn.addr !2212
  %15 = add i64 %arg1, 16, !insn.addr !2213
  %16 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !2214
  call void @__asm_rep_stosd_memset(i8* nonnull %16, i32 0, i64 22), !insn.addr !2214
  %17 = trunc i64 %12 to i32, !insn.addr !2215
  %18 = call i64 @.Lstream_encoder_mt_init.1(i64 %4, i64 %8, i32 %17, i64 %15), !insn.addr !2215
  %19 = trunc i64 %18 to i32, !insn.addr !2216
  %20 = icmp eq i32 %19, 0, !insn.addr !2216
  store i64 %14, i64* %r12.0.reg2mem, !insn.addr !2217
  br i1 %20, label %dec_label_pc_38d8, label %dec_label_pc_38b4, !insn.addr !2217

dec_label_pc_38b4:                                ; preds = %dec_label_pc_386b
  %21 = load i64, i64* %stack_var_-128, align 8, !insn.addr !2218
  %22 = add i64 %21, %1, !insn.addr !2218
  %23 = call i64 @.Lstream_encoder_mt_init.1(i64 %22, i64 %8, i32 0, i64 %15), !insn.addr !2219
  %24 = trunc i64 %23 to i32, !insn.addr !2220
  %25 = icmp eq i32 %24, 0, !insn.addr !2220
  %26 = icmp eq i1 %25, false, !insn.addr !2221
  br i1 %26, label %dec_label_pc_38d4, label %dec_label_pc_38cf, !insn.addr !2221

dec_label_pc_38cf:                                ; preds = %dec_label_pc_38b4
  %27 = select i1 %13, i64 2, i64 1, !insn.addr !2222
  store i64 %27, i64* %r12.0.reg2mem, !insn.addr !2223
  br label %dec_label_pc_38d8, !insn.addr !2223

dec_label_pc_38d4:                                ; preds = %dec_label_pc_38b4
  %28 = select i1 %13, i64 3, i64 2, !insn.addr !2224
  store i64 %28, i64* %r12.0.reg2mem, !insn.addr !2224
  br label %dec_label_pc_38d8, !insn.addr !2224

dec_label_pc_38d8:                                ; preds = %dec_label_pc_38d4, %dec_label_pc_38cf, %dec_label_pc_386b, %dec_label_pc_3850
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  ret i64 %r12.0.reload, !insn.addr !2225

; uselistorder directives
  uselistorder i64* %stack_var_-128, { 1, 0, 2 }
  uselistorder i64* %r12.0.reg2mem, { 0, 2, 1, 3, 4 }
  uselistorder i64 %arg1, { 1, 0 }
}

define i64 @.Llzma_decoder_init.1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_38f0:
  %r12.0.reg2mem = alloca i64, !insn.addr !2226
  %0 = add i64 %arg3, ptrtoint (i32** @global_var_48 to i64), !insn.addr !2227
  %1 = inttoptr i64 %0 to i64*, !insn.addr !2227
  %2 = load i64, i64* %1, align 8, !insn.addr !2227
  %3 = icmp eq i64 %2, 0, !insn.addr !2228
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !2229
  br i1 %3, label %dec_label_pc_3958, label %dec_label_pc_3908, !insn.addr !2229

dec_label_pc_3908:                                ; preds = %dec_label_pc_38f0
  %4 = add i64 %arg3, 80, !insn.addr !2230
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2230
  %6 = load i64, i64* %5, align 8, !insn.addr !2230
  %7 = call i64 @.Lstream_encoder_mt_init.1(i64 %2, i64 %6, i32 0, i64 %arg1), !insn.addr !2231
  %8 = add i64 %arg1, 16, !insn.addr !2232
  %9 = trunc i64 %7 to i32, !insn.addr !2233
  %10 = icmp eq i32 %9, 0, !insn.addr !2233
  %11 = icmp eq i1 %10, false, !insn.addr !2234
  %12 = call i64 @.Lstream_encoder_mt_init.1(i64 %2, i64 %6, i32 0, i64 %8), !insn.addr !2235
  %13 = add i64 %arg1, 8, !insn.addr !2236
  %14 = trunc i64 %12 to i32, !insn.addr !2237
  %15 = icmp ne i32 %14, 0, !insn.addr !2237
  %16 = zext i1 %11 to i64, !insn.addr !2238
  %17 = zext i1 %15 to i64
  %18 = add nuw nsw i64 %16, %17, !insn.addr !2238
  %19 = call i64 @.Lstream_encoder_mt_init.1(i64 %2, i64 %6, i32 0, i64 %13), !insn.addr !2239
  %20 = trunc i64 %19 to i32, !insn.addr !2240
  %21 = icmp ne i32 %20, 0, !insn.addr !2240
  %22 = zext i1 %21 to i64
  %23 = add nuw nsw i64 %18, %22, !insn.addr !2241
  store i64 %23, i64* %r12.0.reg2mem, !insn.addr !2241
  br label %dec_label_pc_3958, !insn.addr !2241

dec_label_pc_3958:                                ; preds = %dec_label_pc_3908, %dec_label_pc_38f0
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  ret i64 %r12.0.reload, !insn.addr !2242

; uselistorder directives
  uselistorder i64 %2, { 0, 2, 1, 3 }
}

define i64 @.Llzma_delta_coder_init.1(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_3970:
  %storemerge.reg2mem = alloca i64, !insn.addr !2243
  %0 = add i64 %arg3, 104, !insn.addr !2244
  %1 = inttoptr i64 %0 to i64*, !insn.addr !2244
  %2 = load i64, i64* %1, align 8, !insn.addr !2244
  %3 = icmp eq i64 %2, 0, !insn.addr !2245
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2246
  br i1 %3, label %dec_label_pc_3999, label %dec_label_pc_3980, !insn.addr !2246

dec_label_pc_3980:                                ; preds = %dec_label_pc_3970
  %4 = add i64 %arg3, 112, !insn.addr !2247
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2247
  %6 = load i64, i64* %5, align 8, !insn.addr !2247
  %7 = call i64 @.Lstream_encoder_mt_init.1(i64 %2, i64 %6, i32 0, i64 %arg1), !insn.addr !2248
  %8 = trunc i64 %7 to i32, !insn.addr !2249
  %9 = icmp eq i32 %8, 0, !insn.addr !2249
  %10 = icmp eq i1 %9, false, !insn.addr !2250
  %. = select i1 %10, i64 3, i64 0
  store i64 %., i64* %storemerge.reg2mem, !insn.addr !2251
  br label %dec_label_pc_3999, !insn.addr !2251

dec_label_pc_3999:                                ; preds = %dec_label_pc_3970, %dec_label_pc_3980
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2252

; uselistorder directives
  uselistorder i64* %storemerge.reg2mem, { 0, 2, 1 }
  uselistorder label %dec_label_pc_3999, { 1, 0 }
}

define i64 @.Llzma_encoder_init.0(i16 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_39a0:
  %rax.1.reg2mem = alloca i64, !insn.addr !2253
  %rax.06.reg2mem = alloca i64, !insn.addr !2253
  %.in.reg2mem = alloca i16, !insn.addr !2253
  %.reg2mem = alloca i16, !insn.addr !2253
  %0 = trunc i16 %arg1 to i8, !insn.addr !2254
  %1 = icmp eq i8 %0, 45, !insn.addr !2254
  %2 = icmp eq i1 %1, false, !insn.addr !2255
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2255
  br i1 %2, label %dec_label_pc_39f9, label %dec_label_pc_39ad.preheader, !insn.addr !2255

dec_label_pc_39ad.preheader:                      ; preds = %dec_label_pc_39a0
  %3 = inttoptr i64 %arg2 to i16*, !insn.addr !2256
  %4 = load i16, i16* %3, align 2, !insn.addr !2256
  %5 = and i16 %4, -256
  %6 = icmp eq i16 %5, 25600, !insn.addr !2257
  store i16 %5, i16* %.reg2mem, !insn.addr !2258
  store i16 %4, i16* %.in.reg2mem, !insn.addr !2258
  store i64 %arg2, i64* %rax.06.reg2mem, !insn.addr !2258
  store i64 %arg2, i64* %rax.1.reg2mem, !insn.addr !2258
  br i1 %6, label %dec_label_pc_39f9, label %dec_label_pc_39c0, !insn.addr !2258

dec_label_pc_39c0:                                ; preds = %dec_label_pc_39ad.preheader, %dec_label_pc_39f1
  %rax.06.reload = load i64, i64* %rax.06.reg2mem
  %.in.reload = load i16, i16* %.in.reg2mem
  %7 = mul i16 %.in.reload, 256, !insn.addr !2259
  %8 = icmp eq i16 %7, 25600, !insn.addr !2260
  store i64 %rax.06.reload, i64* %rax.1.reg2mem, !insn.addr !2261
  br i1 %8, label %dec_label_pc_39f9, label %dec_label_pc_39c7, !insn.addr !2261

dec_label_pc_39c7:                                ; preds = %dec_label_pc_39c0
  %.reload = load i16, i16* %.reg2mem
  %9 = zext i16 %.in.reload to i64
  %10 = and i64 %9, 57088
  %11 = icmp eq i64 %10, 0, !insn.addr !2262
  %12 = icmp eq i16 %.reload, 2304, !insn.addr !2263
  %or.cond = or i1 %12, %11
  %13 = icmp eq i16 %.reload, 15616, !insn.addr !2264
  %or.cond1 = or i1 %13, %or.cond
  %14 = and i64 %9, 223
  %15 = icmp eq i64 %14, 0, !insn.addr !2265
  %or.cond3 = or i1 %15, %or.cond1
  %16 = icmp eq i16 %7, 15616, !insn.addr !2266
  %or.cond4 = or i1 %16, %or.cond3
  %17 = icmp eq i16 %7, 2304, !insn.addr !2267
  %or.cond5 = or i1 %17, %or.cond4
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2268
  br i1 %or.cond5, label %dec_label_pc_39f9, label %dec_label_pc_39f1, !insn.addr !2268

dec_label_pc_39f1:                                ; preds = %dec_label_pc_39c7
  %18 = add i64 %rax.06.reload, 2, !insn.addr !2269
  %19 = inttoptr i64 %18 to i16*, !insn.addr !2256
  %20 = load i16, i16* %19, align 2, !insn.addr !2256
  %21 = and i16 %20, -256
  %22 = icmp eq i16 %21, 25600, !insn.addr !2257
  store i16 %21, i16* %.reg2mem, !insn.addr !2258
  store i16 %20, i16* %.in.reg2mem, !insn.addr !2258
  store i64 %18, i64* %rax.06.reg2mem, !insn.addr !2258
  store i64 %18, i64* %rax.1.reg2mem, !insn.addr !2258
  br i1 %22, label %dec_label_pc_39f9, label %dec_label_pc_39c0, !insn.addr !2258

dec_label_pc_39f9:                                ; preds = %dec_label_pc_39f1, %dec_label_pc_39c0, %dec_label_pc_39c7, %dec_label_pc_39ad.preheader, %dec_label_pc_39a0
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !2270

; uselistorder directives
  uselistorder i16 %7, { 2, 1, 0 }
  uselistorder i64 %rax.06.reload, { 1, 0 }
  uselistorder i16* %.reg2mem, { 2, 0, 1 }
  uselistorder i16* %.in.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.06.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.1.reg2mem, { 0, 1, 3, 2, 4, 5 }
  uselistorder i16 25600, { 2, 1, 0 }
  uselistorder i16 -256, { 1, 0 }
  uselistorder label %dec_label_pc_39f9, { 0, 2, 1, 3, 4 }
  uselistorder label %dec_label_pc_39c0, { 1, 0 }
}

define i64 @function_3a00(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3a00:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !2271
  %rdx.1.reg2mem = alloca i64, !insn.addr !2271
  %.reg2mem30 = alloca i64, !insn.addr !2271
  %r12.0.reg2mem = alloca i64, !insn.addr !2271
  %rdx.0.reg2mem = alloca i64, !insn.addr !2271
  %.reg2mem = alloca i64, !insn.addr !2271
  %r8.0.reg2mem = alloca i64, !insn.addr !2271
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %stack_var_-64 = alloca i64, align 8
  %stack_var_-8 = alloca i64, align 8
  %3 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !2272
  %4 = icmp ult i64 %3, %arg2, !insn.addr !2273
  %5 = sub i64 %arg2, %3, !insn.addr !2274
  %6 = icmp ult i64 %5, 8193
  %or.cond5 = icmp eq i1 %4, %6
  %7 = add i64 %arg2, -1, !insn.addr !2275
  %8 = icmp ult i64 %7, 32
  %or.cond7 = icmp eq i1 %8, %or.cond5
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2276
  br i1 %or.cond7, label %dec_label_pc_3a45, label %dec_label_pc_3b50, !insn.addr !2276

dec_label_pc_3a45:                                ; preds = %dec_label_pc_3a00
  %9 = add i64 %arg2, 8, !insn.addr !2277
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2277
  %11 = load i64, i64* %10, align 8, !insn.addr !2277
  %12 = icmp ugt i64 %11, %arg2, !insn.addr !2278
  %13 = sub i64 %11, %arg2, !insn.addr !2279
  %14 = icmp ult i64 %13, 16385
  %or.cond9 = icmp eq i1 %12, %14
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2280
  br i1 %or.cond9, label %dec_label_pc_3a6d, label %dec_label_pc_3b50, !insn.addr !2280

dec_label_pc_3a6d:                                ; preds = %dec_label_pc_3a45
  %15 = call i64 @.Lsimple_coder_update.0(i64 %11, i32 0, i64 %1, i64 %2), !insn.addr !2281
  %16 = trunc i64 %15 to i32, !insn.addr !2282
  %17 = icmp eq i32 %16, 264, !insn.addr !2282
  %18 = icmp eq i1 %17, false, !insn.addr !2283
  store i64 1, i64* %r8.0.reg2mem, !insn.addr !2283
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2283
  br i1 %18, label %dec_label_pc_3b50, label %dec_label_pc_3a85, !insn.addr !2283

dec_label_pc_3a85:                                ; preds = %dec_label_pc_3a6d, %dec_label_pc_3ab6
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %19 = icmp eq i64 %r8.0.reload, %arg2, !insn.addr !2284
  %20 = add i64 %r8.0.reload, 1, !insn.addr !2285
  %21 = mul i64 %20, 8
  %22 = add i64 %21, %arg2
  %23 = inttoptr i64 %22 to i64*
  %24 = load i64, i64* %23, align 8
  br i1 %19, label %dec_label_pc_3ac8, label %dec_label_pc_3a8e, !insn.addr !2286

dec_label_pc_3a8e:                                ; preds = %dec_label_pc_3a85
  %25 = icmp ugt i64 %24, %arg2, !insn.addr !2287
  %26 = sub i64 %24, %arg2, !insn.addr !2288
  %27 = icmp ult i64 %26, 16385
  %or.cond11 = icmp eq i1 %25, %27
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2289
  br i1 %or.cond11, label %dec_label_pc_3ab6, label %dec_label_pc_3b50, !insn.addr !2289

dec_label_pc_3ab6:                                ; preds = %dec_label_pc_3a8e
  %28 = inttoptr i64 %24 to i16*, !insn.addr !2290
  %29 = load i16, i16* %28, align 2, !insn.addr !2290
  %30 = call i64 @.Llzma_encoder_init.0(i16 %29, i64 %24), !insn.addr !2291
  %31 = icmp eq i64 %30, 0, !insn.addr !2292
  store i64 %20, i64* %r8.0.reg2mem, !insn.addr !2293
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2293
  br i1 %31, label %dec_label_pc_3a85, label %dec_label_pc_3b50, !insn.addr !2293

dec_label_pc_3ac8:                                ; preds = %dec_label_pc_3a85
  %32 = icmp eq i64 %24, 0, !insn.addr !2294
  %33 = icmp eq i1 %32, false, !insn.addr !2295
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2295
  br i1 %33, label %dec_label_pc_3b50, label %dec_label_pc_3ad7, !insn.addr !2295

dec_label_pc_3ad7:                                ; preds = %dec_label_pc_3ac8
  %34 = add i64 %21, %9, !insn.addr !2296
  %.phi.trans.insert = inttoptr i64 %34 to i64*
  %.pre = load i64, i64* %.phi.trans.insert, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !2297
  store i64 %34, i64* %r12.0.reg2mem, !insn.addr !2297
  br label %dec_label_pc_3ae0, !insn.addr !2297

dec_label_pc_3ae0:                                ; preds = %dec_label_pc_3b3c, %dec_label_pc_3ad7
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2298
  %35 = icmp eq i64 %.reload, 0, !insn.addr !2299
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2300
  br i1 %35, label %dec_label_pc_3b50, label %dec_label_pc_3ae9, !insn.addr !2300

dec_label_pc_3ae9:                                ; preds = %dec_label_pc_3ae0
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %36 = icmp ugt i64 %.reload, %arg2, !insn.addr !2301
  %37 = sub i64 %.reload, %arg2, !insn.addr !2302
  %38 = icmp ult i64 %37, 16385
  %or.cond13 = icmp eq i1 %36, %38
  store i64 %.reload, i64* %.reg2mem30, !insn.addr !2303
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !2303
  br i1 %or.cond13, label %dec_label_pc_3b2d, label %dec_label_pc_3afc, !insn.addr !2303

dec_label_pc_3afc:                                ; preds = %dec_label_pc_3ae9
  store i64 0, i64* %stack_var_-64, align 8, !insn.addr !2304
  %39 = call i64 @.Lmicrolzma_decode.0(i64 %arg1, i64* nonnull %stack_var_-64, i64 1), !insn.addr !2305
  %40 = icmp eq i64 %39, 0, !insn.addr !2306
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2307
  br i1 %40, label %dec_label_pc_3b50, label %dec_label_pc_3b1c, !insn.addr !2307

dec_label_pc_3b1c:                                ; preds = %dec_label_pc_3afc
  %41 = add i64 %.reload, 44, !insn.addr !2308
  %42 = load i64, i64* %stack_var_-64, align 8, !insn.addr !2309
  %43 = add i64 %42, %39, !insn.addr !2310
  %44 = icmp ugt i64 %41, %43
  %45 = icmp ult i64 %.reload, %39, !insn.addr !2311
  %or.cond14 = or i1 %45, %44
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2312
  br i1 %or.cond14, label %dec_label_pc_3b50, label %dec_label_pc_3b1c.dec_label_pc_3b2d_crit_edge, !insn.addr !2312

dec_label_pc_3b1c.dec_label_pc_3b2d_crit_edge:    ; preds = %dec_label_pc_3b1c
  %46 = inttoptr i64 %r12.0.reload to i64*, !insn.addr !2298
  %.pre22 = load i64, i64* %46, align 8
  store i64 %.pre22, i64* %.reg2mem30
  store i64 %43, i64* %rdx.1.reg2mem
  br label %dec_label_pc_3b2d

dec_label_pc_3b2d:                                ; preds = %dec_label_pc_3b1c.dec_label_pc_3b2d_crit_edge, %dec_label_pc_3ae9
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %.reload31 = load i64, i64* %.reg2mem30, !insn.addr !2313
  %47 = call i64 @.Lsimple_coder_update.0(i64 %.reload31, i32 0, i64 %rdx.1.reload, i64 %2), !insn.addr !2314
  %48 = trunc i64 %47 to i32, !insn.addr !2315
  %49 = icmp eq i32 %48, 0, !insn.addr !2315
  %50 = icmp eq i1 %49, false, !insn.addr !2316
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2316
  br i1 %50, label %dec_label_pc_3b50, label %dec_label_pc_3b3c, !insn.addr !2316

dec_label_pc_3b3c:                                ; preds = %dec_label_pc_3b2d
  %51 = add i64 %r12.0.reload, 8, !insn.addr !2317
  %52 = inttoptr i64 %51 to i64*, !insn.addr !2318
  %53 = load i64, i64* %52, align 8, !insn.addr !2318
  %54 = icmp eq i64 %53, 0, !insn.addr !2318
  %55 = icmp eq i1 %54, false, !insn.addr !2319
  store i64 %53, i64* %.reg2mem, !insn.addr !2319
  store i64 %rdx.1.reload, i64* %rdx.0.reg2mem, !insn.addr !2319
  store i64 %51, i64* %r12.0.reg2mem, !insn.addr !2319
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !2319
  br i1 %55, label %dec_label_pc_3ae0, label %dec_label_pc_3b50, !insn.addr !2319

dec_label_pc_3b50:                                ; preds = %dec_label_pc_3a8e, %dec_label_pc_3ab6, %dec_label_pc_3ae0, %dec_label_pc_3afc, %dec_label_pc_3b2d, %dec_label_pc_3b1c, %dec_label_pc_3b3c, %dec_label_pc_3a45, %dec_label_pc_3a00, %dec_label_pc_3a6d, %dec_label_pc_3ac8
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2320

; uselistorder directives
  uselistorder i64 %rdx.1.reload, { 1, 0 }
  uselistorder i64 %39, { 1, 0, 2 }
  uselistorder i64 %r12.0.reload, { 1, 0 }
  uselistorder i64 %.reload, { 1, 4, 0, 2, 3, 5 }
  uselistorder i64 %24, { 0, 4, 3, 1, 2 }
  uselistorder i64 %21, { 1, 0 }
  uselistorder i64 %11, { 2, 0, 1 }
  uselistorder i64* %stack_var_-64, { 1, 0, 2 }
  uselistorder i64 %2, { 1, 0 }
  uselistorder i64* %r8.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.0.reg2mem, { 1, 0 }
  uselistorder i64* %r12.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 7, 5, 6, 4, 3, 11, 2, 1, 10, 9, 8 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 %arg2, { 1, 6, 2, 7, 0, 9, 3, 8, 10, 4, 5, 11 }
  uselistorder label %dec_label_pc_3b50, { 6, 4, 5, 3, 2, 10, 1, 0, 9, 7, 8 }
  uselistorder label %dec_label_pc_3a85, { 1, 0 }
}

define i64 @function_3b60(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_3b60:
  %0 = alloca i128
  %1 = load i128, i128* %0
  %2 = load i128, i128* %0
  %stack_var_-1616 = alloca i64, align 8
  %3 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !2321
  %4 = bitcast i64* %stack_var_-1616 to i8*, !insn.addr !2322
  call void @__asm_rep_stosd_memset(i8* nonnull %4, i32 0, i64 390), !insn.addr !2322
  call void @__asm_movups(i128 %2, i128 %3), !insn.addr !2323
  ret i64 0

; uselistorder directives
  uselistorder i128* %0, { 1, 0 }
}

define i64 @.Llzma_filter_decoder_is_supported.part.0(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3cc0:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !2324
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %3 = ptrtoint i64* %arg1 to i64
  %4 = add i64 %3, 8, !insn.addr !2325
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2325
  %6 = load i64, i64* %5, align 8
  %7 = call i64 @.Lget_literal_price.part.0(i64 %6, i64 %6, i64 %arg3, i64 %arg4, i64 %2, i64 %1), !insn.addr !2326
  %8 = trunc i64 %7 to i32, !insn.addr !2327
  %9 = icmp eq i32 %8, 0, !insn.addr !2327
  %10 = icmp eq i1 %9, false, !insn.addr !2328
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2328
  br i1 %10, label %dec_label_pc_3ce3, label %dec_label_pc_3d29, !insn.addr !2328

dec_label_pc_3ce3:                                ; preds = %dec_label_pc_3cc0
  %11 = add i64 %6, 8, !insn.addr !2329
  %12 = inttoptr i64 %11 to i64*, !insn.addr !2329
  %13 = load i64, i64* %12, align 8, !insn.addr !2329
  %14 = call i64 @.Lcrc_init.0(i64 %13, i64 ptrtoint ([4 x i8]* @global_var_2b0 to i64), i32 2240, i64 %arg4), !insn.addr !2330
  %15 = icmp eq i64 %14, 0, !insn.addr !2331
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2332
  br i1 %15, label %dec_label_pc_3d29, label %dec_label_pc_3cfe, !insn.addr !2332

dec_label_pc_3cfe:                                ; preds = %dec_label_pc_3ce3
  %16 = add i64 %14, 8, !insn.addr !2333
  %17 = inttoptr i64 %16 to i64*, !insn.addr !2333
  %18 = load i64, i64* %17, align 8, !insn.addr !2333
  %19 = add i64 %13, 8, !insn.addr !2334
  %20 = inttoptr i64 %19 to i64*, !insn.addr !2334
  %21 = load i64, i64* %20, align 8, !insn.addr !2334
  %22 = inttoptr i64 %21 to i64*, !insn.addr !2335
  %23 = load i64, i64* %22, align 8, !insn.addr !2335
  %24 = add i64 %23, %18, !insn.addr !2335
  %25 = inttoptr i64 %24 to i64*, !insn.addr !2336
  %26 = load i64, i64* %25, align 8, !insn.addr !2336
  %27 = call i64 @function_3a00(i64 %21, i64 %26), !insn.addr !2337
  %28 = trunc i64 %27 to i32, !insn.addr !2338
  %29 = icmp eq i32 %28, 0, !insn.addr !2338
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2339
  br i1 %29, label %dec_label_pc_3d29, label %dec_label_pc_3d19, !insn.addr !2339

dec_label_pc_3d19:                                ; preds = %dec_label_pc_3cfe
  %30 = add i64 %3, 16, !insn.addr !2340
  %31 = inttoptr i64 %30 to i64*, !insn.addr !2340
  %32 = load i64, i64* %31, align 8, !insn.addr !2340
  %33 = load i64, i64* %25, align 8, !insn.addr !2341
  %34 = inttoptr i64 %32 to i64*, !insn.addr !2342
  store i64 %33, i64* %34, align 8, !insn.addr !2342
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !2343
  br label %dec_label_pc_3d29, !insn.addr !2343

dec_label_pc_3d29:                                ; preds = %dec_label_pc_3cc0, %dec_label_pc_3ce3, %dec_label_pc_3cfe, %dec_label_pc_3d19
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2344

; uselistorder directives
  uselistorder i64 %21, { 1, 0 }
  uselistorder i64 %6, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 4, 3, 2, 1 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder label %dec_label_pc_3d29, { 3, 2, 1, 0 }
}

define i64 @.Llzma_lzma2_encoder_memusage.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3d30:
  %0 = icmp eq i64 %arg1, 0, !insn.addr !2345
  br i1 %0, label %dec_label_pc_3d87, label %dec_label_pc_3d39, !insn.addr !2346

dec_label_pc_3d39:                                ; preds = %dec_label_pc_3d30
  %1 = call i64 @.Llzma_delta_coder_init.1(i64 %arg1, i64 %arg2, i64 %arg3), !insn.addr !2347
  %2 = call i64 @.Llzma_decoder_init.1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4), !insn.addr !2348
  %3 = add i64 %2, %1, !insn.addr !2349
  %4 = call i64 @.Llzma_check_finish.0(i64 %arg1, i64 %arg2, i64 %arg3), !insn.addr !2350
  %5 = mul i64 %3, 2, !insn.addr !2351
  %6 = add i64 %5, %4, !insn.addr !2352
  %7 = and i64 %6, 4294967295, !insn.addr !2352
  ret i64 %7, !insn.addr !2353

dec_label_pc_3d87:                                ; preds = %dec_label_pc_3d30
  ret i64 0, !insn.addr !2354

; uselistorder directives
  uselistorder i64 %arg3, { 1, 0, 2 }
  uselistorder i64 %arg2, { 1, 0, 2 }
  uselistorder i64 %arg1, { 1, 0, 2, 3 }
}

define i64 @.Llzma_mf_bt4_find.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_3d90:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !2355
  %rdx.1.reg2mem = alloca i64, !insn.addr !2355
  %rcx.0.reg2mem = alloca i64, !insn.addr !2355
  %rax.1.reg2mem = alloca i64, !insn.addr !2355
  %rdx.0.reg2mem = alloca i64, !insn.addr !2355
  %rax.0.reg2mem = alloca i64, !insn.addr !2355
  %rbx.0.reg2mem = alloca i64, !insn.addr !2355
  %1 = load i64, i64* %0
  %stack_var_-160 = alloca i64, align 8
  %stack_var_-200 = alloca i64, align 8
  %stack_var_-120 = alloca i64, align 8
  %stack_var_-208 = alloca i64, align 8
  %stack_var_-232 = alloca i64, align 8
  %2 = call i64 @.Llzma_index_iter_rewind.cold(i64 218, i64 20, i64 15, i32 0, i64 %1), !insn.addr !2356
  %3 = trunc i64 %2 to i32, !insn.addr !2357
  %4 = icmp eq i32 %3, 0, !insn.addr !2357
  %5 = icmp eq i1 %4, false, !insn.addr !2358
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2358
  br i1 %5, label %dec_label_pc_3dce, label %dec_label_pc_3f2b, !insn.addr !2358

dec_label_pc_3dce:                                ; preds = %dec_label_pc_3d90
  %6 = add i64 %arg3, 32, !insn.addr !2359
  %7 = inttoptr i64 %6 to i64*, !insn.addr !2359
  %8 = load i64, i64* %7, align 8, !insn.addr !2359
  store i64 0, i64* %stack_var_-208, align 8, !insn.addr !2360
  %9 = add i64 %8, 168, !insn.addr !2361
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2361
  %11 = load i64, i64* %10, align 8, !insn.addr !2361
  %12 = icmp eq i64 %11, 0, !insn.addr !2361
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2362
  br i1 %12, label %dec_label_pc_3f2b, label %dec_label_pc_3de4, !insn.addr !2362

dec_label_pc_3de4:                                ; preds = %dec_label_pc_3dce
  %13 = add i64 %arg3, ptrtoint (i32** @global_var_48 to i64), !insn.addr !2363
  %14 = inttoptr i64 %13 to i64*, !insn.addr !2363
  store i64 0, i64* %14, align 8, !insn.addr !2363
  %15 = call i64 @.Lmicrolzma_decode.0(i64 %arg1, i64* nonnull %stack_var_-208, i64 0), !insn.addr !2364
  %16 = icmp eq i64 %15, 0, !insn.addr !2365
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2366
  br i1 %16, label %dec_label_pc_3f2b, label %dec_label_pc_3e02, !insn.addr !2366

dec_label_pc_3e02:                                ; preds = %dec_label_pc_3de4
  %17 = ptrtoint i64* %stack_var_-232 to i64, !insn.addr !2367
  %18 = load i64, i64* %stack_var_-208, align 8, !insn.addr !2368
  %19 = ptrtoint i64* %stack_var_-120 to i64, !insn.addr !2369
  %20 = ptrtoint i64* %stack_var_-200 to i64, !insn.addr !2370
  %21 = add i64 %18, %15, !insn.addr !2371
  store i64 %21, i64* %stack_var_-232, align 8, !insn.addr !2372
  store i64 21474836484, i64* %stack_var_-200, align 8, !insn.addr !2373
  %22 = bitcast i64* %stack_var_-120 to i8*, !insn.addr !2374
  call void @__asm_rep_stosd_memset(i8* nonnull %22, i32 0, i64 20), !insn.addr !2374
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !2374
  br label %dec_label_pc_3e73, !insn.addr !2374

dec_label_pc_3e73:                                ; preds = %dec_label_pc_3ea9, %dec_label_pc_3e02
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %23 = mul i64 %rbx.0.reload, 4, !insn.addr !2375
  %24 = add i64 %23, %20, !insn.addr !2375
  %25 = inttoptr i64 %24 to i32*, !insn.addr !2375
  %26 = load i32, i32* %25, align 4, !insn.addr !2375
  %27 = zext i32 %26 to i64, !insn.addr !2375
  %28 = mul i64 %27, 32, !insn.addr !2376
  %29 = add i64 %28, %arg2, !insn.addr !2377
  %30 = add i64 %29, 8, !insn.addr !2378
  %31 = inttoptr i64 %30 to i64*, !insn.addr !2378
  %32 = load i64, i64* %31, align 8, !insn.addr !2378
  %33 = icmp eq i64 %32, 0, !insn.addr !2379
  br i1 %33, label %dec_label_pc_3ea9, label %dec_label_pc_3e87, !insn.addr !2380

dec_label_pc_3e87:                                ; preds = %dec_label_pc_3e73
  %34 = add i64 %29, 16, !insn.addr !2381
  %35 = inttoptr i64 %34 to i64*, !insn.addr !2381
  %36 = load i64, i64* %35, align 8, !insn.addr !2381
  %37 = load i64, i64* %stack_var_-232, align 8, !insn.addr !2382
  %38 = mul i64 %rbx.0.reload, 8, !insn.addr !2383
  %39 = add i64 %38, %19, !insn.addr !2383
  %40 = call i64 @function_2fd0(i64 %32, i64 %36, i64 %15, i64 %37, i64 %39, i64 %arg3), !insn.addr !2384
  br label %dec_label_pc_3ea9, !insn.addr !2385

dec_label_pc_3ea9:                                ; preds = %dec_label_pc_3e87, %dec_label_pc_3e73
  %41 = add nuw nsw i64 %rbx.0.reload, 1, !insn.addr !2386
  %exitcond4 = icmp eq i64 %41, 10
  store i64 %41, i64* %rbx.0.reg2mem, !insn.addr !2387
  br i1 %exitcond4, label %dec_label_pc_3eb2, label %dec_label_pc_3e73, !insn.addr !2387

dec_label_pc_3eb2:                                ; preds = %dec_label_pc_3ea9
  %42 = ptrtoint i64* %stack_var_-160 to i64, !insn.addr !2388
  %43 = bitcast i64* %stack_var_-160 to i8*, !insn.addr !2389
  call void @__asm_rep_stosd_memset(i8* nonnull %43, i32 0, i64 10), !insn.addr !2389
  %44 = add i64 %19, -8
  %45 = add i64 %17, ptrtoint (i32** @global_var_48 to i64)
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2390
  br label %dec_label_pc_3ec5, !insn.addr !2390

dec_label_pc_3ec5:                                ; preds = %dec_label_pc_3ee7, %dec_label_pc_3eb2
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %46 = mul i64 %rax.0.reload, 8, !insn.addr !2391
  %47 = add i64 %46, %19, !insn.addr !2391
  %48 = inttoptr i64 %47 to i64*, !insn.addr !2391
  %49 = load i64, i64* %48, align 8, !insn.addr !2391
  %50 = trunc i64 %rax.0.reload to i32, !insn.addr !2392
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !2393
  br label %dec_label_pc_3ecc, !insn.addr !2393

dec_label_pc_3ecc:                                ; preds = %dec_label_pc_3ed2, %dec_label_pc_3ec5
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %51 = trunc i64 %rdx.0.reload to i32, !insn.addr !2392
  %52 = icmp ult i32 %51, %50, !insn.addr !2392
  %53 = icmp eq i1 %52, false, !insn.addr !2394
  br i1 %53, label %dec_label_pc_3ee4, label %dec_label_pc_3ed2, !insn.addr !2394

dec_label_pc_3ed2:                                ; preds = %dec_label_pc_3ecc
  %54 = add i64 %rdx.0.reload, 1, !insn.addr !2395
  %55 = mul i64 %54, 8, !insn.addr !2396
  %56 = add i64 %44, %55, !insn.addr !2396
  %57 = inttoptr i64 %56 to i64*, !insn.addr !2396
  %58 = load i64, i64* %57, align 8, !insn.addr !2396
  %59 = icmp eq i64 %58, %49, !insn.addr !2396
  %60 = icmp eq i1 %59, false, !insn.addr !2397
  store i64 %54, i64* %rdx.0.reg2mem, !insn.addr !2397
  br i1 %60, label %dec_label_pc_3ecc, label %dec_label_pc_3edc, !insn.addr !2397

dec_label_pc_3edc:                                ; preds = %dec_label_pc_3ed2
  %61 = mul i64 %rdx.0.reload, 4, !insn.addr !2398
  %62 = and i64 %61, 17179869180, !insn.addr !2399
  %63 = add i64 %45, %62, !insn.addr !2399
  %64 = inttoptr i64 %63 to i32*, !insn.addr !2399
  %65 = load i32, i32* %64, align 4, !insn.addr !2399
  %66 = add i32 %65, 1, !insn.addr !2399
  store i32 %66, i32* %64, align 4, !insn.addr !2399
  br label %dec_label_pc_3ee7, !insn.addr !2400

dec_label_pc_3ee4:                                ; preds = %dec_label_pc_3ecc
  %67 = mul i64 %rax.0.reload, 4, !insn.addr !2401
  %68 = add i64 %67, %42, !insn.addr !2401
  %69 = inttoptr i64 %68 to i32*, !insn.addr !2401
  %70 = load i32, i32* %69, align 4, !insn.addr !2401
  %71 = add i32 %70, 1, !insn.addr !2401
  store i32 %71, i32* %69, align 4, !insn.addr !2401
  br label %dec_label_pc_3ee7, !insn.addr !2401

dec_label_pc_3ee7:                                ; preds = %dec_label_pc_3ee4, %dec_label_pc_3edc
  %72 = add nuw nsw i64 %rax.0.reload, 1, !insn.addr !2402
  %exitcond3 = icmp eq i64 %72, 10
  store i64 %72, i64* %rax.0.reg2mem, !insn.addr !2403
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2403
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !2403
  store i64 0, i64* %rdx.1.reg2mem, !insn.addr !2403
  br i1 %exitcond3, label %dec_label_pc_3ef6, label %dec_label_pc_3ec5, !insn.addr !2403

dec_label_pc_3ef6:                                ; preds = %dec_label_pc_3ee7, %dec_label_pc_3ef6
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %73 = mul i64 %rax.1.reload, 4, !insn.addr !2404
  %74 = add i64 %73, %42, !insn.addr !2404
  %75 = inttoptr i64 %74 to i32*, !insn.addr !2404
  %76 = load i32, i32* %75, align 4, !insn.addr !2404
  %77 = trunc i64 %rcx.0.reload to i32, !insn.addr !2405
  %78 = icmp ugt i32 %76, %77, !insn.addr !2405
  %79 = icmp eq i1 %78, false, !insn.addr !2406
  %80 = zext i32 %76 to i64
  %rcx.1 = select i1 %79, i64 %rcx.0.reload, i64 %80
  %rdx.2 = select i1 %79, i64 %rdx.1.reload, i64 %rax.1.reload
  %81 = add nuw nsw i64 %rax.1.reload, 1, !insn.addr !2407
  %exitcond = icmp eq i64 %81, 10
  store i64 %81, i64* %rax.1.reg2mem, !insn.addr !2408
  store i64 %rcx.1, i64* %rcx.0.reg2mem, !insn.addr !2408
  store i64 %rdx.2, i64* %rdx.1.reg2mem, !insn.addr !2408
  br i1 %exitcond, label %dec_label_pc_3f0a, label %dec_label_pc_3ef6, !insn.addr !2408

dec_label_pc_3f0a:                                ; preds = %dec_label_pc_3ef6
  %82 = trunc i64 %rcx.1 to i32, !insn.addr !2409
  %83 = icmp ult i32 %82, 5
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2410
  br i1 %83, label %dec_label_pc_3f2b, label %dec_label_pc_3f13, !insn.addr !2410

dec_label_pc_3f13:                                ; preds = %dec_label_pc_3f0a
  %84 = mul i64 %rdx.2, 8, !insn.addr !2411
  %85 = add i64 %17, 112, !insn.addr !2411
  %86 = add i64 %85, %84, !insn.addr !2411
  %87 = inttoptr i64 %86 to i64*, !insn.addr !2411
  %88 = load i64, i64* %87, align 8, !insn.addr !2411
  %89 = icmp eq i64 %88, 0, !insn.addr !2412
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2413
  br i1 %89, label %dec_label_pc_3f2b, label %dec_label_pc_3f21, !insn.addr !2413

dec_label_pc_3f21:                                ; preds = %dec_label_pc_3f13
  store i64 %88, i64* %14, align 8, !insn.addr !2414
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !2415
  br label %dec_label_pc_3f2b, !insn.addr !2415

dec_label_pc_3f2b:                                ; preds = %dec_label_pc_3d90, %dec_label_pc_3dce, %dec_label_pc_3de4, %dec_label_pc_3f0a, %dec_label_pc_3f13, %dec_label_pc_3f21
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2416

; uselistorder directives
  uselistorder i64 %rdx.2, { 1, 0 }
  uselistorder i64 %rcx.1, { 1, 0 }
  uselistorder i32 %76, { 1, 0 }
  uselistorder i64 %rcx.0.reload, { 1, 0 }
  uselistorder i64 %rdx.0.reload, { 2, 1, 0 }
  uselistorder i64 %rax.0.reload, { 1, 3, 0, 2 }
  uselistorder i64 %rbx.0.reload, { 0, 2, 1 }
  uselistorder i64 %19, { 0, 2, 1 }
  uselistorder i64 %17, { 1, 0 }
  uselistorder i64 %15, { 1, 0, 2 }
  uselistorder i64* %stack_var_-208, { 1, 0, 2 }
  uselistorder i64* %rbx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.1.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rcx.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rdx.1.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i64 15, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_3f2b, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_3ef6, { 1, 0 }
}

define i64 @.Llzma_stream_decoder_init.1(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f40:
  %0 = load i64, i64* inttoptr (i64 16203 to i64*), align 8, !insn.addr !2417
  %1 = add i64 %0, 8, !insn.addr !2418
  %2 = inttoptr i64 %1 to i64*, !insn.addr !2418
  %3 = load i64, i64* %2, align 8, !insn.addr !2418
  %4 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2419
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2419
  store i64 %3, i64* %5, align 8, !insn.addr !2419
  ret i64 %3, !insn.addr !2420

; uselistorder directives
  uselistorder i64 %3, { 1, 0 }
}

define i64 @.Llzma_stream_flags_compare.1(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f60:
  %0 = load i64, i64* inttoptr (i64 16235 to i64*), align 8, !insn.addr !2421
  %1 = add i64 %0, 8, !insn.addr !2422
  %2 = inttoptr i64 %1 to i64*, !insn.addr !2422
  %3 = load i64, i64* %2, align 8, !insn.addr !2422
  %4 = add i64 %arg1, 32, !insn.addr !2423
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2423
  store i64 %3, i64* %5, align 8, !insn.addr !2423
  ret i64 %3, !insn.addr !2424

; uselistorder directives
  uselistorder i64 %3, { 1, 0 }
}

define i64 @.Llzma_stream_header_encode.part.0(i64 %arg1) local_unnamed_addr {
dec_label_pc_3f80:
  %0 = inttoptr i64 %arg1 to i64*, !insn.addr !2425
  store i64 ptrtoint (i64* @global_var_ae18 to i64), i64* %0, align 8, !insn.addr !2425
  %1 = call i64 @.Llzma_stream_flags_compare.1(i64 %arg1), !insn.addr !2426
  %2 = load i64, i64* inttoptr (i64 16282 to i64*), align 8, !insn.addr !2427
  %3 = add i64 %arg1, 32, !insn.addr !2428
  %4 = inttoptr i64 %3 to i64*, !insn.addr !2428
  %5 = load i64, i64* %4, align 8, !insn.addr !2428
  %6 = sub i64 ptrtoint (i64* @global_var_ae18 to i64), %5, !insn.addr !2428
  %7 = add i64 %arg1, 8, !insn.addr !2429
  %8 = inttoptr i64 %7 to i64*, !insn.addr !2429
  store i64 %6, i64* %8, align 8, !insn.addr !2429
  %9 = inttoptr i64 %2 to i64*, !insn.addr !2430
  %10 = load i64, i64* %9, align 8, !insn.addr !2430
  %11 = add i64 %10, %6, !insn.addr !2431
  %12 = inttoptr i64 %11 to i64*, !insn.addr !2431
  %13 = load i64, i64* %12, align 8, !insn.addr !2431
  %14 = ashr i64 %13, 56, !insn.addr !2432
  %15 = add i64 %arg1, 16, !insn.addr !2433
  %16 = inttoptr i64 %15 to i64*, !insn.addr !2433
  store i64 %14, i64* %16, align 8, !insn.addr !2433
  %17 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2434
  %18 = inttoptr i64 %17 to i64*, !insn.addr !2434
  store i64 0, i64* %18, align 8, !insn.addr !2434
  ret i64 0, !insn.addr !2435

; uselistorder directives
  uselistorder i64 ptrtoint (i64* @global_var_ae18 to i64), { 1, 0 }
  uselistorder i64 %arg1, { 3, 5, 4, 2, 1, 0 }
}

define i64 @.Llzma_block_param_decoder.0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3fc0:
  %rdx.0.reg2mem = alloca i64, !insn.addr !2436
  %rax.0.reg2mem = alloca i64, !insn.addr !2436
  %stack_var_-8 = alloca i64, align 8
  %0 = trunc i64 %arg2 to i32, !insn.addr !2437
  %1 = icmp eq i32 %0, 0, !insn.addr !2437
  %2 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !2438
  %3 = select i1 %1, i32 128, i32 4072, !insn.addr !2439
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2440
  store i64 %2, i64* %rdx.0.reg2mem, !insn.addr !2440
  br label %dec_label_pc_3fdd, !insn.addr !2440

dec_label_pc_3fdd:                                ; preds = %dec_label_pc_3fdd, %dec_label_pc_3fc0
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %4 = add nuw nsw i64 %rax.0.reload, 1, !insn.addr !2441
  %5 = and i64 %4, 4294967295, !insn.addr !2441
  %6 = add i64 %rdx.0.reload, -8, !insn.addr !2442
  %7 = inttoptr i64 %rdx.0.reload to i64*, !insn.addr !2443
  store i64 0, i64* %7, align 8, !insn.addr !2443
  %8 = trunc i64 %4 to i32, !insn.addr !2439
  %9 = icmp eq i32 %3, %8, !insn.addr !2439
  %10 = icmp eq i1 %9, false, !insn.addr !2444
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !2444
  store i64 %6, i64* %rdx.0.reg2mem, !insn.addr !2444
  br i1 %10, label %dec_label_pc_3fdd, label %dec_label_pc_3fed, !insn.addr !2444

dec_label_pc_3fed:                                ; preds = %dec_label_pc_3fdd
  ret i64 %5, !insn.addr !2445

; uselistorder directives
  uselistorder i64 %5, { 1, 0 }
  uselistorder i64* %rax.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.0.reg2mem, { 1, 0, 2 }
}

define i64 @.Lparse_delta.0(i64 %arg1) local_unnamed_addr {
dec_label_pc_3ff0:
  %0 = load i64, i64* inttoptr (i64 16379 to i64*), align 8, !insn.addr !2446
  %1 = inttoptr i64 %0 to i64*, !insn.addr !2447
  %2 = load i64, i64* %1, align 8, !insn.addr !2447
  %3 = add i64 %arg1, 32, !insn.addr !2448
  %4 = inttoptr i64 %3 to i64*, !insn.addr !2448
  store i64 %2, i64* %4, align 8, !insn.addr !2448
  ret i64 %2, !insn.addr !2449

; uselistorder directives
  uselistorder i64 %2, { 1, 0 }
}

define i64 @.Llzma_delta_props_decoder(i64 %arg1) local_unnamed_addr {
dec_label_pc_4010:
  %0 = inttoptr i64 %arg1 to i64*, !insn.addr !2450
  store i64 ptrtoint (i64* @global_var_ae20 to i64), i64* %0, align 8, !insn.addr !2450
  %1 = add i64 %arg1, 40, !insn.addr !2451
  %2 = inttoptr i64 %1 to i64*, !insn.addr !2451
  %3 = load i64, i64* %2, align 8, !insn.addr !2451
  %4 = add i64 %3, 24, !insn.addr !2452
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2452
  %6 = load i64, i64* %5, align 8, !insn.addr !2452
  %7 = add i64 %arg1, 16, !insn.addr !2453
  %8 = inttoptr i64 %7 to i64*, !insn.addr !2453
  store i64 %6, i64* %8, align 8, !insn.addr !2453
  %9 = call i64 @.Lparse_delta.0(i64 %arg1), !insn.addr !2454
  %10 = call i64 @.Llzma_stream_decoder_init.1(i64 %arg1), !insn.addr !2455
  %11 = add i64 %arg1, 8, !insn.addr !2456
  %12 = inttoptr i64 %11 to i64*, !insn.addr !2456
  store i64 0, i64* %12, align 8, !insn.addr !2456
  ret i64 0, !insn.addr !2457

; uselistorder directives
  uselistorder i64 %arg1, { 5, 4, 3, 2, 1, 0 }
}

define i64 @.Lstream_decoder_memconfig.part.1(i64 %arg1) local_unnamed_addr {
dec_label_pc_4040:
  %0 = call i64 @.Lstream_decoder_mt_end.0(i64 33), !insn.addr !2458
  %1 = add i64 %0, 8, !insn.addr !2459
  ret i64 %1, !insn.addr !2460
}

define i64 @.Llzma_delta_props_encode.part.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_4060:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !2461
  %rdx.1.reg2mem = alloca i64, !insn.addr !2461
  %rcx.0.reg2mem = alloca i64, !insn.addr !2461
  %rcx.12.reg2mem = alloca i64, !insn.addr !2461
  %rdx.23.reg2mem = alloca i64, !insn.addr !2461
  %rsi.04.reg2mem = alloca i64, !insn.addr !2461
  %.pre-phi.reg2mem = alloca i64, !insn.addr !2461
  %r13.07.reg2mem = alloca i64, !insn.addr !2461
  %rdx.0.reg2mem = alloca i64, !insn.addr !2461
  %1 = load i64, i64* %0
  %2 = call i64 @.Llzma2_decoder_end.1(i32 0, i64 108, i64 16, i64 5, i64 %1, i64 %arg3), !insn.addr !2462
  %3 = trunc i64 %2 to i32, !insn.addr !2463
  %4 = icmp eq i32 %3, 0, !insn.addr !2463
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2464
  br i1 %4, label %dec_label_pc_433a, label %dec_label_pc_409f, !insn.addr !2464

dec_label_pc_409f:                                ; preds = %dec_label_pc_4060
  %5 = add i64 %arg4, 280, !insn.addr !2465
  %6 = inttoptr i64 %5 to i64*, !insn.addr !2465
  %7 = load i64, i64* %6, align 8, !insn.addr !2465
  %8 = load i64, i64* inttoptr (i64 16 to i64*), align 16, !insn.addr !2466
  %9 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !2467
  %10 = add i64 %arg1, 8, !insn.addr !2468
  %11 = inttoptr i64 %10 to i64*, !insn.addr !2468
  %12 = load i64, i64* %11, align 8, !insn.addr !2468
  %13 = add i64 %12, 16, !insn.addr !2469
  %14 = inttoptr i64 %13 to i64*, !insn.addr !2469
  %15 = load i64, i64* %14, align 8, !insn.addr !2469
  %16 = add i64 %9, 16, !insn.addr !2470
  %17 = inttoptr i64 %16 to i64*, !insn.addr !2470
  store i64 %15, i64* %17, align 8, !insn.addr !2470
  %18 = call i64 @lzma_alloc(i64 2216, i64 %9, i64 16, i64 %9), !insn.addr !2471
  %19 = add i64 %7, 24, !insn.addr !2472
  %20 = inttoptr i64 %19 to i64*, !insn.addr !2472
  store i64 %18, i64* %20, align 8, !insn.addr !2472
  %21 = icmp eq i64 %18, 0, !insn.addr !2473
  br i1 %21, label %dec_label_pc_40e7, label %dec_label_pc_40e5, !insn.addr !2474

dec_label_pc_40e5:                                ; preds = %dec_label_pc_409f
  %22 = inttoptr i64 %7 to i32*, !insn.addr !2475
  %23 = load i32, i32* %22, align 4, !insn.addr !2475
  %24 = add i32 %23, 1, !insn.addr !2475
  store i32 %24, i32* %22, align 4, !insn.addr !2475
  br label %dec_label_pc_40e7, !insn.addr !2475

dec_label_pc_40e7:                                ; preds = %dec_label_pc_40e5, %dec_label_pc_409f
  %25 = call i64 @lzma_alloc(i64 1064, i64 %9, i64 16, i64 %9), !insn.addr !2476
  %26 = add i64 %7, 88, !insn.addr !2477
  %27 = inttoptr i64 %26 to i64*, !insn.addr !2477
  store i64 %25, i64* %27, align 8, !insn.addr !2477
  %28 = icmp eq i64 %25, 0, !insn.addr !2478
  br i1 %28, label %dec_label_pc_4101, label %dec_label_pc_40ff, !insn.addr !2479

dec_label_pc_40ff:                                ; preds = %dec_label_pc_40e7
  %29 = inttoptr i64 %7 to i32*, !insn.addr !2480
  %30 = load i32, i32* %29, align 4, !insn.addr !2480
  %31 = add i32 %30, 1, !insn.addr !2480
  store i32 %31, i32* %29, align 4, !insn.addr !2480
  br label %dec_label_pc_4101, !insn.addr !2480

dec_label_pc_4101:                                ; preds = %dec_label_pc_40ff, %dec_label_pc_40e7
  %32 = call i64 @lzma_alloc(i64 1520, i64 %9, i64 16, i64 %9), !insn.addr !2481
  %33 = add i64 %7, 32, !insn.addr !2482
  %34 = inttoptr i64 %33 to i64*, !insn.addr !2482
  store i64 %32, i64* %34, align 8, !insn.addr !2482
  %35 = icmp eq i64 %32, 0, !insn.addr !2483
  br i1 %35, label %dec_label_pc_411b, label %dec_label_pc_4119, !insn.addr !2484

dec_label_pc_4119:                                ; preds = %dec_label_pc_4101
  %36 = inttoptr i64 %7 to i32*, !insn.addr !2485
  %37 = load i32, i32* %36, align 4, !insn.addr !2485
  %38 = add i32 %37, 1, !insn.addr !2485
  store i32 %38, i32* %36, align 4, !insn.addr !2485
  br label %dec_label_pc_411b, !insn.addr !2485

dec_label_pc_411b:                                ; preds = %dec_label_pc_4119, %dec_label_pc_4101
  %39 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !2486
  %40 = load i64, i64* %11, align 8, !insn.addr !2487
  %41 = add i64 %40, 32, !insn.addr !2488
  %42 = inttoptr i64 %41 to i64*, !insn.addr !2488
  %43 = load i64, i64* %42, align 8, !insn.addr !2488
  %44 = add i64 %40, 8, !insn.addr !2489
  %45 = inttoptr i64 %44 to i64*, !insn.addr !2489
  %46 = load i64, i64* %45, align 8, !insn.addr !2489
  %47 = add i64 %39, 16, !insn.addr !2490
  %48 = inttoptr i64 %47 to i64*, !insn.addr !2490
  store i64 %43, i64* %48, align 8, !insn.addr !2490
  %49 = call i64 @.Lcrc_init.0(i64 %46, i64 2656, i32 0, i64 %39), !insn.addr !2491
  %50 = icmp eq i64 %49, 0, !insn.addr !2492
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2493
  br i1 %50, label %dec_label_pc_433a, label %dec_label_pc_4154, !insn.addr !2493

dec_label_pc_4154:                                ; preds = %dec_label_pc_411b
  %51 = call i64 @lzma_alloc(i64 1248, i64 %39, i64 0, i64 %39), !insn.addr !2494
  %52 = add i64 %arg4, 104, !insn.addr !2495
  %53 = inttoptr i64 %52 to i64*, !insn.addr !2495
  store i64 %51, i64* %53, align 8, !insn.addr !2495
  %54 = icmp eq i64 %51, 0, !insn.addr !2496
  br i1 %54, label %dec_label_pc_4173, label %dec_label_pc_416c, !insn.addr !2497

dec_label_pc_416c:                                ; preds = %dec_label_pc_4154
  %55 = add i64 %arg4, 288, !insn.addr !2498
  %56 = inttoptr i64 %55 to i32*, !insn.addr !2498
  %57 = load i32, i32* %56, align 4, !insn.addr !2498
  %58 = add i32 %57, 1, !insn.addr !2498
  store i32 %58, i32* %56, align 4, !insn.addr !2498
  br label %dec_label_pc_4173, !insn.addr !2498

dec_label_pc_4173:                                ; preds = %dec_label_pc_416c, %dec_label_pc_4154
  %59 = load i64, i64* %11, align 8, !insn.addr !2499
  %60 = add i64 %49, 16, !insn.addr !2500
  %61 = inttoptr i64 %60 to i64*, !insn.addr !2500
  %62 = load i64, i64* %61, align 8, !insn.addr !2500
  %63 = add i64 %59, 8, !insn.addr !2501
  %64 = inttoptr i64 %63 to i64*, !insn.addr !2501
  %65 = load i64, i64* %64, align 8, !insn.addr !2501
  %66 = add i64 %49, 8, !insn.addr !2502
  %67 = inttoptr i64 %66 to i64*, !insn.addr !2502
  %68 = load i64, i64* %67, align 8, !insn.addr !2502
  %69 = inttoptr i64 %65 to i64*, !insn.addr !2503
  %70 = load i64, i64* %69, align 8, !insn.addr !2503
  %71 = add i64 %70, %68, !insn.addr !2503
  %72 = call i64 @.Lparse_bcj.0(i64 %65, i64 %71, i64 %62, i64 4, i64 %1), !insn.addr !2504
  %73 = add i64 %8, 2400, !insn.addr !2505
  %74 = trunc i64 %72 to i32, !insn.addr !2506
  %75 = icmp eq i32 %74, 0, !insn.addr !2506
  %76 = icmp eq i1 %75, false, !insn.addr !2507
  store i64 %73, i64* %rdx.0.reg2mem, !insn.addr !2507
  br i1 %76, label %dec_label_pc_41d0.preheader, label %dec_label_pc_41a4, !insn.addr !2507

dec_label_pc_41d0.preheader:                      ; preds = %dec_label_pc_4173
  %77 = load i64, i64* %11, align 8, !insn.addr !2508
  %78 = add i64 %77, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2509
  %79 = inttoptr i64 %78 to i64*, !insn.addr !2509
  %80 = load i64, i64* %79, align 8, !insn.addr !2509
  %81 = add i64 %80, 80, !insn.addr !2510
  %82 = inttoptr i64 %81 to i64*, !insn.addr !2510
  %83 = load i64, i64* %82, align 8, !insn.addr !2510
  %84 = add i64 %80, 88
  %85 = inttoptr i64 %84 to i64*
  store i64 %8, i64* %r13.07.reg2mem
  br label %dec_label_pc_41b9

dec_label_pc_41a4:                                ; preds = %dec_label_pc_41cc, %dec_label_pc_41e1, %dec_label_pc_421f, %dec_label_pc_4173
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %86 = load i64, i64* %53, align 8, !insn.addr !2511
  %87 = call i64 @lzma_free(i64 %86, i64 %39, i64 %rdx.0.reload), !insn.addr !2512
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2512
  br label %dec_label_pc_433a, !insn.addr !2512

dec_label_pc_41b9:                                ; preds = %dec_label_pc_41d0.preheader, %dec_label_pc_41cc
  %r13.07.reload = load i64, i64* %r13.07.reg2mem
  %88 = inttoptr i64 %r13.07.reload to i64*, !insn.addr !2513
  %89 = load i64, i64* %88, align 8, !insn.addr !2513
  %90 = icmp eq i64 %89, %83, !insn.addr !2513
  br i1 %90, label %dec_label_pc_41d7, label %dec_label_pc_41b9.dec_label_pc_41cc_crit_edge, !insn.addr !2514

dec_label_pc_41b9.dec_label_pc_41cc_crit_edge:    ; preds = %dec_label_pc_41b9
  %.pre = add i64 %r13.07.reload, 8, !insn.addr !2515
  store i64 %.pre, i64* %.pre-phi.reg2mem
  br label %dec_label_pc_41cc

dec_label_pc_41cc:                                ; preds = %dec_label_pc_41b9.dec_label_pc_41cc_crit_edge, %dec_label_pc_41d7
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %91 = icmp eq i64 %.pre-phi.reload, %73, !insn.addr !2516
  %92 = icmp eq i1 %91, false, !insn.addr !2517
  store i64 %73, i64* %rdx.0.reg2mem, !insn.addr !2517
  store i64 %.pre-phi.reload, i64* %r13.07.reg2mem, !insn.addr !2517
  br i1 %92, label %dec_label_pc_41b9, label %dec_label_pc_41a4, !insn.addr !2517

dec_label_pc_41d7:                                ; preds = %dec_label_pc_41b9
  %93 = load i64, i64* %85, align 8, !insn.addr !2518
  %94 = add i64 %r13.07.reload, 8
  %95 = inttoptr i64 %94 to i64*, !insn.addr !2519
  %96 = load i64, i64* %95, align 8, !insn.addr !2519
  %97 = icmp eq i64 %96, %93, !insn.addr !2519
  %98 = icmp eq i1 %97, false, !insn.addr !2520
  store i64 %94, i64* %.pre-phi.reg2mem, !insn.addr !2520
  br i1 %98, label %dec_label_pc_41cc, label %dec_label_pc_41e1, !insn.addr !2520

dec_label_pc_41e1:                                ; preds = %dec_label_pc_41d7
  %99 = add i64 %r13.07.reload, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2521
  %100 = add i64 %65, 16, !insn.addr !2522
  %101 = inttoptr i64 %100 to i64*, !insn.addr !2522
  %102 = load i64, i64* %101, align 8, !insn.addr !2522
  %103 = add i64 %r13.07.reload, 104, !insn.addr !2523
  %104 = icmp ult i64 %102, %99, !insn.addr !2524
  store i64 -1, i64* %rdx.0.reg2mem, !insn.addr !2525
  store i64 %102, i64* %rsi.04.reg2mem, !insn.addr !2525
  store i64 -1, i64* %rdx.23.reg2mem, !insn.addr !2525
  store i64 0, i64* %rcx.12.reg2mem, !insn.addr !2525
  br i1 %104, label %dec_label_pc_41f9, label %dec_label_pc_41a4, !insn.addr !2525

dec_label_pc_41f9:                                ; preds = %dec_label_pc_41e1, %dec_label_pc_4216
  %rcx.12.reload = load i64, i64* %rcx.12.reg2mem
  %rdx.23.reload = load i64, i64* %rdx.23.reg2mem
  %rsi.04.reload = load i64, i64* %rsi.04.reg2mem
  %105 = inttoptr i64 %rsi.04.reload to i64*, !insn.addr !2526
  %106 = load i64, i64* %105, align 8, !insn.addr !2526
  %107 = icmp ult i64 %106, %99, !insn.addr !2527
  store i64 %rcx.12.reload, i64* %rcx.0.reg2mem, !insn.addr !2528
  store i64 %rdx.23.reload, i64* %rdx.1.reg2mem, !insn.addr !2528
  br i1 %107, label %dec_label_pc_4216, label %dec_label_pc_4201, !insn.addr !2528

dec_label_pc_4201:                                ; preds = %dec_label_pc_41f9
  %108 = icmp ugt i64 %103, %rdx.23.reload
  %109 = select i1 %108, i64 %rdx.23.reload, i64 %103, !insn.addr !2529
  %110 = icmp ult i64 %106, %109, !insn.addr !2530
  %111 = select i1 %110, i64 %rsi.04.reload, i64 %rcx.12.reload, !insn.addr !2531
  %112 = select i1 %110, i64 %106, i64 %rdx.23.reload, !insn.addr !2532
  store i64 %111, i64* %rcx.0.reg2mem, !insn.addr !2532
  store i64 %112, i64* %rdx.1.reg2mem, !insn.addr !2532
  br label %dec_label_pc_4216, !insn.addr !2532

dec_label_pc_4216:                                ; preds = %dec_label_pc_4201, %dec_label_pc_41f9
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %113 = add i64 %rsi.04.reload, 8, !insn.addr !2533
  %114 = icmp ult i64 %113, %99, !insn.addr !2524
  store i64 %113, i64* %rsi.04.reg2mem, !insn.addr !2525
  store i64 %rdx.1.reload, i64* %rdx.23.reg2mem, !insn.addr !2525
  store i64 %rcx.0.reload, i64* %rcx.12.reg2mem, !insn.addr !2525
  br i1 %114, label %dec_label_pc_41f9, label %dec_label_pc_421f, !insn.addr !2525

dec_label_pc_421f:                                ; preds = %dec_label_pc_4216
  %115 = icmp eq i64 %rdx.1.reload, -1, !insn.addr !2534
  store i64 -1, i64* %rdx.0.reg2mem, !insn.addr !2535
  br i1 %115, label %dec_label_pc_41a4, label %dec_label_pc_4229, !insn.addr !2535

dec_label_pc_4229:                                ; preds = %dec_label_pc_421f
  %116 = add i64 %77, 16, !insn.addr !2536
  %117 = inttoptr i64 %116 to i64*, !insn.addr !2536
  %118 = load i64, i64* %117, align 8, !insn.addr !2536
  store i64 %118, i64* %17, align 8, !insn.addr !2537
  %119 = call i64 @lzma_alloc(i64 2744, i64 %9, i64 %rdx.1.reload, i64 %9), !insn.addr !2538
  %120 = icmp eq i64 %119, 0, !insn.addr !2539
  %121 = add i64 %7, 40, !insn.addr !2540
  %122 = inttoptr i64 %121 to i64*, !insn.addr !2540
  store i64 %119, i64* %122, align 8, !insn.addr !2540
  br i1 %120, label %dec_label_pc_4262, label %dec_label_pc_4260, !insn.addr !2541

dec_label_pc_4260:                                ; preds = %dec_label_pc_4229
  %123 = inttoptr i64 %7 to i32*, !insn.addr !2542
  %124 = load i32, i32* %123, align 4, !insn.addr !2542
  %125 = add i32 %124, 1, !insn.addr !2542
  store i32 %125, i32* %123, align 4, !insn.addr !2542
  br label %dec_label_pc_4262, !insn.addr !2542

dec_label_pc_4262:                                ; preds = %dec_label_pc_4260, %dec_label_pc_4229
  %126 = load i64, i64* inttoptr (i64 2760 to i64*), align 8, !insn.addr !2543
  %127 = sub i64 %rdx.1.reload, %126, !insn.addr !2544
  %128 = sub i64 %126, %rcx.0.reload, !insn.addr !2545
  %129 = icmp ugt i64 %126, %rcx.0.reload, !insn.addr !2546
  %130 = sub i64 %rcx.0.reload, %126
  %spec.select = select i1 %129, i64 %128, i64 %130
  %131 = and i64 %spec.select, 4294967295, !insn.addr !2547
  %132 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i32** @global_var_18 to i64), i64 2744) to i64*), align 8, !insn.addr !2548
  %133 = add i64 %131, %132, !insn.addr !2548
  %134 = add i64 %arg3, 248, !insn.addr !2549
  %135 = inttoptr i64 %134 to i64*, !insn.addr !2549
  store i64 %133, i64* %135, align 8, !insn.addr !2549
  %136 = load i64, i64* %61, align 8, !insn.addr !2550
  %137 = add i64 %136, %71, !insn.addr !2550
  %138 = call i64 @.Llzma_raw_encoder.0(i64 %71, i64 %137, i64 %127, i64 %arg3), !insn.addr !2551
  %139 = trunc i64 %138 to i32, !insn.addr !2552
  %140 = icmp eq i32 %139, 0, !insn.addr !2552
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2553
  br i1 %140, label %dec_label_pc_433a, label %dec_label_pc_42b1, !insn.addr !2553

dec_label_pc_42b1:                                ; preds = %dec_label_pc_4262
  %141 = add i64 %arg3, 256, !insn.addr !2554
  %142 = inttoptr i64 %141 to i64*, !insn.addr !2554
  %143 = load i64, i64* %142, align 8, !insn.addr !2554
  %144 = add i64 %arg3, 264, !insn.addr !2555
  %145 = inttoptr i64 %144 to i64*, !insn.addr !2555
  %146 = load i64, i64* %145, align 8, !insn.addr !2555
  %147 = add i64 %146, %143, !insn.addr !2556
  %148 = call i64 @.Llzma_raw_encoder.0(i64 %143, i64 %147, i64 %127, i64 %arg3), !insn.addr !2557
  %149 = trunc i64 %148 to i32, !insn.addr !2558
  %150 = icmp eq i32 %149, 0, !insn.addr !2558
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2559
  br i1 %150, label %dec_label_pc_433a, label %dec_label_pc_42d7, !insn.addr !2559

dec_label_pc_42d7:                                ; preds = %dec_label_pc_42b1
  %151 = load i64, i64* %11, align 8, !insn.addr !2560
  %152 = add i64 %151, 16, !insn.addr !2561
  %153 = inttoptr i64 %152 to i64*, !insn.addr !2561
  %154 = load i64, i64* %153, align 8, !insn.addr !2561
  store i64 %154, i64* %17, align 8, !insn.addr !2562
  %155 = call i64 @lzma_alloc(i64 2552, i64 %9, i64 %127, i64 %9), !insn.addr !2563
  %156 = add i64 %7, 48, !insn.addr !2564
  %157 = inttoptr i64 %156 to i64*, !insn.addr !2564
  store i64 %155, i64* %157, align 8, !insn.addr !2564
  %158 = icmp eq i64 %155, 0, !insn.addr !2565
  br i1 %158, label %dec_label_pc_4301, label %dec_label_pc_42ff, !insn.addr !2566

dec_label_pc_42ff:                                ; preds = %dec_label_pc_42d7
  %159 = inttoptr i64 %7 to i32*, !insn.addr !2567
  %160 = load i32, i32* %159, align 4, !insn.addr !2567
  %161 = add i32 %160, 1, !insn.addr !2567
  store i32 %161, i32* %159, align 4, !insn.addr !2567
  br label %dec_label_pc_4301, !insn.addr !2567

dec_label_pc_4301:                                ; preds = %dec_label_pc_42ff, %dec_label_pc_42d7
  %162 = call i64 @lzma_alloc(i64 1888, i64 %9, i64 %127, i64 %9), !insn.addr !2568
  %163 = add i64 %7, 96, !insn.addr !2569
  %164 = inttoptr i64 %163 to i64*, !insn.addr !2569
  store i64 %162, i64* %164, align 8, !insn.addr !2569
  %165 = icmp eq i64 %162, 0, !insn.addr !2570
  br i1 %165, label %dec_label_pc_431b, label %dec_label_pc_4319, !insn.addr !2571

dec_label_pc_4319:                                ; preds = %dec_label_pc_4301
  %166 = inttoptr i64 %7 to i32*, !insn.addr !2572
  %167 = load i32, i32* %166, align 4, !insn.addr !2572
  %168 = add i32 %167, 1, !insn.addr !2572
  store i32 %168, i32* %166, align 4, !insn.addr !2572
  br label %dec_label_pc_431b, !insn.addr !2572

dec_label_pc_431b:                                ; preds = %dec_label_pc_4319, %dec_label_pc_4301
  %169 = load i64, i64* %11, align 8, !insn.addr !2573
  %170 = add i64 %169, 32, !insn.addr !2574
  %171 = inttoptr i64 %170 to i64*, !insn.addr !2574
  %172 = load i64, i64* %171, align 8, !insn.addr !2574
  store i64 %172, i64* %48, align 8, !insn.addr !2575
  %173 = inttoptr i64 %arg2 to i64*, !insn.addr !2576
  store i64 %127, i64* %173, align 8, !insn.addr !2576
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !2577
  br label %dec_label_pc_433a, !insn.addr !2577

dec_label_pc_433a:                                ; preds = %dec_label_pc_4060, %dec_label_pc_411b, %dec_label_pc_41a4, %dec_label_pc_4262, %dec_label_pc_42b1, %dec_label_pc_431b
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2578

; uselistorder directives
  uselistorder i64 %162, { 1, 0 }
  uselistorder i64 %155, { 1, 0 }
  uselistorder i64 %143, { 1, 0 }
  uselistorder i64 %119, { 1, 0 }
  uselistorder i64 %rcx.0.reload, { 2, 0, 1, 3 }
  uselistorder i64 %rdx.1.reload, { 1, 0, 2, 3 }
  uselistorder i1 %110, { 1, 0 }
  uselistorder i64 %rsi.04.reload, { 2, 0, 1 }
  uselistorder i64 %rdx.23.reload, { 1, 3, 2, 0 }
  uselistorder i64 %rcx.12.reload, { 1, 0 }
  uselistorder i64 %103, { 1, 0 }
  uselistorder i64 %99, { 2, 1, 0 }
  uselistorder i64 %.pre-phi.reload, { 1, 0 }
  uselistorder i64 %r13.07.reload, { 4, 3, 1, 2, 0 }
  uselistorder i64 %73, { 0, 2, 1 }
  uselistorder i64 %71, { 1, 0, 2 }
  uselistorder i64 %65, { 0, 2, 1 }
  uselistorder i64 %51, { 1, 0 }
  uselistorder i64 %40, { 1, 0 }
  uselistorder i64 %39, { 0, 1, 2, 4, 3 }
  uselistorder i64 %32, { 1, 0 }
  uselistorder i64 %25, { 1, 0 }
  uselistorder i64 %18, { 1, 0 }
  uselistorder i64 %9, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i64 %7, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 0, 11 }
  uselistorder i64 %1, { 1, 0 }
  uselistorder i64* %rdx.0.reg2mem, { 4, 2, 1, 0, 3 }
  uselistorder i64* %r13.07.reg2mem, { 1, 0, 2 }
  uselistorder i64* %.pre-phi.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rsi.04.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rdx.23.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rcx.12.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i64 (i64, i64, i64, i64)* @.Llzma_raw_encoder.0, { 1, 0 }
  uselistorder i64 1064, { 1, 0 }
  uselistorder label %dec_label_pc_433a, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_41f9, { 1, 0 }
  uselistorder label %dec_label_pc_41cc, { 1, 0 }
  uselistorder label %dec_label_pc_41b9, { 1, 0 }
  uselistorder label %dec_label_pc_41a4, { 2, 1, 0, 3 }
}

define i64 @.Llzma_filter_flags_decode.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_4350:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i8
  %storemerge1.reg2mem = alloca i64, !insn.addr !2579
  %rdx.3.reg2mem = alloca i64, !insn.addr !2579
  %storemerge.in.pre-phi.reg2mem = alloca i64*, !insn.addr !2579
  %rdx.0.lcssa.reg2mem = alloca i64, !insn.addr !2579
  %r14.0.ph.lcssa.reg2mem = alloca i64, !insn.addr !2579
  %r14.1.reg2mem = alloca i64, !insn.addr !2579
  %rdx.1.reg2mem = alloca i64, !insn.addr !2579
  %r13.04.reg2mem = alloca i64, !insn.addr !2579
  %r13.0.ph8.reg2mem = alloca i64, !insn.addr !2579
  %r14.0.ph9.reg2mem = alloca i64, !insn.addr !2579
  %3 = load i8, i8* %2
  %4 = load i8, i8* %2
  %5 = load i64, i64* %0
  %6 = load i64, i64* %0
  %7 = load i32, i32* %1
  %8 = load i8, i8* %2
  %stack_var_-128 = alloca i64, align 8
  %stack_var_-136 = alloca i64, align 8
  %stack_var_-140 = alloca i32, align 4
  store i32 0, i32* %stack_var_-140, align 4, !insn.addr !2580
  store i64 0, i64* %stack_var_-136, align 8, !insn.addr !2581
  %9 = call i64 @.Lcrc_init.0(i64 %arg1, i64 2712, i32 0, i64 %arg4), !insn.addr !2582
  %10 = icmp eq i64 %9, 0, !insn.addr !2583
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !2584
  br i1 %10, label %dec_label_pc_45aa, label %dec_label_pc_4393, !insn.addr !2584

dec_label_pc_4393:                                ; preds = %dec_label_pc_4350
  %11 = ptrtoint i32* %stack_var_-140 to i64, !insn.addr !2585
  store i32 1704, i32* %stack_var_-140, align 4, !insn.addr !2586
  %12 = call i64 @.Llzip_decode.0(i64 %arg1, i64 %11, i64 0, i64 %arg4), !insn.addr !2587
  %13 = icmp eq i64 %12, 0, !insn.addr !2588
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !2589
  br i1 %13, label %dec_label_pc_45aa, label %dec_label_pc_43bc, !insn.addr !2589

dec_label_pc_43bc:                                ; preds = %dec_label_pc_4393
  %14 = call i64 @.Lcrc_init.0(i64 %arg2, i64 2512, i32 0, i64 %arg4), !insn.addr !2590
  %15 = call i64 @.Llzma_check_update.0(i64 %arg1, i64* nonnull %stack_var_-136, i64 0, i64 %arg4), !insn.addr !2591
  %16 = icmp eq i64 %15, 0, !insn.addr !2592
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !2593
  br i1 %16, label %dec_label_pc_45aa, label %dec_label_pc_43e8, !insn.addr !2593

dec_label_pc_43e8:                                ; preds = %dec_label_pc_43bc
  %17 = load i64, i64* %stack_var_-136, align 8, !insn.addr !2594
  %18 = add i64 %17, %15, !insn.addr !2595
  %19 = call i64 @.Lstream_encode.1(i64 %15, i64 %18, i64 %12), !insn.addr !2596
  %20 = icmp eq i64 %19, 0, !insn.addr !2597
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !2598
  br i1 %20, label %dec_label_pc_45aa, label %dec_label_pc_4406, !insn.addr !2598

dec_label_pc_4406:                                ; preds = %dec_label_pc_43e8
  %21 = icmp eq i64 %14, 0, !insn.addr !2599
  br i1 %21, label %dec_label_pc_441c, label %dec_label_pc_440b, !insn.addr !2600

dec_label_pc_440b:                                ; preds = %dec_label_pc_4406
  %22 = add i64 %14, 8, !insn.addr !2601
  %23 = inttoptr i64 %22 to i64*, !insn.addr !2601
  %24 = load i64, i64* %23, align 8, !insn.addr !2601
  %25 = add i64 %24, %18, !insn.addr !2602
  %26 = add i64 %arg4, 288, !insn.addr !2603
  %27 = inttoptr i64 %26 to i32*, !insn.addr !2603
  %28 = load i32, i32* %27, align 4, !insn.addr !2603
  %29 = add i32 %28, 1, !insn.addr !2603
  store i32 %29, i32* %27, align 4, !insn.addr !2603
  %30 = add i64 %arg4, 48, !insn.addr !2604
  %31 = inttoptr i64 %30 to i64*, !insn.addr !2604
  store i64 %25, i64* %31, align 8, !insn.addr !2604
  br label %dec_label_pc_441c, !insn.addr !2604

dec_label_pc_441c:                                ; preds = %dec_label_pc_440b, %dec_label_pc_4406
  %32 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !2605
  call void @__asm_rep_stosd_memset(i8* nonnull %32, i32 0, i64 22), !insn.addr !2605
  %33 = add i64 %9, 8, !insn.addr !2606
  %34 = inttoptr i64 %33 to i64*, !insn.addr !2606
  %35 = load i64, i64* %34, align 8, !insn.addr !2606
  %36 = add i64 %9, 16, !insn.addr !2607
  %37 = inttoptr i64 %36 to i64*, !insn.addr !2607
  %38 = load i64, i64* %37, align 8, !insn.addr !2607
  %39 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !2608
  %40 = add i64 %39, 16, !insn.addr !2609
  %41 = inttoptr i64 %40 to i64*, !insn.addr !2609
  store i64 %arg2, i64* %41, align 8, !insn.addr !2609
  %42 = call i64 @lzma_alloc(i64 3344, i64 %39, i64 %12, i64 %arg1), !insn.addr !2610
  %43 = add i64 %arg4, 144, !insn.addr !2611
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44, align 8, !insn.addr !2611
  %45 = icmp eq i64 %42, 0, !insn.addr !2612
  br i1 %45, label %dec_label_pc_448a, label %dec_label_pc_4484, !insn.addr !2613

dec_label_pc_4484:                                ; preds = %dec_label_pc_441c
  %46 = add i64 %arg4, 288, !insn.addr !2614
  %47 = inttoptr i64 %46 to i32*, !insn.addr !2614
  %48 = load i32, i32* %47, align 4, !insn.addr !2614
  %49 = add i32 %48, 1, !insn.addr !2614
  store i32 %49, i32* %47, align 4, !insn.addr !2614
  br label %dec_label_pc_448a, !insn.addr !2614

dec_label_pc_448a:                                ; preds = %dec_label_pc_4484, %dec_label_pc_441c
  %50 = icmp ugt i64 %19, 127, !insn.addr !2615
  %51 = icmp eq i1 %50, false, !insn.addr !2616
  store i64* %44, i64** %storemerge.in.pre-phi.reg2mem, !insn.addr !2616
  store i64 %12, i64* %rdx.3.reg2mem, !insn.addr !2616
  br i1 %51, label %dec_label_pc_4527, label %dec_label_pc_4496.lr.ph.lr.ph, !insn.addr !2616

dec_label_pc_4496.lr.ph.lr.ph:                    ; preds = %dec_label_pc_448a
  %52 = add i64 %19, -128, !insn.addr !2617
  %53 = add i64 %35, 1, !insn.addr !2618
  %54 = add i64 %53, %38, !insn.addr !2607
  %55 = ptrtoint i64* %stack_var_-128 to i64, !insn.addr !2619
  %56 = urem i8 %8, 2
  %57 = icmp eq i8 %56, 0
  %58 = and i32 %7, -16711936
  %59 = zext i32 %58 to i64
  %60 = icmp eq i32 %58, 83886080
  %61 = icmp eq i1 %60, false
  %62 = add i64 %6, %5
  %63 = zext i8 %4 to i64
  %64 = or i64 %59, %63
  %65 = and i64 %64, zext (i32 ptrtoint (i32** @global_var_48 to i32) to i64)
  %66 = trunc i64 %65 to i8
  %67 = icmp eq i8 %66, ptrtoint (i32** @global_var_48 to i8)
  %68 = zext i8 %3 to i64
  %69 = add nuw nsw i64 %68, 1
  store i64 0, i64* %r14.0.ph9.reg2mem
  store i64 %52, i64* %r13.0.ph8.reg2mem
  br label %dec_label_pc_4496.lr.ph

dec_label_pc_4496.lr.ph:                          ; preds = %dec_label_pc_4496.lr.ph.lr.ph, %dec_label_pc_4509
  %r13.0.ph8.reload = load i64, i64* %r13.0.ph8.reg2mem
  %r14.0.ph9.reload = load i64, i64* %r14.0.ph9.reg2mem
  store i64 %r13.0.ph8.reload, i64* %r13.04.reg2mem
  br label %dec_label_pc_4496

dec_label_pc_448d:                                ; preds = %dec_label_pc_4496
  %70 = add i64 %r13.04.reload, 1, !insn.addr !2620
  %71 = icmp ult i64 %70, %19, !insn.addr !2615
  %72 = icmp eq i1 %71, false, !insn.addr !2616
  store i64 %70, i64* %r13.04.reg2mem, !insn.addr !2616
  store i64 %r14.0.ph9.reload, i64* %r14.0.ph.lcssa.reg2mem, !insn.addr !2616
  store i64 %55, i64* %rdx.0.lcssa.reg2mem, !insn.addr !2616
  br i1 %72, label %dec_label_pc_451b, label %dec_label_pc_4496, !insn.addr !2616

dec_label_pc_4496:                                ; preds = %dec_label_pc_4496.lr.ph, %dec_label_pc_448d
  %r13.04.reload = load i64, i64* %r13.04.reg2mem
  %73 = call i64 @.Llzma_properties_size.0(i64 %r13.04.reload, i64 %19, i64 %55, i64 267, i64 0), !insn.addr !2621
  %74 = trunc i64 %73 to i32, !insn.addr !2622
  %75 = icmp eq i32 %74, 0, !insn.addr !2622
  br i1 %75, label %dec_label_pc_448d, label %dec_label_pc_44bf, !insn.addr !2623

dec_label_pc_44bf:                                ; preds = %dec_label_pc_4496
  %76 = load i64, i64* %stack_var_-128, align 8, !insn.addr !2624
  store i64 %55, i64* %rdx.1.reg2mem, !insn.addr !2625
  store i64 %r14.0.ph9.reload, i64* %r14.1.reg2mem, !insn.addr !2625
  br i1 %57, label %dec_label_pc_4509, label %dec_label_pc_44cb, !insn.addr !2625

dec_label_pc_44cb:                                ; preds = %dec_label_pc_44bf
  %77 = add i64 %62, %76
  %rax.0 = select i1 %61, i64 %6, i64 %77
  %78 = icmp ult i64 %53, %rax.0, !insn.addr !2626
  %79 = icmp eq i1 %78, false, !insn.addr !2627
  %or.cond = or i1 %67, %79
  store i64 %65, i64* %rdx.1.reg2mem, !insn.addr !2628
  store i64 %r14.0.ph9.reload, i64* %r14.1.reg2mem, !insn.addr !2628
  br i1 %or.cond, label %dec_label_pc_4509, label %dec_label_pc_44fc, !insn.addr !2628

dec_label_pc_44fc:                                ; preds = %dec_label_pc_44cb
  %80 = add i64 %rax.0, 4, !insn.addr !2629
  %81 = icmp ult i64 %54, %80, !insn.addr !2630
  %82 = icmp eq i1 %81, false, !insn.addr !2631
  %83 = select i1 %82, i64 %rax.0, i64 %r14.0.ph9.reload, !insn.addr !2631
  store i64 %80, i64* %rdx.1.reg2mem, !insn.addr !2631
  store i64 %83, i64* %r14.1.reg2mem, !insn.addr !2631
  br label %dec_label_pc_4509, !insn.addr !2631

dec_label_pc_4509:                                ; preds = %dec_label_pc_44fc, %dec_label_pc_44cb, %dec_label_pc_44bf
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %84 = add i64 %69, %76, !insn.addr !2632
  %85 = icmp ult i64 %84, %19, !insn.addr !2615
  %86 = icmp eq i1 %85, false, !insn.addr !2616
  store i64 %r14.1.reload, i64* %r14.0.ph9.reg2mem, !insn.addr !2616
  store i64 %84, i64* %r13.0.ph8.reg2mem, !insn.addr !2616
  store i64 %r14.1.reload, i64* %r14.0.ph.lcssa.reg2mem, !insn.addr !2616
  store i64 %rdx.1.reload, i64* %rdx.0.lcssa.reg2mem, !insn.addr !2616
  br i1 %86, label %dec_label_pc_451b, label %dec_label_pc_4496.lr.ph, !insn.addr !2616

dec_label_pc_451b:                                ; preds = %dec_label_pc_4509, %dec_label_pc_448d
  %rdx.0.lcssa.reload = load i64, i64* %rdx.0.lcssa.reg2mem
  %r14.0.ph.lcssa.reload = load i64, i64* %r14.0.ph.lcssa.reg2mem
  %87 = icmp eq i64 %r14.0.ph.lcssa.reload, 0, !insn.addr !2633
  %88 = icmp eq i1 %87, false, !insn.addr !2634
  store i64* %44, i64** %storemerge.in.pre-phi.reg2mem, !insn.addr !2634
  store i64 %rdx.0.lcssa.reload, i64* %rdx.3.reg2mem, !insn.addr !2634
  br i1 %88, label %dec_label_pc_4533, label %dec_label_pc_4527, !insn.addr !2634

dec_label_pc_4527:                                ; preds = %dec_label_pc_448a, %dec_label_pc_451b, %dec_label_pc_4533, %dec_label_pc_4582
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %storemerge.in.pre-phi.reload = load i64*, i64** %storemerge.in.pre-phi.reg2mem
  %storemerge = load i64, i64* %storemerge.in.pre-phi.reload, align 8
  %89 = call i64 @lzma_free(i64 %storemerge, i64 %39, i64 %rdx.3.reload), !insn.addr !2635
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !2635
  br label %dec_label_pc_45aa, !insn.addr !2635

dec_label_pc_4533:                                ; preds = %dec_label_pc_451b
  %90 = add i64 %arg3, 256, !insn.addr !2636
  %91 = inttoptr i64 %90 to i64*, !insn.addr !2636
  %92 = load i64, i64* %91, align 8, !insn.addr !2636
  %93 = add i64 %arg3, 264, !insn.addr !2637
  %94 = inttoptr i64 %93 to i64*, !insn.addr !2637
  %95 = load i64, i64* %94, align 8, !insn.addr !2637
  %96 = add i64 %95, %92, !insn.addr !2638
  %97 = call i64 @.Llzma_properties_size.0(i64 %92, i64 %96, i64 0, i64 267, i64 %r14.0.ph.lcssa.reload), !insn.addr !2639
  %98 = trunc i64 %97 to i32, !insn.addr !2640
  %99 = icmp eq i32 %98, 0, !insn.addr !2640
  store i64* %44, i64** %storemerge.in.pre-phi.reg2mem, !insn.addr !2641
  store i64 0, i64* %rdx.3.reg2mem, !insn.addr !2641
  br i1 %99, label %dec_label_pc_4527, label %dec_label_pc_4559, !insn.addr !2641

dec_label_pc_4559:                                ; preds = %dec_label_pc_4533
  %100 = call i64 @lzma_alloc(i64 1128, i64 %39, i64 0, i64 267), !insn.addr !2642
  %101 = add i64 %arg4, 56, !insn.addr !2643
  %102 = inttoptr i64 %101 to i64*
  store i64 %100, i64* %102, align 8, !insn.addr !2643
  %103 = icmp eq i64 %100, 0, !insn.addr !2644
  br i1 %103, label %dec_label_pc_4575, label %dec_label_pc_456f, !insn.addr !2645

dec_label_pc_456f:                                ; preds = %dec_label_pc_4559
  %104 = add i64 %arg4, 288, !insn.addr !2646
  %105 = inttoptr i64 %104 to i32*, !insn.addr !2646
  %106 = load i32, i32* %105, align 4, !insn.addr !2646
  %107 = add i32 %106, 1, !insn.addr !2646
  store i32 %107, i32* %105, align 4, !insn.addr !2646
  br label %dec_label_pc_4575, !insn.addr !2646

dec_label_pc_4575:                                ; preds = %dec_label_pc_456f, %dec_label_pc_4559
  %108 = inttoptr i64 %r14.0.ph.lcssa.reload to i32*, !insn.addr !2647
  %109 = load i32, i32* %108, align 4, !insn.addr !2647
  %110 = icmp eq i32 %109, 0, !insn.addr !2647
  %111 = icmp eq i1 %110, false, !insn.addr !2648
  br i1 %111, label %dec_label_pc_4582, label %dec_label_pc_457b, !insn.addr !2648

dec_label_pc_457b:                                ; preds = %dec_label_pc_4575
  %112 = add i64 %r14.0.ph.lcssa.reload, -8, !insn.addr !2649
  %113 = inttoptr i64 %112 to i64*, !insn.addr !2649
  %114 = load i64, i64* %113, align 8, !insn.addr !2649
  %115 = icmp eq i64 %114, 0, !insn.addr !2649
  br i1 %115, label %dec_label_pc_4597, label %dec_label_pc_4582, !insn.addr !2650

dec_label_pc_4582:                                ; preds = %dec_label_pc_457b, %dec_label_pc_4575
  %116 = load i64, i64* %44, align 8, !insn.addr !2651
  %117 = call i64 @lzma_free(i64 %116, i64 %39, i64 0), !insn.addr !2652
  store i64* %102, i64** %storemerge.in.pre-phi.reg2mem, !insn.addr !2653
  store i64 0, i64* %rdx.3.reg2mem, !insn.addr !2653
  br label %dec_label_pc_4527, !insn.addr !2653

dec_label_pc_4597:                                ; preds = %dec_label_pc_457b
  %118 = add i64 %arg3, 120, !insn.addr !2654
  %119 = inttoptr i64 %118 to i64*, !insn.addr !2654
  store i64 %r14.0.ph.lcssa.reload, i64* %119, align 8, !insn.addr !2654
  %120 = add i64 %arg3, 112, !insn.addr !2655
  %121 = inttoptr i64 %120 to i64*, !insn.addr !2655
  store i64 %112, i64* %121, align 8, !insn.addr !2655
  store i64 1, i64* %storemerge1.reg2mem, !insn.addr !2656
  br label %dec_label_pc_45aa, !insn.addr !2656

dec_label_pc_45aa:                                ; preds = %dec_label_pc_4350, %dec_label_pc_4393, %dec_label_pc_43bc, %dec_label_pc_43e8, %dec_label_pc_4527, %dec_label_pc_4597
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  ret i64 %storemerge1.reload, !insn.addr !2657

; uselistorder directives
  uselistorder i64 %100, { 1, 0 }
  uselistorder i64 %92, { 1, 0 }
  uselistorder i64 %r14.0.ph.lcssa.reload, { 2, 3, 4, 1, 0 }
  uselistorder i64 %rax.0, { 2, 1, 0 }
  uselistorder i64 %r14.0.ph9.reload, { 3, 1, 2, 0 }
  uselistorder i64 %55, { 1, 2, 0 }
  uselistorder i64* %44, { 3, 1, 2, 0, 4 }
  uselistorder i64 %42, { 1, 0 }
  uselistorder i64 %19, { 1, 3, 2, 4, 0, 5 }
  uselistorder i64 %15, { 1, 0, 2 }
  uselistorder i64 %14, { 1, 0 }
  uselistorder i64 %9, { 1, 0, 2 }
  uselistorder i64* %stack_var_-136, { 1, 0, 2 }
  uselistorder i64* %stack_var_-128, { 1, 2, 0 }
  uselistorder i64* %r14.0.ph9.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r13.0.ph8.reg2mem, { 1, 0, 2 }
  uselistorder i64** %storemerge.in.pre-phi.reg2mem, { 2, 3, 0, 4, 1 }
  uselistorder i64* %rdx.3.reg2mem, { 2, 3, 0, 4, 1 }
  uselistorder i64* %storemerge1.reg2mem, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* %2, { 2, 1, 0 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i8 ptrtoint (i32** @global_var_48 to i8), { 2, 3, 4, 5, 0, 6, 7, 8, 1, 10, 9, 12, 11 }
  uselistorder i64 (i64, i64, i64)* @.Lstream_encode.1, { 1, 0, 2 }
  uselistorder i64 %arg4, { 3, 4, 2, 5, 0, 1, 7, 6, 8, 9 }
  uselistorder i64 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_45aa, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_4527, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_4496, { 1, 0 }
  uselistorder label %dec_label_pc_4496.lr.ph, { 1, 0 }
}

define i64 @.Llzma_index_buffer_encode.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_45c0:
  %0 = alloca i64
  %rax.0.reg2mem = alloca i64, !insn.addr !2658
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %rdx = alloca i64, align 8
  store i64 %arg3, i64* %rdx, align 8
  %3 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !2659
  %4 = call i64 @.Lget_literal_price.part.0(i64 1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %2, i64 %1), !insn.addr !2660
  %5 = trunc i64 %4 to i32, !insn.addr !2661
  %6 = icmp eq i32 %5, 0, !insn.addr !2661
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !2662
  br i1 %6, label %dec_label_pc_462d, label %dec_label_pc_45f1, !insn.addr !2662

dec_label_pc_45f1:                                ; preds = %dec_label_pc_45c0
  %7 = add i64 %3, 16, !insn.addr !2663
  %8 = inttoptr i64 %7 to i64*, !insn.addr !2663
  store i64 %arg2, i64* %8, align 8, !insn.addr !2663
  %9 = load i64, i64* %rdx, align 8, !insn.addr !2664
  %10 = call i64 @lzma_alloc(i64 776, i64 %3, i64 %9, i64 %arg4), !insn.addr !2664
  %11 = add i64 %arg3, ptrtoint (i32** @global_var_48 to i64), !insn.addr !2665
  %12 = inttoptr i64 %11 to i64*, !insn.addr !2665
  store i64 %10, i64* %12, align 8, !insn.addr !2665
  %13 = icmp eq i64 %10, 0, !insn.addr !2666
  %.pre1 = bitcast i64* %rdx to i32*
  br i1 %13, label %dec_label_pc_460d, label %dec_label_pc_460b, !insn.addr !2667

dec_label_pc_460b:                                ; preds = %dec_label_pc_45f1
  %14 = load i32, i32* %.pre1, align 8, !insn.addr !2668
  %15 = add i32 %14, 1, !insn.addr !2668
  %16 = inttoptr i64 %arg3 to i32*, !insn.addr !2668
  store i32 %15, i32* %16, align 4, !insn.addr !2668
  br label %dec_label_pc_460d, !insn.addr !2668

dec_label_pc_460d:                                ; preds = %dec_label_pc_45f1, %dec_label_pc_460b
  %17 = load i64, i64* %rdx, align 8, !insn.addr !2669
  %18 = call i64 @lzma_alloc(i64 2168, i64 %3, i64 %17, i64 %arg4), !insn.addr !2669
  %19 = add i64 %arg3, 80, !insn.addr !2670
  %20 = inttoptr i64 %19 to i64*, !insn.addr !2670
  store i64 %18, i64* %20, align 8, !insn.addr !2670
  %21 = icmp eq i64 %18, 0, !insn.addr !2671
  br i1 %21, label %dec_label_pc_4625, label %dec_label_pc_4623, !insn.addr !2672

dec_label_pc_4623:                                ; preds = %dec_label_pc_460d
  %22 = load i32, i32* %.pre1, align 8, !insn.addr !2673
  %23 = add i32 %22, 1, !insn.addr !2673
  %24 = inttoptr i64 %arg3 to i32*, !insn.addr !2673
  store i32 %23, i32* %24, align 4, !insn.addr !2673
  br label %dec_label_pc_4625, !insn.addr !2673

dec_label_pc_4625:                                ; preds = %dec_label_pc_460d, %dec_label_pc_4623
  %25 = load i32, i32* %.pre1, align 8, !insn.addr !2674
  %26 = icmp eq i32 %25, 2, !insn.addr !2674
  %27 = zext i1 %26 to i64, !insn.addr !2675
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !2675
  br label %dec_label_pc_462d, !insn.addr !2675

dec_label_pc_462d:                                ; preds = %dec_label_pc_4625, %dec_label_pc_45c0
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2676

; uselistorder directives
  uselistorder i64 %18, { 1, 0 }
  uselistorder i64 %10, { 1, 0 }
  uselistorder i64* %rdx, { 2, 0, 1, 3 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 %arg3, { 1, 2, 0, 3, 4, 5 }
  uselistorder label %dec_label_pc_4625, { 1, 0 }
  uselistorder label %dec_label_pc_460d, { 1, 0 }
}

define i64 @.Llzma_index_encoder_init.1(i64 %arg1, i64* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_4640:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !2677
  %rax.2.reg2mem = alloca i64, !insn.addr !2677
  %rcx.1.lcssa24.reg2mem = alloca i64, !insn.addr !2677
  %rdx.0.lcssa25.reg2mem = alloca i64, !insn.addr !2677
  %rsi.1.lcssa26.reg2mem = alloca i64, !insn.addr !2677
  %rsi.3.reg2mem = alloca i64, !insn.addr !2677
  %rdx.1.reg2mem = alloca i64, !insn.addr !2677
  %rcx.2.reg2mem = alloca i64, !insn.addr !2677
  %rsi.210.reg2mem = alloca i64, !insn.addr !2677
  %storemerge111.reg2mem = alloca i64, !insn.addr !2677
  %.reg2mem41 = alloca i8, !insn.addr !2677
  %rsi.0.reg2mem = alloca i64, !insn.addr !2677
  %rcx.0.reg2mem = alloca i64, !insn.addr !2677
  %rcx.114.reg2mem = alloca i64, !insn.addr !2677
  %rdx.015.reg2mem = alloca i64, !insn.addr !2677
  %r12.016.reg2mem = alloca i64, !insn.addr !2677
  %.reg2mem = alloca i64*, !insn.addr !2677
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %3 = load i64, i64* %0
  %stack_var_-48 = alloca i64, align 8
  %4 = icmp eq i64 %arg1, 0, !insn.addr !2678
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2679
  br i1 %4, label %dec_label_pc_4a01, label %dec_label_pc_464d, !insn.addr !2679

dec_label_pc_464d:                                ; preds = %dec_label_pc_4640
  %5 = ptrtoint i64* %arg2 to i64
  %6 = add i64 %5, 8, !insn.addr !2680
  %7 = inttoptr i64 %6 to i64*, !insn.addr !2680
  %8 = load i64, i64* %7, align 8, !insn.addr !2680
  %9 = add i64 %8, 8, !insn.addr !2681
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2681
  %11 = load i64, i64* %10, align 8, !insn.addr !2681
  %12 = call i64 @.Lcrc_init.0(i64 %11, i64 1464, i32 0, i64 %3), !insn.addr !2682
  %13 = icmp eq i64 %12, 0, !insn.addr !2683
  %14 = icmp eq i1 %13, false, !insn.addr !2684
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2684
  br i1 %14, label %dec_label_pc_46bf.preheader, label %dec_label_pc_4a01, !insn.addr !2684

dec_label_pc_46bf.preheader:                      ; preds = %dec_label_pc_464d
  %15 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2685
  %16 = inttoptr i64 %15 to i64*, !insn.addr !2685
  %17 = load i64, i64* %16, align 8, !insn.addr !2685
  %18 = icmp eq i64 %17, 0, !insn.addr !2685
  %19 = icmp eq i1 %18, false, !insn.addr !2686
  store i64 1464, i64* %rsi.1.lcssa26.reg2mem, !insn.addr !2686
  store i64 0, i64* %rdx.0.lcssa25.reg2mem, !insn.addr !2686
  br i1 %19, label %dec_label_pc_4683.lr.ph, label %dec_label_pc_4848, !insn.addr !2686

dec_label_pc_4683.lr.ph:                          ; preds = %dec_label_pc_46bf.preheader
  %20 = add i64 %12, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = add i64 %12, 16
  %23 = inttoptr i64 %22 to i64*
  store i64* %16, i64** %.reg2mem
  store i64 %arg1, i64* %r12.016.reg2mem
  store i64 0, i64* %rdx.015.reg2mem
  br label %dec_label_pc_4683

dec_label_pc_4683:                                ; preds = %dec_label_pc_4683.lr.ph, %dec_label_pc_46bf.backedge
  %r12.016.reload = load i64, i64* %r12.016.reg2mem
  %24 = inttoptr i64 %r12.016.reload to i64*, !insn.addr !2687
  %25 = load i64, i64* %24, align 8, !insn.addr !2687
  %26 = icmp eq i64 %25, 0, !insn.addr !2687
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2688
  br i1 %26, label %dec_label_pc_4a01, label %dec_label_pc_468a, !insn.addr !2688

dec_label_pc_468a:                                ; preds = %dec_label_pc_4683
  %27 = add i64 %r12.016.reload, 8, !insn.addr !2689
  %28 = inttoptr i64 %27 to i64*, !insn.addr !2689
  %29 = load i64, i64* %28, align 8, !insn.addr !2689
  %30 = icmp eq i64 %29, 0, !insn.addr !2690
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2691
  br i1 %30, label %dec_label_pc_4a01, label %dec_label_pc_4694, !insn.addr !2691

dec_label_pc_4694:                                ; preds = %dec_label_pc_468a
  %31 = add i64 %r12.016.reload, 16, !insn.addr !2692
  %32 = inttoptr i64 %31 to i64*, !insn.addr !2692
  %33 = load i64, i64* %32, align 8, !insn.addr !2692
  %34 = icmp eq i64 %33, 0, !insn.addr !2692
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2693
  br i1 %34, label %dec_label_pc_4a01, label %dec_label_pc_469c, !insn.addr !2693

dec_label_pc_469c:                                ; preds = %dec_label_pc_4694
  %rcx.114.reload = load i64, i64* %rcx.114.reg2mem
  %rdx.015.reload = load i64, i64* %rdx.015.reg2mem
  %.reload = load i64*, i64** %.reg2mem
  %35 = inttoptr i64 %29 to i8*
  %36 = load i8, i8* %35, align 1, !insn.addr !2694
  %37 = icmp eq i8 %36, 0, !insn.addr !2694
  %38 = icmp eq i1 %37, false, !insn.addr !2695
  store i8 %36, i8* %.reg2mem41, !insn.addr !2695
  store i64 %29, i64* %storemerge111.reg2mem, !insn.addr !2695
  store i64 %29, i64* %rsi.210.reg2mem, !insn.addr !2695
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2695
  br i1 %38, label %dec_label_pc_46d5, label %dec_label_pc_4a01, !insn.addr !2695

dec_label_pc_46ad:                                ; preds = %dec_label_pc_46f5, %dec_label_pc_47d8, %dec_label_pc_47c4, %dec_label_pc_47b0, %dec_label_pc_476d, %dec_label_pc_4759, %dec_label_pc_4710
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %39 = load i64, i64* %.reload, align 8, !insn.addr !2696
  %40 = icmp eq i64 %rsi.0.reload, 0, !insn.addr !2697
  %41 = icmp eq i1 %40, false, !insn.addr !2698
  br i1 %41, label %dec_label_pc_47e1, label %dec_label_pc_46bf.backedge, !insn.addr !2698

dec_label_pc_46bf.backedge:                       ; preds = %dec_label_pc_46ad, %dec_label_pc_47e1, %dec_label_pc_47ec, %dec_label_pc_47f7, %dec_label_pc_4802, %dec_label_pc_480d
  %42 = add i64 %39, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2685
  %43 = inttoptr i64 %42 to i64*, !insn.addr !2685
  %44 = load i64, i64* %43, align 8, !insn.addr !2685
  %45 = icmp eq i64 %44, 0, !insn.addr !2685
  %46 = icmp eq i1 %45, false, !insn.addr !2686
  store i64* %43, i64** %.reg2mem, !insn.addr !2686
  store i64 %39, i64* %r12.016.reg2mem, !insn.addr !2686
  store i64 %47, i64* %rdx.015.reg2mem, !insn.addr !2686
  store i64 %rcx.0.reload, i64* %rcx.114.reg2mem, !insn.addr !2686
  br i1 %46, label %dec_label_pc_4683, label %dec_label_pc_483b, !insn.addr !2686

dec_label_pc_46d5:                                ; preds = %dec_label_pc_469c, %dec_label_pc_46d5
  %rsi.210.reload = load i64, i64* %rsi.210.reg2mem
  %storemerge111.reload = load i64, i64* %storemerge111.reg2mem
  %.reload42 = load i8, i8* %.reg2mem41
  %47 = add i64 %rsi.210.reload, 1, !insn.addr !2699
  %48 = icmp eq i8 %.reload42, 47, !insn.addr !2700
  %49 = select i1 %48, i64 %47, i64 %storemerge111.reload, !insn.addr !2701
  %50 = inttoptr i64 %47 to i8*, !insn.addr !2702
  %51 = load i8, i8* %50, align 1, !insn.addr !2702
  %52 = icmp eq i8 %51, 0, !insn.addr !2703
  store i8 %51, i8* %.reg2mem41, !insn.addr !2704
  store i64 %49, i64* %storemerge111.reg2mem, !insn.addr !2704
  store i64 %47, i64* %rsi.210.reg2mem, !insn.addr !2704
  br i1 %52, label %dec_label_pc_46e0, label %dec_label_pc_46d5, !insn.addr !2704

dec_label_pc_46e0:                                ; preds = %dec_label_pc_46d5
  %53 = trunc i64 %47 to i32, !insn.addr !2705
  %54 = call i64 @.Lsimple_coder_update.0(i64 %49, i32 %53, i64 %rdx.015.reload, i64 %rcx.114.reload), !insn.addr !2705
  %55 = trunc i64 %54 to i32, !insn.addr !2706
  %56 = icmp eq i32 %55, 2000, !insn.addr !2706
  br i1 %56, label %dec_label_pc_47cd, label %dec_label_pc_46f3, !insn.addr !2707

dec_label_pc_46f3:                                ; preds = %dec_label_pc_46e0
  %57 = icmp ult i32 %55, 2001
  br i1 %57, label %dec_label_pc_46f5, label %dec_label_pc_4709, !insn.addr !2708

dec_label_pc_46f5:                                ; preds = %dec_label_pc_46f3
  store i64 %rcx.114.reload, i64* %rcx.0.reg2mem
  store i64 %47, i64* %rsi.0.reg2mem
  switch i32 %55, label %dec_label_pc_46ad [
    i32 1424, label %dec_label_pc_4776
    i32 1984, label %dec_label_pc_47b9
  ]

dec_label_pc_4709:                                ; preds = %dec_label_pc_46f3
  %58 = icmp eq i32 %55, 2360, !insn.addr !2709
  br i1 %58, label %dec_label_pc_4762, label %dec_label_pc_4710, !insn.addr !2710

dec_label_pc_4710:                                ; preds = %dec_label_pc_4709
  %59 = icmp eq i32 %55, 2632, !insn.addr !2711
  %60 = icmp eq i1 %59, false, !insn.addr !2712
  store i64 %rcx.114.reload, i64* %rcx.0.reg2mem, !insn.addr !2712
  store i64 %47, i64* %rsi.0.reg2mem, !insn.addr !2712
  br i1 %60, label %dec_label_pc_46ad, label %dec_label_pc_4717, !insn.addr !2712

dec_label_pc_4717:                                ; preds = %dec_label_pc_4710
  %61 = add i64 %rsi.210.reload, 9, !insn.addr !2713
  %62 = inttoptr i64 %61 to i64*, !insn.addr !2713
  %63 = load i64, i64* %62, align 8, !insn.addr !2713
  %64 = icmp eq i64 %63, 0, !insn.addr !2713
  %65 = icmp eq i1 %64, false, !insn.addr !2714
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2714
  br i1 %65, label %dec_label_pc_4a01, label %dec_label_pc_4722, !insn.addr !2714

dec_label_pc_4722:                                ; preds = %dec_label_pc_4717
  %66 = load i64, i64* %7, align 8, !insn.addr !2715
  %67 = add i64 %66, 8, !insn.addr !2716
  %68 = inttoptr i64 %67 to i64*, !insn.addr !2716
  %69 = load i64, i64* %68, align 8, !insn.addr !2716
  %70 = load i64, i64* %21, align 8, !insn.addr !2717
  %71 = inttoptr i64 %69 to i64*, !insn.addr !2718
  %72 = load i64, i64* %71, align 8, !insn.addr !2718
  %73 = add i64 %72, %70, !insn.addr !2718
  %74 = icmp ugt i64 %r12.016.reload, %73, !insn.addr !2719
  %75 = icmp eq i1 %74, false, !insn.addr !2720
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2720
  br i1 %75, label %dec_label_pc_4a01, label %dec_label_pc_473a, !insn.addr !2720

dec_label_pc_473a:                                ; preds = %dec_label_pc_4722
  %76 = sub i64 %r12.016.reload, %73, !insn.addr !2721
  %77 = load i64, i64* %23, align 8, !insn.addr !2722
  %78 = icmp ult i64 %77, %76, !insn.addr !2722
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2723
  br i1 %78, label %dec_label_pc_4a01, label %dec_label_pc_474a, !insn.addr !2723

dec_label_pc_474a:                                ; preds = %dec_label_pc_473a
  %79 = add i64 %69, 32, !insn.addr !2724
  %80 = inttoptr i64 %79 to i64*, !insn.addr !2724
  %81 = load i64, i64* %80, align 8, !insn.addr !2724
  %82 = load i64, i64* %32, align 8, !insn.addr !2725
  %83 = icmp eq i64 %82, %81, !insn.addr !2725
  %84 = icmp eq i1 %83, false, !insn.addr !2726
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2726
  br i1 %84, label %dec_label_pc_4a01, label %dec_label_pc_4759, !insn.addr !2726

dec_label_pc_4759:                                ; preds = %dec_label_pc_474a
  store i64 %r12.016.reload, i64* %62, align 8, !insn.addr !2727
  store i64 %69, i64* %rcx.0.reg2mem, !insn.addr !2728
  store i64 %76, i64* %rsi.0.reg2mem, !insn.addr !2728
  br label %dec_label_pc_46ad, !insn.addr !2728

dec_label_pc_4762:                                ; preds = %dec_label_pc_4709
  %85 = add i64 %rsi.210.reload, 33, !insn.addr !2729
  %86 = inttoptr i64 %85 to i64*, !insn.addr !2729
  %87 = load i64, i64* %86, align 8, !insn.addr !2729
  %88 = icmp eq i64 %87, 0, !insn.addr !2729
  %89 = icmp eq i1 %88, false, !insn.addr !2730
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2730
  br i1 %89, label %dec_label_pc_4a01, label %dec_label_pc_476d, !insn.addr !2730

dec_label_pc_476d:                                ; preds = %dec_label_pc_4762
  store i64 %r12.016.reload, i64* %86, align 8, !insn.addr !2731
  store i64 %rcx.114.reload, i64* %rcx.0.reg2mem, !insn.addr !2732
  store i64 %47, i64* %rsi.0.reg2mem, !insn.addr !2732
  br label %dec_label_pc_46ad, !insn.addr !2732

dec_label_pc_4776:                                ; preds = %dec_label_pc_46f5
  %90 = add i64 %rsi.210.reload, 17, !insn.addr !2733
  %91 = inttoptr i64 %90 to i64*, !insn.addr !2733
  %92 = load i64, i64* %91, align 8, !insn.addr !2733
  %93 = icmp eq i64 %92, 0, !insn.addr !2733
  %94 = icmp eq i1 %93, false, !insn.addr !2734
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2734
  br i1 %94, label %dec_label_pc_4a01, label %dec_label_pc_4781, !insn.addr !2734

dec_label_pc_4781:                                ; preds = %dec_label_pc_4776
  %95 = load i64, i64* %24, align 8, !insn.addr !2735
  %96 = icmp ult i64 %95, 17984, !insn.addr !2736
  %97 = icmp eq i1 %96, false, !insn.addr !2737
  %98 = add i64 %95, 4194304, !insn.addr !2738
  %99 = icmp ult i64 %98, 17984, !insn.addr !2739
  %or.cond = or i1 %97, %99
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2737
  br i1 %or.cond, label %dec_label_pc_4a01, label %dec_label_pc_47a4, !insn.addr !2737

dec_label_pc_47a4:                                ; preds = %dec_label_pc_4781
  %100 = load i64, i64* %.reload, align 8, !insn.addr !2740
  %101 = icmp eq i64 %100, 0, !insn.addr !2740
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2741
  br i1 %101, label %dec_label_pc_4a01, label %dec_label_pc_47b0, !insn.addr !2741

dec_label_pc_47b0:                                ; preds = %dec_label_pc_47a4
  store i64 %r12.016.reload, i64* %91, align 8, !insn.addr !2742
  store i64 17984, i64* %rcx.0.reg2mem, !insn.addr !2743
  store i64 %47, i64* %rsi.0.reg2mem, !insn.addr !2743
  br label %dec_label_pc_46ad, !insn.addr !2743

dec_label_pc_47b9:                                ; preds = %dec_label_pc_46f5
  %102 = add i64 %rsi.210.reload, add (i64 ptrtoint (i32** @global_var_18 to i64), i64 1), !insn.addr !2744
  %103 = inttoptr i64 %102 to i64*, !insn.addr !2744
  %104 = load i64, i64* %103, align 8, !insn.addr !2744
  %105 = icmp eq i64 %104, 0, !insn.addr !2744
  %106 = icmp eq i1 %105, false, !insn.addr !2745
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2745
  br i1 %106, label %dec_label_pc_4a01, label %dec_label_pc_47c4, !insn.addr !2745

dec_label_pc_47c4:                                ; preds = %dec_label_pc_47b9
  store i64 %r12.016.reload, i64* %103, align 8, !insn.addr !2746
  store i64 %rcx.114.reload, i64* %rcx.0.reg2mem, !insn.addr !2747
  store i64 %47, i64* %rsi.0.reg2mem, !insn.addr !2747
  br label %dec_label_pc_46ad, !insn.addr !2747

dec_label_pc_47cd:                                ; preds = %dec_label_pc_46e0
  %107 = add i64 %rsi.210.reload, 41, !insn.addr !2748
  %108 = inttoptr i64 %107 to i64*, !insn.addr !2748
  %109 = load i64, i64* %108, align 8, !insn.addr !2748
  %110 = icmp eq i64 %109, 0, !insn.addr !2748
  %111 = icmp eq i1 %110, false, !insn.addr !2749
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2749
  br i1 %111, label %dec_label_pc_4a01, label %dec_label_pc_47d8, !insn.addr !2749

dec_label_pc_47d8:                                ; preds = %dec_label_pc_47cd
  store i64 %r12.016.reload, i64* %108, align 8, !insn.addr !2750
  store i64 %rcx.114.reload, i64* %rcx.0.reg2mem, !insn.addr !2751
  store i64 %47, i64* %rsi.0.reg2mem, !insn.addr !2751
  br label %dec_label_pc_46ad, !insn.addr !2751

dec_label_pc_47e1:                                ; preds = %dec_label_pc_46ad
  %112 = add i64 %rsi.0.reload, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2752
  %113 = inttoptr i64 %112 to i64*, !insn.addr !2752
  %114 = load i64, i64* %113, align 8, !insn.addr !2752
  %115 = icmp eq i64 %114, 0, !insn.addr !2752
  br i1 %115, label %dec_label_pc_46bf.backedge, label %dec_label_pc_47ec, !insn.addr !2753

dec_label_pc_47ec:                                ; preds = %dec_label_pc_47e1
  %116 = add i64 %rsi.0.reload, 8, !insn.addr !2754
  %117 = inttoptr i64 %116 to i64*, !insn.addr !2754
  %118 = load i64, i64* %117, align 8, !insn.addr !2754
  %119 = icmp eq i64 %118, 0, !insn.addr !2754
  br i1 %119, label %dec_label_pc_46bf.backedge, label %dec_label_pc_47f7, !insn.addr !2755

dec_label_pc_47f7:                                ; preds = %dec_label_pc_47ec
  %120 = add i64 %rsi.0.reload, 32, !insn.addr !2756
  %121 = inttoptr i64 %120 to i64*, !insn.addr !2756
  %122 = load i64, i64* %121, align 8, !insn.addr !2756
  %123 = icmp eq i64 %122, 0, !insn.addr !2756
  br i1 %123, label %dec_label_pc_46bf.backedge, label %dec_label_pc_4802, !insn.addr !2757

dec_label_pc_4802:                                ; preds = %dec_label_pc_47f7
  %124 = add i64 %rsi.0.reload, 16, !insn.addr !2758
  %125 = inttoptr i64 %124 to i64*, !insn.addr !2758
  %126 = load i64, i64* %125, align 8, !insn.addr !2758
  %127 = icmp eq i64 %126, 0, !insn.addr !2758
  br i1 %127, label %dec_label_pc_46bf.backedge, label %dec_label_pc_480d, !insn.addr !2759

dec_label_pc_480d:                                ; preds = %dec_label_pc_4802
  %128 = add i64 %rsi.0.reload, 40, !insn.addr !2760
  %129 = inttoptr i64 %128 to i64*, !insn.addr !2760
  %130 = load i64, i64* %129, align 8, !insn.addr !2760
  %131 = icmp eq i64 %130, 0, !insn.addr !2760
  store i64 %rcx.0.reload, i64* %rcx.2.reg2mem, !insn.addr !2761
  store i64 %47, i64* %rdx.1.reg2mem, !insn.addr !2761
  store i64 %rsi.0.reload, i64* %rsi.3.reg2mem, !insn.addr !2761
  br i1 %131, label %dec_label_pc_46bf.backedge, label %dec_label_pc_4818, !insn.addr !2761

dec_label_pc_4818:                                ; preds = %dec_label_pc_480d, %dec_label_pc_4874
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %132 = load i64, i64* %7, align 8, !insn.addr !2762
  %133 = add i64 %5, 32, !insn.addr !2763
  %134 = inttoptr i64 %133 to i64*, !insn.addr !2763
  %135 = load i64, i64* %134, align 8, !insn.addr !2763
  %136 = add i64 %5, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2764
  %137 = inttoptr i64 %136 to i64*, !insn.addr !2764
  %138 = load i64, i64* %137, align 8, !insn.addr !2764
  %139 = add i64 %5, 16, !insn.addr !2765
  %140 = inttoptr i64 %139 to i64*, !insn.addr !2765
  %141 = load i64, i64* %140, align 8, !insn.addr !2765
  %142 = inttoptr i64 %132 to i64*, !insn.addr !2766
  %143 = load i64, i64* %142, align 8, !insn.addr !2766
  %144 = icmp eq i64 %rsi.3.reload, 0, !insn.addr !2767
  %145 = icmp eq i1 %144, false, !insn.addr !2768
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2768
  br i1 %145, label %dec_label_pc_4880, label %dec_label_pc_4a01, !insn.addr !2768

dec_label_pc_483b:                                ; preds = %dec_label_pc_46bf.backedge
  store i64 %rsi.0.reload, i64* %rsi.1.lcssa26.reg2mem, !insn.addr !2769
  store i64 %47, i64* %rdx.0.lcssa25.reg2mem, !insn.addr !2769
  store i64 %rcx.0.reload, i64* %rcx.1.lcssa24.reg2mem, !insn.addr !2769
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2769
  br i1 %40, label %dec_label_pc_4a01, label %dec_label_pc_4848, !insn.addr !2769

dec_label_pc_4848:                                ; preds = %dec_label_pc_46bf.preheader, %dec_label_pc_483b
  %rsi.1.lcssa26.reload = load i64, i64* %rsi.1.lcssa26.reg2mem
  %146 = add i64 %rsi.1.lcssa26.reload, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2770
  %147 = inttoptr i64 %146 to i64*, !insn.addr !2770
  %148 = load i64, i64* %147, align 8, !insn.addr !2770
  %149 = icmp eq i64 %148, 0, !insn.addr !2770
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2771
  br i1 %149, label %dec_label_pc_4a01, label %dec_label_pc_4853, !insn.addr !2771

dec_label_pc_4853:                                ; preds = %dec_label_pc_4848
  %150 = add i64 %rsi.1.lcssa26.reload, 8, !insn.addr !2772
  %151 = inttoptr i64 %150 to i64*, !insn.addr !2772
  %152 = load i64, i64* %151, align 8, !insn.addr !2772
  %153 = icmp eq i64 %152, 0, !insn.addr !2772
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2773
  br i1 %153, label %dec_label_pc_4a01, label %dec_label_pc_485e, !insn.addr !2773

dec_label_pc_485e:                                ; preds = %dec_label_pc_4853
  %154 = add i64 %rsi.1.lcssa26.reload, 32, !insn.addr !2774
  %155 = inttoptr i64 %154 to i64*, !insn.addr !2774
  %156 = load i64, i64* %155, align 8, !insn.addr !2774
  %157 = icmp eq i64 %156, 0, !insn.addr !2774
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2775
  br i1 %157, label %dec_label_pc_4a01, label %dec_label_pc_4869, !insn.addr !2775

dec_label_pc_4869:                                ; preds = %dec_label_pc_485e
  %158 = add i64 %rsi.1.lcssa26.reload, 16, !insn.addr !2776
  %159 = inttoptr i64 %158 to i64*, !insn.addr !2776
  %160 = load i64, i64* %159, align 8, !insn.addr !2776
  %161 = icmp eq i64 %160, 0, !insn.addr !2776
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2777
  br i1 %161, label %dec_label_pc_4a01, label %dec_label_pc_4874, !insn.addr !2777

dec_label_pc_4874:                                ; preds = %dec_label_pc_4869
  %rcx.1.lcssa24.reload = load i64, i64* %rcx.1.lcssa24.reg2mem
  %rdx.0.lcssa25.reload = load i64, i64* %rdx.0.lcssa25.reg2mem
  %162 = add i64 %rsi.1.lcssa26.reload, 40, !insn.addr !2778
  %163 = inttoptr i64 %162 to i64*, !insn.addr !2778
  %164 = load i64, i64* %163, align 8, !insn.addr !2778
  %165 = icmp eq i64 %164, 0, !insn.addr !2778
  %166 = icmp eq i1 %165, false, !insn.addr !2779
  store i64 %rcx.1.lcssa24.reload, i64* %rcx.2.reg2mem, !insn.addr !2779
  store i64 %rdx.0.lcssa25.reload, i64* %rdx.1.reg2mem, !insn.addr !2779
  store i64 %rsi.1.lcssa26.reload, i64* %rsi.3.reg2mem, !insn.addr !2779
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2779
  br i1 %166, label %dec_label_pc_4818, label %dec_label_pc_4a01, !insn.addr !2779

dec_label_pc_4880:                                ; preds = %dec_label_pc_4818
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %167 = call i64 @.Lget_literal_price.part.0(i64 %rsi.3.reload, i64 %143, i64 %rdx.1.reload, i64 %rcx.2.reload, i64 %2, i64 %1), !insn.addr !2780
  %168 = trunc i64 %167 to i32, !insn.addr !2781
  %169 = icmp eq i32 %168, 0, !insn.addr !2781
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2782
  br i1 %169, label %dec_label_pc_4a01, label %dec_label_pc_4893, !insn.addr !2782

dec_label_pc_4893:                                ; preds = %dec_label_pc_4880
  %170 = add i64 %143, 76, !insn.addr !2783
  %171 = inttoptr i64 %170 to i32*, !insn.addr !2783
  %172 = load i32, i32* %171, align 4, !insn.addr !2783
  %173 = icmp eq i32 %172, 0, !insn.addr !2783
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2784
  br i1 %173, label %dec_label_pc_4a01, label %dec_label_pc_489f, !insn.addr !2784

dec_label_pc_489f:                                ; preds = %dec_label_pc_4893
  %174 = add i64 %143, 208, !insn.addr !2785
  %175 = inttoptr i64 %174 to i8*, !insn.addr !2785
  %176 = load i8, i8* %175, align 1, !insn.addr !2785
  %177 = and i8 %176, 32, !insn.addr !2785
  %178 = icmp eq i8 %177, 0, !insn.addr !2785
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2786
  br i1 %178, label %dec_label_pc_4a01, label %dec_label_pc_48ae, !insn.addr !2786

dec_label_pc_48ae:                                ; preds = %dec_label_pc_489f
  %179 = call i64 @.Ldelta_coder_end.1(i64 %143, i64 464), !insn.addr !2787
  %180 = inttoptr i64 %141 to i64*, !insn.addr !2788
  store i64 %179, i64* %180, align 8, !insn.addr !2788
  %181 = icmp ult i64 %179, 16777216
  store i64 %179, i64* %rax.2.reg2mem, !insn.addr !2789
  br i1 %181, label %dec_label_pc_48c6, label %dec_label_pc_491d, !insn.addr !2789

dec_label_pc_48c6:                                ; preds = %dec_label_pc_48ae
  %182 = call i64 @.Ldelta_coder_end.1(i64 %143, i64 1296), !insn.addr !2790
  %183 = inttoptr i64 %138 to i64*, !insn.addr !2791
  store i64 %182, i64* %183, align 8, !insn.addr !2791
  %184 = icmp ult i64 %182, 16777216
  br i1 %184, label %dec_label_pc_48eb, label %dec_label_pc_48de, !insn.addr !2792

dec_label_pc_48de:                                ; preds = %dec_label_pc_48c6
  %185 = inttoptr i64 %182 to i64*, !insn.addr !2793
  %186 = load i64, i64* %185, align 8, !insn.addr !2793
  %187 = icmp ult i64 %186, 16777216
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2794
  br i1 %187, label %dec_label_pc_48eb, label %dec_label_pc_4a01, !insn.addr !2794

dec_label_pc_48eb:                                ; preds = %dec_label_pc_48de, %dec_label_pc_48c6
  %188 = call i64 @.Ldelta_coder_end.1(i64 %143, i64 1944), !insn.addr !2795
  %189 = inttoptr i64 %135 to i64*, !insn.addr !2796
  store i64 %188, i64* %189, align 8, !insn.addr !2796
  %190 = icmp ult i64 %188, 16777216
  store i64 %188, i64* %rax.2.reg2mem, !insn.addr !2797
  br i1 %190, label %dec_label_pc_4904, label %dec_label_pc_491d, !insn.addr !2797

dec_label_pc_4904:                                ; preds = %dec_label_pc_48eb, %dec_label_pc_491d
  %191 = load i64, i64* %7, align 8, !insn.addr !2798
  %192 = add i64 %191, 32, !insn.addr !2799
  %193 = inttoptr i64 %192 to i64*, !insn.addr !2799
  %194 = load i64, i64* %193, align 8, !insn.addr !2799
  %195 = add i64 %194, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2800
  %196 = inttoptr i64 %195 to i64*, !insn.addr !2800
  %197 = load i64, i64* %196, align 8, !insn.addr !2800
  %198 = icmp eq i64 %197, 0, !insn.addr !2801
  %199 = icmp eq i1 %198, false, !insn.addr !2802
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2802
  br i1 %199, label %dec_label_pc_492b, label %dec_label_pc_4a01, !insn.addr !2802

dec_label_pc_491d:                                ; preds = %dec_label_pc_48eb, %dec_label_pc_48ae
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %200 = inttoptr i64 %rax.2.reload to i64*, !insn.addr !2803
  %201 = load i64, i64* %200, align 8, !insn.addr !2803
  %202 = icmp ult i64 %201, 16777216
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2804
  br i1 %202, label %dec_label_pc_4904, label %dec_label_pc_4a01, !insn.addr !2804

dec_label_pc_492b:                                ; preds = %dec_label_pc_4904
  %203 = inttoptr i64 %197 to i64*, !insn.addr !2805
  %204 = load i64, i64* %203, align 8, !insn.addr !2805
  %205 = call i64 @.Lget_literal_price.part.0(i64 %204, i64 %194, i64 %rdx.1.reload, i64 %rcx.2.reload, i64 %2, i64 %1), !insn.addr !2806
  %206 = trunc i64 %205 to i32, !insn.addr !2807
  %207 = icmp eq i32 %206, 0, !insn.addr !2807
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2808
  br i1 %207, label %dec_label_pc_4a01, label %dec_label_pc_493b, !insn.addr !2808

dec_label_pc_493b:                                ; preds = %dec_label_pc_492b
  %208 = load i64, i64* %7, align 8, !insn.addr !2809
  %209 = add i64 %5, 40, !insn.addr !2810
  %210 = inttoptr i64 %209 to i64*, !insn.addr !2810
  %211 = load i64, i64* %210, align 8, !insn.addr !2810
  store i64 0, i64* %stack_var_-48, align 8, !insn.addr !2811
  %212 = add i64 %208, ptrtoint (i32** @global_var_18 to i64), !insn.addr !2812
  %213 = inttoptr i64 %212 to i64*, !insn.addr !2812
  %214 = load i64, i64* %213, align 8, !insn.addr !2812
  %215 = load i64, i64* inttoptr (i64 16 to i64*), align 16, !insn.addr !2813
  %216 = icmp eq i64 %215, 0, !insn.addr !2814
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2815
  br i1 %216, label %dec_label_pc_4a01, label %dec_label_pc_495e, !insn.addr !2815

dec_label_pc_495e:                                ; preds = %dec_label_pc_493b
  %217 = inttoptr i64 %215 to i64*, !insn.addr !2816
  %218 = load i64, i64* %217, align 8, !insn.addr !2816
  %219 = call i64 @.Lget_literal_price.part.0(i64 %218, i64 %214, i64 %rdx.1.reload, i64 %rcx.2.reload, i64 %2, i64 %1), !insn.addr !2817
  %220 = trunc i64 %219 to i32, !insn.addr !2818
  %221 = icmp eq i32 %220, 0, !insn.addr !2818
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2819
  br i1 %221, label %dec_label_pc_4a01, label %dec_label_pc_4971, !insn.addr !2819

dec_label_pc_4971:                                ; preds = %dec_label_pc_495e
  %222 = add i64 %214, 208, !insn.addr !2820
  %223 = inttoptr i64 %222 to i8*, !insn.addr !2820
  %224 = load i8, i8* %223, align 1, !insn.addr !2820
  %225 = and i8 %224, 32, !insn.addr !2820
  %226 = icmp eq i8 %225, 0, !insn.addr !2820
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2821
  br i1 %226, label %dec_label_pc_4a01, label %dec_label_pc_497f, !insn.addr !2821

dec_label_pc_497f:                                ; preds = %dec_label_pc_4971
  %227 = call i64 @.Lmicrolzma_decode.0(i64 %214, i64* nonnull %stack_var_-48, i64 1), !insn.addr !2822
  %228 = load i64, i64* %stack_var_-48, align 8, !insn.addr !2823
  %229 = icmp ult i64 %228, 1432
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2824
  br i1 %229, label %dec_label_pc_4a01, label %dec_label_pc_49a3, !insn.addr !2824

dec_label_pc_49a3:                                ; preds = %dec_label_pc_497f
  %230 = add i64 %227, 16, !insn.addr !2825
  %231 = add i64 %228, -1432, !insn.addr !2826
  %232 = inttoptr i64 %211 to i64*, !insn.addr !2827
  store i64 %230, i64* %232, align 8, !insn.addr !2827
  %233 = add i64 %227, 1424, !insn.addr !2828
  %234 = inttoptr i64 %233 to i64*, !insn.addr !2828
  store i64 %231, i64* %234, align 8, !insn.addr !2828
  %235 = load i64, i64* %7, align 8, !insn.addr !2829
  %236 = add i64 %235, 16, !insn.addr !2830
  %237 = inttoptr i64 %236 to i64*, !insn.addr !2830
  %238 = load i64, i64* %237, align 8, !insn.addr !2830
  %239 = add i64 %238, 40, !insn.addr !2831
  %240 = inttoptr i64 %239 to i64*, !insn.addr !2831
  %241 = load i64, i64* %240, align 8, !insn.addr !2831
  %242 = icmp eq i64 %241, 0, !insn.addr !2832
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2833
  br i1 %242, label %dec_label_pc_4a01, label %dec_label_pc_49d1, !insn.addr !2833

dec_label_pc_49d1:                                ; preds = %dec_label_pc_49a3
  %243 = inttoptr i64 %241 to i64*, !insn.addr !2834
  %244 = load i64, i64* %243, align 8, !insn.addr !2834
  %245 = call i64 @.Lget_literal_price.part.0(i64 %244, i64 %238, i64 %231, i64 %230, i64 %2, i64 %1), !insn.addr !2835
  %246 = trunc i64 %245 to i32, !insn.addr !2836
  %247 = icmp eq i32 %246, 0, !insn.addr !2836
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2837
  br i1 %247, label %dec_label_pc_4a01, label %dec_label_pc_49e1, !insn.addr !2837

dec_label_pc_49e1:                                ; preds = %dec_label_pc_49d1
  %248 = load i64, i64* %7, align 8, !insn.addr !2838
  %249 = add i64 %5, 48, !insn.addr !2839
  %250 = inttoptr i64 %249 to i64*, !insn.addr !2839
  %251 = load i64, i64* %250, align 8, !insn.addr !2839
  %252 = add i64 %248, 16, !insn.addr !2840
  %253 = inttoptr i64 %252 to i64*, !insn.addr !2840
  %254 = load i64, i64* %253, align 8, !insn.addr !2840
  %255 = add i64 %254, 40, !insn.addr !2841
  %256 = inttoptr i64 %255 to i64*, !insn.addr !2841
  %257 = load i64, i64* %256, align 8, !insn.addr !2841
  %258 = call i64 @.Llzma_index_buffer_encode.0(i64 %257, i64 %254, i64 %251, i64 %230), !insn.addr !2842
  %259 = trunc i64 %258 to i32, !insn.addr !2843
  %260 = icmp eq i32 %259, 0, !insn.addr !2843
  %261 = icmp eq i1 %260, false, !insn.addr !2844
  %262 = zext i1 %261 to i64, !insn.addr !2845
  store i64 %262, i64* %storemerge.reg2mem, !insn.addr !2845
  br label %dec_label_pc_4a01, !insn.addr !2845

dec_label_pc_4a01:                                ; preds = %dec_label_pc_469c, %dec_label_pc_4683, %dec_label_pc_468a, %dec_label_pc_4694, %dec_label_pc_4717, %dec_label_pc_4722, %dec_label_pc_473a, %dec_label_pc_474a, %dec_label_pc_4762, %dec_label_pc_4776, %dec_label_pc_4781, %dec_label_pc_47a4, %dec_label_pc_47b9, %dec_label_pc_47cd, %dec_label_pc_4640, %dec_label_pc_491d, %dec_label_pc_4904, %dec_label_pc_4874, %dec_label_pc_4818, %dec_label_pc_464d, %dec_label_pc_483b, %dec_label_pc_4848, %dec_label_pc_4853, %dec_label_pc_485e, %dec_label_pc_4869, %dec_label_pc_4880, %dec_label_pc_4893, %dec_label_pc_489f, %dec_label_pc_492b, %dec_label_pc_493b, %dec_label_pc_495e, %dec_label_pc_4971, %dec_label_pc_497f, %dec_label_pc_49a3, %dec_label_pc_49d1, %dec_label_pc_48de, %dec_label_pc_49e1
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2846

; uselistorder directives
  uselistorder i64 %254, { 1, 0 }
  uselistorder i64 %214, { 1, 0, 2 }
  uselistorder i64 %rcx.2.reload, { 2, 1, 0 }
  uselistorder i64 %rdx.1.reload, { 2, 1, 0 }
  uselistorder i64 %rsi.1.lcssa26.reload, { 5, 4, 3, 2, 1, 0 }
  uselistorder i64 %143, { 0, 1, 4, 3, 2, 5 }
  uselistorder i64 %rsi.3.reload, { 1, 0 }
  uselistorder i64 %73, { 1, 0 }
  uselistorder i32 %55, { 1, 0, 2, 3, 4 }
  uselistorder i64 %49, { 1, 0 }
  uselistorder i64 %47, { 0, 1, 8, 6, 7, 5, 4, 3, 10, 2, 11, 12, 9 }
  uselistorder i64 %rsi.210.reload, { 5, 3, 4, 2, 1, 0 }
  uselistorder i64 %rsi.0.reload, { 0, 1, 3, 4, 5, 6, 7, 2 }
  uselistorder i64 %rcx.114.reload, { 4, 3, 2, 1, 0, 5 }
  uselistorder i64 %r12.016.reload, { 6, 4, 5, 3, 1, 2, 0, 7, 9, 8 }
  uselistorder i64 %5, { 0, 1, 3, 2, 4, 5 }
  uselistorder i64* %stack_var_-48, { 1, 0, 2 }
  uselistorder i64 %2, { 3, 2, 1, 0 }
  uselistorder i64 %1, { 3, 2, 1, 0 }
  uselistorder i64** %.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r12.016.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.015.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.114.reg2mem, { 1, 0 }
  uselistorder i64* %rcx.0.reg2mem, { 7, 5, 6, 4, 2, 3, 1, 0 }
  uselistorder i64* %rsi.0.reg2mem, { 7, 5, 6, 4, 2, 3, 1, 0 }
  uselistorder i8* %.reg2mem41, { 2, 0, 1 }
  uselistorder i64* %storemerge111.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rsi.210.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rcx.2.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rdx.1.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rsi.3.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rsi.1.lcssa26.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rdx.0.lcssa25.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.2.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 37, 35, 34, 33, 32, 31, 30, 29, 16, 17, 36, 28, 27, 26, 18, 25, 24, 23, 22, 21, 19, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 1, 4, 3, 2, 20, 15 }
  uselistorder i64* %0, { 2, 1, 0 }
  uselistorder i64* inttoptr (i64 16 to i64*), { 1, 0 }
  uselistorder i64 (i64, i64)* @.Ldelta_coder_end.1, { 2, 1, 0 }
  uselistorder i64 (i64, i64, i64, i64, i64, i64)* @.Lget_literal_price.part.0, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_4a01, { 36, 34, 33, 32, 31, 30, 29, 28, 15, 16, 35, 27, 26, 25, 17, 24, 23, 22, 21, 20, 18, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 3, 2, 1, 19, 14 }
  uselistorder label %dec_label_pc_4904, { 1, 0 }
  uselistorder label %dec_label_pc_4848, { 1, 0 }
  uselistorder label %dec_label_pc_4818, { 1, 0 }
  uselistorder label %dec_label_pc_46d5, { 1, 0 }
  uselistorder label %dec_label_pc_46bf.backedge, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_46ad, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_4683, { 1, 0 }
}

define i64 @.Llzma_index_stream_flags.0(i64* %arg1) local_unnamed_addr {
dec_label_pc_4a20:
  %0 = alloca i64
  %rdx.0.reg2mem = alloca i64, !insn.addr !2847
  %1 = load i64, i64* %0
  %2 = ptrtoint i64* %arg1 to i64
  %stack_var_-64 = alloca i64, align 8
  %3 = add i64 %2, 8, !insn.addr !2848
  %4 = inttoptr i64 %3 to i64*, !insn.addr !2848
  %5 = load i64, i64* %4, align 8, !insn.addr !2848
  %6 = add i64 %5, 8, !insn.addr !2849
  %7 = inttoptr i64 %6 to i64*, !insn.addr !2849
  %8 = load i64, i64* %7, align 8, !insn.addr !2849
  %9 = call i64 @.Lcrc_init.0(i64 %8, i64 1456, i32 2240, i64 %1), !insn.addr !2850
  %10 = icmp eq i64 %9, 0, !insn.addr !2851
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !2852
  br i1 %10, label %dec_label_pc_4aaf, label %dec_label_pc_4a4a, !insn.addr !2852

dec_label_pc_4a4a:                                ; preds = %dec_label_pc_4a20
  %11 = load i64, i64* %4, align 8, !insn.addr !2853
  %12 = add i64 %9, 8, !insn.addr !2854
  %13 = inttoptr i64 %12 to i64*, !insn.addr !2854
  %14 = load i64, i64* %13, align 8, !insn.addr !2854
  %15 = add i64 %11, 8, !insn.addr !2855
  %16 = inttoptr i64 %15 to i64*, !insn.addr !2855
  %17 = load i64, i64* %16, align 8, !insn.addr !2855
  %18 = inttoptr i64 %17 to i64*, !insn.addr !2856
  %19 = load i64, i64* %18, align 8, !insn.addr !2856
  %20 = add i64 %19, %14, !insn.addr !2856
  %21 = inttoptr i64 %20 to i32*, !insn.addr !2857
  %22 = load i32, i32* %21, align 4, !insn.addr !2857
  %23 = icmp slt i32 %22, 1, !insn.addr !2858
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !2858
  br i1 %23, label %dec_label_pc_4aaf, label %dec_label_pc_4a60, !insn.addr !2858

dec_label_pc_4a60:                                ; preds = %dec_label_pc_4a4a
  %24 = add i64 %20, 8, !insn.addr !2859
  %25 = inttoptr i64 %24 to i64*, !insn.addr !2859
  %26 = load i64, i64* %25, align 8, !insn.addr !2859
  store i64 %8, i64* %stack_var_-64, align 8, !insn.addr !2860
  %27 = add i64 %2, 48, !insn.addr !2861
  %28 = inttoptr i64 %27 to i64*, !insn.addr !2861
  %29 = load i64, i64* %28, align 8, !insn.addr !2861
  %30 = trunc i64 %29 to i32, !insn.addr !2862
  %31 = call i64 @.Llzma_index_encoder_init.1(i64 %26, i64* nonnull %stack_var_-64, i32 %30), !insn.addr !2862
  %32 = trunc i64 %31 to i32, !insn.addr !2863
  %33 = icmp eq i32 %32, 0, !insn.addr !2863
  %34 = icmp eq i1 %33, false, !insn.addr !2864
  %35 = zext i1 %34 to i64, !insn.addr !2864
  store i64 %35, i64* %rdx.0.reg2mem, !insn.addr !2864
  br label %dec_label_pc_4aaf, !insn.addr !2864

dec_label_pc_4aaf:                                ; preds = %dec_label_pc_4a60, %dec_label_pc_4a4a, %dec_label_pc_4a20
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  ret i64 %rdx.0.reload, !insn.addr !2865
}

define i64 @.Llzma_index_iter_locate.1(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_4ac0:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i8
  %storemerge.reg2mem = alloca i64, !insn.addr !2866
  %.lcssa.reg2mem = alloca i64, !insn.addr !2866
  %r10.1.reg2mem = alloca i64, !insn.addr !2866
  %r9.1.reg2mem = alloca i64, !insn.addr !2866
  %rcx.6.reg2mem = alloca i64, !insn.addr !2866
  %rax.6.reg2mem = alloca i8, !insn.addr !2866
  %rdx.6.reg2mem = alloca i64, !insn.addr !2866
  %rcx.5.reg2mem = alloca i64, !insn.addr !2866
  %rax.5.reg2mem = alloca i64, !insn.addr !2866
  %rdx.5.reg2mem = alloca i64, !insn.addr !2866
  %rcx.4.reg2mem = alloca i64, !insn.addr !2866
  %rax.4.reg2mem = alloca i64, !insn.addr !2866
  %.pre-phi.reg2mem = alloca i8, !insn.addr !2866
  %rdx.4.reg2mem = alloca i64, !insn.addr !2866
  %rcx.3.reg2mem = alloca i64, !insn.addr !2866
  %rax.3.reg2mem = alloca i64, !insn.addr !2866
  %rdx.3.reg2mem = alloca i64, !insn.addr !2866
  %rcx.2.reg2mem = alloca i64, !insn.addr !2866
  %rax.2.reg2mem = alloca i64, !insn.addr !2866
  %rax.1.reg2mem = alloca i64, !insn.addr !2866
  %rdx.1.reg2mem = alloca i64, !insn.addr !2866
  %rcx.1.reg2mem = alloca i64, !insn.addr !2866
  %rax.0.reg2mem = alloca i64, !insn.addr !2866
  %rcx.06.reg2mem = alloca i64, !insn.addr !2866
  %r9.08.reg2mem = alloca i64, !insn.addr !2866
  %r10.09.reg2mem = alloca i64, !insn.addr !2866
  %r15.015.reg2mem = alloca i64, !insn.addr !2866
  %.reg2mem = alloca i64, !insn.addr !2866
  %3 = load i64, i64* %0
  %4 = load i32, i32* %1
  %5 = load i64, i64* %0
  %6 = load i32, i32* %1
  %7 = load i64, i64* %0
  %8 = load i8, i8* %2
  %9 = load i32, i32* %1
  %10 = load i8, i8* %2
  %11 = load i8, i8* %2
  %12 = load i8, i8* %2
  %13 = load i8, i8* %2
  %14 = load i32, i32* %1
  %15 = load i32, i32* %1
  %stack_var_-128 = alloca i64, align 8
  %16 = call i64 @.Llzma2_decoder_end.1(i32 0, i64 151, i64 31, i64 9, i64 %arg5, i64 %3), !insn.addr !2867
  %17 = trunc i64 %16 to i32, !insn.addr !2868
  %18 = icmp eq i32 %17, 0, !insn.addr !2868
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2869
  br i1 %18, label %dec_label_pc_4eb1, label %dec_label_pc_4af5, !insn.addr !2869

dec_label_pc_4af5:                                ; preds = %dec_label_pc_4ac0
  %19 = ptrtoint i64* %arg2 to i64
  %20 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !2870
  call void @__asm_rep_stosd_memset(i8* nonnull %20, i32 0, i64 22), !insn.addr !2870
  %21 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !2871
  %22 = add i64 %arg1, 8, !insn.addr !2872
  %23 = inttoptr i64 %22 to i64*, !insn.addr !2872
  %24 = load i64, i64* %23, align 8, !insn.addr !2872
  %25 = add i64 %24, 32, !insn.addr !2873
  %26 = inttoptr i64 %25 to i64*, !insn.addr !2873
  %27 = load i64, i64* %26, align 8, !insn.addr !2873
  %28 = add i64 %21, 16, !insn.addr !2874
  %29 = inttoptr i64 %28 to i64*, !insn.addr !2874
  store i64 %27, i64* %29, align 8, !insn.addr !2874
  %30 = call i64 @lzma_alloc(i64 3080, i64 %21, i64 31, i64 0), !insn.addr !2875
  %31 = add i64 %19, 56, !insn.addr !2876
  %32 = inttoptr i64 %31 to i64*, !insn.addr !2876
  %33 = load i64, i64* %32, align 8, !insn.addr !2876
  %34 = icmp eq i64 %30, 0, !insn.addr !2877
  %35 = add i64 %33, 168, !insn.addr !2878
  %36 = inttoptr i64 %35 to i64*, !insn.addr !2878
  store i64 %30, i64* %36, align 8, !insn.addr !2878
  br i1 %34, label %dec_label_pc_4b4e, label %dec_label_pc_4b48, !insn.addr !2879

dec_label_pc_4b48:                                ; preds = %dec_label_pc_4af5
  %37 = add i64 %33, 288, !insn.addr !2880
  %38 = inttoptr i64 %37 to i32*, !insn.addr !2880
  %39 = load i32, i32* %38, align 4, !insn.addr !2880
  %40 = add i32 %39, 1, !insn.addr !2880
  store i32 %40, i32* %38, align 4, !insn.addr !2880
  br label %dec_label_pc_4b4e, !insn.addr !2880

dec_label_pc_4b4e:                                ; preds = %dec_label_pc_4b48, %dec_label_pc_4af5
  %41 = add i64 %33, 280, !insn.addr !2881
  %42 = inttoptr i64 %41 to i64*, !insn.addr !2881
  %43 = load i64, i64* %42, align 8, !insn.addr !2881
  %44 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !2882
  %45 = load i64, i64* %23, align 8, !insn.addr !2883
  %46 = add i64 %45, 16, !insn.addr !2884
  %47 = inttoptr i64 %46 to i64*, !insn.addr !2884
  %48 = load i64, i64* %47, align 8, !insn.addr !2884
  %49 = add i64 %44, 16, !insn.addr !2885
  %50 = inttoptr i64 %49 to i64*, !insn.addr !2885
  store i64 %48, i64* %50, align 8, !insn.addr !2885
  %51 = call i64 @lzma_alloc(i64 840, i64 %44, i64 %33, i64 0), !insn.addr !2886
  %52 = add i64 %43, 16, !insn.addr !2887
  %53 = inttoptr i64 %52 to i64*, !insn.addr !2887
  store i64 %51, i64* %53, align 8, !insn.addr !2887
  %54 = icmp eq i64 %51, 0, !insn.addr !2888
  br i1 %54, label %dec_label_pc_4b8c, label %dec_label_pc_4b89, !insn.addr !2889

dec_label_pc_4b89:                                ; preds = %dec_label_pc_4b4e
  %55 = inttoptr i64 %43 to i32*, !insn.addr !2890
  %56 = load i32, i32* %55, align 4, !insn.addr !2890
  %57 = add i32 %56, 1, !insn.addr !2890
  store i32 %57, i32* %55, align 4, !insn.addr !2890
  br label %dec_label_pc_4b8c, !insn.addr !2890

dec_label_pc_4b8c:                                ; preds = %dec_label_pc_4b89, %dec_label_pc_4b4e
  %58 = add i64 %19, 8, !insn.addr !2891
  %59 = inttoptr i64 %58 to i64*, !insn.addr !2891
  %60 = load i64, i64* %59, align 8, !insn.addr !2891
  %61 = icmp ugt i64 %60, 151, !insn.addr !2892
  %62 = icmp eq i1 %61, false, !insn.addr !2893
  store i64 %60, i64* %.lcssa.reg2mem, !insn.addr !2893
  br i1 %62, label %dec_label_pc_4e81, label %dec_label_pc_4b9f.lr.ph, !insn.addr !2893

dec_label_pc_4b9f.lr.ph:                          ; preds = %dec_label_pc_4b8c
  %63 = icmp eq i32 %15, 4150
  %64 = icmp eq i1 %63, false
  %65 = and i32 %14, 320
  %66 = icmp ne i32 %65, 320
  %67 = add i8 %13, -1
  %68 = icmp ugt i8 %67, 1
  %69 = trunc i32 %14 to i8
  %70 = and i8 %69, 64
  %71 = icmp eq i8 %70, 0
  %72 = zext i8 %70 to i64
  %73 = icmp eq i1 %71, false
  %74 = and i32 %14, 4160
  %75 = icmp eq i32 %74, 0
  %76 = and i8 %12, 16
  %77 = icmp eq i8 %76, 0
  %78 = zext i8 %76 to i64
  %79 = and i32 %14, 32
  %80 = icmp eq i32 %79, 0
  %81 = zext i8 %8 to i64
  %82 = mul i32 %9, 8
  %83 = and i32 %82, 8
  %84 = zext i8 %11 to i64
  %85 = and i8 %69, 32
  %86 = icmp eq i8 %85, 0
  %87 = icmp eq i1 %86, false
  %88 = zext i8 %85 to i64
  %89 = zext i8 %10 to i64
  %90 = urem i32 %9, 256
  %91 = mul i32 %90, 8
  %92 = and i32 %91, 8
  %93 = mul i32 %90, 2
  %94 = and i32 %93, 8
  %95 = zext i32 %94 to i64
  %96 = or i64 %95, %89
  %97 = urem i8 %12, 2
  %98 = icmp eq i8 %97, 0
  %99 = add i32 %6, -83886080
  %100 = and i32 %99, -16711936
  %101 = icmp eq i32 %100, 0
  %102 = icmp eq i1 %101, false
  %103 = add i64 %7, %5
  %104 = add i64 %19, 16
  %105 = inttoptr i64 %104 to i32*
  %106 = add i64 %19, 32
  %107 = inttoptr i64 %106 to i64*
  %108 = and i32 %15, -3
  %109 = icmp eq i32 %108, 137
  %110 = icmp eq i1 %109, false
  %111 = urem i32 %14, 256
  %112 = zext i32 %111 to i64
  %113 = add i64 %19, ptrtoint (i32** @global_var_18 to i64)
  %114 = inttoptr i64 %113 to i64*
  %115 = and i64 %112, 64
  %116 = icmp eq i64 %115, 0
  %117 = and i64 %112, 32
  %118 = icmp eq i64 %117, 0
  %119 = mul i32 %9, 2
  %120 = and i32 %119, 8
  %121 = trunc i32 %120 to i8
  %122 = zext i8 %10 to i32
  %123 = or i32 %120, %122
  %124 = zext i32 %123 to i64
  %125 = icmp eq i1 %77, false
  %126 = zext i32 %83 to i64
  %127 = zext i8 %8 to i32
  %128 = or i32 %83, %127
  %129 = zext i32 %128 to i64
  %130 = icmp eq i1 %116, false
  %131 = icmp eq i32 %15, 137
  %132 = icmp eq i1 %131, false
  %133 = icmp eq i32 %15, 296
  %134 = icmp eq i32 %15, 374
  %135 = icmp eq i8 %10, 0
  %136 = and i32 %14, 64
  %137 = icmp eq i32 %136, 0
  %138 = trunc i32 %83 to i8
  %or.cond.not = or i1 %68, %66
  %brmerge = or i1 %64, %or.cond.not
  %brmerge26 = or i1 %77, %75
  %.mux27 = select i1 %75, i64 0, i64 %78
  %brmerge28 = or i1 %80, %brmerge26
  %.mux27.mux = select i1 %brmerge26, i64 %.mux27, i64 %81
  %spec.select30 = select i1 %brmerge28, i64 %.mux27.mux, i64 %129
  %spec.select.v = select i1 %75, i64 %88, i64 %89
  %spec.select17 = select i1 %75, i64 0, i64 %96
  %brmerge18 = or i1 %102, %98
  %.mux = select i1 %98, i64 0, i64 %5
  %spec.select19 = select i1 %118, i64 %89, i64 %124
  %spec.select20 = select i1 %86, i64 %81, i64 %129
  %139 = zext i8 %11 to i32
  %140 = or i32 %83, %139
  %141 = zext i32 %140 to i64
  %142 = icmp eq i1 %135, %134
  %spec.select23 = select i1 %86, i8 0, i8 %121
  %143 = select i1 %80, i8 0, i8 %138
  %spec.select24 = or i8 %143, %8
  %spec.select25 = select i1 %77, i8 0, i8 %spec.select24
  store i64 %60, i64* %.reg2mem
  store i64 151, i64* %r15.015.reg2mem
  store i64 255, i64* %r10.09.reg2mem
  store i64 0, i64* %r9.08.reg2mem
  store i64 0, i64* %rcx.06.reg2mem
  br label %dec_label_pc_4b9f

dec_label_pc_4b9f:                                ; preds = %dec_label_pc_4b9f.lr.ph, %dec_label_pc_4e77
  %rcx.06.reload = load i64, i64* %rcx.06.reg2mem
  %r9.08.reload = load i64, i64* %r9.08.reg2mem
  %r15.015.reload = load i64, i64* %r15.015.reg2mem
  %.reload = load i64, i64* %.reg2mem
  %144 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-128, i64 %r15.015.reload, i64 %.reload, i64 %rcx.06.reload, i64 %arg5, i64 %r9.08.reload), !insn.addr !2894
  %145 = trunc i64 %144 to i32, !insn.addr !2895
  %146 = icmp eq i32 %145, 0, !insn.addr !2895
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2896
  br i1 %146, label %dec_label_pc_4eb1, label %dec_label_pc_4bbe, !insn.addr !2896

dec_label_pc_4bbe:                                ; preds = %dec_label_pc_4b9f
  %r10.09.reload = load i64, i64* %r10.09.reg2mem
  %147 = trunc i64 %r9.08.reload to i32, !insn.addr !2897
  %148 = and i64 %r9.08.reload, 4294967295, !insn.addr !2898
  %149 = icmp eq i32 %147, 0, !insn.addr !2899
  %150 = icmp eq i1 %149, false, !insn.addr !2900
  br i1 %150, label %dec_label_pc_4cd3, label %dec_label_pc_4bd1, !insn.addr !2900

dec_label_pc_4bd1:                                ; preds = %dec_label_pc_4bbe
  store i64 %rcx.06.reload, i64* %rcx.6.reg2mem, !insn.addr !2901
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2901
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2901
  br i1 %brmerge, label %dec_label_pc_4e77, label %dec_label_pc_4c01, !insn.addr !2901

dec_label_pc_4c01:                                ; preds = %dec_label_pc_4bd1
  %151 = and i64 %.reload, 4294967040, !insn.addr !2902
  br i1 %73, label %dec_label_pc_4c1c, label %dec_label_pc_4c11, !insn.addr !2903

dec_label_pc_4c11:                                ; preds = %dec_label_pc_4c01
  %152 = or i64 %151, %72, !insn.addr !2902
  %.mux29 = select i1 %brmerge26, i64 %152, i64 0
  %spec.select31 = select i1 %brmerge28, i64 %.mux29, i64 %152
  store i64 %spec.select30, i64* %rax.0.reg2mem
  store i64 %spec.select31, i64* %rcx.1.reg2mem
  br label %dec_label_pc_4c7a

dec_label_pc_4c1c:                                ; preds = %dec_label_pc_4c01
  %153 = or i64 %151, %84, !insn.addr !2904
  br i1 %87, label %dec_label_pc_4c33, label %dec_label_pc_4c26, !insn.addr !2905

dec_label_pc_4c26:                                ; preds = %dec_label_pc_4c1c
  %spec.select = or i64 %151, %spec.select.v
  store i64 %spec.select, i64* %rax.0.reg2mem
  store i64 %153, i64* %rcx.1.reg2mem
  br label %dec_label_pc_4c7a

dec_label_pc_4c33:                                ; preds = %dec_label_pc_4c1c
  %154 = trunc i64 %153 to i32, !insn.addr !2906
  %155 = or i32 %92, %154, !insn.addr !2906
  %156 = zext i32 %155 to i64, !insn.addr !2906
  store i64 %spec.select17, i64* %rax.0.reg2mem
  store i64 %156, i64* %rcx.1.reg2mem
  br label %dec_label_pc_4c7a

dec_label_pc_4c7a:                                ; preds = %dec_label_pc_4c11, %dec_label_pc_4c33, %dec_label_pc_4c26
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %157 = load i64, i64* %stack_var_-128, align 8
  %158 = add i64 %103, %157
  %rdx.0 = select i1 %brmerge18, i64 %.mux, i64 %158
  %159 = load i32, i32* %105, align 4, !insn.addr !2907
  %160 = zext i32 %159 to i64, !insn.addr !2907
  %161 = icmp eq i64 %rdx.0, %160, !insn.addr !2908
  %162 = icmp eq i1 %161, false, !insn.addr !2909
  store i64 %rcx.1.reload, i64* %rcx.6.reg2mem, !insn.addr !2909
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2909
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2909
  br i1 %162, label %dec_label_pc_4e77, label %dec_label_pc_4cb3, !insn.addr !2909

dec_label_pc_4cb3:                                ; preds = %dec_label_pc_4c7a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %163 = load i64, i64* %107, align 8, !insn.addr !2910
  %164 = inttoptr i64 %163 to i16*, !insn.addr !2911
  %165 = load i16, i16* %164, align 2, !insn.addr !2911
  %166 = zext i16 %165 to i64, !insn.addr !2911
  %167 = trunc i64 %rcx.1.reload to i32, !insn.addr !2912
  %168 = urem i32 %167, 32, !insn.addr !2912
  %169 = icmp eq i32 %168, 0, !insn.addr !2912
  store i64 %166, i64* %rdx.1.reg2mem, !insn.addr !2912
  br i1 %169, label %174, label %170, !insn.addr !2912

; <label>:170:                                    ; preds = %dec_label_pc_4cb3
  %171 = zext i16 %165 to i32, !insn.addr !2912
  %172 = lshr i32 %171, %168, !insn.addr !2912
  %173 = zext i32 %172 to i64, !insn.addr !2912
  store i64 %173, i64* %rdx.1.reg2mem, !insn.addr !2912
  br label %174, !insn.addr !2912

; <label>:174:                                    ; preds = %dec_label_pc_4cb3, %170
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %175 = urem i64 %rdx.1.reload, 2
  %176 = icmp eq i64 %175, 0, !insn.addr !2913
  store i64 %rcx.1.reload, i64* %rcx.6.reg2mem, !insn.addr !2914
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2914
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2914
  br i1 %176, label %dec_label_pc_4e77, label %dec_label_pc_4cc5, !insn.addr !2914

dec_label_pc_4cc5:                                ; preds = %174
  %177 = trunc i64 %rax.0.reload to i8, !insn.addr !2915
  %178 = add i64 %163, 2, !insn.addr !2915
  %179 = inttoptr i64 %178 to i8*, !insn.addr !2915
  store i8 %177, i8* %179, align 1, !insn.addr !2915
  store i64 %rcx.1.reload, i64* %rcx.6.reg2mem, !insn.addr !2916
  store i64 1, i64* %r9.1.reg2mem, !insn.addr !2916
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2916
  br label %dec_label_pc_4e77, !insn.addr !2916

dec_label_pc_4cd3:                                ; preds = %dec_label_pc_4bbe
  %180 = icmp eq i32 %147, 1, !insn.addr !2917
  %181 = icmp eq i1 %180, false, !insn.addr !2918
  br i1 %181, label %dec_label_pc_4db5, label %dec_label_pc_4cdd, !insn.addr !2918

dec_label_pc_4cdd:                                ; preds = %dec_label_pc_4cd3
  store i64 %rcx.06.reload, i64* %rcx.6.reg2mem, !insn.addr !2919
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2919
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2919
  br i1 %110, label %dec_label_pc_4e77, label %dec_label_pc_4cf1, !insn.addr !2919

dec_label_pc_4cf1:                                ; preds = %dec_label_pc_4cdd
  %182 = and i64 %rcx.06.reload, -256, !insn.addr !2920
  %183 = load i64, i64* %114, align 8, !insn.addr !2921
  br i1 %75, label %dec_label_pc_4d50, label %dec_label_pc_4d07, !insn.addr !2922

dec_label_pc_4d07:                                ; preds = %dec_label_pc_4cf1
  store i64 %spec.select19, i64* %rax.1.reg2mem, !insn.addr !2923
  br i1 %116, label %dec_label_pc_4d22, label %dec_label_pc_4d63, !insn.addr !2923

dec_label_pc_4d22:                                ; preds = %dec_label_pc_4d07
  br i1 %125, label %dec_label_pc_4d38, label %dec_label_pc_4d29, !insn.addr !2924

dec_label_pc_4d29:                                ; preds = %dec_label_pc_4d22
  %184 = add i64 %183, 2, !insn.addr !2925
  %185 = inttoptr i64 %184 to i8*, !insn.addr !2925
  %186 = load i8, i8* %185, align 1, !insn.addr !2925
  %187 = zext i8 %186 to i64, !insn.addr !2925
  %188 = or i64 %182, %187, !insn.addr !2925
  %189 = icmp eq i8 %186, 0, !insn.addr !2926
  %190 = icmp eq i1 %189, false, !insn.addr !2927
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !2927
  store i64 %188, i64* %rcx.3.reg2mem, !insn.addr !2927
  store i64 0, i64* %rdx.4.reg2mem, !insn.addr !2927
  store i64 %188, i64* %rcx.6.reg2mem, !insn.addr !2927
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2927
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2927
  br i1 %190, label %dec_label_pc_4e77, label %dec_label_pc_4d80, !insn.addr !2927

dec_label_pc_4d38:                                ; preds = %dec_label_pc_4d22
  %191 = or i64 %182, %88, !insn.addr !2928
  %spec.select21 = select i1 %86, i64 %191, i64 %126
  store i64 %spec.select20, i64* %rax.2.reg2mem
  store i64 %spec.select21, i64* %rcx.2.reg2mem
  store i64 0, i64* %rdx.3.reg2mem
  br label %dec_label_pc_4d79

dec_label_pc_4d50:                                ; preds = %dec_label_pc_4cf1
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2929
  br i1 %130, label %dec_label_pc_4d63, label %dec_label_pc_4d56, !insn.addr !2929

dec_label_pc_4d56:                                ; preds = %dec_label_pc_4d50
  %192 = add i64 %183, 2, !insn.addr !2930
  %193 = inttoptr i64 %192 to i8*, !insn.addr !2930
  %194 = load i8, i8* %193, align 1, !insn.addr !2930
  %195 = zext i8 %194 to i64, !insn.addr !2930
  %196 = or i64 %182, %195, !insn.addr !2930
  %197 = icmp eq i8 %194, 0, !insn.addr !2931
  %198 = icmp eq i1 %197, false, !insn.addr !2932
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !2932
  store i64 %196, i64* %rcx.3.reg2mem, !insn.addr !2932
  store i64 %115, i64* %rdx.4.reg2mem, !insn.addr !2932
  store i64 %196, i64* %rcx.6.reg2mem, !insn.addr !2932
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2932
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2932
  br i1 %198, label %dec_label_pc_4e77, label %dec_label_pc_4d80, !insn.addr !2932

dec_label_pc_4d63:                                ; preds = %dec_label_pc_4d07, %dec_label_pc_4d50
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %199 = or i64 %182, %88, !insn.addr !2933
  %spec.select34 = select i1 %86, i64 %199, i64 %126
  %spec.select35 = select i1 %86, i64 %84, i64 %141
  store i64 %rax.1.reload, i64* %rax.2.reg2mem
  store i64 %spec.select34, i64* %rcx.2.reg2mem
  store i64 %spec.select35, i64* %rdx.3.reg2mem
  br label %dec_label_pc_4d79

dec_label_pc_4d79:                                ; preds = %dec_label_pc_4d63, %dec_label_pc_4d38
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %200 = add i64 %183, 2, !insn.addr !2934
  %201 = inttoptr i64 %200 to i8*, !insn.addr !2934
  %202 = load i8, i8* %201, align 1, !insn.addr !2934
  %203 = zext i8 %202 to i64, !insn.addr !2934
  %204 = and i64 %rcx.2.reload, -256, !insn.addr !2934
  %205 = or i64 %204, %203, !insn.addr !2934
  %206 = trunc i64 %rax.2.reload to i8, !insn.addr !2935
  %207 = icmp eq i8 %202, %206, !insn.addr !2935
  %208 = icmp eq i1 %207, false, !insn.addr !2936
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !2936
  store i64 %205, i64* %rcx.3.reg2mem, !insn.addr !2936
  store i64 %rdx.3.reload, i64* %rdx.4.reg2mem, !insn.addr !2936
  br i1 %208, label %dec_label_pc_4d79.dec_label_pc_4d89_crit_edge, label %dec_label_pc_4d80, !insn.addr !2936

dec_label_pc_4d79.dec_label_pc_4d89_crit_edge:    ; preds = %dec_label_pc_4d79
  %.pre = trunc i64 %rdx.3.reload to i8, !insn.addr !2937
  store i8 %.pre, i8* %.pre-phi.reg2mem
  store i64 %rax.2.reload, i64* %rax.4.reg2mem
  store i64 %205, i64* %rcx.4.reg2mem
  store i64 %rdx.3.reload, i64* %rdx.5.reg2mem
  br label %dec_label_pc_4d89

dec_label_pc_4d80:                                ; preds = %dec_label_pc_4d29, %dec_label_pc_4d56, %dec_label_pc_4d79
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %209 = load i64, i64* %107, align 8, !insn.addr !2938
  %210 = add i64 %209, 2, !insn.addr !2939
  %211 = inttoptr i64 %210 to i8*, !insn.addr !2939
  %212 = load i8, i8* %211, align 1, !insn.addr !2939
  %213 = trunc i64 %rdx.4.reload to i8
  %214 = icmp eq i8 %212, %213, !insn.addr !2939
  store i8 %213, i8* %.pre-phi.reg2mem, !insn.addr !2940
  store i64 %rax.3.reload, i64* %rax.4.reg2mem, !insn.addr !2940
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem, !insn.addr !2940
  store i64 %rdx.4.reload, i64* %rdx.5.reg2mem, !insn.addr !2940
  store i64 %rax.3.reload, i64* %rax.5.reg2mem, !insn.addr !2940
  store i64 %rcx.3.reload, i64* %rcx.5.reg2mem, !insn.addr !2940
  store i64 %rdx.4.reload, i64* %rdx.6.reg2mem, !insn.addr !2940
  br i1 %214, label %dec_label_pc_4d9e, label %dec_label_pc_4d89, !insn.addr !2940

dec_label_pc_4d89:                                ; preds = %dec_label_pc_4d79.dec_label_pc_4d89_crit_edge, %dec_label_pc_4d80
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %215 = trunc i64 %rcx.4.reload to i8, !insn.addr !2937
  %216 = icmp eq i8 %.pre-phi.reload, %215, !insn.addr !2937
  %217 = icmp eq i1 %216, false, !insn.addr !2941
  store i64 %rcx.4.reload, i64* %rcx.6.reg2mem, !insn.addr !2941
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2941
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2941
  br i1 %217, label %dec_label_pc_4e77, label %dec_label_pc_4d91, !insn.addr !2941

dec_label_pc_4d91:                                ; preds = %dec_label_pc_4d89
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %218 = load i64, i64* %107, align 8, !insn.addr !2942
  %219 = add i64 %218, 2, !insn.addr !2943
  %220 = inttoptr i64 %219 to i8*, !insn.addr !2943
  %221 = load i8, i8* %220, align 1, !insn.addr !2943
  %222 = trunc i64 %rax.4.reload to i8, !insn.addr !2943
  %223 = icmp eq i8 %221, %222, !insn.addr !2943
  %224 = icmp eq i1 %223, false, !insn.addr !2944
  store i64 %rax.4.reload, i64* %rax.5.reg2mem, !insn.addr !2944
  store i64 %218, i64* %rcx.5.reg2mem, !insn.addr !2944
  store i64 %rdx.5.reload, i64* %rdx.6.reg2mem, !insn.addr !2944
  store i64 %218, i64* %rcx.6.reg2mem, !insn.addr !2944
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2944
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2944
  br i1 %224, label %dec_label_pc_4e77, label %dec_label_pc_4d9e, !insn.addr !2944

dec_label_pc_4d9e:                                ; preds = %dec_label_pc_4d91, %dec_label_pc_4d80
  %rdx.6.reload = load i64, i64* %rdx.6.reg2mem
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %.v = select i1 %132, i64 %rax.5.reload, i64 %rdx.6.reload
  %225 = and i64 %.v, 4294967295, !insn.addr !2945
  store i64 %rcx.5.reload, i64* %rcx.6.reg2mem, !insn.addr !2946
  store i64 2, i64* %r9.1.reg2mem, !insn.addr !2946
  store i64 %225, i64* %r10.1.reg2mem, !insn.addr !2946
  br label %dec_label_pc_4e77, !insn.addr !2946

dec_label_pc_4db5:                                ; preds = %dec_label_pc_4cd3
  %226 = icmp eq i32 %147, 2, !insn.addr !2947
  %227 = icmp eq i1 %226, false, !insn.addr !2948
  store i64 %rcx.06.reload, i64* %rcx.6.reg2mem, !insn.addr !2948
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2948
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2948
  br i1 %227, label %dec_label_pc_4e77, label %dec_label_pc_4dbf, !insn.addr !2948

dec_label_pc_4dbf:                                ; preds = %dec_label_pc_4db5
  store i8 0, i8* %rax.6.reg2mem, !insn.addr !2949
  br i1 %133, label %dec_label_pc_4e27, label %dec_label_pc_4dca, !insn.addr !2949

dec_label_pc_4dca:                                ; preds = %dec_label_pc_4dbf
  store i64 %rcx.06.reload, i64* %rcx.6.reg2mem, !insn.addr !2950
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2950
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2950
  br i1 %142, label %dec_label_pc_4de1, label %dec_label_pc_4e77, !insn.addr !2950

dec_label_pc_4de1:                                ; preds = %dec_label_pc_4dca
  %spec.select36 = select i1 %137, i8 %spec.select25, i8 %spec.select23
  %spec.select37 = select i1 %75, i8 0, i8 %spec.select36
  store i8 %spec.select37, i8* %rax.6.reg2mem
  br label %dec_label_pc_4e27

dec_label_pc_4e27:                                ; preds = %dec_label_pc_4de1, %dec_label_pc_4dbf
  %rax.6.reload = load i8, i8* %rax.6.reg2mem
  %228 = trunc i64 %r10.09.reload to i8, !insn.addr !2951
  %229 = icmp eq i8 %rax.6.reload, %228, !insn.addr !2951
  %230 = icmp eq i1 %229, false, !insn.addr !2952
  store i64 %rcx.06.reload, i64* %rcx.6.reg2mem, !insn.addr !2952
  store i64 %148, i64* %r9.1.reg2mem, !insn.addr !2952
  store i64 %r10.09.reload, i64* %r10.1.reg2mem, !insn.addr !2952
  br i1 %230, label %dec_label_pc_4e77, label %dec_label_pc_4e2c, !insn.addr !2952

dec_label_pc_4e2c:                                ; preds = %dec_label_pc_4e27
  %231 = icmp ult i32 %4, 256
  br i1 %231, label %dec_label_pc_4e3a, label %dec_label_pc_4e43, !insn.addr !2953

dec_label_pc_4e3a:                                ; preds = %dec_label_pc_4e2c
  %232 = call i64 @.Llz_stream_decode(), !insn.addr !2954
  %233 = trunc i64 %232 to i32, !insn.addr !2955
  %234 = icmp eq i32 %233, 1, !insn.addr !2955
  br i1 %234, label %dec_label_pc_4e4d, label %dec_label_pc_4e43, !insn.addr !2956

dec_label_pc_4e43:                                ; preds = %dec_label_pc_4e2c, %dec_label_pc_4e4d, %dec_label_pc_4e3a
  %235 = add i64 %19, 40, !insn.addr !2957
  %236 = inttoptr i64 %235 to i32*, !insn.addr !2957
  store i32 1, i32* %236, align 4, !insn.addr !2957
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2958
  br label %dec_label_pc_4eb1, !insn.addr !2958

dec_label_pc_4e4d:                                ; preds = %dec_label_pc_4e3a
  %237 = sext i32 %4 to i64, !insn.addr !2959
  %238 = load i32, i32* %105, align 4, !insn.addr !2960
  %239 = zext i32 %238 to i64, !insn.addr !2960
  %240 = add i64 %19, 48, !insn.addr !2961
  %241 = inttoptr i64 %240 to i64*, !insn.addr !2961
  %242 = load i64, i64* %241, align 8, !insn.addr !2961
  %243 = add nsw i64 %239, %237, !insn.addr !2962
  %244 = add i64 %242, 96, !insn.addr !2963
  %245 = inttoptr i64 %244 to i64*, !insn.addr !2963
  store i64 %243, i64* %245, align 8, !insn.addr !2963
  %246 = trunc i32 %4 to i8, !insn.addr !2964
  %247 = add i64 %242, 104, !insn.addr !2964
  %248 = inttoptr i64 %247 to i8*, !insn.addr !2964
  store i8 %246, i8* %248, align 1, !insn.addr !2964
  %249 = inttoptr i64 %243 to i8*, !insn.addr !2965
  %250 = load i8, i8* %249, align 1, !insn.addr !2965
  %251 = zext i8 %250 to i64, !insn.addr !2965
  %252 = and i64 %251, %237, !insn.addr !2966
  %253 = icmp eq i64 %252, 0, !insn.addr !2966
  %254 = icmp eq i1 %253, false, !insn.addr !2967
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !2967
  br i1 %254, label %dec_label_pc_4e43, label %dec_label_pc_4eb1, !insn.addr !2967

dec_label_pc_4e77:                                ; preds = %dec_label_pc_4dca, %dec_label_pc_4bd1, %dec_label_pc_4e27, %dec_label_pc_4db5, %dec_label_pc_4d9e, %dec_label_pc_4d91, %dec_label_pc_4d89, %dec_label_pc_4d56, %dec_label_pc_4d29, %dec_label_pc_4cdd, %dec_label_pc_4cc5, %174, %dec_label_pc_4c7a
  %r10.1.reload = load i64, i64* %r10.1.reg2mem
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rcx.6.reload = load i64, i64* %rcx.6.reg2mem
  %255 = add i64 %r15.015.reload, %7, !insn.addr !2968
  %256 = load i64, i64* %59, align 8, !insn.addr !2891
  %257 = icmp ult i64 %255, %256, !insn.addr !2892
  %258 = icmp eq i1 %257, false, !insn.addr !2893
  store i64 %256, i64* %.reg2mem, !insn.addr !2893
  store i64 %255, i64* %r15.015.reg2mem, !insn.addr !2893
  store i64 %r10.1.reload, i64* %r10.09.reg2mem, !insn.addr !2893
  store i64 %r9.1.reload, i64* %r9.08.reg2mem, !insn.addr !2893
  store i64 %rcx.6.reload, i64* %rcx.06.reg2mem, !insn.addr !2893
  store i64 %256, i64* %.lcssa.reg2mem, !insn.addr !2893
  br i1 %258, label %dec_label_pc_4e81, label %dec_label_pc_4b9f, !insn.addr !2893

dec_label_pc_4e81:                                ; preds = %dec_label_pc_4e77, %dec_label_pc_4b8c
  %.lcssa.reload = load i64, i64* %.lcssa.reg2mem
  %259 = load i64, i64* %23, align 8, !insn.addr !2969
  %260 = add i64 %259, 32, !insn.addr !2970
  %261 = inttoptr i64 %260 to i64*, !insn.addr !2970
  %262 = load i64, i64* %261, align 8, !insn.addr !2970
  store i64 %262, i64* %29, align 8, !insn.addr !2971
  %263 = load i64, i64* %32, align 8, !insn.addr !2972
  %264 = add i64 %263, 168, !insn.addr !2973
  %265 = inttoptr i64 %264 to i64*, !insn.addr !2973
  %266 = load i64, i64* %265, align 8, !insn.addr !2973
  %267 = call i64 @lzma_free(i64 %266, i64 %21, i64 %.lcssa.reload), !insn.addr !2974
  %268 = load i64, i64* %53, align 8, !insn.addr !2975
  %269 = call i64 @lzma_free(i64 %268, i64 %44, i64 %.lcssa.reload), !insn.addr !2976
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2976
  br label %dec_label_pc_4eb1, !insn.addr !2976

dec_label_pc_4eb1:                                ; preds = %dec_label_pc_4b9f, %dec_label_pc_4ac0, %dec_label_pc_4e43, %dec_label_pc_4e81, %dec_label_pc_4e4d
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2977

; uselistorder directives
  uselistorder i64 %243, { 1, 0 }
  uselistorder i64 %242, { 1, 0 }
  uselistorder i64 %rdx.3.reload, { 0, 2, 1 }
  uselistorder i64 %183, { 2, 1, 0 }
  uselistorder i64 %182, { 2, 0, 3, 1 }
  uselistorder i32 %168, { 1, 0 }
  uselistorder i64 %rcx.1.reload, { 0, 1, 3, 2 }
  uselistorder i64 %153, { 1, 0 }
  uselistorder i64 %148, { 9, 8, 10, 5, 6, 4, 3, 7, 0, 1, 2 }
  uselistorder i32 %147, { 1, 0, 2 }
  uselistorder i64 %r10.09.reload, { 10, 12, 9, 11, 6, 7, 5, 4, 8, 0, 1, 2, 3 }
  uselistorder i64 %r15.015.reload, { 1, 0 }
  uselistorder i64 %r9.08.reload, { 0, 2, 1 }
  uselistorder i64 %rcx.06.reload, { 3, 2, 4, 5, 1, 0, 6 }
  uselistorder i1 %brmerge26, { 1, 2, 0 }
  uselistorder i64 %129, { 1, 0 }
  uselistorder i1 %98, { 1, 0 }
  uselistorder i64 %89, { 2, 1, 0 }
  uselistorder i1 %86, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %83, { 0, 2, 1, 3 }
  uselistorder i64 %81, { 1, 0 }
  uselistorder i1 %80, { 1, 0 }
  uselistorder i1 %77, { 1, 0, 2 }
  uselistorder i1 %75, { 0, 3, 5, 4, 2, 1 }
  uselistorder i64 %60, { 1, 0, 2 }
  uselistorder i64* %59, { 1, 0 }
  uselistorder i64 %51, { 1, 0 }
  uselistorder i64 %44, { 0, 2, 1 }
  uselistorder i64 %33, { 1, 2, 0, 3 }
  uselistorder i64 %30, { 1, 0 }
  uselistorder i64 %19, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i64* %stack_var_-128, { 2, 0, 1 }
  uselistorder i32 %15, { 0, 1, 4, 2, 3 }
  uselistorder i32 %14, { 0, 5, 3, 4, 1, 2 }
  uselistorder i8 %12, { 1, 0 }
  uselistorder i8 %11, { 1, 0 }
  uselistorder i8 %10, { 0, 2, 1 }
  uselistorder i32 %9, { 2, 0, 1 }
  uselistorder i8 %8, { 2, 1, 0 }
  uselistorder i64 %7, { 1, 0 }
  uselistorder i32 %4, { 2, 1, 0 }
  uselistorder i64* %.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r15.015.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r10.09.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r9.08.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.06.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.0.reg2mem, { 0, 2, 3, 1 }
  uselistorder i64* %rcx.1.reg2mem, { 0, 2, 3, 1 }
  uselistorder i64* %rax.1.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.3.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64* %rcx.3.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64* %rdx.4.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64* %rax.5.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rcx.5.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rdx.6.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rcx.6.reg2mem, { 0, 12, 11, 13, 7, 8, 9, 6, 5, 10, 1, 2, 3, 4 }
  uselistorder i64* %r9.1.reg2mem, { 0, 12, 11, 13, 7, 8, 9, 6, 5, 10, 1, 2, 3, 4 }
  uselistorder i64* %r10.1.reg2mem, { 0, 12, 11, 13, 7, 8, 9, 6, 5, 10, 1, 2, 3, 4 }
  uselistorder i64* %storemerge.reg2mem, { 0, 4, 5, 3, 1, 2 }
  uselistorder i8* %2, { 4, 3, 2, 1, 0 }
  uselistorder i32* %1, { 4, 3, 2, 1, 0 }
  uselistorder i64* %0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_4eb1, { 3, 4, 2, 0, 1 }
  uselistorder label %dec_label_pc_4e77, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1 }
  uselistorder label %dec_label_pc_4e43, { 1, 2, 0 }
  uselistorder label %dec_label_pc_4d89, { 1, 0 }
  uselistorder label %dec_label_pc_4d80, { 2, 1, 0 }
  uselistorder label %dec_label_pc_4d63, { 1, 0 }
  uselistorder label %174, { 1, 0 }
  uselistorder label %dec_label_pc_4c7a, { 1, 2, 0 }
  uselistorder label %dec_label_pc_4b9f, { 1, 0 }
}

define i64 @.Llzma_index_hash_init.part.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_4ec0:
  %0 = alloca i64
  %1 = alloca i32
  %2 = alloca i8
  %storemerge.reg2mem = alloca i64, !insn.addr !2978
  %r8.2.reg2mem = alloca i64, !insn.addr !2978
  %rcx.110.reg2mem = alloca i64, !insn.addr !2978
  %rbx.011.reg2mem = alloca i64, !insn.addr !2978
  %r8.112.reg2mem = alloca i64, !insn.addr !2978
  %r9.113.reg2mem = alloca i64, !insn.addr !2978
  %r9.0.reg2mem = alloca i64, !insn.addr !2978
  %r8.0.reg2mem = alloca i64, !insn.addr !2978
  %rcx.0.reg2mem = alloca i64, !insn.addr !2978
  %3 = load i32, i32* %1
  %stack_var_-172 = alloca i64, align 8
  %stack_var_-192 = alloca i64, align 8
  %4 = load i64, i64* %0
  %5 = load i32, i32* %1
  %6 = load i32, i32* %1
  %7 = load i8, i8* %2
  %8 = load i8, i8* %2
  %9 = load i8, i8* %2
  %10 = load i32, i32* %1
  %11 = load i64, i64* %0
  %12 = load i32, i32* %1
  %stack_var_-128 = alloca i64, align 8
  %13 = call i64 @.Llzma_index_iter_rewind.cold(i64 133, i64 18, i64 8, i32 0, i64 %arg1), !insn.addr !2979
  %14 = trunc i64 %13 to i32, !insn.addr !2980
  %15 = icmp eq i32 %14, 0, !insn.addr !2980
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2981
  br i1 %15, label %dec_label_pc_51a5, label %dec_label_pc_4f01, !insn.addr !2981

dec_label_pc_4f01:                                ; preds = %dec_label_pc_4ec0
  %16 = add i64 %arg4, 280, !insn.addr !2982
  %17 = inttoptr i64 %16 to i64*, !insn.addr !2982
  %18 = load i64, i64* %17, align 8, !insn.addr !2982
  %19 = bitcast i64* %stack_var_-128 to i8*, !insn.addr !2983
  call void @__asm_rep_stosd_memset(i8* nonnull %19, i32 0, i64 22), !insn.addr !2983
  %20 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !2984
  %21 = add i64 %arg1, 8, !insn.addr !2985
  %22 = inttoptr i64 %21 to i64*, !insn.addr !2985
  %23 = load i64, i64* %22, align 8, !insn.addr !2985
  %24 = add i64 %23, 16, !insn.addr !2986
  %25 = inttoptr i64 %24 to i64*, !insn.addr !2986
  %26 = load i64, i64* %25, align 8, !insn.addr !2986
  %27 = add i64 %20, 16, !insn.addr !2987
  %28 = inttoptr i64 %27 to i64*, !insn.addr !2987
  store i64 %26, i64* %28, align 8, !insn.addr !2987
  %29 = call i64 @lzma_alloc(i64 896, i64 %20, i64 8, i64 0), !insn.addr !2988
  %30 = add i64 %18, 56, !insn.addr !2989
  %31 = inttoptr i64 %30 to i64*, !insn.addr !2989
  store i64 %29, i64* %31, align 8, !insn.addr !2989
  %32 = icmp eq i64 %29, 0, !insn.addr !2990
  br i1 %32, label %dec_label_pc_4f68, label %dec_label_pc_4f64, !insn.addr !2991

dec_label_pc_4f64:                                ; preds = %dec_label_pc_4f01
  %33 = inttoptr i64 %18 to i32*, !insn.addr !2992
  %34 = load i32, i32* %33, align 4, !insn.addr !2992
  %35 = add i32 %34, 1, !insn.addr !2992
  store i32 %35, i32* %33, align 4, !insn.addr !2992
  br label %dec_label_pc_4f68, !insn.addr !2992

dec_label_pc_4f68:                                ; preds = %dec_label_pc_4f64, %dec_label_pc_4f01
  %36 = add i64 %arg3, 256, !insn.addr !2993
  %37 = inttoptr i64 %36 to i64*, !insn.addr !2993
  %38 = load i64, i64* %37, align 8, !insn.addr !2993
  %39 = add i64 %arg3, 264, !insn.addr !2994
  %40 = inttoptr i64 %39 to i64*, !insn.addr !2994
  %41 = load i64, i64* %40, align 8, !insn.addr !2994
  %42 = call i64 @lzma_alloc(i64 1680, i64 %20, i64 8, i64 0), !insn.addr !2995
  %43 = add i64 %18, 64, !insn.addr !2996
  %44 = inttoptr i64 %43 to i64*, !insn.addr !2996
  store i64 %42, i64* %44, align 8, !insn.addr !2996
  %45 = icmp eq i64 %42, 0, !insn.addr !2997
  br i1 %45, label %dec_label_pc_4fbd.preheader, label %dec_label_pc_4fa5, !insn.addr !2998

dec_label_pc_4fa5:                                ; preds = %dec_label_pc_4f68
  %46 = inttoptr i64 %18 to i32*, !insn.addr !2999
  %47 = load i32, i32* %46, align 4, !insn.addr !2999
  %48 = add i32 %47, 1, !insn.addr !2999
  store i32 %48, i32* %46, align 4, !insn.addr !2999
  br label %dec_label_pc_4fbd.preheader, !insn.addr !3000

dec_label_pc_4fbd.preheader:                      ; preds = %dec_label_pc_4f68, %dec_label_pc_4fa5
  %49 = add i64 %41, %38, !insn.addr !3001
  %50 = icmp ult i64 %38, %49, !insn.addr !3002
  %51 = icmp eq i1 %50, false, !insn.addr !3003
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3003
  br i1 %51, label %dec_label_pc_51a5, label %dec_label_pc_4fc2.lr.ph, !insn.addr !3003

dec_label_pc_4fc2.lr.ph:                          ; preds = %dec_label_pc_4fbd.preheader
  %52 = icmp ne i32 %12, 4150
  %53 = zext i32 %10 to i64
  %54 = and i32 %10, 320
  %55 = icmp eq i32 %54, 320
  %56 = icmp eq i1 %55, false
  %57 = zext i8 %9 to i64
  %58 = and i32 %10, -65280
  %59 = zext i32 %58 to i64
  %60 = or i64 %59, %57
  %61 = add nuw nsw i64 %60, 4294967295
  %62 = trunc i64 %61 to i8
  %63 = icmp ugt i8 %62, 1
  %64 = and i64 %53, 4294905920
  %65 = trunc i32 %10 to i8
  %66 = and i8 %65, 64
  %67 = icmp eq i8 %66, 0
  %68 = zext i8 %66 to i64
  %69 = and i64 %61, 4294967040
  %70 = or i64 %69, %68
  %71 = icmp eq i1 %67, false
  %72 = and i32 %10, 32
  %73 = icmp eq i32 %72, 0
  %74 = zext i8 %7 to i64
  %75 = or i64 %69, %74
  %76 = icmp eq i1 %73, false
  %77 = mul i32 %6, 8
  %78 = and i32 %77, 8
  %79 = trunc i64 %75 to i32
  %80 = or i32 %78, %79
  %81 = zext i32 %80 to i64
  %82 = urem i8 %8, 2
  %83 = icmp eq i8 %82, 0
  %84 = add i32 %5, -83886080
  %85 = and i32 %84, -16711936
  %86 = icmp eq i32 %85, 0
  %87 = icmp eq i1 %86, false
  %88 = add i64 %11, %4
  %89 = bitcast i64* %stack_var_-192 to i8*
  %90 = bitcast i64* %stack_var_-172 to i8*
  %rdx.0 = ptrtoint i64* %stack_var_-172 to i64
  %91 = icmp ne i32 %3, 0
  %brmerge = or i1 %52, %56
  %brmerge24 = or i1 %brmerge, %63
  %spec.select = select i1 %76, i64 %81, i64 %75
  %r9.2 = select i1 %71, i64 %spec.select, i64 %70
  %92 = trunc i64 %r9.2 to i32
  %93 = urem i32 %92, 32
  store i64 %38, i64* %rbx.011.reg2mem
  store i64 0, i64* %rcx.110.reg2mem
  br label %dec_label_pc_4fc2

dec_label_pc_4fab:                                ; preds = %dec_label_pc_4fc2
  %rcx.110.mux.mux = select i1 %52, i64 %rcx.110.reload, i64 %53
  %brmerge31 = or i1 %brmerge24, %83
  %rcx.110.mux.mux.mux = select i1 %brmerge24, i64 %rcx.110.mux.mux, i64 %64
  %r8.112.mux = select i1 %brmerge24, i64 %r8.112.reload, i64 %11
  %r9.113.mux = select i1 %brmerge24, i64 %r9.113.reload, i64 %r9.2
  store i64 %rcx.110.mux.mux.mux, i64* %rcx.0.reg2mem, !insn.addr !3004
  store i64 %r8.112.mux, i64* %r8.0.reg2mem, !insn.addr !3004
  store i64 %r9.113.mux, i64* %r9.0.reg2mem, !insn.addr !3004
  br i1 %brmerge31, label %dec_label_pc_4fb8, label %dec_label_pc_5093, !insn.addr !3004

dec_label_pc_4fb8:                                ; preds = %dec_label_pc_4fab, %dec_label_pc_50cd, %dec_label_pc_5171, %dec_label_pc_5093
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %94 = add i64 %rbx.011.reload, %11, !insn.addr !3005
  %95 = icmp ult i64 %94, %49, !insn.addr !3002
  %96 = icmp eq i1 %95, false, !insn.addr !3003
  store i64 %r9.0.reload, i64* %r9.113.reg2mem, !insn.addr !3003
  store i64 %r8.0.reload, i64* %r8.112.reg2mem, !insn.addr !3003
  store i64 %94, i64* %rbx.011.reg2mem, !insn.addr !3003
  store i64 %rcx.0.reload, i64* %rcx.110.reg2mem, !insn.addr !3003
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3003
  br i1 %96, label %dec_label_pc_51a5, label %dec_label_pc_4fc2, !insn.addr !3003

dec_label_pc_4fc2:                                ; preds = %dec_label_pc_4fc2.lr.ph, %dec_label_pc_4fb8
  %rcx.110.reload = load i64, i64* %rcx.110.reg2mem
  %rbx.011.reload = load i64, i64* %rbx.011.reg2mem
  %r8.112.reload = load i64, i64* %r8.112.reg2mem
  %r9.113.reload = load i64, i64* %r9.113.reg2mem
  %97 = call i64 @.Lx86_code.part.0(i64* nonnull %stack_var_-128, i64 %rbx.011.reload, i64 %49, i64 %rcx.110.reload, i64 %r8.112.reload, i64 %r9.113.reload), !insn.addr !3006
  %98 = trunc i64 %97 to i32, !insn.addr !3007
  %99 = icmp eq i32 %98, 0, !insn.addr !3007
  %100 = icmp eq i1 %99, false, !insn.addr !3008
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3008
  br i1 %100, label %dec_label_pc_4fab, label %dec_label_pc_51a5, !insn.addr !3008

dec_label_pc_5093:                                ; preds = %dec_label_pc_4fab
  %101 = load i64, i64* %stack_var_-128, align 8
  %102 = add i64 %88, %101
  %rsi.0 = select i1 %87, i64 %4, i64 %102
  %103 = icmp ult i64 %rsi.0, %arg2, !insn.addr !3009
  %104 = icmp eq i1 %103, false, !insn.addr !3010
  %105 = icmp eq i64 %rsi.0, 0, !insn.addr !3011
  %or.cond = or i1 %105, %104
  store i64 %64, i64* %rcx.0.reg2mem, !insn.addr !3010
  store i64 %r9.2, i64* %r9.0.reg2mem, !insn.addr !3010
  br i1 %or.cond, label %dec_label_pc_4fb8, label %dec_label_pc_50cd, !insn.addr !3010

dec_label_pc_50cd:                                ; preds = %dec_label_pc_5093
  call void @__asm_rep_stosd_memset(i8* nonnull %89, i32 0, i64 16), !insn.addr !3012
  store i64 %r9.2, i64* %rcx.0.reg2mem
  store i64 %r9.2, i64* %r9.0.reg2mem
  switch i32 %93, label %dec_label_pc_4fb8 [
    i32 7, label %dec_label_pc_50f4
    i32 1, label %dec_label_pc_513b
  ]

dec_label_pc_50f4:                                ; preds = %dec_label_pc_50cd
  %106 = add i64 %rbx.011.reload, %11, !insn.addr !3013
  store i64 %106, i64* %stack_var_-192, align 8, !insn.addr !3014
  call void @__asm_rep_stosd_memset(i8* nonnull %90, i32 0, i64 7), !insn.addr !3015
  store i64 %106, i64* %r8.2.reg2mem, !insn.addr !3016
  br label %dec_label_pc_5171, !insn.addr !3016

dec_label_pc_513b:                                ; preds = %dec_label_pc_50cd
  %107 = add i64 %rbx.011.reload, %11, !insn.addr !3017
  store i64 %107, i64* %stack_var_-192, align 8, !insn.addr !3018
  call void @__asm_rep_stosd_memset(i8* nonnull %90, i32 0, i64 7), !insn.addr !3019
  store i64 %107, i64* %r8.2.reg2mem, !insn.addr !3020
  br label %dec_label_pc_5171, !insn.addr !3020

dec_label_pc_5171:                                ; preds = %dec_label_pc_513b, %dec_label_pc_50f4
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %108 = call i64 @.Llzma_index_iter_locate.1(i64 %arg1, i64* nonnull %stack_var_-192, i64 %rdx.0, i64 0, i64 %r8.2.reload, i64 %r9.2), !insn.addr !3021
  %109 = trunc i64 %108 to i32, !insn.addr !3022
  %110 = icmp eq i32 %109, 0, !insn.addr !3022
  %111 = icmp eq i1 %110, false, !insn.addr !3023
  %brmerge26 = or i1 %91, %111
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !3023
  store i64 %r8.2.reload, i64* %r8.0.reg2mem, !insn.addr !3023
  store i64 %r9.2, i64* %r9.0.reg2mem, !insn.addr !3023
  br i1 %brmerge26, label %dec_label_pc_51a5.loopexit.split.loop.exit29, label %dec_label_pc_4fb8, !insn.addr !3023

dec_label_pc_51a5.loopexit.split.loop.exit29:     ; preds = %dec_label_pc_5171
  %.mux.le = zext i1 %111 to i64
  store i64 %.mux.le, i64* %storemerge.reg2mem
  br label %dec_label_pc_51a5

dec_label_pc_51a5:                                ; preds = %dec_label_pc_51a5.loopexit.split.loop.exit29, %dec_label_pc_4fb8, %dec_label_pc_4fc2, %dec_label_pc_4fbd.preheader, %dec_label_pc_4ec0
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !3024

; uselistorder directives
  uselistorder i64 %r8.2.reload, { 1, 0 }
  uselistorder i64 %rbx.011.reload, { 1, 2, 0, 3 }
  uselistorder i64 %r9.2, { 1, 6, 0, 3, 2, 4, 5 }
  uselistorder i64 %49, { 2, 1, 0 }
  uselistorder i64 %38, { 0, 2, 1 }
  uselistorder i64 %29, { 1, 0 }
  uselistorder i64 %20, { 0, 2, 1 }
  uselistorder i64 %18, { 1, 2, 0, 3 }
  uselistorder i64* %stack_var_-128, { 2, 0, 1 }
  uselistorder i64 %11, { 1, 2, 3, 4, 0 }
  uselistorder i32 %10, { 4, 0, 2, 3, 1 }
  uselistorder i64* %stack_var_-192, { 0, 2, 3, 1 }
  uselistorder i64* %rcx.0.reg2mem, { 2, 1, 4, 0, 3 }
  uselistorder i64* %r8.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r9.0.reg2mem, { 2, 1, 4, 0, 3 }
  uselistorder i64* %r8.2.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 1, 2, 4, 5 }
  uselistorder i8* %2, { 2, 1, 0 }
  uselistorder i32* %1, { 4, 3, 2, 1, 0 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i32 32, { 0, 3, 1, 4, 2 }
  uselistorder i64 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_51a5, { 0, 2, 1, 3, 4 }
  uselistorder label %dec_label_pc_4fc2, { 1, 0 }
  uselistorder label %dec_label_pc_4fb8, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_4fbd.preheader, { 1, 0 }
}

define i64 @.Llzma_lz_decoder_init.0(i64* %arg1, i64* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_51c0:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !3025
  %rdx.2.reg2mem = alloca i64, !insn.addr !3025
  %.pre-phi2.reg2mem = alloca i64*, !insn.addr !3025
  %.pre-phi6.reg2mem = alloca i64*, !insn.addr !3025
  %rdx.1.reg2mem = alloca i64, !insn.addr !3025
  %rdx.0.reg2mem = alloca i64, !insn.addr !3025
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %3 = call i64 @.Llzma_index_iter_rewind.cold(i64 0, i64 10, i64 0, i32 0, i64 %2), !insn.addr !3026
  %4 = trunc i64 %3 to i32, !insn.addr !3027
  %5 = icmp eq i32 %4, 0, !insn.addr !3027
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3028
  br i1 %5, label %dec_label_pc_53e0, label %dec_label_pc_51f5, !insn.addr !3028

dec_label_pc_51f5:                                ; preds = %dec_label_pc_51c0
  %6 = ptrtoint i64* %arg1 to i64
  %7 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !3029
  %8 = add i64 %6, 8, !insn.addr !3030
  %9 = inttoptr i64 %8 to i64*, !insn.addr !3030
  %10 = load i64, i64* %9, align 8, !insn.addr !3030
  %11 = add i64 %10, 32, !insn.addr !3031
  %12 = inttoptr i64 %11 to i64*, !insn.addr !3031
  %13 = load i64, i64* %12, align 8, !insn.addr !3031
  %14 = add i64 %7, 16, !insn.addr !3032
  %15 = inttoptr i64 %14 to i64*, !insn.addr !3032
  store i64 %13, i64* %15, align 8, !insn.addr !3032
  %16 = call i64 @.Lcrc_init.0(i64 %13, i64 1760, i32 0, i64 0), !insn.addr !3033
  %17 = load i64, i64* %9, align 8, !insn.addr !3034
  %18 = add i64 %17, ptrtoint (i32** @global_var_18 to i64), !insn.addr !3035
  %19 = inttoptr i64 %18 to i64*, !insn.addr !3035
  %20 = load i64, i64* %19, align 8, !insn.addr !3035
  %21 = add i64 %20, 76, !insn.addr !3036
  %22 = inttoptr i64 %21 to i32*, !insn.addr !3036
  %23 = load i32, i32* %22, align 4, !insn.addr !3036
  %24 = icmp eq i32 %23, 0, !insn.addr !3036
  br i1 %24, label %dec_label_pc_51f5.dec_label_pc_53b4_crit_edge, label %dec_label_pc_522c, !insn.addr !3037

dec_label_pc_51f5.dec_label_pc_53b4_crit_edge:    ; preds = %dec_label_pc_51f5
  %.pre = add i64 %arg4, 152, !insn.addr !3038
  %.pre1 = inttoptr i64 %.pre to i64*, !insn.addr !3038
  %.pre3 = add i64 %arg4, 80, !insn.addr !3039
  %.pre5 = inttoptr i64 %.pre3 to i64*, !insn.addr !3039
  store i64* %.pre5, i64** %.pre-phi6.reg2mem
  store i64* %.pre1, i64** %.pre-phi2.reg2mem
  store i64 %17, i64* %rdx.2.reg2mem
  br label %dec_label_pc_53b4

dec_label_pc_522c:                                ; preds = %dec_label_pc_51f5
  %25 = icmp eq i64 %16, 0, !insn.addr !3040
  store i64 %17, i64* %rdx.0.reg2mem, !insn.addr !3041
  br i1 %25, label %dec_label_pc_5246, label %dec_label_pc_5231, !insn.addr !3041

dec_label_pc_5231:                                ; preds = %dec_label_pc_522c
  %26 = add i64 %17, 32, !insn.addr !3042
  %27 = inttoptr i64 %26 to i64*, !insn.addr !3042
  %28 = load i64, i64* %27, align 8, !insn.addr !3042
  %29 = add i64 %16, 8, !insn.addr !3043
  %30 = inttoptr i64 %29 to i64*, !insn.addr !3043
  %31 = load i64, i64* %30, align 8, !insn.addr !3043
  %32 = inttoptr i64 %28 to i64*, !insn.addr !3044
  %33 = load i64, i64* %32, align 8, !insn.addr !3044
  %34 = add i64 %33, %31, !insn.addr !3044
  %35 = add i64 %arg4, 288, !insn.addr !3045
  %36 = inttoptr i64 %35 to i32*, !insn.addr !3045
  %37 = load i32, i32* %36, align 4, !insn.addr !3045
  %38 = add i32 %37, 1, !insn.addr !3045
  store i32 %38, i32* %36, align 4, !insn.addr !3045
  %39 = add i64 %arg4, 64, !insn.addr !3046
  %40 = inttoptr i64 %39 to i64*, !insn.addr !3046
  store i64 %34, i64* %40, align 8, !insn.addr !3046
  store i64 %28, i64* %rdx.0.reg2mem, !insn.addr !3046
  br label %dec_label_pc_5246, !insn.addr !3046

dec_label_pc_5246:                                ; preds = %dec_label_pc_5231, %dec_label_pc_522c
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %41 = call i64 @lzma_alloc(i64 1784, i64 %7, i64 %rdx.0.reload, i64 %20), !insn.addr !3047
  %42 = add i64 %arg4, 152
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43, align 8, !insn.addr !3048
  %44 = icmp eq i64 %41, 0, !insn.addr !3049
  br i1 %44, label %dec_label_pc_5265, label %dec_label_pc_525f, !insn.addr !3050

dec_label_pc_525f:                                ; preds = %dec_label_pc_5246
  %45 = add i64 %arg4, 288, !insn.addr !3051
  %46 = inttoptr i64 %45 to i32*, !insn.addr !3051
  %47 = load i32, i32* %46, align 4, !insn.addr !3051
  %48 = add i32 %47, 1, !insn.addr !3051
  store i32 %48, i32* %46, align 4, !insn.addr !3051
  br label %dec_label_pc_5265, !insn.addr !3051

dec_label_pc_5265:                                ; preds = %dec_label_pc_525f, %dec_label_pc_5246
  %49 = load i64, i64* %9, align 8, !insn.addr !3052
  %50 = add i64 %49, 32, !insn.addr !3053
  %51 = inttoptr i64 %50 to i64*, !insn.addr !3053
  %52 = load i64, i64* %51, align 8, !insn.addr !3053
  %53 = call i64 @.Lcrc_init.0(i64 %52, i64 616, i32 0, i64 %20), !insn.addr !3054
  %54 = call i64 @lzma_alloc(i64 2024, i64 %7, i64 0, i64 %20), !insn.addr !3055
  %55 = icmp eq i64 %54, 0, !insn.addr !3056
  %56 = add i64 %arg4, 80
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8, !insn.addr !3057
  br i1 %55, label %dec_label_pc_529f, label %dec_label_pc_5299, !insn.addr !3058

dec_label_pc_5299:                                ; preds = %dec_label_pc_5265
  %58 = add i64 %arg4, 288, !insn.addr !3059
  %59 = inttoptr i64 %58 to i32*, !insn.addr !3059
  %60 = load i32, i32* %59, align 4, !insn.addr !3059
  %61 = add i32 %60, 1, !insn.addr !3059
  store i32 %61, i32* %59, align 4, !insn.addr !3059
  br label %dec_label_pc_529f, !insn.addr !3059

dec_label_pc_529f:                                ; preds = %dec_label_pc_5299, %dec_label_pc_5265
  %62 = load i64, i64* %9, align 8, !insn.addr !3060
  %63 = icmp eq i64 %53, 0, !insn.addr !3061
  br i1 %63, label %dec_label_pc_52bd, label %dec_label_pc_52a8, !insn.addr !3062

dec_label_pc_52a8:                                ; preds = %dec_label_pc_529f
  %64 = add i64 %62, 32, !insn.addr !3063
  %65 = inttoptr i64 %64 to i64*, !insn.addr !3063
  %66 = load i64, i64* %65, align 8, !insn.addr !3063
  %67 = add i64 %53, 8, !insn.addr !3064
  %68 = inttoptr i64 %67 to i64*, !insn.addr !3064
  %69 = load i64, i64* %68, align 8, !insn.addr !3064
  %70 = inttoptr i64 %66 to i64*, !insn.addr !3065
  %71 = load i64, i64* %70, align 8, !insn.addr !3065
  %72 = add i64 %71, %69, !insn.addr !3065
  %73 = add i64 %arg4, 288, !insn.addr !3066
  %74 = inttoptr i64 %73 to i32*, !insn.addr !3066
  %75 = load i32, i32* %74, align 4, !insn.addr !3066
  %76 = add i32 %75, 1, !insn.addr !3066
  store i32 %76, i32* %74, align 4, !insn.addr !3066
  %77 = add i64 %arg4, ptrtoint (i32** @global_var_48 to i64), !insn.addr !3067
  %78 = inttoptr i64 %77 to i64*, !insn.addr !3067
  store i64 %72, i64* %78, align 8, !insn.addr !3067
  br label %dec_label_pc_52bd, !insn.addr !3067

dec_label_pc_52bd:                                ; preds = %dec_label_pc_52a8, %dec_label_pc_529f
  %79 = add i64 %62, 8, !insn.addr !3068
  %80 = inttoptr i64 %79 to i64*, !insn.addr !3068
  %81 = load i64, i64* %80, align 8, !insn.addr !3068
  %82 = call i64 @.Lcrc_init.0(i64 %81, i64 2504, i32 0, i64 %62), !insn.addr !3069
  %83 = icmp eq i64 %82, 0, !insn.addr !3070
  store i64* %57, i64** %.pre-phi6.reg2mem, !insn.addr !3071
  store i64* %43, i64** %.pre-phi2.reg2mem, !insn.addr !3071
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !3071
  br i1 %83, label %dec_label_pc_53b4, label %dec_label_pc_52d6, !insn.addr !3071

dec_label_pc_52d6:                                ; preds = %dec_label_pc_52bd
  %84 = load i64, i64* %9, align 8, !insn.addr !3072
  %85 = add i64 %82, 8, !insn.addr !3073
  %86 = inttoptr i64 %85 to i64*, !insn.addr !3073
  %87 = load i64, i64* %86, align 8, !insn.addr !3073
  %88 = add i64 %84, 8, !insn.addr !3074
  %89 = inttoptr i64 %88 to i64*, !insn.addr !3074
  %90 = load i64, i64* %89, align 8, !insn.addr !3074
  %91 = add i64 %82, 16, !insn.addr !3075
  %92 = inttoptr i64 %91 to i64*, !insn.addr !3075
  %93 = load i64, i64* %92, align 8, !insn.addr !3075
  %94 = inttoptr i64 %90 to i64*, !insn.addr !3076
  %95 = load i64, i64* %94, align 8, !insn.addr !3076
  %96 = add i64 %95, %87, !insn.addr !3076
  %97 = add i64 %arg3, 264, !insn.addr !3077
  %98 = inttoptr i64 %97 to i64*, !insn.addr !3077
  store i64 %93, i64* %98, align 8, !insn.addr !3077
  %99 = add i64 %arg3, 256, !insn.addr !3078
  %100 = inttoptr i64 %99 to i64*, !insn.addr !3078
  store i64 %96, i64* %100, align 8, !insn.addr !3078
  %101 = call i64 @.Lparse_bcj.0(i64 %90, i64 %96, i64 %93, i64 4, i64 %1), !insn.addr !3079
  %102 = trunc i64 %101 to i32, !insn.addr !3080
  %103 = icmp eq i32 %102, 0, !insn.addr !3080
  store i64* %57, i64** %.pre-phi6.reg2mem, !insn.addr !3081
  store i64* %43, i64** %.pre-phi2.reg2mem, !insn.addr !3081
  store i64 %93, i64* %rdx.2.reg2mem, !insn.addr !3081
  br i1 %103, label %dec_label_pc_53b4, label %dec_label_pc_530b, !insn.addr !3081

dec_label_pc_530b:                                ; preds = %dec_label_pc_52d6
  %104 = ptrtoint i64* %arg2 to i64
  %105 = call i64 @.Llzma_delta_props_encode.part.0(i64 %6, i64 %104, i64 %arg3, i64 %arg4), !insn.addr !3082
  %106 = trunc i64 %105 to i32, !insn.addr !3083
  %107 = icmp eq i32 %106, 0, !insn.addr !3083
  store i64* %57, i64** %.pre-phi6.reg2mem, !insn.addr !3084
  store i64* %43, i64** %.pre-phi2.reg2mem, !insn.addr !3084
  store i64 %arg3, i64* %rdx.2.reg2mem, !insn.addr !3084
  br i1 %107, label %dec_label_pc_53b4, label %dec_label_pc_5324, !insn.addr !3084

dec_label_pc_5324:                                ; preds = %dec_label_pc_530b
  %108 = call i64 @lzma_alloc(i64 2856, i64 %7, i64 %arg3, i64 %arg4), !insn.addr !3085
  %109 = add i64 %arg4, 192, !insn.addr !3086
  %110 = inttoptr i64 %109 to i64*, !insn.addr !3086
  store i64 %108, i64* %110, align 8, !insn.addr !3086
  %111 = icmp eq i64 %108, 0, !insn.addr !3087
  br i1 %111, label %dec_label_pc_5343, label %dec_label_pc_533d, !insn.addr !3088

dec_label_pc_533d:                                ; preds = %dec_label_pc_5324
  %112 = add i64 %arg4, 288, !insn.addr !3089
  %113 = inttoptr i64 %112 to i32*, !insn.addr !3089
  %114 = load i32, i32* %113, align 4, !insn.addr !3089
  %115 = add i32 %114, 1, !insn.addr !3089
  store i32 %115, i32* %113, align 4, !insn.addr !3089
  br label %dec_label_pc_5343, !insn.addr !3089

dec_label_pc_5343:                                ; preds = %dec_label_pc_533d, %dec_label_pc_5324
  %116 = load i64, i64* %9, align 8, !insn.addr !3090
  %117 = add i64 %116, 32, !insn.addr !3091
  %118 = inttoptr i64 %117 to i64*, !insn.addr !3091
  %119 = load i64, i64* %118, align 8, !insn.addr !3091
  %120 = add i64 %116, 8, !insn.addr !3092
  %121 = inttoptr i64 %120 to i64*, !insn.addr !3092
  %122 = load i64, i64* %121, align 8, !insn.addr !3092
  %123 = call i64 @.Llzma_filter_flags_decode.0(i64 %122, i64 %119, i64 %arg3, i64 %arg4), !insn.addr !3093
  %124 = trunc i64 %123 to i32, !insn.addr !3094
  %125 = icmp eq i32 %124, 0, !insn.addr !3094
  store i64* %57, i64** %.pre-phi6.reg2mem, !insn.addr !3095
  store i64* %43, i64** %.pre-phi2.reg2mem, !insn.addr !3095
  store i64 %arg3, i64* %rdx.2.reg2mem, !insn.addr !3095
  br i1 %125, label %dec_label_pc_53b4, label %dec_label_pc_535e, !insn.addr !3095

dec_label_pc_535e:                                ; preds = %dec_label_pc_5343
  %126 = call i64 @.Llzma_index_hash_init.part.0(i64 %6, i64 %119, i64 %arg3, i64 %arg4), !insn.addr !3096
  %127 = trunc i64 %126 to i32, !insn.addr !3097
  %128 = icmp eq i32 %127, 0, !insn.addr !3097
  store i64* %57, i64** %.pre-phi6.reg2mem, !insn.addr !3098
  store i64* %43, i64** %.pre-phi2.reg2mem, !insn.addr !3098
  store i64 %arg3, i64* %rdx.2.reg2mem, !insn.addr !3098
  br i1 %128, label %dec_label_pc_53b4, label %dec_label_pc_5373, !insn.addr !3098

dec_label_pc_5373:                                ; preds = %dec_label_pc_535e
  %129 = inttoptr i64 %arg3 to i8*, !insn.addr !3099
  call void @__asm_rep_stosd_memset(i8* %129, i32 0, i64 16), !insn.addr !3099
  %130 = add i64 %arg3, 248, !insn.addr !3100
  %131 = inttoptr i64 %130 to i64*, !insn.addr !3100
  %132 = load i64, i64* %131, align 8, !insn.addr !3100
  %133 = add i64 %132, 8, !insn.addr !3101
  %134 = inttoptr i64 %133 to i32*, !insn.addr !3101
  %135 = load i32, i32* %134, align 4, !insn.addr !3101
  %136 = icmp ult i32 %135, 9
  store i64* %57, i64** %.pre-phi6.reg2mem, !insn.addr !3102
  store i64* %43, i64** %.pre-phi2.reg2mem, !insn.addr !3102
  store i64 %132, i64* %rdx.2.reg2mem, !insn.addr !3102
  br i1 %136, label %dec_label_pc_538f, label %dec_label_pc_53b4, !insn.addr !3102

dec_label_pc_538f:                                ; preds = %dec_label_pc_5373
  %137 = icmp eq i32 %135, 0, !insn.addr !3103
  %138 = icmp eq i1 %137, false, !insn.addr !3104
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !3104
  br i1 %138, label %dec_label_pc_539a, label %dec_label_pc_53e0, !insn.addr !3104

dec_label_pc_539a:                                ; preds = %dec_label_pc_538f
  %139 = zext i32 %135 to i64, !insn.addr !3101
  %140 = inttoptr i64 %132 to i64*, !insn.addr !3105
  %141 = load i64, i64* %140, align 8, !insn.addr !3105
  %142 = mul i64 %139, 8, !insn.addr !3106
  store i64 0, i64* %rdx.1.reg2mem, !insn.addr !3107
  br label %dec_label_pc_53a3, !insn.addr !3107

dec_label_pc_53a3:                                ; preds = %dec_label_pc_53a3, %dec_label_pc_539a
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %143 = add i64 %rdx.1.reload, %141, !insn.addr !3108
  %144 = inttoptr i64 %143 to i8*, !insn.addr !3108
  %145 = load i8, i8* %144, align 1, !insn.addr !3108
  %146 = add i64 %rdx.1.reload, %arg3, !insn.addr !3109
  %147 = inttoptr i64 %146 to i8*, !insn.addr !3109
  store i8 %145, i8* %147, align 1, !insn.addr !3109
  %148 = add i64 %rdx.1.reload, 1, !insn.addr !3110
  %149 = icmp eq i64 %142, %148, !insn.addr !3111
  %150 = icmp eq i1 %149, false, !insn.addr !3112
  store i64 %148, i64* %rdx.1.reg2mem, !insn.addr !3112
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !3112
  br i1 %150, label %dec_label_pc_53a3, label %dec_label_pc_53e0, !insn.addr !3112

dec_label_pc_53b4:                                ; preds = %dec_label_pc_51f5.dec_label_pc_53b4_crit_edge, %dec_label_pc_5373, %dec_label_pc_535e, %dec_label_pc_5343, %dec_label_pc_530b, %dec_label_pc_52d6, %dec_label_pc_52bd
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %.pre-phi2.reload = load i64*, i64** %.pre-phi2.reg2mem
  %.pre-phi6.reload = load i64*, i64** %.pre-phi6.reg2mem
  %151 = load i64, i64* %.pre-phi2.reload, align 8, !insn.addr !3038
  %152 = call i64 @lzma_free(i64 %151, i64 %7, i64 %rdx.2.reload), !insn.addr !3113
  %153 = load i64, i64* %.pre-phi6.reload, align 8, !insn.addr !3039
  %154 = call i64 @lzma_free(i64 %153, i64 %7, i64 %rdx.2.reload), !insn.addr !3114
  %155 = add i64 %arg4, 192, !insn.addr !3115
  %156 = inttoptr i64 %155 to i64*, !insn.addr !3115
  %157 = load i64, i64* %156, align 8, !insn.addr !3115
  %158 = call i64 @lzma_free(i64 %157, i64 %7, i64 %rdx.2.reload), !insn.addr !3116
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3116
  br label %dec_label_pc_53e0, !insn.addr !3116

dec_label_pc_53e0:                                ; preds = %dec_label_pc_53a3, %dec_label_pc_51c0, %dec_label_pc_53b4, %dec_label_pc_538f
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !3117

; uselistorder directives
  uselistorder i64 %rdx.2.reload, { 2, 1, 0 }
  uselistorder i64 %rdx.1.reload, { 0, 2, 1 }
  uselistorder i32 %135, { 2, 0, 1 }
  uselistorder i64 %132, { 1, 0, 2 }
  uselistorder i64 %116, { 1, 0 }
  uselistorder i64 %108, { 1, 0 }
  uselistorder i64 %96, { 1, 0 }
  uselistorder i64 %93, { 0, 2, 1 }
  uselistorder i64 %90, { 1, 0 }
  uselistorder i64 %62, { 1, 0, 2 }
  uselistorder i64* %57, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i64 %54, { 1, 0 }
  uselistorder i64 %53, { 1, 0 }
  uselistorder i64* %43, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i64 %41, { 1, 0 }
  uselistorder i64 %20, { 1, 0, 2, 3 }
  uselistorder i64 %17, { 2, 1, 0, 3 }
  uselistorder i64 %13, { 1, 0 }
  uselistorder i64 %7, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i64* %rdx.1.reg2mem, { 1, 0, 2 }
  uselistorder i64** %.pre-phi6.reg2mem, { 0, 6, 5, 4, 3, 2, 1, 7 }
  uselistorder i64** %.pre-phi2.reg2mem, { 0, 6, 5, 4, 3, 2, 1, 7 }
  uselistorder i64* %rdx.2.reg2mem, { 0, 6, 5, 4, 3, 2, 1, 7 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 1, 4, 2 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 (i64, i64, i64, i64, i64)* @.Lparse_bcj.0, { 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i64 (i64, i64, i64, i32, i64)* @.Llzma_index_iter_rewind.cold, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i64 %arg4, { 16, 9, 10, 8, 11, 12, 13, 6, 7, 5, 14, 4, 15, 2, 3, 0, 1 }
  uselistorder i64 %arg3, { 3, 5, 4, 2, 6, 1, 7, 8, 0, 9, 10, 11 }
  uselistorder label %dec_label_pc_53e0, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_53b4, { 1, 2, 3, 4, 5, 6, 0 }
}

define i64 @.Llzma_lzma_optimum_fast.0(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_53f0:
  %storemerge.reg2mem = alloca i64, !insn.addr !3118
  %rdx.1.reg2mem = alloca i64, !insn.addr !3118
  %r13.2.reg2mem = alloca i64, !insn.addr !3118
  %rax.0.reg2mem = alloca i32, !insn.addr !3118
  %r13.1.reg2mem = alloca i64, !insn.addr !3118
  %r13.0.reg2mem = alloca i64, !insn.addr !3118
  %.reg2mem = alloca i64, !insn.addr !3118
  %stack_var_-144 = alloca i64, align 8
  %stack_var_-152 = alloca i64, align 8
  %stack_var_-160 = alloca i64, align 8
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-176 = alloca i64, align 8
  %stack_var_-184 = alloca i64, align 8
  %stack_var_-136 = alloca i64, align 8
  %0 = call i64 @.Llzma2_decoder_end.1(i32 0, i64 456, i64 0, i64 29, i64 %arg5, i64 %arg1), !insn.addr !3119
  %1 = trunc i64 %0 to i32, !insn.addr !3120
  %2 = icmp eq i32 %1, 0, !insn.addr !3120
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3121
  br i1 %2, label %dec_label_pc_57f0, label %dec_label_pc_5431, !insn.addr !3121

dec_label_pc_5431:                                ; preds = %dec_label_pc_53f0
  %3 = load i64, i64* inttoptr (i64 21560 to i64*), align 8, !insn.addr !3122
  store i64 %3, i64* %stack_var_-136, align 8, !insn.addr !3123
  %4 = load i64, i64* inttoptr (i64 21674 to i64*), align 8, !insn.addr !3124
  %5 = call i64 @.Llzma_index_memusage.0(i64* nonnull %stack_var_-136, i64 4, i64 %4), !insn.addr !3125
  %6 = trunc i64 %5 to i32, !insn.addr !3126
  %7 = icmp eq i32 %6, 0, !insn.addr !3126
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3127
  br i1 %7, label %dec_label_pc_57f0, label %dec_label_pc_54fc, !insn.addr !3127

dec_label_pc_54fc:                                ; preds = %dec_label_pc_5431
  %8 = bitcast i64* %stack_var_-136 to i8*, !insn.addr !3128
  call void @__asm_rep_stosd_memset(i8* nonnull %8, i32 0, i64 ptrtoint (i32** @global_var_18 to i64)), !insn.addr !3128
  store i64 0, i64* %stack_var_-184, align 8, !insn.addr !3129
  store i64 0, i64* %stack_var_-176, align 8, !insn.addr !3130
  store i32 0, i32* %stack_var_-168, align 4, !insn.addr !3131
  store i64 0, i64* %stack_var_-160, align 8, !insn.addr !3132
  store i64 0, i64* %stack_var_-152, align 8, !insn.addr !3133
  store i64 0, i64* %stack_var_-144, align 8, !insn.addr !3134
  %9 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !3135
  %10 = add i64 %9, 16, !insn.addr !3136
  %11 = inttoptr i64 %10 to i64*, !insn.addr !3136
  store i64 %arg2, i64* %11, align 8, !insn.addr !3136
  %12 = call i64 @lzma_alloc(i64 280, i64 %9, i64 %4, i64 0), !insn.addr !3137
  %13 = add i64 %arg4, 128, !insn.addr !3138
  %14 = inttoptr i64 %13 to i64*, !insn.addr !3138
  store i64 %12, i64* %14, align 8, !insn.addr !3138
  %15 = icmp eq i64 %12, 0, !insn.addr !3139
  br i1 %15, label %dec_label_pc_555a, label %dec_label_pc_5554, !insn.addr !3140

dec_label_pc_5554:                                ; preds = %dec_label_pc_54fc
  %16 = add i64 %arg4, 288, !insn.addr !3141
  %17 = inttoptr i64 %16 to i32*, !insn.addr !3141
  %18 = load i32, i32* %17, align 4, !insn.addr !3141
  %19 = add i32 %18, 1, !insn.addr !3141
  store i32 %19, i32* %17, align 4, !insn.addr !3141
  br label %dec_label_pc_555a, !insn.addr !3141

dec_label_pc_555a:                                ; preds = %dec_label_pc_5554, %dec_label_pc_54fc
  %20 = call i64 @.Llzma_check_update.0(i64 %arg1, i64* nonnull %stack_var_-184, i64 %4, i64 0), !insn.addr !3142
  %21 = icmp eq i64 %20, 0, !insn.addr !3143
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3144
  br i1 %21, label %dec_label_pc_57f0, label %dec_label_pc_5576, !insn.addr !3144

dec_label_pc_5576:                                ; preds = %dec_label_pc_555a
  %22 = load i64, i64* %stack_var_-184, align 8, !insn.addr !3145
  %23 = call i64 @.Lcrc_init.0(i64 %arg2, i64 1032, i32 0, i64 0), !insn.addr !3146
  %24 = call i64 @.Lcrc_init.0(i64 %arg2, i64 392, i32 0, i64 0), !insn.addr !3147
  %25 = icmp eq i64 %24, 0, !insn.addr !3148
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3149
  br i1 %25, label %dec_label_pc_57f0, label %dec_label_pc_55aa, !insn.addr !3149

dec_label_pc_55aa:                                ; preds = %dec_label_pc_5576
  %26 = call i64 @.Lmicrolzma_decode.0(i64 %arg1, i64* nonnull %stack_var_-176, i64 0), !insn.addr !3150
  %27 = icmp eq i64 %26, 0, !insn.addr !3151
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3152
  br i1 %27, label %dec_label_pc_57f0, label %dec_label_pc_55c6, !insn.addr !3152

dec_label_pc_55c6:                                ; preds = %dec_label_pc_55aa
  %28 = load i64, i64* %stack_var_-176, align 8, !insn.addr !3153
  %29 = icmp eq i64 %23, 0, !insn.addr !3154
  br i1 %29, label %dec_label_pc_55ea, label %dec_label_pc_55d5, !insn.addr !3155

dec_label_pc_55d5:                                ; preds = %dec_label_pc_55c6
  %30 = ptrtoint i64* %stack_var_-176 to i64, !insn.addr !3156
  %31 = add i64 %23, 8, !insn.addr !3157
  %32 = inttoptr i64 %31 to i64*, !insn.addr !3157
  %33 = load i64, i64* %32, align 8, !insn.addr !3157
  %34 = add i64 %33, %30, !insn.addr !3158
  %35 = add i64 %arg4, 288, !insn.addr !3159
  %36 = inttoptr i64 %35 to i32*, !insn.addr !3159
  %37 = load i32, i32* %36, align 4, !insn.addr !3159
  %38 = add i32 %37, 1, !insn.addr !3159
  store i32 %38, i32* %36, align 4, !insn.addr !3159
  %39 = add i64 %arg4, 136, !insn.addr !3160
  %40 = inttoptr i64 %39 to i64*, !insn.addr !3160
  store i64 %34, i64* %40, align 8, !insn.addr !3160
  br label %dec_label_pc_55ea, !insn.addr !3160

dec_label_pc_55ea:                                ; preds = %dec_label_pc_55d5, %dec_label_pc_55c6
  %41 = call i64 @lzma_alloc(i64 2104, i64 %9, i64 0, i64 0), !insn.addr !3161
  %42 = add i64 %arg4, 160, !insn.addr !3162
  %43 = inttoptr i64 %42 to i64*, !insn.addr !3162
  store i64 %41, i64* %43, align 8, !insn.addr !3162
  %44 = icmp eq i64 %41, 0, !insn.addr !3163
  br i1 %44, label %dec_label_pc_560b, label %dec_label_pc_5605, !insn.addr !3164

dec_label_pc_5605:                                ; preds = %dec_label_pc_55ea
  %45 = add i64 %arg4, 288, !insn.addr !3165
  %46 = inttoptr i64 %45 to i32*, !insn.addr !3165
  %47 = load i32, i32* %46, align 4, !insn.addr !3165
  %48 = add i32 %47, 1, !insn.addr !3165
  store i32 %48, i32* %46, align 4, !insn.addr !3165
  br label %dec_label_pc_560b, !insn.addr !3165

dec_label_pc_560b:                                ; preds = %dec_label_pc_5605, %dec_label_pc_55ea
  %49 = bitcast i32* %stack_var_-168 to i64*, !insn.addr !3166
  %50 = call i64 @function_2530(i64* nonnull %49, i64 %arg1, i64 %arg2, i64 %arg4), !insn.addr !3166
  %51 = trunc i64 %50 to i32, !insn.addr !3167
  %52 = icmp eq i32 %51, 0, !insn.addr !3167
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3168
  br i1 %52, label %dec_label_pc_57f0, label %dec_label_pc_5627, !insn.addr !3168

dec_label_pc_5627:                                ; preds = %dec_label_pc_560b
  %53 = load i32, i32* %stack_var_-168, align 4, !insn.addr !3169
  %54 = sext i32 %53 to i64, !insn.addr !3169
  %55 = add i64 %arg5, 120, !insn.addr !3170
  %56 = inttoptr i64 %55 to i64*, !insn.addr !3170
  store i64 %54, i64* %56, align 8, !insn.addr !3170
  %57 = add nsw i64 %54, 4, !insn.addr !3171
  %58 = add i64 %22, %20, !insn.addr !3172
  %59 = call i64 @.Llzma_block_buffer_encode.0(i64 %54, i64 %57, i64 57904), !insn.addr !3173
  %60 = trunc i64 %59 to i32, !insn.addr !3174
  %61 = icmp eq i32 %60, 0, !insn.addr !3174
  %62 = icmp eq i1 %61, false, !insn.addr !3175
  %63 = zext i1 %62 to i32, !insn.addr !3176
  %64 = inttoptr i64 %arg5 to i32*, !insn.addr !3176
  store i32 %63, i32* %64, align 4, !insn.addr !3176
  br i1 %61, label %dec_label_pc_5688, label %dec_label_pc_5667, !insn.addr !3177

dec_label_pc_5667:                                ; preds = %dec_label_pc_5627
  %65 = call i64 @.Llzma2_encoder_init.1(i64 %54, i32 0, i64* nonnull %stack_var_-160, i64 %54, i64 %58, i32 1), !insn.addr !3178
  %66 = trunc i64 %65 to i32, !insn.addr !3179
  %67 = icmp eq i32 %66, 0, !insn.addr !3179
  %68 = icmp eq i1 %67, false, !insn.addr !3180
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3180
  br i1 %68, label %dec_label_pc_5667.dec_label_pc_568d_crit_edge, label %dec_label_pc_57f0, !insn.addr !3180

dec_label_pc_5667.dec_label_pc_568d_crit_edge:    ; preds = %dec_label_pc_5667
  %.pre = load i64, i64* %stack_var_-160, align 8
  store i64 %.pre, i64* %.reg2mem
  br label %dec_label_pc_568d

dec_label_pc_5688:                                ; preds = %dec_label_pc_5627
  store i64 %58, i64* %stack_var_-160, align 8, !insn.addr !3181
  store i64 %58, i64* %.reg2mem, !insn.addr !3181
  br label %dec_label_pc_568d, !insn.addr !3181

dec_label_pc_568d:                                ; preds = %dec_label_pc_5667.dec_label_pc_568d_crit_edge, %dec_label_pc_5688
  %69 = ptrtoint i64* %arg3 to i64
  %.reload = load i64, i64* %.reg2mem, !insn.addr !3182
  %70 = add i64 %28, %26, !insn.addr !3183
  %71 = call i64 @.Llzma_buf_cpy.0(i64 %26, i64 %70, i64 %54, i64 %.reload, i64 %69, i64* nonnull %stack_var_-144), !insn.addr !3184
  %72 = load i64, i64* %stack_var_-160, align 8, !insn.addr !3185
  %73 = call i64 @function_3320(i64 %26, i64 %70, i64 %54, i64 %72, i64* nonnull %stack_var_-152, i64 %arg1), !insn.addr !3186
  %74 = call i64 @lzma_alloc(i64 3112, i64 %9, i64 %54, i64 %72), !insn.addr !3187
  %75 = add i64 %arg4, 200, !insn.addr !3188
  %76 = inttoptr i64 %75 to i64*, !insn.addr !3188
  store i64 %74, i64* %76, align 8, !insn.addr !3188
  %77 = icmp eq i64 %74, 0, !insn.addr !3189
  br i1 %77, label %dec_label_pc_5702, label %dec_label_pc_56fc, !insn.addr !3190

dec_label_pc_56fc:                                ; preds = %dec_label_pc_568d
  %78 = add i64 %arg4, 288, !insn.addr !3191
  %79 = inttoptr i64 %78 to i32*, !insn.addr !3191
  %80 = load i32, i32* %79, align 4, !insn.addr !3191
  %81 = add i32 %80, 1, !insn.addr !3191
  store i32 %81, i32* %79, align 4, !insn.addr !3191
  br label %dec_label_pc_5702, !insn.addr !3191

dec_label_pc_5702:                                ; preds = %dec_label_pc_56fc, %dec_label_pc_568d
  %82 = trunc i64 %71 to i32, !insn.addr !3192
  %83 = icmp eq i32 %82, 0, !insn.addr !3192
  %84 = trunc i64 %73 to i32
  %85 = icmp eq i32 %84, 0
  br i1 %83, label %dec_label_pc_5749, label %dec_label_pc_5707, !insn.addr !3193

dec_label_pc_5707:                                ; preds = %dec_label_pc_5702
  %86 = load i64, i64* %stack_var_-144, align 8
  br i1 %85, label %dec_label_pc_575d, label %dec_label_pc_570c, !insn.addr !3194

dec_label_pc_570c:                                ; preds = %dec_label_pc_5707
  %87 = load i64, i64* %stack_var_-152, align 8, !insn.addr !3195
  %88 = icmp eq i64 %86, %87, !insn.addr !3195
  %89 = icmp eq i1 %88, false, !insn.addr !3196
  %90 = call i64 @.Llzma_lzma2_encoder_memusage.0(i64 %86, i64 %arg1, i64 %69, i64 %arg5)
  br i1 %89, label %dec_label_pc_5753, label %dec_label_pc_5727, !insn.addr !3196

dec_label_pc_5727:                                ; preds = %dec_label_pc_570c
  %91 = trunc i64 %90 to i32, !insn.addr !3197
  %92 = icmp ult i32 %91, 8
  store i64 %86, i64* %r13.0.reg2mem, !insn.addr !3198
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3198
  br i1 %92, label %dec_label_pc_57f0, label %dec_label_pc_5735, !insn.addr !3198

dec_label_pc_5735:                                ; preds = %dec_label_pc_57e6, %dec_label_pc_579e, %dec_label_pc_5727
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %93 = add i64 %arg5, 40, !insn.addr !3199
  %94 = inttoptr i64 %93 to i64*, !insn.addr !3199
  store i64 %r13.0.reload, i64* %94, align 8, !insn.addr !3199
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !3200
  br label %dec_label_pc_57f0, !insn.addr !3200

dec_label_pc_5749:                                ; preds = %dec_label_pc_5702
  store i64 0, i64* %r13.1.reg2mem, !insn.addr !3201
  store i64 %arg1, i64* %rdx.1.reg2mem, !insn.addr !3201
  br i1 %85, label %dec_label_pc_57aa, label %dec_label_pc_577d, !insn.addr !3201

dec_label_pc_5753:                                ; preds = %dec_label_pc_570c
  %95 = and i64 %90, 4294967295, !insn.addr !3202
  store i64 %95, i64* %r13.1.reg2mem, !insn.addr !3203
  br label %dec_label_pc_577d, !insn.addr !3203

dec_label_pc_575d:                                ; preds = %dec_label_pc_5707
  %96 = call i64 @.Llzma_lzma2_encoder_memusage.0(i64 %86, i64 %arg1, i64 %69, i64 %arg5), !insn.addr !3204
  %97 = and i64 %96, 4294967295, !insn.addr !3205
  store i32 0, i32* %rax.0.reg2mem
  store i64 %97, i64* %r13.2.reg2mem
  br label %dec_label_pc_5793

dec_label_pc_577d:                                ; preds = %dec_label_pc_5749, %dec_label_pc_5753
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %98 = load i64, i64* %stack_var_-152, align 8, !insn.addr !3206
  %99 = call i64 @.Llzma_lzma2_encoder_memusage.0(i64 %98, i64 %arg1, i64 %69, i64 %arg5), !insn.addr !3207
  %phitmp = trunc i64 %99 to i32
  store i32 %phitmp, i32* %rax.0.reg2mem, !insn.addr !3207
  store i64 %r13.1.reload, i64* %r13.2.reg2mem, !insn.addr !3207
  br label %dec_label_pc_5793, !insn.addr !3207

dec_label_pc_5793:                                ; preds = %dec_label_pc_575d, %dec_label_pc_577d
  %r13.2.reload = load i64, i64* %r13.2.reg2mem
  %rax.0.reload = load i32, i32* %rax.0.reg2mem
  %100 = trunc i64 %r13.2.reload to i32, !insn.addr !3208
  %101 = icmp ugt i32 %rax.0.reload, %100, !insn.addr !3208
  %102 = icmp ult i32 %100, 8
  %or.cond = or i1 %101, %102
  br i1 %or.cond, label %dec_label_pc_57a5, label %dec_label_pc_579e, !insn.addr !3209

dec_label_pc_579e:                                ; preds = %dec_label_pc_5793
  %103 = load i64, i64* %stack_var_-144, align 8, !insn.addr !3210
  store i64 %103, i64* %r13.0.reg2mem, !insn.addr !3211
  br label %dec_label_pc_5735, !insn.addr !3211

dec_label_pc_57a5:                                ; preds = %dec_label_pc_5793
  %104 = icmp ult i32 %rax.0.reload, %100, !insn.addr !3212
  %105 = icmp ult i32 %rax.0.reload, 8
  %or.cond2 = or i1 %105, %104
  store i64 %69, i64* %rdx.1.reg2mem, !insn.addr !3213
  br i1 %or.cond2, label %dec_label_pc_57aa, label %dec_label_pc_57e6, !insn.addr !3213

dec_label_pc_57aa:                                ; preds = %dec_label_pc_57a5, %dec_label_pc_5749
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %106 = load i64, i64* %14, align 8, !insn.addr !3214
  %107 = call i64 @lzma_free(i64 %106, i64 %9, i64 %rdx.1.reload), !insn.addr !3215
  %108 = load i64, i64* %43, align 8, !insn.addr !3216
  %109 = call i64 @lzma_free(i64 %108, i64 %9, i64 %rdx.1.reload), !insn.addr !3217
  %110 = load i64, i64* %76, align 8, !insn.addr !3218
  %111 = call i64 @lzma_free(i64 %110, i64 %9, i64 %rdx.1.reload), !insn.addr !3219
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3219
  br label %dec_label_pc_57f0, !insn.addr !3219

dec_label_pc_57e6:                                ; preds = %dec_label_pc_57a5
  %112 = load i64, i64* %stack_var_-152, align 8, !insn.addr !3220
  store i64 %112, i64* %r13.0.reg2mem, !insn.addr !3221
  br label %dec_label_pc_5735, !insn.addr !3221

dec_label_pc_57f0:                                ; preds = %dec_label_pc_53f0, %dec_label_pc_5431, %dec_label_pc_555a, %dec_label_pc_5576, %dec_label_pc_55aa, %dec_label_pc_560b, %dec_label_pc_5727, %dec_label_pc_57aa, %dec_label_pc_5667, %dec_label_pc_5735
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !3222

; uselistorder directives
  uselistorder i64 %rdx.1.reload, { 2, 1, 0 }
  uselistorder i32 %rax.0.reload, { 2, 0, 1 }
  uselistorder i64 %90, { 1, 0 }
  uselistorder i64 %86, { 3, 0, 2, 1 }
  uselistorder i1 %85, { 1, 0 }
  uselistorder i64 %74, { 1, 0 }
  uselistorder i64 %72, { 1, 0 }
  uselistorder i64 %69, { 0, 3, 2, 1, 4 }
  uselistorder i1 %61, { 1, 0 }
  uselistorder i64 %58, { 0, 2, 1 }
  uselistorder i64 %54, { 2, 3, 4, 0, 1, 7, 5, 6 }
  uselistorder i64 %41, { 1, 0 }
  uselistorder i64 %26, { 1, 2, 0, 3 }
  uselistorder i64 %23, { 1, 0 }
  uselistorder i64 %12, { 1, 0 }
  uselistorder i64* %stack_var_-184, { 1, 0, 2 }
  uselistorder i64* %stack_var_-176, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-168, { 1, 2, 0 }
  uselistorder i64* %stack_var_-160, { 2, 3, 0, 1, 4 }
  uselistorder i64* %stack_var_-152, { 1, 2, 3, 0, 4 }
  uselistorder i64* %stack_var_-144, { 1, 2, 0, 3 }
  uselistorder i64* %r13.0.reg2mem, { 3, 2, 0, 1 }
  uselistorder i64* %r13.1.reg2mem, { 0, 2, 1 }
  uselistorder i32* %rax.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %r13.2.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 8, 10, 7, 9, 6, 5, 4, 3, 2, 1 }
  uselistorder i64 (i64, i64, i64, i64)* @.Llzma_lzma2_encoder_memusage.0, { 2, 1, 0 }
  uselistorder i64 %arg5, { 3, 1, 2, 0, 4, 5, 6 }
  uselistorder i64 %arg4, { 4, 5, 6, 3, 7, 1, 2, 0, 8 }
  uselistorder i64 %arg2, { 0, 2, 1, 3 }
  uselistorder i64 %arg1, { 3, 2, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_57f0, { 7, 9, 6, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_5793, { 1, 0 }
  uselistorder label %dec_label_pc_577d, { 1, 0 }
  uselistorder label %dec_label_pc_568d, { 1, 0 }
}

define i64 @.Lmicrolzma_encoder_init.1(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_5810:
  %0 = alloca i64
  %rax.452.reg2mem = alloca i64, !insn.addr !3223
  %r8.13.reg2mem = alloca i64, !insn.addr !3223
  %rcx.18.reg2mem = alloca i64, !insn.addr !3223
  %r14.8.reg2mem = alloca i64, !insn.addr !3223
  %rbx.10.reg2mem = alloca i64, !insn.addr !3223
  %r14.7.reg2mem = alloca i64, !insn.addr !3223
  %rdi.2.reg2mem = alloca i64, !insn.addr !3223
  %.reg2mem216 = alloca i64, !insn.addr !3223
  %rbx.9.reg2mem = alloca i64, !insn.addr !3223
  %r14.6.reg2mem = alloca i64, !insn.addr !3223
  %r10.8.reg2mem = alloca i64, !insn.addr !3223
  %r9.8.reg2mem = alloca i64, !insn.addr !3223
  %rcx.17.reg2mem = alloca i64, !insn.addr !3223
  %r14.5.reg2mem = alloca i64, !insn.addr !3223
  %r10.7.reg2mem = alloca i64, !insn.addr !3223
  %r9.7.reg2mem = alloca i64, !insn.addr !3223
  %rcx.16.reg2mem = alloca i64, !insn.addr !3223
  %r9.6.reg2mem = alloca i64, !insn.addr !3223
  %storemerge11.reg2mem = alloca i64, !insn.addr !3223
  %r9.5.reg2mem = alloca i64, !insn.addr !3223
  %.reg2mem214 = alloca i64, !insn.addr !3223
  %r14.465155.reg2mem = alloca i64, !insn.addr !3223
  %r10.564156.reg2mem = alloca i64, !insn.addr !3223
  %r9.363157.reg2mem = alloca i64, !insn.addr !3223
  %rdi.161158.reg2mem = alloca i64, !insn.addr !3223
  %rbx.859159.reg2mem = alloca i64, !insn.addr !3223
  %r9.4.reg2mem = alloca i64, !insn.addr !3223
  %r14.4.lcssa.reg2mem = alloca i64, !insn.addr !3223
  %rbx.8.lcssa.reg2mem = alloca i64, !insn.addr !3223
  %r10.4.reg2mem = alloca i64, !insn.addr !3223
  %r10.3.reg2mem = alloca i64, !insn.addr !3223
  %rax.3.reg2mem = alloca i8, !insn.addr !3223
  %rax.2136.reg2mem = alloca i8, !insn.addr !3223
  %.reg2mem212 = alloca i64, !insn.addr !3223
  %.reg2mem210 = alloca i8, !insn.addr !3223
  %rcx.15.ph81.reg2mem = alloca i64, !insn.addr !3223
  %r8.9.ph82.reg2mem = alloca i64, !insn.addr !3223
  %r9.2.ph83.reg2mem = alloca i64, !insn.addr !3223
  %r14.3.ph86.reg2mem = alloca i64, !insn.addr !3223
  %.reg2mem208 = alloca i64, !insn.addr !3223
  %.reg2mem206 = alloca i64, !insn.addr !3223
  %r14.2.reg2mem = alloca i64, !insn.addr !3223
  %r9.1.reg2mem = alloca i64, !insn.addr !3223
  %r8.8.reg2mem = alloca i64, !insn.addr !3223
  %rbx.7.reg2mem = alloca i64, !insn.addr !3223
  %.reg2mem204 = alloca i64, !insn.addr !3223
  %.reg2mem202 = alloca i64, !insn.addr !3223
  %r8.7.reg2mem = alloca i64, !insn.addr !3223
  %rcx.14.reg2mem = alloca i64, !insn.addr !3223
  %rcx.13.reg2mem = alloca i64, !insn.addr !3223
  %.reg2mem = alloca i64, !insn.addr !3223
  %r14.1.reg2mem = alloca i64, !insn.addr !3223
  %rcx.12.reg2mem = alloca i64, !insn.addr !3223
  %r14.0.reg2mem = alloca i64, !insn.addr !3223
  %r12.3.reg2mem = alloca i64, !insn.addr !3223
  %rcx.10.reg2mem = alloca i64, !insn.addr !3223
  %rbx.6.reg2mem = alloca i64, !insn.addr !3223
  %r12.2.reg2mem = alloca i64, !insn.addr !3223
  %rbx.5.reg2mem = alloca i64, !insn.addr !3223
  %rbx.4.lcssa.reg2mem = alloca i64, !insn.addr !3223
  %r8.6.reg2mem = alloca i64, !insn.addr !3223
  %rdi.0.reg2mem = alloca i64, !insn.addr !3223
  %rsi.2.reg2mem = alloca i64, !insn.addr !3223
  %r8.5.reg2mem = alloca i64, !insn.addr !3223
  %rbx.489.reg2mem = alloca i64, !insn.addr !3223
  %r8.490.reg2mem = alloca i64, !insn.addr !3223
  %r8.3.reg2mem = alloca i64, !insn.addr !3223
  %rbx.3.reg2mem = alloca i64, !insn.addr !3223
  %rbx.292.reg2mem = alloca i64, !insn.addr !3223
  %storemerge14.in.in.reg2mem = alloca i64, !insn.addr !3223
  %r12.1.reg2mem = alloca i64, !insn.addr !3223
  %r8.1.reg2mem = alloca i64, !insn.addr !3223
  %rcx.5.reg2mem = alloca i64, !insn.addr !3223
  %r8.0.reg2mem = alloca i64, !insn.addr !3223
  %rcx.4.reg2mem = alloca i64, !insn.addr !3223
  %r9.0.reg2mem = alloca i64, !insn.addr !3223
  %r12.0.reg2mem = alloca i64, !insn.addr !3223
  %rcx.3.reg2mem = alloca i64, !insn.addr !3223
  %rax.1.reg2mem = alloca i64, !insn.addr !3223
  %rax.050.reg2mem = alloca i64, !insn.addr !3223
  %rsi.1.reg2mem = alloca i64, !insn.addr !3223
  %rdx.2.reg2mem = alloca i64, !insn.addr !3223
  %rcx.1.reg2mem = alloca i64, !insn.addr !3223
  %rdx.1.reg2mem = alloca i64, !insn.addr !3223
  %rbx.0.reg2mem = alloca i64, !insn.addr !3223
  %1 = ptrtoint i64* %arg1 to i64
  %2 = load i64, i64* %0
  %stack_var_-2712 = alloca i32, align 4
  %stack_var_-2520 = alloca i64, align 8
  %stack_var_-2608 = alloca i64, align 8
  %stack_var_-2720 = alloca i64, align 8
  %stack_var_-936 = alloca i64, align 8
  %stack_var_-2664 = alloca i64, align 8
  %stack_var_-1048 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-2696 = alloca i64, align 8
  %stack_var_-2344 = alloca i64, align 8
  %stack_var_-1304 = alloca i64, align 8
  %stack_var_-2760 = alloca i64, align 8
  %stack_var_-1560 = alloca i64, align 8
  %stack_var_-1816 = alloca i64, align 8
  %stack_var_-2384 = alloca i64, align 8
  %stack_var_-2328 = alloca i64, align 8
  %stack_var_-2764 = alloca i64*, align 8
  %stack_var_-2432 = alloca i64, align 8
  %stack_var_-2904 = alloca i64, align 8
  %3 = ptrtoint i64* %stack_var_-2904 to i64, !insn.addr !3224
  store i64* null, i64** %stack_var_-2764, align 8, !insn.addr !3225
  %4 = bitcast i64* %stack_var_-2432 to i8*, !insn.addr !3226
  call void @__asm_rep_stosd_memset(i8* nonnull %4, i32 0, i64 598), !insn.addr !3226
  %5 = add i64 %1, 128, !insn.addr !3227
  %6 = inttoptr i64 %5 to i64*, !insn.addr !3227
  %7 = load i64, i64* %6, align 8, !insn.addr !3227
  %8 = ptrtoint i64* %stack_var_-2328 to i64, !insn.addr !3228
  store i64 %8, i64* %stack_var_-2904, align 8, !insn.addr !3228
  store i64 %8, i64* %stack_var_-2384, align 8, !insn.addr !3229
  store i64 0, i64* %stack_var_-2760, align 8, !insn.addr !3230
  %9 = ptrtoint i64* %stack_var_-2432 to i64, !insn.addr !3231
  store i64 %9, i64* %stack_var_-2344, align 8, !insn.addr !3231
  %10 = call i64 @.Llzma_stream_header_encode.part.0(i64 %7), !insn.addr !3232
  %11 = add i64 %7, 16, !insn.addr !3233
  %12 = inttoptr i64 %11 to i8*, !insn.addr !3233
  %13 = load i8, i8* %12, align 1, !insn.addr !3233
  %14 = zext i8 %13 to i64, !insn.addr !3233
  %15 = add i64 %7, 8, !insn.addr !3234
  %16 = inttoptr i64 %15 to i64*, !insn.addr !3234
  %17 = load i64, i64* %16, align 8, !insn.addr !3234
  %18 = add i64 %7, 24, !insn.addr !3235
  %19 = inttoptr i64 %18 to i64*, !insn.addr !3235
  store i64 %14, i64* %19, align 8, !insn.addr !3235
  %20 = mul i64 %14, 8, !insn.addr !3236
  %21 = add i64 %17, ptrtoint (i32** @global_var_18 to i64), !insn.addr !3236
  %22 = add i64 %21, %20, !insn.addr !3236
  %23 = inttoptr i64 %22 to i64*, !insn.addr !3236
  %24 = load i64, i64* %23, align 8, !insn.addr !3236
  %25 = add i64 %7, 40, !insn.addr !3237
  %26 = inttoptr i64 %25 to i64*, !insn.addr !3237
  %27 = load i64, i64* %26, align 8, !insn.addr !3237
  %28 = sub i64 %27, %24, !insn.addr !3238
  %29 = icmp ugt i64 %27, %24, !insn.addr !3239
  %30 = sub i64 %24, %27
  %spec.select = select i1 %29, i64 %28, i64 %30
  %31 = icmp sgt i64 %spec.select, 327680, !insn.addr !3240
  store i64 %7, i64* %rcx.1.reg2mem, !insn.addr !3240
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !3240
  br i1 %31, label %dec_label_pc_5a42, label %dec_label_pc_5921, !insn.addr !3240

dec_label_pc_5921:                                ; preds = %dec_label_pc_5810
  %32 = ptrtoint i64* %stack_var_-1816 to i64, !insn.addr !3241
  %33 = ptrtoint i64* %stack_var_-1560 to i64, !insn.addr !3242
  %34 = ptrtoint i64* %stack_var_-1304 to i64, !insn.addr !3243
  %35 = and i64 %24, -4096, !insn.addr !3244
  %36 = add nsw i64 %35, -126976
  store i64 %35, i64* %rbx.0.reg2mem, !insn.addr !3245
  br label %dec_label_pc_592f, !insn.addr !3245

dec_label_pc_592f:                                ; preds = %dec_label_pc_5940, %dec_label_pc_5921
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %37 = call i64 @.Lsimple_coder_update.0(i64 %rbx.0.reload, i32 0, i64 %spec.select, i64 %7), !insn.addr !3246
  %38 = trunc i64 %37 to i32, !insn.addr !3247
  %39 = icmp eq i32 %38, 768, !insn.addr !3247
  br i1 %39, label %dec_label_pc_5951, label %dec_label_pc_5940, !insn.addr !3248

dec_label_pc_5940:                                ; preds = %dec_label_pc_592f
  %40 = add i64 %rbx.0.reload, -4096, !insn.addr !3249
  %41 = icmp eq i64 %rbx.0.reload, %36, !insn.addr !3250
  %42 = icmp eq i1 %41, false, !insn.addr !3251
  store i64 %40, i64* %rbx.0.reg2mem, !insn.addr !3251
  store i64 %7, i64* %rcx.1.reg2mem, !insn.addr !3251
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !3251
  br i1 %42, label %dec_label_pc_592f, label %dec_label_pc_5a42, !insn.addr !3251

dec_label_pc_5951:                                ; preds = %dec_label_pc_592f
  %43 = ptrtoint i64* %stack_var_-2384 to i64, !insn.addr !3252
  store i64 %43, i64* %stack_var_-2696, align 8, !insn.addr !3252
  %44 = call i64 @.Llzma_filter_decoder_is_supported.part.0(i64* nonnull %stack_var_-2696, i64 0, i64 %spec.select, i64 %7), !insn.addr !3253
  %45 = trunc i64 %44 to i32, !insn.addr !3254
  %46 = icmp eq i32 %45, 0, !insn.addr !3254
  store i64 %7, i64* %rcx.1.reg2mem, !insn.addr !3255
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !3255
  br i1 %46, label %dec_label_pc_5a42, label %dec_label_pc_5999, !insn.addr !3255

dec_label_pc_5999:                                ; preds = %dec_label_pc_5951
  %47 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !3256
  %48 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !3257
  store i64 0, i64* %rdx.1.reg2mem, !insn.addr !3258
  br label %dec_label_pc_59b5, !insn.addr !3258

dec_label_pc_59b5:                                ; preds = %dec_label_pc_59b5, %dec_label_pc_5999
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %49 = add i64 %rdx.1.reload, %47, !insn.addr !3259
  %50 = inttoptr i64 %49 to i8*, !insn.addr !3259
  %51 = load i8, i8* %50, align 1, !insn.addr !3259
  %52 = add i64 %rdx.1.reload, %48, !insn.addr !3260
  %53 = inttoptr i64 %52 to i8*, !insn.addr !3260
  store i8 %51, i8* %53, align 1, !insn.addr !3260
  %54 = add i64 %rdx.1.reload, 1, !insn.addr !3261
  %55 = icmp eq i64 %54, ptrtoint (i32** @global_var_18 to i64), !insn.addr !3262
  %56 = icmp eq i1 %55, false, !insn.addr !3263
  store i64 %54, i64* %rdx.1.reg2mem, !insn.addr !3263
  br i1 %56, label %dec_label_pc_59b5, label %dec_label_pc_59c6, !insn.addr !3263

dec_label_pc_59c6:                                ; preds = %dec_label_pc_59b5
  store i64 %9, i64* %stack_var_-2664, align 8, !insn.addr !3264
  %57 = call i64 @.Llzma_index_stream_flags.0(i64* nonnull %stack_var_-2664), !insn.addr !3265
  %58 = trunc i64 %57 to i32, !insn.addr !3266
  %59 = icmp eq i32 %58, 0, !insn.addr !3266
  %60 = icmp eq i1 %59, false, !insn.addr !3267
  store i64 %48, i64* %rcx.1.reg2mem, !insn.addr !3267
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !3267
  br i1 %60, label %dec_label_pc_5ad1, label %dec_label_pc_5a42, !insn.addr !3267

dec_label_pc_5a42:                                ; preds = %dec_label_pc_5940, %dec_label_pc_5810, %dec_label_pc_5951, %dec_label_pc_59c6, %dec_label_pc_6dd0, %dec_label_pc_6da6, %dec_label_pc_6d7e, %dec_label_pc_6d55, %dec_label_pc_6d2c, %dec_label_pc_6d03, %dec_label_pc_6cdf, %dec_label_pc_6cb6, %dec_label_pc_6c92, %dec_label_pc_6c71, %dec_label_pc_6c52, %dec_label_pc_6c40, %dec_label_pc_5fcc, %dec_label_pc_5e9c, %dec_label_pc_5e2e, %dec_label_pc_5e1e, %dec_label_pc_5e0d, %dec_label_pc_5d81, %dec_label_pc_5d08, %dec_label_pc_5ad1
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %61 = add i64 %3, ptrtoint (i32** @global_var_48 to i64), !insn.addr !3268
  %62 = inttoptr i64 %61 to i64*, !insn.addr !3268
  %63 = load i64, i64* %62, align 8, !insn.addr !3268
  %64 = add i64 %3, 2832, !insn.addr !3269
  %65 = call i64 @function_2750(i64 %63, i64 %64, i64 %rdx.2.reload, i64 %rcx.1.reload), !insn.addr !3270
  %66 = add i64 %3, 2856, !insn.addr !3271
  %67 = inttoptr i64 %66 to i64*, !insn.addr !3271
  %68 = load i64, i64* %67, align 8, !insn.addr !3271
  %69 = icmp eq i64 %68, 0, !insn.addr !3272
  %70 = icmp eq i1 %69, false, !insn.addr !3273
  store i64 0, i64* %rax.050.reg2mem, !insn.addr !3273
  br i1 %70, label %dec_label_pc_5ac2, label %dec_label_pc_5a63, !insn.addr !3273

dec_label_pc_5a63:                                ; preds = %dec_label_pc_5ac2, %dec_label_pc_5a42
  %71 = add i64 %3, 472, !insn.addr !3274
  %72 = inttoptr i64 %71 to i8*, !insn.addr !3275
  call void @__asm_rep_stosd_memset(i8* %72, i32 0, i64 598), !insn.addr !3275
  store i64 0, i64* %rsi.1.reg2mem, !insn.addr !3276
  br label %dec_label_pc_5a80, !insn.addr !3276

dec_label_pc_5a80:                                ; preds = %dec_label_pc_6e7e, %dec_label_pc_5a63
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %storemerge8 = load i64, i64* %6, align 8
  %73 = call i64 @.Llzma_block_param_decoder.0(i64 %storemerge8, i64 %rsi.1.reload), !insn.addr !3277
  %74 = inttoptr i64 %storemerge8 to i64*, !insn.addr !3278
  store i64 1, i64* %74, align 8, !insn.addr !3278
  %75 = add i64 %storemerge8, 8, !insn.addr !3279
  %76 = inttoptr i64 %75 to i64*, !insn.addr !3279
  store i64 0, i64* %76, align 8, !insn.addr !3279
  %77 = add i64 %storemerge8, 16, !insn.addr !3280
  %78 = inttoptr i64 %77 to i64*, !insn.addr !3280
  store i64 0, i64* %78, align 8, !insn.addr !3280
  %79 = add i64 %storemerge8, 24, !insn.addr !3281
  %80 = inttoptr i64 %79 to i64*, !insn.addr !3281
  store i64 0, i64* %80, align 8, !insn.addr !3281
  %81 = add i64 %storemerge8, 32, !insn.addr !3282
  %82 = inttoptr i64 %81 to i64*, !insn.addr !3282
  store i64 0, i64* %82, align 8, !insn.addr !3282
  %83 = call %0 @__asm_cpuid(i32 0), !insn.addr !3283
  %84 = extractvalue %0 %83, 0, !insn.addr !3283
  %85 = icmp eq i32 %84, 0, !insn.addr !3284
  br i1 %85, label %dec_label_pc_6f31, label %dec_label_pc_5aaa, !insn.addr !3285

dec_label_pc_5aaa:                                ; preds = %dec_label_pc_5a80
  %86 = call %1 @__asm_cpuid.1(i32 1), !insn.addr !3286
  %87 = extractvalue %1 %86, 0, !insn.addr !3286
  %88 = extractvalue %1 %86, 1, !insn.addr !3286
  %89 = extractvalue %1 %86, 2, !insn.addr !3286
  %90 = extractvalue %1 %86, 3, !insn.addr !3286
  %91 = inttoptr i64 %75 to i32*, !insn.addr !3287
  store i32 %87, i32* %91, align 4, !insn.addr !3287
  %92 = inttoptr i64 %77 to i32*, !insn.addr !3288
  store i32 %88, i32* %92, align 4, !insn.addr !3288
  %93 = inttoptr i64 %79 to i32*, !insn.addr !3289
  store i32 %89, i32* %93, align 4, !insn.addr !3289
  %94 = inttoptr i64 %81 to i32*, !insn.addr !3290
  store i32 %90, i32* %94, align 4, !insn.addr !3290
  br label %dec_label_pc_6f31, !insn.addr !3291

dec_label_pc_5ac2:                                ; preds = %dec_label_pc_5a42, %dec_label_pc_5ac2
  %rax.050.reload = load i64, i64* %rax.050.reg2mem
  %95 = add i64 %rax.050.reload, %64, !insn.addr !3292
  %96 = inttoptr i64 %95 to i8*, !insn.addr !3292
  %97 = load i8, i8* %96, align 1, !insn.addr !3292
  %98 = add i64 %rax.050.reload, %68, !insn.addr !3293
  %99 = inttoptr i64 %98 to i8*, !insn.addr !3293
  store i8 %97, i8* %99, align 1, !insn.addr !3293
  %100 = add i64 %rax.050.reload, 1, !insn.addr !3294
  %101 = icmp eq i64 %100, ptrtoint (i32** @global_var_18 to i64), !insn.addr !3295
  %102 = icmp eq i1 %101, false, !insn.addr !3273
  store i64 %100, i64* %rax.050.reg2mem, !insn.addr !3273
  br i1 %102, label %dec_label_pc_5ac2, label %dec_label_pc_5a63, !insn.addr !3273

dec_label_pc_5ad1:                                ; preds = %dec_label_pc_59c6
  %103 = add i64 %1, 16, !insn.addr !3296
  %104 = inttoptr i64 %103 to i64*, !insn.addr !3296
  %105 = load i64, i64* %104, align 8, !insn.addr !3296
  %106 = ptrtoint i64* %stack_var_-936 to i64, !insn.addr !3297
  %107 = add i64 %105, 56, !insn.addr !3298
  %108 = inttoptr i64 %107 to i64*, !insn.addr !3298
  %109 = load i64, i64* %108, align 8, !insn.addr !3298
  %110 = inttoptr i64 %109 to i64*, !insn.addr !3299
  %111 = load i64, i64* %110, align 8, !insn.addr !3299
  %112 = add i64 %111, 312, !insn.addr !3300
  %113 = add i64 %111, 1304, !insn.addr !3301
  %114 = add i64 %111, 672, !insn.addr !3302
  %115 = add i64 %111, 1192, !insn.addr !3303
  %116 = add i64 %111, 968, !insn.addr !3304
  %117 = inttoptr i64 %112 to i8*, !insn.addr !3305
  call void @__asm_rep_stosd_memset(i8* %117, i32 0, i64 90), !insn.addr !3305
  %118 = add i64 %111, 360, !insn.addr !3306
  %119 = inttoptr i64 %118 to i64*, !insn.addr !3306
  store i64 %113, i64* %119, align 8, !insn.addr !3306
  %120 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3307
  %121 = load i64, i64* %104, align 8, !insn.addr !3308
  %122 = add i64 %111, 320, !insn.addr !3309
  %123 = inttoptr i64 %122 to i64*, !insn.addr !3309
  store i64 %114, i64* %123, align 8, !insn.addr !3309
  %124 = add i64 %111, 344, !insn.addr !3310
  %125 = inttoptr i64 %124 to i64*, !insn.addr !3310
  store i64 %116, i64* %125, align 8, !insn.addr !3310
  %126 = add i64 %121, 56, !insn.addr !3311
  %127 = inttoptr i64 %126 to i64*, !insn.addr !3311
  %128 = load i64, i64* %127, align 8, !insn.addr !3311
  %129 = add i64 %111, 328, !insn.addr !3312
  %130 = inttoptr i64 %129 to i64*, !insn.addr !3312
  store i64 %115, i64* %130, align 8, !insn.addr !3312
  %131 = inttoptr i64 %128 to i64*, !insn.addr !3313
  %132 = load i64, i64* %131, align 8, !insn.addr !3313
  %133 = add i64 %132, ptrtoint (i64* @global_var_580 to i64), !insn.addr !3314
  %134 = inttoptr i64 %133 to i64*, !insn.addr !3314
  %135 = load i64, i64* %134, align 8, !insn.addr !3314
  %136 = add i64 %132, 1416, !insn.addr !3315
  %137 = add i64 %111, 544, !insn.addr !3316
  %138 = inttoptr i64 %137 to i64*, !insn.addr !3316
  store i64 0, i64* %138, align 8, !insn.addr !3316
  %139 = add i64 %111, 552, !insn.addr !3317
  %140 = inttoptr i64 %139 to i64*, !insn.addr !3317
  store i64 %136, i64* %140, align 8, !insn.addr !3317
  %141 = add i64 %111, 536, !insn.addr !3318
  %142 = inttoptr i64 %141 to i64*, !insn.addr !3318
  store i64 %135, i64* %142, align 8, !insn.addr !3318
  %143 = call i64 @function_2d10(i64 %120, i64 %106), !insn.addr !3319
  store i64 0, i64* %stack_var_-2720, align 8, !insn.addr !3320
  %144 = call i64 @.Llzma_check_update.0(i64 %33, i64* nonnull %stack_var_-2720, i64 0, i64 0), !insn.addr !3321
  %145 = icmp eq i64 %144, 0, !insn.addr !3322
  store i64 0, i64* %rcx.1.reg2mem, !insn.addr !3323
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !3323
  br i1 %145, label %dec_label_pc_5a42, label %dec_label_pc_5baa, !insn.addr !3323

dec_label_pc_5baa:                                ; preds = %dec_label_pc_5ad1
  %146 = ptrtoint i64* %stack_var_-1048 to i64, !insn.addr !3324
  %147 = inttoptr i64 %114 to i8*, !insn.addr !3325
  %148 = inttoptr i64 %113 to i8*, !insn.addr !3326
  %149 = add i64 %111, 440, !insn.addr !3327
  %150 = inttoptr i64 %149 to i64*, !insn.addr !3327
  store i64 %144, i64* %150, align 8, !insn.addr !3327
  %151 = load i64, i64* %stack_var_-2720, align 8, !insn.addr !3328
  %152 = add i64 %151, %144, !insn.addr !3328
  %153 = add i64 %111, 448, !insn.addr !3329
  %154 = inttoptr i64 %153 to i64*, !insn.addr !3329
  store i64 %152, i64* %154, align 8, !insn.addr !3329
  %155 = inttoptr i64 %111 to i8*, !insn.addr !3330
  call void @__asm_rep_stosd_memset(i8* %155, i32 0, i64 78), !insn.addr !3330
  %156 = add i64 %111, 296, !insn.addr !3331
  %157 = inttoptr i64 %156 to i64*, !insn.addr !3331
  store i64 %114, i64* %157, align 8, !insn.addr !3331
  %158 = load i64, i64* %104, align 8, !insn.addr !3332
  %159 = add i64 %158, ptrtoint (i32** @global_var_48 to i64), !insn.addr !3333
  %160 = inttoptr i64 %159 to i64*, !insn.addr !3333
  %161 = load i64, i64* %160, align 8, !insn.addr !3333
  %162 = add i64 %158, 80, !insn.addr !3334
  %163 = inttoptr i64 %162 to i64*, !insn.addr !3334
  %164 = load i64, i64* %163, align 8, !insn.addr !3334
  %165 = add i64 %111, 272, !insn.addr !3335
  %166 = inttoptr i64 %165 to i64*, !insn.addr !3335
  store i64 %161, i64* %166, align 8, !insn.addr !3335
  %167 = add i64 %1, 8, !insn.addr !3336
  %168 = inttoptr i64 %167 to i64*, !insn.addr !3336
  %169 = load i64, i64* %168, align 8, !insn.addr !3336
  %170 = add i64 %169, 8, !insn.addr !3337
  %171 = inttoptr i64 %170 to i64*, !insn.addr !3337
  %172 = load i64, i64* %171, align 8, !insn.addr !3337
  %173 = add i64 %111, 288, !insn.addr !3338
  %174 = inttoptr i64 %173 to i64*, !insn.addr !3338
  store i64 %164, i64* %174, align 8, !insn.addr !3338
  %175 = add i64 %111, 280, !insn.addr !3339
  %176 = inttoptr i64 %175 to i64*, !insn.addr !3339
  store i64 %172, i64* %176, align 8, !insn.addr !3339
  %177 = inttoptr i64 %116 to i8*, !insn.addr !3340
  call void @__asm_rep_stosd_memset(i8* %177, i32 0, i64 56), !insn.addr !3340
  %178 = load i64, i64* %168, align 8, !insn.addr !3341
  %179 = inttoptr i64 %178 to i64*, !insn.addr !3342
  %180 = load i64, i64* %179, align 8, !insn.addr !3342
  %181 = add i64 %111, 984, !insn.addr !3343
  %182 = inttoptr i64 %181 to i64*, !insn.addr !3343
  store i64 %180, i64* %182, align 8, !insn.addr !3343
  %183 = load i64, i64* %104, align 8, !insn.addr !3344
  %184 = add i64 %183, 112, !insn.addr !3345
  %185 = inttoptr i64 %184 to i64*, !insn.addr !3345
  %186 = load i64, i64* %185, align 8, !insn.addr !3345
  %187 = add i64 %183, 120, !insn.addr !3346
  %188 = inttoptr i64 %187 to i64*, !insn.addr !3346
  %189 = load i64, i64* %188, align 8, !insn.addr !3346
  %190 = add i64 %111, 992, !insn.addr !3347
  %191 = inttoptr i64 %190 to i64*, !insn.addr !3347
  store i64 %186, i64* %191, align 8, !insn.addr !3347
  %192 = add i64 %111, 1000, !insn.addr !3348
  %193 = inttoptr i64 %192 to i64*, !insn.addr !3348
  store i64 %189, i64* %193, align 8, !insn.addr !3348
  call void @__asm_rep_stosd_memset(i8* %148, i32 0, i64 26), !insn.addr !3349
  %194 = load i64, i64* %104, align 8, !insn.addr !3350
  %195 = add i64 %194, 88, !insn.addr !3351
  %196 = inttoptr i64 %195 to i64*, !insn.addr !3351
  %197 = load i64, i64* %196, align 8, !insn.addr !3351
  %198 = add i64 %111, 1400, !insn.addr !3352
  %199 = inttoptr i64 %198 to i64*, !insn.addr !3352
  store i64 %197, i64* %199, align 8, !insn.addr !3352
  %200 = load i64, i64* %168, align 8, !insn.addr !3353
  %201 = add i64 %200, 16, !insn.addr !3354
  %202 = inttoptr i64 %201 to i64*, !insn.addr !3354
  %203 = load i64, i64* %202, align 8, !insn.addr !3354
  %204 = inttoptr i64 %203 to i64*, !insn.addr !3355
  store i64 %112, i64* %204, align 8, !insn.addr !3355
  call void @__asm_rep_stosd_memset(i8* %147, i32 0, i64 74), !insn.addr !3356
  %205 = add i64 %111, 696, !insn.addr !3357
  %206 = inttoptr i64 %205 to i64*, !insn.addr !3357
  store i64 0, i64* %206, align 8, !insn.addr !3357
  %207 = add i64 %111, 704, !insn.addr !3358
  %208 = inttoptr i64 %207 to i64*, !insn.addr !3358
  store i64 0, i64* %208, align 8, !insn.addr !3358
  %209 = add i64 %111, ptrtoint (i64* @global_var_2c8 to i64), !insn.addr !3359
  %210 = inttoptr i64 %209 to i64*, !insn.addr !3359
  store i64 0, i64* %210, align 8, !insn.addr !3359
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !3360
  store i64 0, i64* %rcx.3.reg2mem, !insn.addr !3360
  br label %dec_label_pc_5c9d, !insn.addr !3360

dec_label_pc_5c9d:                                ; preds = %dec_label_pc_5c9d, %dec_label_pc_5baa
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %211 = add i64 %rax.1.reload, %146, !insn.addr !3361
  %212 = inttoptr i64 %211 to i8*, !insn.addr !3361
  %213 = load i8, i8* %212, align 1, !insn.addr !3361
  %214 = zext i8 %213 to i64, !insn.addr !3361
  %215 = and i64 %rcx.3.reload, -256, !insn.addr !3361
  %216 = or i64 %215, %214, !insn.addr !3361
  %217 = add i64 %rax.1.reload, %115, !insn.addr !3362
  %218 = inttoptr i64 %217 to i8*, !insn.addr !3362
  store i8 %213, i8* %218, align 1, !insn.addr !3362
  %219 = add i64 %rax.1.reload, 1, !insn.addr !3363
  %220 = icmp eq i64 %rax.1.reload, 111, !insn.addr !3364
  %221 = icmp eq i1 %220, false, !insn.addr !3365
  store i64 %219, i64* %rax.1.reg2mem, !insn.addr !3365
  store i64 %216, i64* %rcx.3.reg2mem, !insn.addr !3365
  br i1 %221, label %dec_label_pc_5c9d, label %dec_label_pc_5cb2, !insn.addr !3365

dec_label_pc_5cb2:                                ; preds = %dec_label_pc_5c9d
  %222 = add i64 %111, 952, !insn.addr !3366
  %223 = inttoptr i64 %222 to i64*, !insn.addr !3366
  store i64 %115, i64* %223, align 8, !insn.addr !3366
  %224 = add i64 %111, 1296, !insn.addr !3367
  %225 = inttoptr i64 %224 to i64*, !insn.addr !3367
  store i64 0, i64* %225, align 8, !insn.addr !3367
  %226 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !3368
  %227 = add i64 %226, 16, !insn.addr !3369
  %228 = inttoptr i64 %227 to i64*, !insn.addr !3369
  store i64 %32, i64* %228, align 8, !insn.addr !3369
  %229 = call i64 @lzma_alloc(i64 1088, i64 %226, i64 0, i64 %216), !insn.addr !3370
  %230 = add i64 %111, 1200, !insn.addr !3371
  %231 = inttoptr i64 %230 to i64*, !insn.addr !3371
  store i64 %229, i64* %231, align 8, !insn.addr !3371
  %232 = icmp eq i64 %229, 0, !insn.addr !3372
  br i1 %232, label %dec_label_pc_5d08, label %dec_label_pc_5d01, !insn.addr !3373

dec_label_pc_5d01:                                ; preds = %dec_label_pc_5cb2
  %233 = inttoptr i64 %115 to i32*, !insn.addr !3374
  %234 = load i32, i32* %233, align 4, !insn.addr !3374
  %235 = add i32 %234, 1, !insn.addr !3374
  store i32 %235, i32* %233, align 4, !insn.addr !3374
  br label %dec_label_pc_5d08, !insn.addr !3374

dec_label_pc_5d08:                                ; preds = %dec_label_pc_5d01, %dec_label_pc_5cb2
  %236 = call i64 @.Llzma_lz_decoder_init.0(i64* nonnull %stack_var_-2344, i64* nonnull %stack_var_-2760, i64 %111, i64 %114), !insn.addr !3375
  %237 = trunc i64 %236 to i32, !insn.addr !3376
  %238 = icmp eq i32 %237, 0, !insn.addr !3376
  store i64 %114, i64* %rcx.1.reg2mem, !insn.addr !3377
  store i64 %111, i64* %rdx.2.reg2mem, !insn.addr !3377
  br i1 %238, label %dec_label_pc_5a42, label %dec_label_pc_5d2d, !insn.addr !3377

dec_label_pc_5d2d:                                ; preds = %dec_label_pc_5d08
  %239 = call i64 @.Lstream_decoder_memconfig.part.1(i64 1), !insn.addr !3378
  %240 = add i64 %239, 16, !insn.addr !3379
  %241 = inttoptr i64 %240 to i64*, !insn.addr !3379
  store i64 %34, i64* %241, align 8, !insn.addr !3379
  %242 = call i64 @.Lcrc_init.0(i64 %34, i64 1944, i32 0, i64 %114), !insn.addr !3380
  %243 = call i64 @lzma_alloc(i64 2808, i64 %239, i64 0, i64 %114), !insn.addr !3381
  %244 = add i64 %111, 792, !insn.addr !3382
  %245 = inttoptr i64 %244 to i64*, !insn.addr !3382
  store i64 %243, i64* %245, align 8, !insn.addr !3382
  %246 = icmp eq i64 %243, 0, !insn.addr !3383
  br i1 %246, label %dec_label_pc_5d81, label %dec_label_pc_5d7a, !insn.addr !3384

dec_label_pc_5d7a:                                ; preds = %dec_label_pc_5d2d
  %247 = add i64 %111, 960, !insn.addr !3385
  %248 = inttoptr i64 %247 to i32*, !insn.addr !3385
  %249 = load i32, i32* %248, align 4, !insn.addr !3385
  %250 = add i32 %249, 1, !insn.addr !3385
  store i32 %250, i32* %248, align 4, !insn.addr !3385
  br label %dec_label_pc_5d81, !insn.addr !3385

dec_label_pc_5d81:                                ; preds = %dec_label_pc_5d7a, %dec_label_pc_5d2d
  %251 = load i64, i64* %stack_var_-2384, align 8, !insn.addr !3386
  store i64 0, i64* %stack_var_-2608, align 8, !insn.addr !3387
  store i64 0, i64* %stack_var_-2520, align 8, !insn.addr !3388
  store i64 %251, i64* %stack_var_-2904, align 8, !insn.addr !3389
  %252 = call i64 @.Llzma_check_update.0(i64 %251, i64* nonnull %stack_var_-2608, i64 0, i64 %114), !insn.addr !3390
  %253 = load i64, i64* %stack_var_-2608, align 8, !insn.addr !3391
  %254 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3392
  %255 = add i64 %253, %252, !insn.addr !3393
  %256 = call i64 @.Lmicrolzma_decode.0(i64 %254, i64* nonnull %stack_var_-2520, i64 0), !insn.addr !3394
  %257 = load i64, i64* %stack_var_-2520, align 8, !insn.addr !3395
  %258 = add i64 %111, 400, !insn.addr !3396
  %259 = inttoptr i64 %258 to i64*, !insn.addr !3396
  store i64 %252, i64* %259, align 8, !insn.addr !3396
  %260 = add i64 %111, 408, !insn.addr !3397
  %261 = inttoptr i64 %260 to i64*, !insn.addr !3397
  store i64 %255, i64* %261, align 8, !insn.addr !3397
  %262 = add i64 %257, %256, !insn.addr !3398
  %263 = add i64 %111, 416, !insn.addr !3399
  %264 = inttoptr i64 %263 to i64*, !insn.addr !3399
  store i64 %256, i64* %264, align 8, !insn.addr !3399
  %265 = add i64 %111, 424, !insn.addr !3400
  %266 = inttoptr i64 %265 to i64*, !insn.addr !3400
  store i64 %262, i64* %266, align 8, !insn.addr !3400
  %267 = call i64 @.Llzma_lz_encoder_memusage.1(i64 3), !insn.addr !3401
  %268 = icmp eq i64 %267, 0, !insn.addr !3402
  store i64 %114, i64* %rcx.1.reg2mem, !insn.addr !3403
  store i64 %262, i64* %rdx.2.reg2mem, !insn.addr !3403
  br i1 %268, label %dec_label_pc_5a42, label %dec_label_pc_5e0d, !insn.addr !3403

dec_label_pc_5e0d:                                ; preds = %dec_label_pc_5d81
  %269 = add i64 %267, 32, !insn.addr !3404
  %270 = inttoptr i64 %269 to i64*, !insn.addr !3404
  %271 = load i64, i64* %270, align 8, !insn.addr !3404
  store i64 %271, i64* %stack_var_-2904, align 8, !insn.addr !3405
  %272 = icmp eq i64 %271, 0, !insn.addr !3406
  store i64 %114, i64* %rcx.1.reg2mem, !insn.addr !3407
  store i64 %262, i64* %rdx.2.reg2mem, !insn.addr !3407
  br i1 %272, label %dec_label_pc_5a42, label %dec_label_pc_5e1e, !insn.addr !3407

dec_label_pc_5e1e:                                ; preds = %dec_label_pc_5e0d
  %273 = add i64 %267, 48, !insn.addr !3408
  %274 = inttoptr i64 %273 to i64*, !insn.addr !3408
  %275 = load i64, i64* %274, align 8, !insn.addr !3408
  %276 = icmp eq i64 %275, 0, !insn.addr !3408
  store i64 %114, i64* %rcx.1.reg2mem, !insn.addr !3409
  store i64 %262, i64* %rdx.2.reg2mem, !insn.addr !3409
  br i1 %276, label %dec_label_pc_5a42, label %dec_label_pc_5e2e, !insn.addr !3409

dec_label_pc_5e2e:                                ; preds = %dec_label_pc_5e1e
  %277 = add i64 %111, 944, !insn.addr !3410
  %278 = inttoptr i64 %277 to i64*, !insn.addr !3410
  store i64 %271, i64* %278, align 8, !insn.addr !3410
  %279 = call i64 @.Lcrc_init.0(i64 %34, i64 3136, i32 0, i64 %114), !insn.addr !3411
  %280 = load i64, i64* %stack_var_-2384, align 8, !insn.addr !3412
  %281 = ptrtoint i64** %stack_var_-2764 to i64, !insn.addr !3413
  store i64* inttoptr (i32 ptrtoint (i64* @global_var_2c8 to i32) to i64*), i64** %stack_var_-2764, align 8, !insn.addr !3414
  %282 = call i64 @.Llzip_decode.0(i64 %280, i64 %281, i64 0, i64 %114), !insn.addr !3415
  %283 = add i64 %111, 368, !insn.addr !3416
  %284 = inttoptr i64 %283 to i64*, !insn.addr !3416
  store i64 %282, i64* %284, align 8, !insn.addr !3416
  %285 = icmp eq i64 %282, 0, !insn.addr !3417
  store i64 %114, i64* %rcx.1.reg2mem, !insn.addr !3418
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !3418
  br i1 %285, label %dec_label_pc_5a42, label %dec_label_pc_5e9c, !insn.addr !3418

dec_label_pc_5e9c:                                ; preds = %dec_label_pc_5e2e
  %286 = load i64, i64* %stack_var_-2384, align 8, !insn.addr !3419
  store i64* inttoptr (i32 1808 to i64*), i64** %stack_var_-2764, align 8, !insn.addr !3420
  %287 = call i64 @.Llzip_decode.0(i64 %286, i64 %281, i64 0, i64 %114), !insn.addr !3421
  %288 = add i64 %111, ptrtoint (i64* @global_var_178 to i64), !insn.addr !3422
  %289 = inttoptr i64 %288 to i64*, !insn.addr !3422
  store i64 %287, i64* %289, align 8, !insn.addr !3422
  %290 = icmp eq i64 %287, 0, !insn.addr !3423
  store i64 %114, i64* %rcx.1.reg2mem, !insn.addr !3424
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !3424
  br i1 %290, label %dec_label_pc_5a42, label %dec_label_pc_5ec9, !insn.addr !3424

dec_label_pc_5ec9:                                ; preds = %dec_label_pc_5e9c
  %291 = call i64 @.Lcrc64_generic.0(i64 %34, i64 1744, i64 0), !insn.addr !3425
  %292 = add i64 %111, 928, !insn.addr !3426
  %293 = inttoptr i64 %292 to i64*, !insn.addr !3426
  store i64 %291, i64* %293, align 8, !insn.addr !3426
  %294 = icmp eq i64 %291, 0, !insn.addr !3427
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !3428
  br i1 %294, label %dec_label_pc_5f40, label %dec_label_pc_5eea, !insn.addr !3428

dec_label_pc_5eea:                                ; preds = %dec_label_pc_5ec9
  %295 = call i64 @.Lcrc_init.0(i64 %34, i64 2392, i32 0, i64 %114), !insn.addr !3429
  %296 = icmp eq i64 %295, 0, !insn.addr !3430
  br i1 %296, label %dec_label_pc_5f20, label %dec_label_pc_5f0b, !insn.addr !3431

dec_label_pc_5f0b:                                ; preds = %dec_label_pc_5eea
  %297 = add i64 %295, 8, !insn.addr !3432
  %298 = inttoptr i64 %297 to i64*, !insn.addr !3432
  %299 = load i64, i64* %298, align 8, !insn.addr !3432
  %300 = load i64, i64* %stack_var_-1304, align 8, !insn.addr !3433
  %301 = add i64 %300, %299, !insn.addr !3433
  %302 = add i64 %111, 960, !insn.addr !3434
  %303 = inttoptr i64 %302 to i32*, !insn.addr !3434
  %304 = load i32, i32* %303, align 4, !insn.addr !3434
  %305 = add i32 %304, 1, !insn.addr !3434
  store i32 %305, i32* %303, align 4, !insn.addr !3434
  %306 = add i64 %111, 888, !insn.addr !3435
  %307 = inttoptr i64 %306 to i64*, !insn.addr !3435
  store i64 %301, i64* %307, align 8, !insn.addr !3435
  br label %dec_label_pc_5f20, !insn.addr !3435

dec_label_pc_5f20:                                ; preds = %dec_label_pc_5f0b, %dec_label_pc_5eea
  %308 = call i64 @.Lcrc_init.0(i64 %34, i64 2328, i32 0, i64 %114), !insn.addr !3436
  %309 = load i64, i64* %278, align 8, !insn.addr !3437
  %310 = icmp eq i64 %309, 0, !insn.addr !3437
  store i64 %308, i64* %r12.0.reg2mem, !insn.addr !3438
  br i1 %310, label %dec_label_pc_5f40, label %dec_label_pc_5f39, !insn.addr !3438

dec_label_pc_5f39:                                ; preds = %dec_label_pc_5f20
  %311 = add i64 %111, 960, !insn.addr !3439
  %312 = inttoptr i64 %311 to i32*, !insn.addr !3439
  %313 = load i32, i32* %312, align 4, !insn.addr !3439
  %314 = add i32 %313, 1, !insn.addr !3439
  store i32 %314, i32* %312, align 4, !insn.addr !3439
  store i64 %308, i64* %r12.0.reg2mem, !insn.addr !3439
  br label %dec_label_pc_5f40, !insn.addr !3439

dec_label_pc_5f40:                                ; preds = %dec_label_pc_5f39, %dec_label_pc_5f20, %dec_label_pc_5ec9
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %315 = call i64 @.Lcrc_init.0(i64 %34, i64 2752, i32 0, i64 %114), !insn.addr !3440
  %316 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3441
  %317 = add i64 %111, 904, !insn.addr !3442
  %318 = inttoptr i64 %317 to i64*, !insn.addr !3442
  store i64 %316, i64* %318, align 8, !insn.addr !3442
  %319 = icmp eq i64 %316, 0, !insn.addr !3443
  store i64 0, i64* %r9.0.reg2mem, !insn.addr !3444
  br i1 %319, label %dec_label_pc_5fbb, label %dec_label_pc_5f7b, !insn.addr !3444

dec_label_pc_5f7b:                                ; preds = %dec_label_pc_5f40
  %320 = add i64 %111, 960, !insn.addr !3445
  %321 = inttoptr i64 %320 to i32*, !insn.addr !3445
  %322 = load i32, i32* %321, align 4, !insn.addr !3445
  %323 = add i32 %322, 1, !insn.addr !3445
  store i32 %323, i32* %321, align 4, !insn.addr !3445
  %324 = call i64 @.Lcrc_init.0(i64 %34, i64 2296, i32 0, i64 %114), !insn.addr !3446
  %325 = icmp eq i64 %242, 0, !insn.addr !3447
  store i64 %324, i64* %r9.0.reg2mem, !insn.addr !3448
  br i1 %325, label %dec_label_pc_5fbb, label %dec_label_pc_5f9e, !insn.addr !3448

dec_label_pc_5f9e:                                ; preds = %dec_label_pc_5f7b
  %326 = add i64 %242, 8, !insn.addr !3449
  %327 = inttoptr i64 %326 to i64*, !insn.addr !3449
  %328 = load i64, i64* %327, align 8, !insn.addr !3449
  %329 = load i64, i64* %stack_var_-1304, align 8, !insn.addr !3450
  %330 = add i64 %329, %328, !insn.addr !3450
  %331 = load i32, i32* %321, align 4, !insn.addr !3451
  %332 = add i32 %331, 1, !insn.addr !3451
  store i32 %332, i32* %321, align 4, !insn.addr !3451
  %333 = add i64 %111, 768, !insn.addr !3452
  %334 = inttoptr i64 %333 to i64*, !insn.addr !3452
  store i64 %330, i64* %334, align 8, !insn.addr !3452
  store i64 %324, i64* %r9.0.reg2mem, !insn.addr !3452
  br label %dec_label_pc_5fbb, !insn.addr !3452

dec_label_pc_5fbb:                                ; preds = %dec_label_pc_5f9e, %dec_label_pc_5f7b, %dec_label_pc_5f40
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %335 = load i64, i64* %293, align 8, !insn.addr !3453
  %336 = icmp eq i64 %335, 0, !insn.addr !3453
  br i1 %336, label %dec_label_pc_5fcc, label %dec_label_pc_5fc5, !insn.addr !3454

dec_label_pc_5fc5:                                ; preds = %dec_label_pc_5fbb
  %337 = add i64 %111, 960, !insn.addr !3455
  %338 = inttoptr i64 %337 to i32*, !insn.addr !3455
  %339 = load i32, i32* %338, align 4, !insn.addr !3455
  %340 = add i32 %339, 1, !insn.addr !3455
  store i32 %340, i32* %338, align 4, !insn.addr !3455
  br label %dec_label_pc_5fcc, !insn.addr !3455

dec_label_pc_5fcc:                                ; preds = %dec_label_pc_5fc5, %dec_label_pc_5fbb
  store i64 %r9.0.reload, i64* %stack_var_-2904, align 8, !insn.addr !3456
  %341 = load i64, i64* %stack_var_-2384, align 8, !insn.addr !3457
  %342 = call i64 @.Llzma_lzma_optimum_fast.0(i64 %341, i64 %34, i64* nonnull %stack_var_-936, i64 %114, i64 %112), !insn.addr !3458
  %343 = trunc i64 %342 to i32, !insn.addr !3459
  %344 = icmp eq i32 %343, 0, !insn.addr !3459
  store i64 %114, i64* %rcx.1.reg2mem, !insn.addr !3460
  store i64 %106, i64* %rdx.2.reg2mem, !insn.addr !3460
  br i1 %344, label %dec_label_pc_5a42, label %dec_label_pc_5fff, !insn.addr !3460

dec_label_pc_5fff:                                ; preds = %dec_label_pc_5fcc
  %345 = icmp eq i64 %279, 0, !insn.addr !3461
  %346 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3462
  br i1 %345, label %dec_label_pc_6025, label %dec_label_pc_6010, !insn.addr !3463

dec_label_pc_6010:                                ; preds = %dec_label_pc_5fff
  %347 = add i64 %279, 8, !insn.addr !3464
  %348 = inttoptr i64 %347 to i64*, !insn.addr !3464
  %349 = load i64, i64* %348, align 8, !insn.addr !3464
  %350 = load i64, i64* %stack_var_-1304, align 8, !insn.addr !3465
  %351 = add i64 %350, %349, !insn.addr !3465
  %352 = add i64 %111, 960, !insn.addr !3466
  %353 = inttoptr i64 %352 to i32*, !insn.addr !3466
  %354 = load i32, i32* %353, align 4, !insn.addr !3466
  %355 = add i32 %354, 1, !insn.addr !3466
  store i32 %355, i32* %353, align 4, !insn.addr !3466
  %356 = add i64 %111, 896, !insn.addr !3467
  %357 = inttoptr i64 %356 to i64*, !insn.addr !3467
  store i64 %351, i64* %357, align 8, !insn.addr !3467
  br label %dec_label_pc_6025, !insn.addr !3467

dec_label_pc_6025:                                ; preds = %dec_label_pc_6010, %dec_label_pc_5fff
  %358 = icmp eq i64 %r12.0.reload, 0, !insn.addr !3468
  br i1 %358, label %dec_label_pc_6040, label %dec_label_pc_602a, !insn.addr !3469

dec_label_pc_602a:                                ; preds = %dec_label_pc_6025
  %359 = add i64 %r12.0.reload, 8, !insn.addr !3470
  %360 = inttoptr i64 %359 to i64*, !insn.addr !3470
  %361 = load i64, i64* %360, align 8, !insn.addr !3470
  %362 = load i64, i64* %stack_var_-1304, align 8, !insn.addr !3471
  %363 = add i64 %362, %361, !insn.addr !3471
  %364 = add i64 %111, 960, !insn.addr !3472
  %365 = inttoptr i64 %364 to i32*, !insn.addr !3472
  %366 = load i32, i32* %365, align 4, !insn.addr !3472
  %367 = add i32 %366, 1, !insn.addr !3472
  store i32 %367, i32* %365, align 4, !insn.addr !3472
  %368 = add i64 %111, 880, !insn.addr !3473
  %369 = inttoptr i64 %368 to i64*, !insn.addr !3473
  store i64 %363, i64* %369, align 8, !insn.addr !3473
  br label %dec_label_pc_6040, !insn.addr !3473

dec_label_pc_6040:                                ; preds = %dec_label_pc_602a, %dec_label_pc_6025
  %370 = icmp eq i64 %315, 0, !insn.addr !3474
  br i1 %370, label %dec_label_pc_6062, label %dec_label_pc_6048, !insn.addr !3475

dec_label_pc_6048:                                ; preds = %dec_label_pc_6040
  %371 = add i64 %315, 8, !insn.addr !3476
  %372 = inttoptr i64 %371 to i64*, !insn.addr !3476
  %373 = load i64, i64* %372, align 8, !insn.addr !3476
  %374 = load i64, i64* %stack_var_-1304, align 8, !insn.addr !3477
  %375 = add i64 %374, %373, !insn.addr !3477
  %376 = add i64 %111, 960, !insn.addr !3478
  %377 = inttoptr i64 %376 to i32*, !insn.addr !3478
  %378 = load i32, i32* %377, align 4, !insn.addr !3478
  %379 = add i32 %378, 1, !insn.addr !3478
  store i32 %379, i32* %377, align 4, !insn.addr !3478
  %380 = add i64 %111, 936, !insn.addr !3479
  %381 = inttoptr i64 %380 to i64*, !insn.addr !3479
  store i64 %375, i64* %381, align 8, !insn.addr !3479
  br label %dec_label_pc_6062, !insn.addr !3479

dec_label_pc_6062:                                ; preds = %dec_label_pc_6048, %dec_label_pc_6040
  %382 = icmp eq i64 %346, 0, !insn.addr !3480
  br i1 %382, label %dec_label_pc_607c, label %dec_label_pc_6067, !insn.addr !3481

dec_label_pc_6067:                                ; preds = %dec_label_pc_6062
  %383 = add i64 %346, 8, !insn.addr !3482
  %384 = inttoptr i64 %383 to i64*, !insn.addr !3482
  %385 = load i64, i64* %384, align 8, !insn.addr !3482
  %386 = load i64, i64* %stack_var_-1304, align 8, !insn.addr !3483
  %387 = add i64 %386, %385, !insn.addr !3483
  %388 = add i64 %111, 960, !insn.addr !3484
  %389 = inttoptr i64 %388 to i32*, !insn.addr !3484
  %390 = load i32, i32* %389, align 4, !insn.addr !3484
  %391 = add i32 %390, 1, !insn.addr !3484
  store i32 %391, i32* %389, align 4, !insn.addr !3484
  %392 = add i64 %111, ptrtoint (i64* @global_var_398 to i64), !insn.addr !3485
  %393 = inttoptr i64 %392 to i64*, !insn.addr !3485
  store i64 %387, i64* %393, align 8, !insn.addr !3485
  br label %dec_label_pc_607c, !insn.addr !3485

dec_label_pc_607c:                                ; preds = %dec_label_pc_6067, %dec_label_pc_6062
  %394 = call i64 @.Lcrc_init.0(i64 %34, i64 1008, i32 0, i64 %114), !insn.addr !3486
  %395 = load i64, i64* %125, align 8, !insn.addr !3487
  %396 = load i64, i64* %stack_var_-2384, align 8, !insn.addr !3488
  store i64 0, i64* %stack_var_-2608, align 8, !insn.addr !3489
  store i32 0, i32* %stack_var_-2712, align 4, !insn.addr !3490
  %397 = inttoptr i64 %395 to i64*, !insn.addr !3491
  store i64 0, i64* %397, align 8, !insn.addr !3491
  %398 = add i64 %395, 8, !insn.addr !3492
  %399 = inttoptr i64 %398 to i32*, !insn.addr !3492
  store i32 0, i32* %399, align 4, !insn.addr !3492
  store i64 %396, i64* %stack_var_-2904, align 8, !insn.addr !3493
  %400 = call i64 @.Lmicrolzma_decode.0(i64 %396, i64* nonnull %stack_var_-2608, i64 0), !insn.addr !3494
  %401 = icmp eq i64 %400, 0, !insn.addr !3495
  %402 = icmp eq i64 %2, 0, !insn.addr !3496
  %or.cond21 = or i1 %402, %401
  store i64 %114, i64* %rcx.14.reg2mem, !insn.addr !3497
  store i64 %112, i64* %r8.7.reg2mem, !insn.addr !3497
  br i1 %or.cond21, label %dec_label_pc_65aa, label %dec_label_pc_6100, !insn.addr !3497

dec_label_pc_6100:                                ; preds = %dec_label_pc_607c
  %403 = add i64 %395, 168, !insn.addr !3498
  %404 = inttoptr i64 %403 to i64*, !insn.addr !3498
  %405 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3499
  %406 = ptrtoint i32* %stack_var_-2712 to i64, !insn.addr !3500
  %407 = add i64 %395, 176, !insn.addr !3501
  %408 = inttoptr i64 %407 to i64*, !insn.addr !3501
  store i32 1024, i32* %stack_var_-2712, align 4, !insn.addr !3502
  %409 = call i64 @.Llzip_decode.0(i64 %405, i64 %406, i64 0, i64 %114), !insn.addr !3503
  %410 = add i64 %395, 208, !insn.addr !3504
  %411 = inttoptr i64 %410 to i64*, !insn.addr !3504
  store i64 %409, i64* %411, align 8, !insn.addr !3504
  %412 = icmp eq i64 %409, 0, !insn.addr !3505
  store i64 %114, i64* %rcx.4.reg2mem, !insn.addr !3506
  store i64 %112, i64* %r8.0.reg2mem, !insn.addr !3506
  br i1 %412, label %dec_label_pc_617e, label %dec_label_pc_6140, !insn.addr !3506

dec_label_pc_6140:                                ; preds = %dec_label_pc_6100
  %413 = add i64 %395, 56, !insn.addr !3507
  %414 = add i64 %395, 48, !insn.addr !3508
  %415 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3509
  %416 = add i64 %395, 40, !insn.addr !3510
  %sext = mul i64 %112, 4294967296
  %417 = ashr exact i64 %sext, 32, !insn.addr !3511
  %418 = call i64 @function_2a30(i64 22, i64 %416, i64 %414, i64 %413, i64 %415, i64* nonnull %stack_var_-936, i64 %417), !insn.addr !3511
  %419 = trunc i64 %418 to i32, !insn.addr !3512
  %420 = icmp eq i32 %419, 0, !insn.addr !3512
  %421 = icmp eq i1 %420, false, !insn.addr !3513
  store i64 %413, i64* %rcx.4.reg2mem, !insn.addr !3513
  store i64 %417, i64* %r8.0.reg2mem, !insn.addr !3513
  br i1 %421, label %dec_label_pc_617e, label %dec_label_pc_6170, !insn.addr !3513

dec_label_pc_6170:                                ; preds = %dec_label_pc_6140
  %422 = inttoptr i64 %416 to i64*, !insn.addr !3514
  store i64 0, i64* %422, align 8, !insn.addr !3514
  %423 = inttoptr i64 %414 to i64*, !insn.addr !3515
  store i64 0, i64* %423, align 8, !insn.addr !3515
  %424 = inttoptr i64 %413 to i64*, !insn.addr !3516
  store i64 0, i64* %424, align 8, !insn.addr !3516
  store i64 %413, i64* %rcx.4.reg2mem, !insn.addr !3516
  store i64 %417, i64* %r8.0.reg2mem, !insn.addr !3516
  br label %dec_label_pc_617e, !insn.addr !3516

dec_label_pc_617e:                                ; preds = %dec_label_pc_6170, %dec_label_pc_6140, %dec_label_pc_6100
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %425 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3517
  store i32 1976, i32* %stack_var_-2712, align 4, !insn.addr !3518
  %426 = call i64 @.Llzip_decode.0(i64 %425, i64 %406, i64 0, i64 %rcx.4.reload), !insn.addr !3519
  %427 = add i64 %395, 216, !insn.addr !3520
  %428 = inttoptr i64 %427 to i64*, !insn.addr !3520
  store i64 %426, i64* %428, align 8, !insn.addr !3520
  %429 = icmp eq i64 %426, 0, !insn.addr !3521
  store i64 %rcx.4.reload, i64* %rcx.5.reg2mem, !insn.addr !3522
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !3522
  br i1 %429, label %dec_label_pc_622c, label %dec_label_pc_61ac, !insn.addr !3522

dec_label_pc_61ac:                                ; preds = %dec_label_pc_617e
  %430 = add i64 %395, 88, !insn.addr !3523
  %431 = add i64 %395, 80, !insn.addr !3524
  %432 = add i64 %395, 72, !insn.addr !3525
  %433 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3526
  %sext7 = mul i64 %112, 4294967296
  %434 = ashr exact i64 %sext7, 32, !insn.addr !3527
  %435 = call i64 @function_2a30(i64 23, i64 %432, i64 %431, i64 %430, i64 %433, i64* nonnull %stack_var_-936, i64 %434), !insn.addr !3527
  %436 = trunc i64 %435 to i32, !insn.addr !3528
  %437 = icmp eq i32 %436, 0, !insn.addr !3528
  %438 = icmp eq i1 %437, false, !insn.addr !3529
  br i1 %438, label %dec_label_pc_61f5, label %dec_label_pc_61e4, !insn.addr !3529

dec_label_pc_61e4:                                ; preds = %dec_label_pc_61ac
  %sext19 = mul i64 %426, 4294967296
  %439 = ashr exact i64 %sext19, 32, !insn.addr !3530
  %440 = inttoptr i64 %432 to i64*, !insn.addr !3531
  store i64 0, i64* %440, align 8, !insn.addr !3531
  %441 = inttoptr i64 %431 to i64*, !insn.addr !3532
  store i64 0, i64* %441, align 8, !insn.addr !3532
  %442 = inttoptr i64 %430 to i64*, !insn.addr !3533
  store i64 0, i64* %442, align 8, !insn.addr !3533
  store i64 %439, i64* %rcx.5.reg2mem, !insn.addr !3534
  store i64 %433, i64* %r8.1.reg2mem, !insn.addr !3534
  br label %dec_label_pc_622c, !insn.addr !3534

dec_label_pc_61f5:                                ; preds = %dec_label_pc_61ac
  %443 = add i64 %395, 120, !insn.addr !3535
  %444 = add i64 %395, 112, !insn.addr !3536
  %445 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3537
  %446 = add i64 %395, 104, !insn.addr !3538
  %447 = call i64 @function_2a30(i64 ptrtoint (i32** @global_var_18 to i64), i64 %446, i64 %444, i64 %443, i64 %445, i64* nonnull %stack_var_-936, i64 %434), !insn.addr !3539
  %448 = trunc i64 %447 to i32, !insn.addr !3540
  %449 = icmp eq i32 %448, 0, !insn.addr !3540
  %450 = icmp eq i1 %449, false, !insn.addr !3541
  store i64 %443, i64* %rcx.5.reg2mem, !insn.addr !3541
  store i64 %445, i64* %r8.1.reg2mem, !insn.addr !3541
  br i1 %450, label %dec_label_pc_622c, label %dec_label_pc_621d, !insn.addr !3541

dec_label_pc_621d:                                ; preds = %dec_label_pc_61f5
  %451 = inttoptr i64 %446 to i64*, !insn.addr !3542
  store i64 0, i64* %451, align 8, !insn.addr !3542
  %452 = inttoptr i64 %444 to i64*, !insn.addr !3543
  store i64 0, i64* %452, align 8, !insn.addr !3543
  %453 = inttoptr i64 %443 to i64*, !insn.addr !3544
  store i64 0, i64* %453, align 8, !insn.addr !3544
  store i64 %443, i64* %rcx.5.reg2mem, !insn.addr !3544
  store i64 %445, i64* %r8.1.reg2mem, !insn.addr !3544
  br label %dec_label_pc_622c, !insn.addr !3544

dec_label_pc_622c:                                ; preds = %dec_label_pc_621d, %dec_label_pc_61f5, %dec_label_pc_61e4, %dec_label_pc_617e
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %454 = add i64 %395, 40, !insn.addr !3545
  %455 = inttoptr i64 %454 to i64*, !insn.addr !3545
  %456 = load i64, i64* %455, align 8, !insn.addr !3545
  %457 = icmp eq i64 %456, 0, !insn.addr !3545
  %458 = icmp eq i1 %457, false, !insn.addr !3546
  br i1 %458, label %dec_label_pc_623e, label %dec_label_pc_6233, !insn.addr !3546

dec_label_pc_6233:                                ; preds = %dec_label_pc_622c
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %459 = add i64 %395, 72, !insn.addr !3547
  %460 = inttoptr i64 %459 to i64*, !insn.addr !3547
  %461 = load i64, i64* %460, align 8, !insn.addr !3547
  %462 = icmp eq i64 %461, 0, !insn.addr !3547
  store i64 %rcx.5.reload, i64* %rcx.14.reg2mem, !insn.addr !3548
  store i64 %r8.1.reload, i64* %r8.7.reg2mem, !insn.addr !3548
  br i1 %462, label %dec_label_pc_65aa, label %dec_label_pc_623e, !insn.addr !3548

dec_label_pc_623e:                                ; preds = %dec_label_pc_6233, %dec_label_pc_622c
  %463 = load i64, i64* %125, align 8, !insn.addr !3549
  %464 = add i64 %3, 384, !insn.addr !3550
  %465 = inttoptr i64 %464 to i64*, !insn.addr !3550
  store i64 0, i64* %465, align 8, !insn.addr !3550
  %466 = add i64 %463, 40, !insn.addr !3551
  %467 = inttoptr i64 %466 to i64*, !insn.addr !3551
  %468 = load i64, i64* %467, align 8, !insn.addr !3551
  %469 = icmp eq i64 %468, 0, !insn.addr !3552
  br i1 %469, label %dec_label_pc_625f, label %dec_label_pc_6259, !insn.addr !3553

dec_label_pc_6259:                                ; preds = %dec_label_pc_623e
  %470 = add i64 %463, 48, !insn.addr !3554
  store i64 %468, i64* %r12.1.reg2mem, !insn.addr !3555
  store i64 %470, i64* %storemerge14.in.in.reg2mem, !insn.addr !3555
  br label %dec_label_pc_6270, !insn.addr !3555

dec_label_pc_625f:                                ; preds = %dec_label_pc_623e
  %471 = add i64 %463, 72, !insn.addr !3556
  %472 = inttoptr i64 %471 to i64*, !insn.addr !3556
  %473 = load i64, i64* %472, align 8, !insn.addr !3556
  %474 = icmp eq i64 %473, 0, !insn.addr !3557
  store i64 %rcx.5.reload, i64* %rcx.14.reg2mem, !insn.addr !3558
  store i64 0, i64* %r8.7.reg2mem, !insn.addr !3558
  br i1 %474, label %dec_label_pc_65aa, label %dec_label_pc_626c, !insn.addr !3558

dec_label_pc_626c:                                ; preds = %dec_label_pc_625f
  %475 = add i64 %463, 80, !insn.addr !3559
  store i64 %473, i64* %r12.1.reg2mem, !insn.addr !3559
  store i64 %475, i64* %storemerge14.in.in.reg2mem, !insn.addr !3559
  br label %dec_label_pc_6270, !insn.addr !3559

dec_label_pc_6270:                                ; preds = %dec_label_pc_626c, %dec_label_pc_6259
  %storemerge14.in.in.reload = load i64, i64* %storemerge14.in.in.reg2mem
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %storemerge14.in = inttoptr i64 %storemerge14.in.in.reload to i64*
  %storemerge14 = load i64, i64* %storemerge14.in, align 8
  %476 = add i64 %3, 88, !insn.addr !3560
  %477 = inttoptr i64 %476 to i64*, !insn.addr !3560
  store i64 %storemerge14, i64* %477, align 8, !insn.addr !3560
  %478 = add i64 %3, 200, !insn.addr !3561
  %479 = inttoptr i64 %478 to i32*, !insn.addr !3562
  store i32 408, i32* %479, align 8, !insn.addr !3562
  %480 = add i64 %3, 104, !insn.addr !3563
  %481 = inttoptr i64 %480 to i64*, !insn.addr !3563
  store i64 %478, i64* %481, align 8, !insn.addr !3563
  %482 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3564
  %483 = call i64 @.Llzip_decode.0(i64 %482, i64 %478, i64 0, i64 %rcx.5.reload), !insn.addr !3565
  %484 = add i64 %3, 16, !insn.addr !3566
  %485 = inttoptr i64 %484 to i64*, !insn.addr !3566
  store i64 %483, i64* %485, align 8, !insn.addr !3566
  %486 = icmp eq i64 %483, 0, !insn.addr !3567
  store i64 %rcx.5.reload, i64* %rcx.14.reg2mem, !insn.addr !3568
  store i64 0, i64* %r8.7.reg2mem, !insn.addr !3568
  br i1 %486, label %dec_label_pc_65aa, label %dec_label_pc_62ad.lr.ph, !insn.addr !3568

dec_label_pc_62ad.lr.ph:                          ; preds = %dec_label_pc_6270
  %487 = add i64 %3, 64, !insn.addr !3569
  %488 = inttoptr i64 %487 to i64*
  %489 = trunc i64 %464 to i32, !insn.addr !3570
  %490 = add i64 %3, 112
  %491 = inttoptr i64 %490 to i64*
  store i64 0, i64* %rbx.292.reg2mem
  br label %dec_label_pc_62ad

dec_label_pc_62ad:                                ; preds = %dec_label_pc_62ad.lr.ph, %dec_label_pc_63d5
  %rbx.292.reload = load i64, i64* %rbx.292.reg2mem
  store i64 0, i64* %465, align 8, !insn.addr !3571
  %492 = load i64, i64* %485, align 8, !insn.addr !3572
  %493 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3573
  store i64 %464, i64* %488, align 8, !insn.addr !3569
  %494 = call i64 @.Lstream_encoder_update.0(i64 %493, i64 %492, i32 0, i32 0, i32 %489), !insn.addr !3570
  %495 = icmp eq i64 %494, 0, !insn.addr !3574
  %496 = icmp eq i1 %495, false, !insn.addr !3575
  store i64 %rbx.292.reload, i64* %rbx.3.reg2mem, !insn.addr !3575
  store i64 %494, i64* %r8.3.reg2mem, !insn.addr !3575
  br i1 %496, label %dec_label_pc_630a, label %dec_label_pc_62e1, !insn.addr !3575

dec_label_pc_62e1:                                ; preds = %dec_label_pc_62ad
  %497 = load i64, i64* %488, align 8, !insn.addr !3576
  %498 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3577
  store i64 0, i64* %465, align 8, !insn.addr !3578
  %499 = load i64, i64* %485, align 8, !insn.addr !3579
  %500 = trunc i64 %497 to i32, !insn.addr !3580
  %501 = call i64 @.Lstream_encoder_update.1(i64 %498, i64 %499, i32 0, i32 0, i32 %500), !insn.addr !3580
  store i64 1, i64* %rbx.3.reg2mem, !insn.addr !3581
  store i64 %501, i64* %r8.3.reg2mem, !insn.addr !3581
  br label %dec_label_pc_630a, !insn.addr !3581

dec_label_pc_630a:                                ; preds = %dec_label_pc_62e1, %dec_label_pc_62ad
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  store i64 %464, i64* %488, align 8, !insn.addr !3582
  %502 = icmp eq i64 %r8.3.reload, 0, !insn.addr !3583
  store i64 %r8.3.reload, i64* %r8.490.reg2mem, !insn.addr !3584
  store i64 %rbx.3.reload, i64* %rbx.489.reg2mem, !insn.addr !3584
  store i64 %rbx.3.reload, i64* %rbx.4.lcssa.reg2mem, !insn.addr !3584
  br i1 %502, label %dec_label_pc_63d5, label %dec_label_pc_6320.preheader, !insn.addr !3584

dec_label_pc_6320.preheader:                      ; preds = %dec_label_pc_630a, %dec_label_pc_63c3
  %rbx.489.reload = load i64, i64* %rbx.489.reg2mem
  %r8.490.reload = load i64, i64* %r8.490.reg2mem
  %503 = trunc i64 %rbx.489.reload to i32
  %504 = icmp eq i32 %503, 0
  %505 = icmp eq i1 %504, false
  store i64 %r8.490.reload, i64* %r8.5.reg2mem
  br label %dec_label_pc_6320

dec_label_pc_6320:                                ; preds = %dec_label_pc_6320.preheader, %dec_label_pc_6396
  %r8.5.reload = load i64, i64* %r8.5.reg2mem
  %506 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3585
  store i64 %r8.5.reload, i64* %491, align 8, !insn.addr !3586
  %507 = call i64 @.Lauto_decode.1(i64 %506, i64 %r8.5.reload, i64 8, i64 1, i64 %r8.5.reload), !insn.addr !3587
  %508 = trunc i64 %507 to i32, !insn.addr !3588
  %509 = icmp eq i32 %508, 0, !insn.addr !3588
  br i1 %509, label %dec_label_pc_6380, label %dec_label_pc_6344, !insn.addr !3589

dec_label_pc_6344:                                ; preds = %dec_label_pc_6320
  %510 = load i64, i64* %491, align 8, !insn.addr !3590
  %511 = load i64, i64* %477, align 8, !insn.addr !3591
  %512 = call i64 @.Llzma_properties_size.0(i64 %r12.1.reload, i64 %511, i64 0, i64 265, i64 %510), !insn.addr !3592
  %513 = trunc i64 %512 to i32, !insn.addr !3593
  %514 = icmp eq i32 %513, 0, !insn.addr !3593
  br i1 %514, label %dec_label_pc_6380, label %dec_label_pc_6361, !insn.addr !3594

dec_label_pc_6361:                                ; preds = %dec_label_pc_6344
  %515 = load i64, i64* %491, align 8, !insn.addr !3595
  %516 = load i64, i64* %125, align 8, !insn.addr !3596
  %517 = load i64, i64* %455, align 8, !insn.addr !3597
  %518 = icmp eq i64 %517, 0, !insn.addr !3597
  %519 = add i64 %516, 160, !insn.addr !3598
  %520 = inttoptr i64 %519 to i64*, !insn.addr !3598
  store i64 %515, i64* %520, align 8, !insn.addr !3598
  br i1 %518, label %dec_label_pc_63e3, label %dec_label_pc_6376, !insn.addr !3599

dec_label_pc_6376:                                ; preds = %dec_label_pc_6361
  %521 = add i64 %395, 4, !insn.addr !3600
  %522 = inttoptr i64 %521 to i32*, !insn.addr !3600
  store i32 1, i32* %522, align 4, !insn.addr !3600
  br label %dec_label_pc_63e3, !insn.addr !3601

dec_label_pc_6380:                                ; preds = %dec_label_pc_6344, %dec_label_pc_6320
  %523 = load i64, i64* %488, align 8, !insn.addr !3602
  %524 = load i64, i64* %485, align 8, !insn.addr !3603
  %525 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3604
  store i64 %524, i64* %rsi.2.reg2mem, !insn.addr !3605
  store i64 %525, i64* %rdi.0.reg2mem, !insn.addr !3605
  store i64 %523, i64* %r8.6.reg2mem, !insn.addr !3605
  br i1 %505, label %dec_label_pc_63c3, label %dec_label_pc_6396, !insn.addr !3605

dec_label_pc_6396:                                ; preds = %dec_label_pc_6380
  %526 = trunc i64 %523 to i32, !insn.addr !3606
  %527 = call i64 @.Lstream_encoder_update.0(i64 %525, i64 %524, i32 0, i32 0, i32 %526), !insn.addr !3606
  %528 = icmp eq i64 %527, 0, !insn.addr !3607
  %529 = icmp eq i1 %528, false, !insn.addr !3608
  store i64 %527, i64* %r8.5.reg2mem, !insn.addr !3608
  br i1 %529, label %dec_label_pc_6320, label %dec_label_pc_63a7, !insn.addr !3608

dec_label_pc_63a7:                                ; preds = %dec_label_pc_6396
  %530 = load i64, i64* %488, align 8, !insn.addr !3609
  %531 = load i64, i64* %485, align 8, !insn.addr !3610
  %532 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3611
  store i64 0, i64* %465, align 8, !insn.addr !3612
  store i64 %531, i64* %rsi.2.reg2mem, !insn.addr !3613
  store i64 %532, i64* %rdi.0.reg2mem, !insn.addr !3613
  store i64 %530, i64* %r8.6.reg2mem, !insn.addr !3613
  br label %dec_label_pc_63c3, !insn.addr !3613

dec_label_pc_63c3:                                ; preds = %dec_label_pc_6380, %dec_label_pc_63a7
  %r8.6.reload = load i64, i64* %r8.6.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %533 = trunc i64 %r8.6.reload to i32, !insn.addr !3614
  %534 = call i64 @.Lstream_encoder_update.1(i64 %rdi.0.reload, i64 %rsi.2.reload, i32 0, i32 0, i32 %533), !insn.addr !3614
  %535 = icmp eq i64 %534, 0, !insn.addr !3583
  store i64 %534, i64* %r8.490.reg2mem, !insn.addr !3584
  store i64 1, i64* %rbx.489.reg2mem, !insn.addr !3584
  store i64 1, i64* %rbx.4.lcssa.reg2mem, !insn.addr !3584
  br i1 %535, label %dec_label_pc_63d5, label %dec_label_pc_6320.preheader, !insn.addr !3584

dec_label_pc_63d5:                                ; preds = %dec_label_pc_63c3, %dec_label_pc_630a
  %rbx.4.lcssa.reload = load i64, i64* %rbx.4.lcssa.reg2mem
  %536 = load i64, i64* %485, align 8, !insn.addr !3615
  %537 = add i64 %536, 8, !insn.addr !3616
  %538 = load i64, i64* %481, align 8, !insn.addr !3617
  %539 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3564
  %540 = call i64 @.Llzip_decode.0(i64 %539, i64 %538, i64 %537, i64 0), !insn.addr !3565
  store i64 %540, i64* %485, align 8, !insn.addr !3566
  %541 = icmp eq i64 %540, 0, !insn.addr !3567
  store i64 %rbx.4.lcssa.reload, i64* %rbx.292.reg2mem, !insn.addr !3568
  store i64 0, i64* %rcx.14.reg2mem, !insn.addr !3568
  store i64 0, i64* %r8.7.reg2mem, !insn.addr !3568
  br i1 %541, label %dec_label_pc_65aa, label %dec_label_pc_62ad, !insn.addr !3568

dec_label_pc_63e3:                                ; preds = %dec_label_pc_6376, %dec_label_pc_6361
  %542 = add i64 %395, 72, !insn.addr !3618
  %543 = inttoptr i64 %542 to i64*, !insn.addr !3618
  %544 = load i64, i64* %543, align 8, !insn.addr !3618
  %545 = icmp eq i64 %544, 0, !insn.addr !3618
  br i1 %545, label %dec_label_pc_6400, label %dec_label_pc_63ea, !insn.addr !3619

dec_label_pc_63ea:                                ; preds = %dec_label_pc_63e3
  %546 = add i64 %395, 104, !insn.addr !3620
  %547 = inttoptr i64 %546 to i64*, !insn.addr !3620
  %548 = load i64, i64* %547, align 8, !insn.addr !3620
  %549 = icmp eq i64 %548, 0, !insn.addr !3620
  %550 = inttoptr i64 %395 to i32*, !insn.addr !3621
  store i32 1, i32* %550, align 4, !insn.addr !3621
  br i1 %549, label %dec_label_pc_6400, label %dec_label_pc_63f8, !insn.addr !3622

dec_label_pc_63f8:                                ; preds = %dec_label_pc_63ea
  store i32 1, i32* %399, align 4, !insn.addr !3623
  br label %dec_label_pc_6400, !insn.addr !3623

dec_label_pc_6400:                                ; preds = %dec_label_pc_63f8, %dec_label_pc_63ea, %dec_label_pc_63e3
  %551 = add i64 %3, 48, !insn.addr !3624
  %552 = inttoptr i64 %551 to i64*, !insn.addr !3624
  %553 = load i64, i64* %552, align 8, !insn.addr !3624
  %554 = add i64 %3, 96, !insn.addr !3625
  %555 = inttoptr i64 %554 to i64*, !insn.addr !3625
  %556 = load i64, i64* %555, align 8, !insn.addr !3625
  %557 = add i64 %3, 1968, !insn.addr !3626
  %558 = add i64 %556, %553, !insn.addr !3627
  store i64 %558, i64* %485, align 8, !insn.addr !3628
  %559 = call i64 @function_2c40(i64 17, i64 %557, i64 %553, i64 %558), !insn.addr !3629
  %560 = icmp eq i64 %559, 0, !insn.addr !3630
  br i1 %560, label %dec_label_pc_643d, label %dec_label_pc_642f, !insn.addr !3631

dec_label_pc_642f:                                ; preds = %dec_label_pc_6400
  %561 = load i64, i64* %125, align 8, !insn.addr !3632
  %562 = add i64 %561, 192, !insn.addr !3633
  %563 = inttoptr i64 %562 to i64*, !insn.addr !3633
  store i64 %559, i64* %563, align 8, !insn.addr !3633
  br label %dec_label_pc_643d, !insn.addr !3633

dec_label_pc_643d:                                ; preds = %dec_label_pc_642f, %dec_label_pc_6400
  %564 = add i64 %3, 392, !insn.addr !3634
  %565 = inttoptr i64 %564 to i32*, !insn.addr !3634
  store i32 112, i32* %565, align 8, !insn.addr !3634
  store i64 13572096657736, i64* %465, align 8, !insn.addr !3635
  store i64 0, i64* %rbx.5.reg2mem, !insn.addr !3636
  store i64 %464, i64* %r12.2.reg2mem, !insn.addr !3636
  br label %dec_label_pc_646c, !insn.addr !3636

dec_label_pc_646c:                                ; preds = %dec_label_pc_649b, %dec_label_pc_643d
  %r12.2.reload = load i64, i64* %r12.2.reg2mem
  %rbx.5.reload = load i64, i64* %rbx.5.reg2mem
  %566 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3637
  %567 = call i64 @.Llzip_decode.0(i64 %566, i64 %r12.2.reload, i64 0, i64 %558), !insn.addr !3638
  %568 = icmp eq i64 %567, 0, !insn.addr !3639
  store i64 %rbx.5.reload, i64* %rbx.6.reg2mem, !insn.addr !3640
  br i1 %568, label %dec_label_pc_649b, label %dec_label_pc_647f, !insn.addr !3640

dec_label_pc_647f:                                ; preds = %dec_label_pc_646c
  %569 = trunc i64 %rbx.5.reload to i32, !insn.addr !3641
  %570 = icmp eq i32 %569, 1, !insn.addr !3641
  %571 = icmp eq i1 %570, false, !insn.addr !3642
  store i64 1, i64* %rbx.6.reg2mem, !insn.addr !3642
  br i1 %571, label %dec_label_pc_649b, label %dec_label_pc_6483, !insn.addr !3642

dec_label_pc_6483:                                ; preds = %dec_label_pc_647f
  %572 = load i64, i64* %125, align 8, !insn.addr !3643
  %573 = add i64 %572, 184, !insn.addr !3644
  %574 = inttoptr i64 %573 to i32*, !insn.addr !3644
  store i32 1, i32* %574, align 4, !insn.addr !3644
  br label %dec_label_pc_64b3, !insn.addr !3645

dec_label_pc_649b:                                ; preds = %dec_label_pc_647f, %dec_label_pc_646c
  %rbx.6.reload = load i64, i64* %rbx.6.reg2mem
  %575 = add i64 %r12.2.reload, 4, !insn.addr !3646
  %576 = icmp eq i64 %r12.2.reload, %564, !insn.addr !3647
  %577 = icmp eq i1 %576, false, !insn.addr !3648
  store i64 %rbx.6.reload, i64* %rbx.5.reg2mem, !insn.addr !3648
  store i64 %575, i64* %r12.2.reg2mem, !insn.addr !3648
  br i1 %577, label %dec_label_pc_646c, label %dec_label_pc_64a4, !insn.addr !3648

dec_label_pc_64a4:                                ; preds = %dec_label_pc_649b
  %578 = load i64, i64* %125, align 8, !insn.addr !3649
  %579 = add i64 %578, 184, !insn.addr !3650
  %580 = inttoptr i64 %579 to i32*, !insn.addr !3650
  store i32 0, i32* %580, align 4, !insn.addr !3650
  br label %dec_label_pc_64b3, !insn.addr !3650

dec_label_pc_64b3:                                ; preds = %dec_label_pc_64a4, %dec_label_pc_6483
  %581 = load i64, i64* %485, align 8, !insn.addr !3651
  %582 = load i64, i64* %552, align 8, !insn.addr !3652
  store i64 %557, i64* %488, align 8, !insn.addr !3653
  %583 = call i64 @function_2c40(i64 21, i64 %557, i64 %582, i64 %581), !insn.addr !3654
  %584 = icmp eq i64 %583, 0, !insn.addr !3655
  store i64 %581, i64* %rcx.14.reg2mem, !insn.addr !3656
  store i64 %515, i64* %r8.7.reg2mem, !insn.addr !3656
  br i1 %584, label %dec_label_pc_65aa, label %dec_label_pc_64e3, !insn.addr !3656

dec_label_pc_64e3:                                ; preds = %dec_label_pc_64b3
  %585 = load i64, i64* %125, align 8, !insn.addr !3657
  %586 = add i64 %585, 184, !insn.addr !3658
  %587 = inttoptr i64 %586 to i32*, !insn.addr !3658
  %588 = load i32, i32* %587, align 4, !insn.addr !3658
  %589 = icmp eq i32 %588, 0, !insn.addr !3658
  store i64 %585, i64* %.reg2mem, !insn.addr !3659
  store i64 %581, i64* %rcx.13.reg2mem, !insn.addr !3659
  br i1 %589, label %dec_label_pc_659c, label %dec_label_pc_64f7, !insn.addr !3659

dec_label_pc_64f7:                                ; preds = %dec_label_pc_64e3
  %590 = inttoptr i64 %112 to i32*, !insn.addr !3660
  %591 = load i32, i32* %590, align 4, !insn.addr !3660
  %592 = icmp eq i32 %591, 0, !insn.addr !3660
  store i64 %585, i64* %.reg2mem, !insn.addr !3661
  store i64 %581, i64* %rcx.13.reg2mem, !insn.addr !3661
  br i1 %592, label %dec_label_pc_659c, label %dec_label_pc_6505, !insn.addr !3661

dec_label_pc_6505:                                ; preds = %dec_label_pc_64f7
  store i32 16, i32* %565, align 8, !insn.addr !3662
  store i64 64424509454, i64* %465, align 8, !insn.addr !3663
  %593 = bitcast i64* %stack_var_-2904 to i32*, !insn.addr !3664
  store i32 0, i32* %593, align 8, !insn.addr !3664
  store i64 %581, i64* %rcx.10.reg2mem, !insn.addr !3665
  store i64 0, i64* %r12.3.reg2mem, !insn.addr !3665
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !3665
  br label %dec_label_pc_652f, !insn.addr !3665

dec_label_pc_652f:                                ; preds = %dec_label_pc_6588, %dec_label_pc_6505
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r12.3.reload = load i64, i64* %r12.3.reg2mem
  %rcx.10.reload = load i64, i64* %rcx.10.reg2mem
  %594 = mul i64 %r12.3.reload, 4, !insn.addr !3666
  %595 = add i64 %594, %464, !insn.addr !3666
  %596 = inttoptr i64 %595 to i32*, !insn.addr !3666
  %597 = load i32, i32* %596, align 4, !insn.addr !3666
  %598 = zext i32 %597 to i64, !insn.addr !3666
  %599 = load i64, i64* %488, align 8, !insn.addr !3667
  %600 = mul i64 %598, 32, !insn.addr !3668
  %601 = add i64 %600, %599, !insn.addr !3669
  %602 = add i64 %601, 8, !insn.addr !3670
  %603 = inttoptr i64 %602 to i64*, !insn.addr !3670
  %604 = load i64, i64* %603, align 8, !insn.addr !3670
  %605 = icmp eq i64 %604, 0, !insn.addr !3671
  store i64 %rcx.10.reload, i64* %rcx.12.reg2mem, !insn.addr !3672
  store i64 %r14.0.reload, i64* %r14.1.reg2mem, !insn.addr !3672
  br i1 %605, label %dec_label_pc_6588, label %dec_label_pc_654c, !insn.addr !3672

dec_label_pc_654c:                                ; preds = %dec_label_pc_652f
  %606 = add i64 %601, 16, !insn.addr !3673
  %607 = inttoptr i64 %606 to i64*, !insn.addr !3673
  %608 = load i64, i64* %607, align 8, !insn.addr !3673
  store i64 %604, i64* %485, align 8, !insn.addr !3674
  %609 = add i64 %r14.0.reload, 1, !insn.addr !3675
  %610 = and i64 %609, 4294967295, !insn.addr !3675
  store i64 %608, i64* %552, align 8, !insn.addr !3676
  %611 = call i64 @.Lstream_encoder_mt_init.1(i64 %604, i64 %608, i32 0, i64 %583), !insn.addr !3677
  %612 = trunc i64 %611 to i32, !insn.addr !3678
  %613 = icmp eq i32 %612, 0, !insn.addr !3678
  br i1 %613, label %dec_label_pc_657a, label %dec_label_pc_6575, !insn.addr !3679

dec_label_pc_6575:                                ; preds = %dec_label_pc_657a, %dec_label_pc_654c
  %614 = load i32, i32* %593, align 8, !insn.addr !3680
  %615 = add i32 %614, 1, !insn.addr !3680
  store i32 %615, i32* %593, align 8, !insn.addr !3680
  store i64 %583, i64* %rcx.12.reg2mem, !insn.addr !3681
  store i64 %610, i64* %r14.1.reg2mem, !insn.addr !3681
  br label %dec_label_pc_6588, !insn.addr !3681

dec_label_pc_657a:                                ; preds = %dec_label_pc_654c
  %616 = load i64, i64* %552, align 8, !insn.addr !3682
  %617 = load i64, i64* %485, align 8, !insn.addr !3683
  %618 = call i64 @.Llzma_simple_x86_decoder_init.1(i64 %617, i64 %616, i32 0, i64 %583), !insn.addr !3684
  %619 = trunc i64 %618 to i32, !insn.addr !3685
  %620 = icmp eq i32 %619, 0, !insn.addr !3685
  %621 = icmp eq i1 %620, false, !insn.addr !3686
  store i64 %583, i64* %rcx.12.reg2mem, !insn.addr !3686
  store i64 %610, i64* %r14.1.reg2mem, !insn.addr !3686
  br i1 %621, label %dec_label_pc_6575, label %dec_label_pc_6588, !insn.addr !3686

dec_label_pc_6588:                                ; preds = %dec_label_pc_657a, %dec_label_pc_6575, %dec_label_pc_652f
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %rcx.12.reload = load i64, i64* %rcx.12.reg2mem
  %622 = add nuw nsw i64 %r12.3.reload, 1, !insn.addr !3687
  %exitcond131 = icmp eq i64 %622, 3
  store i64 %rcx.12.reload, i64* %rcx.10.reg2mem, !insn.addr !3688
  store i64 %622, i64* %r12.3.reg2mem, !insn.addr !3688
  store i64 %r14.1.reload, i64* %r14.0.reg2mem, !insn.addr !3688
  br i1 %exitcond131, label %dec_label_pc_6591, label %dec_label_pc_652f, !insn.addr !3688

dec_label_pc_6591:                                ; preds = %dec_label_pc_6588
  %623 = trunc i64 %r14.1.reload to i32, !insn.addr !3689
  %624 = icmp ne i32 %623, 0, !insn.addr !3689
  %625 = load i32, i32* %593, align 8, !insn.addr !3690
  %626 = icmp eq i32 %625, 0, !insn.addr !3690
  %or.cond30 = icmp eq i1 %624, %626
  store i64 %rcx.12.reload, i64* %rcx.14.reg2mem, !insn.addr !3691
  store i64 %515, i64* %r8.7.reg2mem, !insn.addr !3691
  br i1 %or.cond30, label %dec_label_pc_65aa, label %dec_label_pc_6591.dec_label_pc_659c_crit_edge, !insn.addr !3691

dec_label_pc_6591.dec_label_pc_659c_crit_edge:    ; preds = %dec_label_pc_6591
  %.pre = load i64, i64* %125, align 8
  store i64 %.pre, i64* %.reg2mem
  store i64 %rcx.12.reload, i64* %rcx.13.reg2mem
  br label %dec_label_pc_659c

dec_label_pc_659c:                                ; preds = %dec_label_pc_6591.dec_label_pc_659c_crit_edge, %dec_label_pc_64f7, %dec_label_pc_64e3
  %rcx.13.reload = load i64, i64* %rcx.13.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !3692
  %627 = add i64 %.reload, 200, !insn.addr !3693
  %628 = inttoptr i64 %627 to i64*, !insn.addr !3693
  store i64 %583, i64* %628, align 8, !insn.addr !3693
  store i64 %rcx.13.reload, i64* %rcx.14.reg2mem, !insn.addr !3693
  store i64 %515, i64* %r8.7.reg2mem, !insn.addr !3693
  br label %dec_label_pc_65aa, !insn.addr !3693

dec_label_pc_65aa:                                ; preds = %dec_label_pc_63d5, %dec_label_pc_6270, %dec_label_pc_6591, %dec_label_pc_659c, %dec_label_pc_64b3, %dec_label_pc_625f, %dec_label_pc_6233, %dec_label_pc_607c
  %r8.7.reload = load i64, i64* %r8.7.reg2mem
  %rcx.14.reload = load i64, i64* %rcx.14.reg2mem
  %629 = add i64 %3, 552, !insn.addr !3694
  %630 = inttoptr i64 %629 to i64*, !insn.addr !3694
  %631 = load i64, i64* %630, align 8, !insn.addr !3694
  %632 = call i64 @.Lcrc_init.0(i64 %631, i64 680, i32 0, i64 %rcx.14.reload), !insn.addr !3695
  %633 = add i64 %3, 8, !insn.addr !3696
  %634 = inttoptr i64 %633 to i64*, !insn.addr !3696
  %635 = load i64, i64* %634, align 8, !insn.addr !3696
  %636 = add i64 %3, 520, !insn.addr !3697
  %637 = inttoptr i64 %636 to i64*, !insn.addr !3697
  %638 = load i64, i64* %637, align 8, !insn.addr !3697
  %639 = add i64 %3, 1968, !insn.addr !3698
  %640 = add i64 %3, 88, !insn.addr !3699
  %641 = inttoptr i64 %640 to i64*, !insn.addr !3699
  store i64 %632, i64* %641, align 8, !insn.addr !3699
  %642 = call i64 @.Llzma_mf_bt4_find.0(i64 %638, i64 %639, i64 %635, i64 %rcx.14.reload), !insn.addr !3700
  %643 = trunc i64 %642 to i32, !insn.addr !3701
  %644 = icmp eq i32 %643, 0, !insn.addr !3701
  %645 = icmp eq i1 %644, false, !insn.addr !3702
  br i1 %645, label %dec_label_pc_65f2, label %dec_label_pc_65e1, !insn.addr !3702

dec_label_pc_65e1:                                ; preds = %dec_label_pc_65aa
  %646 = inttoptr i64 %116 to i32*, !insn.addr !3703
  store i32 0, i32* %646, align 4, !insn.addr !3703
  %647 = add i64 %111, 976, !insn.addr !3704
  %648 = inttoptr i64 %647 to i32*, !insn.addr !3704
  store i32 0, i32* %648, align 4, !insn.addr !3704
  br label %dec_label_pc_65f2, !insn.addr !3704

dec_label_pc_65f2:                                ; preds = %dec_label_pc_65e1, %dec_label_pc_65aa
  %649 = add i64 %3, 536, !insn.addr !3705
  %650 = inttoptr i64 %649 to i64*, !insn.addr !3705
  %651 = load i64, i64* %650, align 8, !insn.addr !3705
  %652 = load i64, i64* %119, align 8, !insn.addr !3706
  %653 = add i64 %3, 192, !insn.addr !3707
  %654 = add i64 %3, 56, !insn.addr !3708
  %655 = inttoptr i64 %654 to i64*, !insn.addr !3708
  %656 = load i64, i64* %655, align 8, !insn.addr !3708
  %657 = add i64 %3, 576, !insn.addr !3709
  %658 = add i64 %656, 16, !insn.addr !3710
  %659 = inttoptr i64 %658 to i64*, !insn.addr !3710
  store i64 %651, i64* %659, align 8, !insn.addr !3710
  %660 = inttoptr i64 %653 to i64*, !insn.addr !3711
  store i64 0, i64* %660, align 8, !insn.addr !3711
  %661 = inttoptr i64 %652 to i64*, !insn.addr !3712
  store i64 0, i64* %661, align 8, !insn.addr !3712
  %662 = call i64 @.Llzma_check_update.0(i64 %657, i64* %660, i64 %635, i64 %rcx.14.reload), !insn.addr !3713
  %663 = add i64 %3, 48, !insn.addr !3714
  %664 = inttoptr i64 %663 to i64*, !insn.addr !3714
  store i64 %662, i64* %664, align 8, !insn.addr !3714
  %665 = icmp eq i64 %662, 0, !insn.addr !3715
  store i64 %rcx.14.reload, i64* %rcx.18.reg2mem, !insn.addr !3716
  store i64 %r8.7.reload, i64* %r8.13.reg2mem, !insn.addr !3716
  br i1 %665, label %dec_label_pc_6beb, label %dec_label_pc_663c, !insn.addr !3716

dec_label_pc_663c:                                ; preds = %dec_label_pc_65f2
  %666 = load i64, i64* %660, align 8, !insn.addr !3717
  %667 = icmp ult i64 %666, 17
  store i64 %rcx.14.reload, i64* %rcx.18.reg2mem, !insn.addr !3718
  store i64 %r8.7.reload, i64* %r8.13.reg2mem, !insn.addr !3718
  br i1 %667, label %dec_label_pc_6beb, label %dec_label_pc_664e, !insn.addr !3718

dec_label_pc_664e:                                ; preds = %dec_label_pc_663c
  %668 = add i64 %3, 2776, !insn.addr !3719
  %669 = inttoptr i64 %668 to i64*, !insn.addr !3719
  %670 = load i64, i64* %669, align 8, !insn.addr !3719
  %671 = icmp eq i64 %670, 0, !insn.addr !3720
  store i64 %rcx.14.reload, i64* %rcx.18.reg2mem, !insn.addr !3721
  store i64 %r8.7.reload, i64* %r8.13.reg2mem, !insn.addr !3721
  br i1 %671, label %dec_label_pc_6beb, label %dec_label_pc_665f, !insn.addr !3721

dec_label_pc_665f:                                ; preds = %dec_label_pc_664e
  %672 = inttoptr i64 %112 to i32*, !insn.addr !3722
  %673 = load i32, i32* %672, align 4, !insn.addr !3722
  %674 = icmp eq i32 %673, 0, !insn.addr !3722
  %675 = icmp eq i1 %674, false, !insn.addr !3723
  br i1 %675, label %dec_label_pc_66c8, label %dec_label_pc_6669, !insn.addr !3723

dec_label_pc_6669:                                ; preds = %dec_label_pc_66c8, %dec_label_pc_665f
  %676 = add i64 %652, 88, !insn.addr !3724
  %677 = inttoptr i64 %676 to i64*, !insn.addr !3724
  store i64 %670, i64* %677, align 8, !insn.addr !3724
  %678 = add i64 %3, 296, !insn.addr !3725
  %679 = inttoptr i64 %678 to i8*, !insn.addr !3726
  call void @__asm_rep_stosd_memset(i8* %679, i32 0, i64 22), !insn.addr !3726
  %680 = add i64 %3, 2808, !insn.addr !3727
  %681 = inttoptr i64 %680 to i64*, !insn.addr !3727
  %682 = load i64, i64* %681, align 8, !insn.addr !3727
  %683 = icmp eq i64 %682, 0, !insn.addr !3728
  store i64 0, i64* %rcx.18.reg2mem, !insn.addr !3729
  store i64 %r8.7.reload, i64* %r8.13.reg2mem, !insn.addr !3729
  br i1 %683, label %dec_label_pc_6beb, label %dec_label_pc_6690, !insn.addr !3729

dec_label_pc_6690:                                ; preds = %dec_label_pc_6669
  %684 = add i64 %3, 16, !insn.addr !3730
  %685 = inttoptr i64 %684 to i64*, !insn.addr !3730
  store i64 %682, i64* %685, align 8, !insn.addr !3730
  %686 = load i64, i64* %664, align 8, !insn.addr !3731
  %687 = add i64 %3, 2816, !insn.addr !3732
  %688 = inttoptr i64 %687 to i64*, !insn.addr !3732
  %689 = load i64, i64* %688, align 8, !insn.addr !3732
  store i64 0, i64* %655, align 8, !insn.addr !3733
  %690 = add i64 %686, %666, !insn.addr !3734
  store i64 %689, i64* %stack_var_-2904, align 8, !insn.addr !3735
  %691 = add i64 %3, 96, !insn.addr !3736
  %692 = inttoptr i64 %691 to i64*, !insn.addr !3736
  store i64 %690, i64* %692, align 8, !insn.addr !3736
  %693 = add i64 %3, 104, !insn.addr !3737
  %694 = inttoptr i64 %693 to i64*, !insn.addr !3737
  store i64 %678, i64* %694, align 8, !insn.addr !3737
  %695 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3738
  %696 = load i64, i64* %685, align 8, !insn.addr !3739
  %697 = icmp ult i64 %696, %695, !insn.addr !3739
  store i64 0, i64* %rcx.18.reg2mem, !insn.addr !3740
  store i64 %r8.7.reload, i64* %r8.13.reg2mem, !insn.addr !3740
  br i1 %697, label %dec_label_pc_66e2.lr.ph.lr.ph, label %dec_label_pc_6beb, !insn.addr !3740

dec_label_pc_66e2.lr.ph.lr.ph:                    ; preds = %dec_label_pc_6690
  %698 = add i64 %3, 336
  %699 = inttoptr i64 %698 to i32*
  %700 = add i64 %3, 325
  %701 = inttoptr i64 %700 to i8*
  %702 = add i64 %3, 312
  %703 = inttoptr i64 %702 to i8*
  %704 = inttoptr i64 %702 to i16*
  %705 = add i64 %3, 326
  %706 = inttoptr i64 %705 to i8*
  %707 = add i64 %3, 323
  %708 = inttoptr i64 %707 to i8*
  %709 = add i64 %3, 327
  %710 = inttoptr i64 %709 to i8*
  %711 = add i64 %3, 313
  %712 = inttoptr i64 %711 to i8*
  %713 = add i64 %3, 328
  %714 = inttoptr i64 %713 to i8*
  %715 = add i64 %3, 384
  %716 = inttoptr i64 %654 to i32*
  %717 = inttoptr i64 %715 to i8*
  %718 = add i64 %3, 64
  %719 = inttoptr i64 %718 to i64*
  %720 = add i64 %3, 126
  %721 = inttoptr i64 %720 to i8*
  %722 = add i64 %3, 112
  %723 = inttoptr i64 %722 to i8*
  %724 = add i64 %3, 400
  %725 = inttoptr i64 %724 to i16*
  %726 = inttoptr i64 %724 to i8*
  %727 = add i64 %3, 414
  %728 = inttoptr i64 %727 to i8*
  %729 = add i64 %3, 411
  %730 = inttoptr i64 %729 to i8*
  %731 = add i64 %3, 401
  %732 = inttoptr i64 %731 to i8*
  %733 = add i64 %3, 416
  %734 = inttoptr i64 %733 to i8*
  %735 = add i64 %3, 412
  %736 = inttoptr i64 %735 to i32*
  %737 = add i64 %3, 432
  %738 = inttoptr i64 %737 to i64*
  %739 = inttoptr i64 %715 to i64*
  %740 = add i64 %3, 392
  %741 = inttoptr i64 %740 to i64*
  %742 = add i64 %3, 127
  %743 = inttoptr i64 %742 to i8*
  %744 = add i64 %3, 200
  %745 = inttoptr i64 %744 to i64*
  %746 = inttoptr i64 %722 to i64*
  %747 = add i64 %3, 324
  %748 = inttoptr i64 %747 to i32*
  %749 = add i64 %3, 360
  %750 = inttoptr i64 %749 to i64*
  %751 = add i64 %3, 344
  %752 = inttoptr i64 %751 to i64*
  %753 = inttoptr i64 %678 to i64*
  %754 = add i64 %3, 304
  %755 = inttoptr i64 %754 to i64*
  %756 = add i64 %3, 448
  %757 = inttoptr i64 %756 to i64*
  store i64 %696, i64* %.reg2mem206
  store i64 %695, i64* %.reg2mem208
  store i64 0, i64* %r14.3.ph86.reg2mem
  store i64 0, i64* %r9.2.ph83.reg2mem
  store i64 %r8.7.reload, i64* %r8.9.ph82.reg2mem
  store i64 0, i64* %rcx.15.ph81.reg2mem
  br label %dec_label_pc_66e2.lr.ph

dec_label_pc_66c8:                                ; preds = %dec_label_pc_665f
  %758 = add i64 %670, 4, !insn.addr !3741
  %759 = call i64 @.Llzma_block_buffer_encode.0(i64 %670, i64 %758, i64 57904), !insn.addr !3742
  %760 = trunc i64 %759 to i32, !insn.addr !3743
  %761 = icmp eq i32 %760, 0, !insn.addr !3743
  %762 = icmp eq i1 %761, false, !insn.addr !3744
  store i64 %rcx.14.reload, i64* %rcx.18.reg2mem, !insn.addr !3744
  store i64 %r8.7.reload, i64* %r8.13.reg2mem, !insn.addr !3744
  br i1 %762, label %dec_label_pc_6669, label %dec_label_pc_6beb, !insn.addr !3744

dec_label_pc_66e2:                                ; preds = %dec_label_pc_66e2.lr.ph, %dec_label_pc_6b63
  %763 = load i64, i64* %655, align 8, !insn.addr !3745
  %764 = icmp eq i64 %763, 0, !insn.addr !3745
  %or.cond17 = or i1 %783, %764
  store i64 %rcx.15.ph81.reload, i64* %rcx.18.reg2mem, !insn.addr !3746
  store i64 %r8.9.ph82.reload, i64* %r8.13.reg2mem, !insn.addr !3746
  br i1 %or.cond17, label %dec_label_pc_66ee, label %dec_label_pc_6beb, !insn.addr !3746

dec_label_pc_66ee:                                ; preds = %dec_label_pc_66e2
  %.reload205 = load i64, i64* %.reg2mem204
  %.reload203 = load i64, i64* %.reg2mem202
  %765 = load i64, i64* %694, align 8, !insn.addr !3747
  %766 = inttoptr i64 %765 to i64*, !insn.addr !3748
  %767 = call i64 @.Lx86_code.part.0(i64* %766, i64 %.reload203, i64 %.reload205, i64 %rcx.15.ph81.reload, i64 %r8.9.ph82.reload, i64 %r9.2.ph83.reload), !insn.addr !3748
  %768 = trunc i64 %767 to i32, !insn.addr !3749
  %769 = icmp eq i32 %768, 0, !insn.addr !3749
  br i1 %769, label %dec_label_pc_6b63, label %dec_label_pc_6709, !insn.addr !3750

dec_label_pc_6709:                                ; preds = %dec_label_pc_66ee
  %770 = load i32, i32* %699, align 8, !insn.addr !3751
  %771 = and i32 %770, -3, !insn.addr !3752
  %772 = icmp eq i32 %771, 177, !insn.addr !3753
  %773 = icmp eq i1 %772, false, !insn.addr !3754
  br i1 %773, label %dec_label_pc_69b1, label %dec_label_pc_6721, !insn.addr !3754

dec_label_pc_6721:                                ; preds = %dec_label_pc_6709
  %774 = load i8, i8* %701, align 1, !insn.addr !3755
  %775 = icmp eq i8 %774, 3, !insn.addr !3755
  br i1 %775, label %dec_label_pc_6752, label %dec_label_pc_672b, !insn.addr !3756

dec_label_pc_672b:                                ; preds = %dec_label_pc_6a3e, %dec_label_pc_6a0c, %dec_label_pc_69df, %dec_label_pc_69d0, %dec_label_pc_69bc, %dec_label_pc_69b1, %dec_label_pc_67e8, %dec_label_pc_6721
  %776 = load i64, i64* %655, align 8, !insn.addr !3757
  store i64 %776, i64* %rbx.7.reg2mem, !insn.addr !3757
  store i64 %r8.9.ph82.reload, i64* %r8.8.reg2mem, !insn.addr !3757
  store i64 %r9.2.ph83.reload, i64* %r9.1.reg2mem, !insn.addr !3757
  store i64 %r14.3.ph86.reload, i64* %r14.2.reg2mem, !insn.addr !3757
  br label %dec_label_pc_6730, !insn.addr !3757

dec_label_pc_6730:                                ; preds = %dec_label_pc_6832.lr.ph, %dec_label_pc_6a6e, %dec_label_pc_6a93, %dec_label_pc_67f6, %dec_label_pc_6839, %dec_label_pc_6b37, %dec_label_pc_672b
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %r8.8.reload = load i64, i64* %r8.8.reg2mem
  %rbx.7.reload = load i64, i64* %rbx.7.reg2mem
  %777 = load i64, i64* %755, align 8, !insn.addr !3758
  %778 = load i64, i64* %685, align 8, !insn.addr !3759
  %779 = add i64 %778, %777, !insn.addr !3759
  store i64 %779, i64* %685, align 8, !insn.addr !3759
  store i64 %rbx.7.reload, i64* %655, align 8, !insn.addr !3760
  %780 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3738
  %781 = load i64, i64* %685, align 8, !insn.addr !3739
  %782 = icmp ult i64 %781, %780, !insn.addr !3739
  store i64 %781, i64* %.reg2mem206, !insn.addr !3740
  store i64 %780, i64* %.reg2mem208, !insn.addr !3740
  store i64 %r14.2.reload, i64* %r14.3.ph86.reg2mem, !insn.addr !3740
  store i64 %r9.1.reload, i64* %r9.2.ph83.reg2mem, !insn.addr !3740
  store i64 %r8.8.reload, i64* %r8.9.ph82.reg2mem, !insn.addr !3740
  store i64 %777, i64* %rcx.15.ph81.reg2mem, !insn.addr !3740
  store i64 %777, i64* %rcx.18.reg2mem, !insn.addr !3740
  store i64 %r8.8.reload, i64* %r8.13.reg2mem, !insn.addr !3740
  br i1 %782, label %dec_label_pc_66e2.lr.ph, label %dec_label_pc_6beb, !insn.addr !3740

dec_label_pc_66e2.lr.ph:                          ; preds = %dec_label_pc_66e2.lr.ph.lr.ph, %dec_label_pc_6730
  %rcx.15.ph81.reload = load i64, i64* %rcx.15.ph81.reg2mem
  %r8.9.ph82.reload = load i64, i64* %r8.9.ph82.reg2mem
  %r9.2.ph83.reload = load i64, i64* %r9.2.ph83.reg2mem
  %r14.3.ph86.reload = load i64, i64* %r14.3.ph86.reg2mem
  %.reload209 = load i64, i64* %.reg2mem208
  %.reload207 = load i64, i64* %.reg2mem206
  %783 = icmp eq i64 %r14.3.ph86.reload, 0, !insn.addr !3761
  store i64 %.reload207, i64* %.reg2mem202
  store i64 %.reload209, i64* %.reg2mem204
  br label %dec_label_pc_66e2

dec_label_pc_6752:                                ; preds = %dec_label_pc_6721
  %784 = load i8, i8* %703, align 8, !insn.addr !3762
  %785 = zext i8 %784 to i64, !insn.addr !3762
  %786 = and i64 %785, 64, !insn.addr !3763
  %787 = load i16, i16* %704, align 8, !insn.addr !3764
  %788 = and i16 %787, 4160, !insn.addr !3764
  %789 = icmp eq i16 %788, 0, !insn.addr !3764
  %790 = icmp eq i1 %789, false, !insn.addr !3765
  %791 = icmp eq i64 %786, 0
  br i1 %790, label %dec_label_pc_6776, label %dec_label_pc_676a, !insn.addr !3765

dec_label_pc_676a:                                ; preds = %dec_label_pc_6752
  store i64 0, i64* %r10.4.reg2mem, !insn.addr !3766
  br i1 %791, label %dec_label_pc_67f6, label %dec_label_pc_67ca, !insn.addr !3766

dec_label_pc_6776:                                ; preds = %dec_label_pc_6752
  br i1 %791, label %dec_label_pc_6797, label %dec_label_pc_677a, !insn.addr !3767

dec_label_pc_677a:                                ; preds = %dec_label_pc_6776
  %792 = load i8, i8* %706, align 2, !insn.addr !3768
  %793 = and i64 %785, 32
  %794 = icmp eq i64 %793, 0, !insn.addr !3769
  br i1 %794, label %dec_label_pc_67ca.thread, label %dec_label_pc_67ca.thread135, !insn.addr !3770

dec_label_pc_67ca.thread:                         ; preds = %dec_label_pc_677a
  %795 = load i8, i8* %710, align 1, !insn.addr !3771
  %796 = zext i8 %795 to i64, !insn.addr !3771
  store i8 %792, i8* %rax.3.reg2mem
  store i64 %796, i64* %r10.3.reg2mem
  br label %dec_label_pc_67e8

dec_label_pc_67ca.thread135:                      ; preds = %dec_label_pc_677a
  %797 = load i8, i8* %708, align 1, !insn.addr !3772
  %798 = mul i8 %797, 2, !insn.addr !3773
  %799 = and i8 %798, 8, !insn.addr !3774
  %800 = or i8 %799, %792, !insn.addr !3775
  %801 = load i8, i8* %710, align 1, !insn.addr !3771
  %802 = zext i8 %801 to i64, !insn.addr !3771
  store i8 %797, i8* %.reg2mem210
  store i64 %802, i64* %.reg2mem212
  store i8 %800, i8* %rax.2136.reg2mem
  br label %dec_label_pc_67d7

dec_label_pc_6797:                                ; preds = %dec_label_pc_6776
  %803 = load i8, i8* %712, align 1, !insn.addr !3776
  %804 = and i8 %803, 16, !insn.addr !3777
  %805 = icmp eq i8 %804, 0, !insn.addr !3777
  store i64 0, i64* %r10.4.reg2mem, !insn.addr !3778
  br i1 %805, label %dec_label_pc_67f6, label %dec_label_pc_67a5, !insn.addr !3778

dec_label_pc_67a5:                                ; preds = %dec_label_pc_6797
  %806 = and i64 %785, 32
  %807 = icmp eq i64 %806, 0, !insn.addr !3779
  %808 = load i8, i8* %714, align 8, !insn.addr !3780
  store i8 %808, i8* %rax.3.reg2mem, !insn.addr !3781
  store i64 0, i64* %r10.3.reg2mem, !insn.addr !3781
  br i1 %807, label %dec_label_pc_67e8, label %dec_label_pc_67b5, !insn.addr !3781

dec_label_pc_67b5:                                ; preds = %dec_label_pc_67a5
  %809 = load i8, i8* %708, align 1, !insn.addr !3782
  %810 = mul i8 %809, 8, !insn.addr !3783
  %811 = and i8 %810, 8, !insn.addr !3784
  %812 = or i8 %811, %808, !insn.addr !3785
  store i8 %812, i8* %rax.3.reg2mem, !insn.addr !3786
  store i64 0, i64* %r10.3.reg2mem, !insn.addr !3786
  br label %dec_label_pc_67e8, !insn.addr !3786

dec_label_pc_67ca:                                ; preds = %dec_label_pc_676a
  %.pre134 = and i64 %785, 32
  %813 = icmp eq i64 %.pre134, 0, !insn.addr !3787
  %814 = load i8, i8* %710, align 1, !insn.addr !3771
  %815 = zext i8 %814 to i64, !insn.addr !3771
  store i8 0, i8* %rax.3.reg2mem, !insn.addr !3788
  store i64 %815, i64* %r10.3.reg2mem, !insn.addr !3788
  br i1 %813, label %dec_label_pc_67e8, label %dec_label_pc_67ca.dec_label_pc_67d7_crit_edge, !insn.addr !3788

dec_label_pc_67ca.dec_label_pc_67d7_crit_edge:    ; preds = %dec_label_pc_67ca
  %.pre199 = load i8, i8* %708, align 1
  store i8 %.pre199, i8* %.reg2mem210
  store i64 %815, i64* %.reg2mem212
  store i8 0, i8* %rax.2136.reg2mem
  br label %dec_label_pc_67d7

dec_label_pc_67d7:                                ; preds = %dec_label_pc_67ca.dec_label_pc_67d7_crit_edge, %dec_label_pc_67ca.thread135
  %rax.2136.reload = load i8, i8* %rax.2136.reg2mem
  %.reload213 = load i64, i64* %.reg2mem212
  %.reload211 = load i8, i8* %.reg2mem210, !insn.addr !3789
  %816 = zext i8 %.reload211 to i64, !insn.addr !3790
  %817 = mul i64 %816, 8, !insn.addr !3790
  %818 = and i64 %817, 8, !insn.addr !3791
  %819 = or i64 %818, %.reload213, !insn.addr !3792
  store i8 %rax.2136.reload, i8* %rax.3.reg2mem, !insn.addr !3792
  store i64 %819, i64* %r10.3.reg2mem, !insn.addr !3792
  br label %dec_label_pc_67e8, !insn.addr !3792

dec_label_pc_67e8:                                ; preds = %dec_label_pc_67ca.thread, %dec_label_pc_67a5, %dec_label_pc_67b5, %dec_label_pc_67d7, %dec_label_pc_67ca
  %r10.3.reload = load i64, i64* %r10.3.reg2mem
  %rax.3.reload = load i8, i8* %rax.3.reg2mem
  %820 = trunc i64 %r10.3.reload to i8, !insn.addr !3793
  %821 = icmp eq i8 %rax.3.reload, %820, !insn.addr !3793
  %822 = icmp eq i1 %821, false, !insn.addr !3794
  store i64 %r10.3.reload, i64* %r10.4.reg2mem, !insn.addr !3794
  br i1 %822, label %dec_label_pc_672b, label %dec_label_pc_67f6, !insn.addr !3794

dec_label_pc_67f6:                                ; preds = %dec_label_pc_676a, %dec_label_pc_67e8, %dec_label_pc_6797
  %r10.4.reload = load i64, i64* %r10.4.reg2mem
  store i32 0, i32* %716, align 8, !insn.addr !3795
  call void @__asm_rep_stosd_memset(i8* %717, i32 0, i64 22), !insn.addr !3796
  %823 = load i64, i64* %685, align 8, !insn.addr !3797
  store i64 %715, i64* %719, align 8, !insn.addr !3798
  %824 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3799
  %825 = icmp ult i64 %823, %824, !insn.addr !3800
  %826 = icmp eq i1 %825, false, !insn.addr !3801
  store i64 0, i64* %rbx.7.reg2mem, !insn.addr !3801
  store i64 0, i64* %r8.8.reg2mem, !insn.addr !3801
  store i64 0, i64* %r9.1.reg2mem, !insn.addr !3801
  store i64 0, i64* %r14.2.reg2mem, !insn.addr !3801
  br i1 %826, label %dec_label_pc_6730, label %dec_label_pc_6832.lr.ph, !insn.addr !3801

dec_label_pc_6832.lr.ph:                          ; preds = %dec_label_pc_67f6
  %.pre132 = load i32, i32* %716, align 8
  %827 = icmp ult i32 %.pre132, 5
  store i64 0, i64* %rbx.7.reg2mem, !insn.addr !3802
  store i64 0, i64* %r8.8.reg2mem, !insn.addr !3802
  store i64 0, i64* %r9.1.reg2mem, !insn.addr !3802
  store i64 0, i64* %r14.2.reg2mem, !insn.addr !3802
  store i64 0, i64* %rbx.859159.reg2mem, !insn.addr !3802
  store i64 %823, i64* %rdi.161158.reg2mem, !insn.addr !3802
  store i64 0, i64* %r9.363157.reg2mem, !insn.addr !3802
  store i64 %r10.4.reload, i64* %r10.564156.reg2mem, !insn.addr !3802
  store i64 0, i64* %r14.465155.reg2mem, !insn.addr !3802
  store i64 %824, i64* %.reg2mem214, !insn.addr !3802
  br i1 %827, label %dec_label_pc_6850, label %dec_label_pc_6730, !insn.addr !3802

dec_label_pc_6839:                                ; preds = %dec_label_pc_6995, %dec_label_pc_685e
  %r9.4.reload = load i64, i64* %r9.4.reg2mem
  %r14.4.lcssa.reload = load i64, i64* %r14.4.lcssa.reg2mem
  %rbx.8.lcssa.reload = load i64, i64* %rbx.8.lcssa.reg2mem
  %828 = icmp eq i64 %rbx.8.lcssa.reload, 0, !insn.addr !3803
  %829 = icmp eq i64 %r14.4.lcssa.reload, 0, !insn.addr !3804
  %or.cond = or i1 %828, %829
  store i64 0, i64* %rbx.7.reg2mem, !insn.addr !3805
  store i64 %833, i64* %r8.8.reg2mem, !insn.addr !3805
  store i64 %r9.4.reload, i64* %r9.1.reg2mem, !insn.addr !3805
  store i64 0, i64* %r14.2.reg2mem, !insn.addr !3805
  store i64 %rbx.8.lcssa.reload, i64* %rbx.10.reg2mem, !insn.addr !3805
  store i64 %r14.4.lcssa.reload, i64* %r14.8.reg2mem, !insn.addr !3805
  br i1 %or.cond, label %dec_label_pc_6730, label %dec_label_pc_6b37, !insn.addr !3805

dec_label_pc_6850:                                ; preds = %dec_label_pc_6995, %dec_label_pc_6832.lr.ph
  %r14.465155.reload = load i64, i64* %r14.465155.reg2mem
  %rbx.859159.reload = load i64, i64* %rbx.859159.reg2mem
  %830 = icmp ne i64 %rbx.859159.reload, 0, !insn.addr !3806
  %831 = icmp eq i64 %r14.465155.reload, 0, !insn.addr !3807
  %832 = icmp eq i1 %831, false, !insn.addr !3808
  %or.cond23 = icmp eq i1 %832, %830
  store i64 %rbx.859159.reload, i64* %rbx.10.reg2mem, !insn.addr !3809
  store i64 %r14.465155.reload, i64* %r14.8.reg2mem, !insn.addr !3809
  br i1 %or.cond23, label %dec_label_pc_6b37, label %dec_label_pc_685e, !insn.addr !3809

dec_label_pc_685e:                                ; preds = %dec_label_pc_6850
  %.reload215 = load i64, i64* %.reg2mem214
  %r10.564156.reload = load i64, i64* %r10.564156.reg2mem
  %r9.363157.reload = load i64, i64* %r9.363157.reg2mem
  %rdi.161158.reload = load i64, i64* %rdi.161158.reg2mem
  %833 = load i64, i64* %719, align 8, !insn.addr !3810
  %834 = trunc i64 %r9.363157.reload to i8, !insn.addr !3811
  store i8 %834, i8* %721, align 2, !insn.addr !3811
  %835 = trunc i64 %r10.564156.reload to i8, !insn.addr !3812
  store i8 %835, i8* %723, align 8, !insn.addr !3812
  %836 = call i64 @.Llzma_filters_update.1(i64 %rdi.161158.reload, i64 %.reload215, i64 1, i32 0, i64 %833), !insn.addr !3813
  %837 = load i8, i8* %723, align 8, !insn.addr !3814
  %838 = load i8, i8* %721, align 2, !insn.addr !3815
  %839 = zext i8 %838 to i64, !insn.addr !3815
  %840 = and i64 %r9.363157.reload, -256, !insn.addr !3815
  %841 = or i64 %840, %839, !insn.addr !3815
  %842 = trunc i64 %836 to i32, !insn.addr !3816
  %843 = icmp eq i32 %842, 0, !insn.addr !3816
  store i64 %rbx.859159.reload, i64* %rbx.8.lcssa.reg2mem, !insn.addr !3817
  store i64 %r14.465155.reload, i64* %r14.4.lcssa.reg2mem, !insn.addr !3817
  store i64 %841, i64* %r9.4.reg2mem, !insn.addr !3817
  br i1 %843, label %dec_label_pc_6839, label %dec_label_pc_688b, !insn.addr !3817

dec_label_pc_688b:                                ; preds = %dec_label_pc_685e
  %844 = load i16, i16* %725, align 8, !insn.addr !3818
  %845 = and i16 %844, 4160, !insn.addr !3818
  %846 = icmp eq i16 %845, 0, !insn.addr !3818
  store i64 %841, i64* %r9.6.reg2mem, !insn.addr !3819
  br i1 %846, label %dec_label_pc_68e5, label %dec_label_pc_6897, !insn.addr !3819

dec_label_pc_6897:                                ; preds = %dec_label_pc_688b
  %847 = load i8, i8* %726, align 8, !insn.addr !3820
  %848 = zext i8 %847 to i64, !insn.addr !3820
  %849 = and i8 %847, 64, !insn.addr !3821
  %850 = icmp eq i8 %849, 0, !insn.addr !3821
  br i1 %850, label %dec_label_pc_68ba, label %dec_label_pc_68a2, !insn.addr !3822

dec_label_pc_68a2:                                ; preds = %dec_label_pc_6897
  %851 = load i8, i8* %728, align 2, !insn.addr !3823
  %852 = zext i8 %851 to i64, !insn.addr !3823
  %853 = or i64 %840, %852, !insn.addr !3823
  %854 = and i64 %848, 32
  %855 = icmp eq i64 %854, 0, !insn.addr !3824
  store i64 %853, i64* %r9.6.reg2mem, !insn.addr !3825
  br i1 %855, label %dec_label_pc_68e5, label %dec_label_pc_68ae, !insn.addr !3825

dec_label_pc_68ae:                                ; preds = %dec_label_pc_68a2
  %856 = load i8, i8* %730, align 1, !insn.addr !3826
  %857 = zext i8 %856 to i64, !insn.addr !3827
  %858 = mul i64 %857, 2, !insn.addr !3827
  store i64 %853, i64* %r9.5.reg2mem, !insn.addr !3828
  store i64 %858, i64* %storemerge11.reg2mem, !insn.addr !3828
  br label %dec_label_pc_68df, !insn.addr !3828

dec_label_pc_68ba:                                ; preds = %dec_label_pc_6897
  %859 = load i8, i8* %732, align 1, !insn.addr !3829
  %860 = and i8 %859, 16, !insn.addr !3830
  %861 = icmp eq i8 %860, 0, !insn.addr !3830
  %862 = zext i8 %860 to i64, !insn.addr !3830
  %863 = or i64 %840, %862, !insn.addr !3830
  store i64 %863, i64* %r9.6.reg2mem, !insn.addr !3831
  br i1 %861, label %dec_label_pc_68e5, label %dec_label_pc_68c8, !insn.addr !3831

dec_label_pc_68c8:                                ; preds = %dec_label_pc_68ba
  %864 = load i8, i8* %734, align 8, !insn.addr !3832
  %865 = zext i8 %864 to i64, !insn.addr !3832
  %866 = or i64 %840, %865, !insn.addr !3832
  %867 = and i64 %848, 32
  %868 = icmp eq i64 %867, 0, !insn.addr !3833
  store i64 %866, i64* %r9.6.reg2mem, !insn.addr !3834
  br i1 %868, label %dec_label_pc_68e5, label %dec_label_pc_68d4, !insn.addr !3834

dec_label_pc_68d4:                                ; preds = %dec_label_pc_68c8
  %869 = load i8, i8* %730, align 1, !insn.addr !3835
  %870 = zext i8 %869 to i64, !insn.addr !3836
  %871 = mul i64 %870, 8, !insn.addr !3836
  store i64 %866, i64* %r9.5.reg2mem, !insn.addr !3836
  store i64 %871, i64* %storemerge11.reg2mem, !insn.addr !3836
  br label %dec_label_pc_68df, !insn.addr !3836

dec_label_pc_68df:                                ; preds = %dec_label_pc_68d4, %dec_label_pc_68ae
  %storemerge11.reload = load i64, i64* %storemerge11.reg2mem
  %r9.5.reload = load i64, i64* %r9.5.reg2mem
  %872 = and i64 %storemerge11.reload, 8, !insn.addr !3837
  %.masked10 = and i64 %r9.5.reload, 4294967295
  %873 = or i64 %872, %.masked10, !insn.addr !3838
  store i64 %873, i64* %r9.6.reg2mem, !insn.addr !3838
  br label %dec_label_pc_68e5, !insn.addr !3838

dec_label_pc_68e5:                                ; preds = %dec_label_pc_68df, %dec_label_pc_68c8, %dec_label_pc_68ba, %dec_label_pc_68a2, %dec_label_pc_688b
  %874 = zext i8 %837 to i64, !insn.addr !3814
  %r9.6.reload = load i64, i64* %r9.6.reg2mem
  %875 = trunc i64 %r9.6.reload to i8, !insn.addr !3839
  %876 = icmp eq i8 %837, %875, !insn.addr !3839
  %877 = icmp eq i1 %876, false, !insn.addr !3840
  store i64 %r9.6.reload, i64* %r9.7.reg2mem, !insn.addr !3840
  store i64 %874, i64* %r10.7.reg2mem, !insn.addr !3840
  store i64 %r14.465155.reload, i64* %r14.5.reg2mem, !insn.addr !3840
  br i1 %877, label %dec_label_pc_6992, label %dec_label_pc_68ee, !insn.addr !3840

dec_label_pc_68ee:                                ; preds = %dec_label_pc_68e5
  %878 = load i8, i8* %732, align 1, !insn.addr !3841
  %879 = urem i8 %878, 2, !insn.addr !3841
  %880 = icmp eq i8 %879, 0, !insn.addr !3841
  store i64 %r9.6.reload, i64* %r9.7.reg2mem, !insn.addr !3842
  store i64 %874, i64* %r10.7.reg2mem, !insn.addr !3842
  store i64 %r14.465155.reload, i64* %r14.5.reg2mem, !insn.addr !3842
  br i1 %880, label %dec_label_pc_6992, label %dec_label_pc_68fc, !insn.addr !3842

dec_label_pc_68fc:                                ; preds = %dec_label_pc_68ee
  %881 = load i32, i32* %736, align 4, !insn.addr !3843
  %882 = load i64, i64* %738, align 8, !insn.addr !3844
  %883 = add i32 %881, -83886080
  %884 = and i32 %883, -16711936, !insn.addr !3845
  %885 = icmp eq i32 %884, 0, !insn.addr !3845
  %886 = icmp eq i1 %885, false, !insn.addr !3846
  store i64 %882, i64* %rcx.16.reg2mem, !insn.addr !3846
  br i1 %886, label %dec_label_pc_6927, label %dec_label_pc_6917, !insn.addr !3846

dec_label_pc_6917:                                ; preds = %dec_label_pc_68fc
  %887 = load i64, i64* %739, align 8, !insn.addr !3847
  %888 = add i64 %887, %882, !insn.addr !3847
  %889 = load i64, i64* %741, align 8, !insn.addr !3848
  %890 = add i64 %888, %889, !insn.addr !3848
  store i64 %890, i64* %rcx.16.reg2mem, !insn.addr !3848
  br label %dec_label_pc_6927, !insn.addr !3848

dec_label_pc_6927:                                ; preds = %dec_label_pc_6917, %dec_label_pc_68fc
  %rcx.16.reload = load i64, i64* %rcx.16.reg2mem
  store i8 %875, i8* %743, align 1, !insn.addr !3849
  store i64 0, i64* %745, align 8, !insn.addr !3850
  store i8 %837, i8* %721, align 2, !insn.addr !3851
  store i64 %rcx.16.reload, i64* %746, align 8, !insn.addr !3852
  %891 = call i64 @.Lmicrolzma_decode.0(i64 %657, i64* %745, i64 0), !insn.addr !3853
  %892 = load i8, i8* %721, align 2, !insn.addr !3854
  %893 = zext i8 %892 to i64, !insn.addr !3854
  %894 = load i8, i8* %743, align 1, !insn.addr !3855
  %895 = zext i8 %894 to i64, !insn.addr !3855
  %896 = and i64 %r9.6.reload, -256, !insn.addr !3855
  %897 = or i64 %896, %895, !insn.addr !3855
  %898 = icmp eq i64 %891, 0, !insn.addr !3856
  store i64 %897, i64* %r9.7.reg2mem, !insn.addr !3857
  store i64 %893, i64* %r10.7.reg2mem, !insn.addr !3857
  store i64 %r14.465155.reload, i64* %r14.5.reg2mem, !insn.addr !3857
  br i1 %898, label %dec_label_pc_6992, label %dec_label_pc_6966, !insn.addr !3857

dec_label_pc_6966:                                ; preds = %dec_label_pc_6927
  %899 = load i64, i64* %745, align 8, !insn.addr !3858
  %900 = load i64, i64* %746, align 8, !insn.addr !3859
  %901 = add i64 %899, %891, !insn.addr !3860
  %902 = icmp ult i64 %900, %901, !insn.addr !3861
  %903 = icmp eq i1 %902, false, !insn.addr !3862
  %904 = icmp ugt i64 %891, %900
  %or.cond24 = or i1 %904, %903
  store i64 %897, i64* %r9.7.reg2mem, !insn.addr !3862
  store i64 %893, i64* %r10.7.reg2mem, !insn.addr !3862
  store i64 %r14.465155.reload, i64* %r14.5.reg2mem, !insn.addr !3862
  br i1 %or.cond24, label %dec_label_pc_6992, label %dec_label_pc_6980, !insn.addr !3862

dec_label_pc_6980:                                ; preds = %dec_label_pc_6966
  %905 = icmp eq i64 %900, %r14.465155.reload, !insn.addr !3863
  %906 = icmp eq i64 %900, %rbx.859159.reload, !insn.addr !3864
  %or.cond25 = icmp eq i1 %905, %906
  store i64 %897, i64* %r9.7.reg2mem, !insn.addr !3865
  store i64 %893, i64* %r10.7.reg2mem, !insn.addr !3865
  store i64 %r14.465155.reload, i64* %r14.5.reg2mem, !insn.addr !3865
  br i1 %or.cond25, label %dec_label_pc_6992, label %dec_label_pc_698a, !insn.addr !3865

dec_label_pc_698a:                                ; preds = %dec_label_pc_6980
  %907 = icmp eq i64 %rbx.859159.reload, 0, !insn.addr !3866
  store i64 %897, i64* %r9.7.reg2mem, !insn.addr !3867
  store i64 %893, i64* %r10.7.reg2mem, !insn.addr !3867
  store i64 %900, i64* %r14.5.reg2mem, !insn.addr !3867
  store i64 %900, i64* %rcx.17.reg2mem, !insn.addr !3867
  store i64 %897, i64* %r9.8.reg2mem, !insn.addr !3867
  store i64 %893, i64* %r10.8.reg2mem, !insn.addr !3867
  store i64 %r14.465155.reload, i64* %r14.6.reg2mem, !insn.addr !3867
  br i1 %907, label %dec_label_pc_6995, label %dec_label_pc_6992, !insn.addr !3867

dec_label_pc_6992:                                ; preds = %dec_label_pc_698a, %dec_label_pc_6980, %dec_label_pc_6966, %dec_label_pc_6927, %dec_label_pc_68ee, %dec_label_pc_68e5
  %r14.5.reload = load i64, i64* %r14.5.reg2mem
  %r10.7.reload = load i64, i64* %r10.7.reg2mem
  %r9.7.reload = load i64, i64* %r9.7.reg2mem
  store i64 %rbx.859159.reload, i64* %rcx.17.reg2mem, !insn.addr !3868
  store i64 %r9.7.reload, i64* %r9.8.reg2mem, !insn.addr !3868
  store i64 %r10.7.reload, i64* %r10.8.reg2mem, !insn.addr !3868
  store i64 %r14.5.reload, i64* %r14.6.reg2mem, !insn.addr !3868
  br label %dec_label_pc_6995, !insn.addr !3868

dec_label_pc_6995:                                ; preds = %dec_label_pc_6992, %dec_label_pc_698a
  %r14.6.reload = load i64, i64* %r14.6.reg2mem
  %r10.8.reload = load i64, i64* %r10.8.reg2mem
  %r9.8.reload = load i64, i64* %r9.8.reg2mem
  %rcx.17.reload = load i64, i64* %rcx.17.reg2mem
  %908 = load i64, i64* %741, align 8, !insn.addr !3869
  %909 = load i32, i32* %716, align 8, !insn.addr !3870
  %910 = add i32 %909, 1, !insn.addr !3870
  store i32 %910, i32* %716, align 8, !insn.addr !3870
  %911 = load i64, i64* %739, align 8, !insn.addr !3871
  %912 = add i64 %911, %908, !insn.addr !3871
  %913 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3799
  %914 = icmp ult i64 %912, %913, !insn.addr !3800
  %915 = icmp ult i32 %910, 5
  %or.cond201 = icmp eq i1 %914, %915
  store i64 %rcx.17.reload, i64* %rbx.8.lcssa.reg2mem, !insn.addr !3801
  store i64 %r14.6.reload, i64* %r14.4.lcssa.reg2mem, !insn.addr !3801
  store i64 %r9.8.reload, i64* %r9.4.reg2mem, !insn.addr !3801
  store i64 %rcx.17.reload, i64* %rbx.859159.reg2mem, !insn.addr !3801
  store i64 %912, i64* %rdi.161158.reg2mem, !insn.addr !3801
  store i64 %r9.8.reload, i64* %r9.363157.reg2mem, !insn.addr !3801
  store i64 %r10.8.reload, i64* %r10.564156.reg2mem, !insn.addr !3801
  store i64 %r14.6.reload, i64* %r14.465155.reg2mem, !insn.addr !3801
  store i64 %913, i64* %.reg2mem214, !insn.addr !3801
  br i1 %or.cond201, label %dec_label_pc_6850, label %dec_label_pc_6839, !insn.addr !3801

dec_label_pc_69b1:                                ; preds = %dec_label_pc_6709
  %916 = icmp eq i32 %770, 327, !insn.addr !3872
  %917 = icmp eq i1 %916, false, !insn.addr !3873
  br i1 %917, label %dec_label_pc_672b, label %dec_label_pc_69bc, !insn.addr !3873

dec_label_pc_69bc:                                ; preds = %dec_label_pc_69b1
  %918 = load i32, i32* %748, align 4, !insn.addr !3874
  %919 = and i32 %918, -256
  %920 = icmp eq i32 %919, 83886080, !insn.addr !3875
  %921 = icmp eq i1 %920, false, !insn.addr !3876
  br i1 %921, label %dec_label_pc_672b, label %dec_label_pc_69d0, !insn.addr !3876

dec_label_pc_69d0:                                ; preds = %dec_label_pc_69bc
  %922 = load i8, i8* %712, align 1, !insn.addr !3877
  %923 = and i8 %922, 8, !insn.addr !3878
  %924 = icmp eq i8 %923, 0, !insn.addr !3878
  br i1 %924, label %dec_label_pc_672b, label %dec_label_pc_69df, !insn.addr !3879

dec_label_pc_69df:                                ; preds = %dec_label_pc_69d0
  %925 = load i64, i64* %750, align 8, !insn.addr !3880
  %926 = icmp eq i64 %925, 0, !insn.addr !3881
  %927 = icmp eq i1 %926, false, !insn.addr !3882
  br i1 %927, label %dec_label_pc_672b, label %dec_label_pc_69f0, !insn.addr !3882

dec_label_pc_69f0:                                ; preds = %dec_label_pc_69df
  %928 = urem i8 %922, 2
  %929 = icmp eq i8 %928, 0, !insn.addr !3883
  store i64 %925, i64* %rbx.9.reg2mem, !insn.addr !3884
  br i1 %929, label %dec_label_pc_6a0c, label %dec_label_pc_69f4, !insn.addr !3884

dec_label_pc_69f4:                                ; preds = %dec_label_pc_69f0
  %930 = load i64, i64* %752, align 8, !insn.addr !3885
  %931 = load i64, i64* %753, align 8, !insn.addr !3886
  %932 = add i64 %931, %930, !insn.addr !3886
  %933 = load i64, i64* %755, align 8, !insn.addr !3887
  %934 = add i64 %932, %933, !insn.addr !3887
  store i64 %934, i64* %rbx.9.reg2mem, !insn.addr !3887
  br label %dec_label_pc_6a0c, !insn.addr !3887

dec_label_pc_6a0c:                                ; preds = %dec_label_pc_69f4, %dec_label_pc_69f0
  %rbx.9.reload = load i64, i64* %rbx.9.reg2mem
  store i64 0, i64* %739, align 8, !insn.addr !3888
  store i64 %715, i64* %719, align 8, !insn.addr !3889
  %935 = call i64 @.Lmicrolzma_decode.0(i64 %657, i64* %739, i64 0), !insn.addr !3890
  %936 = icmp eq i64 %935, 0, !insn.addr !3891
  br i1 %936, label %dec_label_pc_672b, label %dec_label_pc_6a3e, !insn.addr !3892

dec_label_pc_6a3e:                                ; preds = %dec_label_pc_6a0c
  %937 = load i64, i64* %739, align 8, !insn.addr !3893
  %938 = add i64 %937, %935, !insn.addr !3894
  %939 = icmp ult i64 %rbx.9.reload, %938, !insn.addr !3895
  %940 = icmp eq i1 %939, false, !insn.addr !3896
  %941 = icmp ugt i64 %935, %rbx.9.reload
  %or.cond26 = or i1 %941, %940
  br i1 %or.cond26, label %dec_label_pc_672b, label %dec_label_pc_6a5b, !insn.addr !3896

dec_label_pc_6a5b:                                ; preds = %dec_label_pc_6a3e
  %942 = load i64, i64* %719, align 8, !insn.addr !3897
  %943 = inttoptr i64 %942 to i8*, !insn.addr !3898
  call void @__asm_rep_stosd_memset(i8* %943, i32 0, i64 22), !insn.addr !3898
  %944 = load i64, i64* %685, align 8, !insn.addr !3899
  %.pre133 = load i64, i64* %stack_var_-2904, align 8
  store i64 %.pre133, i64* %.reg2mem216, !insn.addr !3899
  store i64 %944, i64* %rdi.2.reg2mem, !insn.addr !3899
  br label %dec_label_pc_6a6e, !insn.addr !3899

dec_label_pc_6a6e:                                ; preds = %dec_label_pc_6a93, %dec_label_pc_6a5b
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %.reload217 = load i64, i64* %.reg2mem216, !insn.addr !3900
  %945 = load i64, i64* %719, align 8, !insn.addr !3901
  %946 = call i64 @.Llzma_properties_size.0(i64 %rdi.2.reload, i64 %.reload217, i64 %945, i64 327, i64 0), !insn.addr !3902
  %947 = trunc i64 %946 to i32, !insn.addr !3903
  %948 = icmp eq i32 %947, 0, !insn.addr !3903
  store i64 0, i64* %rbx.7.reg2mem, !insn.addr !3904
  store i64 0, i64* %r8.8.reg2mem, !insn.addr !3904
  store i64 %r9.2.ph83.reload, i64* %r9.1.reg2mem, !insn.addr !3904
  store i64 0, i64* %r14.2.reg2mem, !insn.addr !3904
  br i1 %948, label %dec_label_pc_6730, label %dec_label_pc_6a88, !insn.addr !3904

dec_label_pc_6a88:                                ; preds = %dec_label_pc_6a6e
  %949 = load i64, i64* %757, align 8, !insn.addr !3905
  %950 = icmp eq i64 %949, 0, !insn.addr !3905
  br i1 %950, label %dec_label_pc_6ab6, label %dec_label_pc_6a93, !insn.addr !3906

dec_label_pc_6a93:                                ; preds = %dec_label_pc_6b11, %dec_label_pc_6aeb, %dec_label_pc_6ab6, %dec_label_pc_6a88
  %951 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3907
  %952 = load i64, i64* %741, align 8, !insn.addr !3908
  %953 = load i64, i64* %739, align 8, !insn.addr !3909
  %954 = add i64 %953, %952, !insn.addr !3909
  %955 = icmp ult i64 %954, %951, !insn.addr !3910
  store i64 0, i64* %rbx.7.reg2mem, !insn.addr !3911
  store i64 0, i64* %r8.8.reg2mem, !insn.addr !3911
  store i64 %r9.2.ph83.reload, i64* %r9.1.reg2mem, !insn.addr !3911
  store i64 0, i64* %r14.2.reg2mem, !insn.addr !3911
  store i64 %951, i64* %.reg2mem216, !insn.addr !3911
  store i64 %954, i64* %rdi.2.reg2mem, !insn.addr !3911
  br i1 %955, label %dec_label_pc_6a6e, label %dec_label_pc_6730, !insn.addr !3911

dec_label_pc_6ab6:                                ; preds = %dec_label_pc_6a88
  %956 = load i8, i8* %732, align 1, !insn.addr !3912
  %957 = urem i8 %956, 2, !insn.addr !3912
  %958 = icmp eq i8 %957, 0, !insn.addr !3912
  br i1 %958, label %dec_label_pc_6a93, label %dec_label_pc_6ac0, !insn.addr !3913

dec_label_pc_6ac0:                                ; preds = %dec_label_pc_6ab6
  %959 = load i32, i32* %736, align 4, !insn.addr !3914
  %960 = load i64, i64* %738, align 8, !insn.addr !3915
  %961 = add i32 %959, -83886080
  %962 = and i32 %961, -16711936, !insn.addr !3916
  %963 = icmp eq i32 %962, 0, !insn.addr !3916
  %964 = icmp eq i1 %963, false, !insn.addr !3917
  store i64 %960, i64* %r14.7.reg2mem, !insn.addr !3917
  br i1 %964, label %dec_label_pc_6aeb, label %dec_label_pc_6adb, !insn.addr !3917

dec_label_pc_6adb:                                ; preds = %dec_label_pc_6ac0
  %965 = load i64, i64* %739, align 8, !insn.addr !3918
  %966 = add i64 %965, %960, !insn.addr !3918
  %967 = load i64, i64* %741, align 8, !insn.addr !3919
  %968 = add i64 %966, %967, !insn.addr !3919
  store i64 %968, i64* %r14.7.reg2mem, !insn.addr !3919
  br label %dec_label_pc_6aeb, !insn.addr !3919

dec_label_pc_6aeb:                                ; preds = %dec_label_pc_6adb, %dec_label_pc_6ac0
  %r14.7.reload = load i64, i64* %r14.7.reg2mem
  store i64 0, i64* %745, align 8, !insn.addr !3920
  %969 = call i64 @.Lmicrolzma_decode.0(i64 %657, i64* %745, i64 0), !insn.addr !3921
  %970 = icmp eq i64 %969, 0, !insn.addr !3922
  br i1 %970, label %dec_label_pc_6a93, label %dec_label_pc_6b11, !insn.addr !3923

dec_label_pc_6b11:                                ; preds = %dec_label_pc_6aeb
  %971 = load i64, i64* %745, align 8, !insn.addr !3924
  %972 = add i64 %971, %969, !insn.addr !3925
  %973 = icmp ult i64 %r14.7.reload, %972, !insn.addr !3926
  %974 = icmp eq i1 %973, false, !insn.addr !3927
  %975 = icmp ugt i64 %969, %r14.7.reload
  %or.cond27 = or i1 %975, %974
  %976 = icmp eq i64 %rbx.9.reload, %r14.7.reload, !insn.addr !3928
  %or.cond28 = or i1 %976, %or.cond27
  store i64 %rbx.9.reload, i64* %rbx.10.reg2mem, !insn.addr !3927
  store i64 %r14.7.reload, i64* %r14.8.reg2mem, !insn.addr !3927
  br i1 %or.cond28, label %dec_label_pc_6a93, label %dec_label_pc_6b37, !insn.addr !3927

dec_label_pc_6b37:                                ; preds = %dec_label_pc_6850, %dec_label_pc_6b11, %dec_label_pc_6839
  %r14.8.reload = load i64, i64* %r14.8.reg2mem
  %rbx.10.reload = load i64, i64* %rbx.10.reg2mem
  %977 = load i64, i64* %634, align 8, !insn.addr !3929
  %978 = load i64, i64* %692, align 8, !insn.addr !3930
  %979 = load i64, i64* %664, align 8, !insn.addr !3931
  %980 = call i64 @function_2af0(i64 %rbx.10.reload, i64 %r14.8.reload, i64 %979, i64 %978, i64 %639, i64 %977), !insn.addr !3932
  %981 = trunc i64 %980 to i32, !insn.addr !3933
  %982 = icmp eq i32 %981, 0, !insn.addr !3933
  store i64 %rbx.10.reload, i64* %rbx.7.reg2mem, !insn.addr !3934
  store i64 %639, i64* %r8.8.reg2mem, !insn.addr !3934
  store i64 %977, i64* %r9.1.reg2mem, !insn.addr !3934
  store i64 %r14.8.reload, i64* %r14.2.reg2mem, !insn.addr !3934
  br i1 %982, label %dec_label_pc_6730, label %dec_label_pc_6b78, !insn.addr !3934

dec_label_pc_6b63:                                ; preds = %dec_label_pc_66ee
  %983 = load i64, i64* %685, align 8, !insn.addr !3935
  %984 = add i64 %983, 1, !insn.addr !3935
  store i64 %984, i64* %685, align 8, !insn.addr !3935
  %985 = load i64, i64* %stack_var_-2904, align 8, !insn.addr !3738
  %986 = icmp ult i64 %984, %985, !insn.addr !3739
  store i64 %984, i64* %.reg2mem202, !insn.addr !3740
  store i64 %985, i64* %.reg2mem204, !insn.addr !3740
  store i64 %rcx.15.ph81.reload, i64* %rcx.18.reg2mem, !insn.addr !3740
  store i64 %r8.9.ph82.reload, i64* %r8.13.reg2mem, !insn.addr !3740
  br i1 %986, label %dec_label_pc_66e2, label %dec_label_pc_6beb, !insn.addr !3740

dec_label_pc_6b78:                                ; preds = %dec_label_pc_6b37
  %987 = add i64 %652, 56, !insn.addr !3936
  %988 = inttoptr i64 %987 to i64*, !insn.addr !3936
  store i64 %rbx.10.reload, i64* %988, align 8, !insn.addr !3936
  %989 = add i64 %652, 64, !insn.addr !3937
  %990 = inttoptr i64 %989 to i64*, !insn.addr !3937
  store i64 %r14.8.reload, i64* %990, align 8, !insn.addr !3937
  %991 = add i64 %652, 4, !insn.addr !3938
  %992 = inttoptr i64 %991 to i32*, !insn.addr !3938
  store i32 1, i32* %992, align 4, !insn.addr !3938
  %993 = inttoptr i64 %715 to i32*, !insn.addr !3939
  store i32 1800, i32* %993, align 8, !insn.addr !3939
  %994 = call i64 @.Llzip_decode.0(i64 %657, i64 %715, i64 0, i64 %978), !insn.addr !3940
  %995 = add i64 %652, 16, !insn.addr !3941
  %996 = inttoptr i64 %995 to i64*, !insn.addr !3941
  store i64 %994, i64* %996, align 8, !insn.addr !3941
  %997 = icmp eq i64 %994, 0, !insn.addr !3942
  br i1 %997, label %dec_label_pc_6be3, label %dec_label_pc_6bbd, !insn.addr !3943

dec_label_pc_6bbd:                                ; preds = %dec_label_pc_6b78
  store i32 1936, i32* %993, align 8, !insn.addr !3944
  %998 = call i64 @.Llzip_decode.0(i64 %657, i64 %715, i64 0, i64 %978), !insn.addr !3945
  %999 = add i64 %652, 24, !insn.addr !3946
  %1000 = inttoptr i64 %999 to i64*, !insn.addr !3946
  store i64 %998, i64* %1000, align 8, !insn.addr !3946
  %1001 = icmp eq i64 %998, 0, !insn.addr !3947
  %1002 = icmp eq i1 %1001, false, !insn.addr !3948
  br i1 %1002, label %dec_label_pc_6eb2, label %dec_label_pc_6be3, !insn.addr !3948

dec_label_pc_6be3:                                ; preds = %dec_label_pc_6efe, %dec_label_pc_6ed8, %dec_label_pc_6eb2, %dec_label_pc_6bbd, %dec_label_pc_6b78
  %1003 = inttoptr i64 %652 to i32*, !insn.addr !3949
  store i32 1, i32* %1003, align 4, !insn.addr !3949
  store i64 %978, i64* %rcx.18.reg2mem, !insn.addr !3949
  store i64 %639, i64* %r8.13.reg2mem, !insn.addr !3949
  br label %dec_label_pc_6beb, !insn.addr !3949

dec_label_pc_6beb:                                ; preds = %dec_label_pc_6730, %dec_label_pc_6b63, %dec_label_pc_66e2, %dec_label_pc_6690, %dec_label_pc_66c8, %dec_label_pc_6efe, %dec_label_pc_6be3, %dec_label_pc_6669, %dec_label_pc_664e, %dec_label_pc_663c, %dec_label_pc_65f2
  %r8.13.reload = load i64, i64* %r8.13.reg2mem
  %rcx.18.reload = load i64, i64* %rcx.18.reg2mem
  %1004 = load i64, i64* %630, align 8, !insn.addr !3950
  %1005 = add i64 %3, 32, !insn.addr !3951
  %1006 = inttoptr i64 %1005 to i64*, !insn.addr !3951
  %1007 = load i64, i64* %1006, align 8, !insn.addr !3951
  %1008 = add i64 %3, 80, !insn.addr !3952
  %1009 = inttoptr i64 %1008 to i64*, !insn.addr !3952
  %1010 = load i64, i64* %1009, align 8, !insn.addr !3952
  %1011 = icmp eq i64 %1010, 0, !insn.addr !3952
  %1012 = add i64 %1007, 16, !insn.addr !3953
  %1013 = inttoptr i64 %1012 to i64*, !insn.addr !3953
  store i64 %1004, i64* %1013, align 8, !insn.addr !3953
  br i1 %1011, label %dec_label_pc_6c1e, label %dec_label_pc_6c04, !insn.addr !3954

dec_label_pc_6c04:                                ; preds = %dec_label_pc_6beb
  %1014 = load i64, i64* %1009, align 8, !insn.addr !3955
  %1015 = add i64 %1014, 8, !insn.addr !3956
  %1016 = inttoptr i64 %1015 to i64*, !insn.addr !3956
  %1017 = load i64, i64* %1016, align 8, !insn.addr !3956
  %1018 = inttoptr i64 %1004 to i64*, !insn.addr !3957
  %1019 = load i64, i64* %1018, align 8, !insn.addr !3957
  %1020 = add i64 %1019, %1017, !insn.addr !3957
  %1021 = add i64 %111, 960, !insn.addr !3958
  %1022 = inttoptr i64 %1021 to i32*, !insn.addr !3958
  %1023 = load i32, i32* %1022, align 4, !insn.addr !3958
  %1024 = add i32 %1023, 1, !insn.addr !3958
  store i32 %1024, i32* %1022, align 4, !insn.addr !3958
  %1025 = add i64 %111, 848, !insn.addr !3959
  %1026 = inttoptr i64 %1025 to i64*, !insn.addr !3959
  store i64 %1020, i64* %1026, align 8, !insn.addr !3959
  br label %dec_label_pc_6c1e, !insn.addr !3959

dec_label_pc_6c1e:                                ; preds = %dec_label_pc_6c04, %dec_label_pc_6beb
  %1027 = load i64, i64* %641, align 8, !insn.addr !3960
  %1028 = icmp eq i64 %1027, 0, !insn.addr !3960
  br i1 %1028, label %dec_label_pc_6c40, label %dec_label_pc_6c26, !insn.addr !3961

dec_label_pc_6c26:                                ; preds = %dec_label_pc_6c1e
  %1029 = add i64 %1027, 8, !insn.addr !3962
  %1030 = inttoptr i64 %1029 to i64*, !insn.addr !3962
  %1031 = load i64, i64* %1030, align 8, !insn.addr !3962
  %1032 = inttoptr i64 %1004 to i64*, !insn.addr !3963
  %1033 = load i64, i64* %1032, align 8, !insn.addr !3963
  %1034 = add i64 %1033, %1031, !insn.addr !3963
  %1035 = add i64 %111, 960, !insn.addr !3964
  %1036 = inttoptr i64 %1035 to i32*, !insn.addr !3964
  %1037 = load i32, i32* %1036, align 4, !insn.addr !3964
  %1038 = add i32 %1037, 1, !insn.addr !3964
  store i32 %1038, i32* %1036, align 4, !insn.addr !3964
  %1039 = add i64 %111, 856, !insn.addr !3965
  %1040 = inttoptr i64 %1039 to i64*, !insn.addr !3965
  store i64 %1034, i64* %1040, align 8, !insn.addr !3965
  br label %dec_label_pc_6c40, !insn.addr !3965

dec_label_pc_6c40:                                ; preds = %dec_label_pc_6c26, %dec_label_pc_6c1e
  %1041 = add i64 %3, ptrtoint (i32** @global_var_18 to i64), !insn.addr !3966
  %1042 = inttoptr i64 %1041 to i64*, !insn.addr !3966
  %1043 = load i64, i64* %1042, align 8, !insn.addr !3966
  %1044 = call i64 @function_2870(i64 %1043), !insn.addr !3967
  %1045 = trunc i64 %1044 to i32, !insn.addr !3968
  %1046 = icmp eq i32 %1045, 0, !insn.addr !3968
  store i64 %rcx.18.reload, i64* %rcx.1.reg2mem, !insn.addr !3969
  store i64 %1004, i64* %rdx.2.reg2mem, !insn.addr !3969
  br i1 %1046, label %dec_label_pc_5a42, label %dec_label_pc_6c52, !insn.addr !3969

dec_label_pc_6c52:                                ; preds = %dec_label_pc_6c40
  %1047 = load i64, i64* %245, align 8, !insn.addr !3970
  %1048 = load i64, i64* %1006, align 8, !insn.addr !3971
  %1049 = call i64 @lzma_free(i64 %1047, i64 %1048, i64 %1004), !insn.addr !3972
  %1050 = inttoptr i64 %115 to i32*, !insn.addr !3973
  %1051 = load i32, i32* %1050, align 4, !insn.addr !3973
  %1052 = icmp eq i32 %1051, 12, !insn.addr !3973
  %1053 = icmp eq i1 %1052, false, !insn.addr !3974
  store i64 %rcx.18.reload, i64* %rcx.1.reg2mem, !insn.addr !3974
  store i64 %1004, i64* %rdx.2.reg2mem, !insn.addr !3974
  br i1 %1053, label %dec_label_pc_5a42, label %dec_label_pc_6c71, !insn.addr !3974

dec_label_pc_6c71:                                ; preds = %dec_label_pc_6c52
  %1054 = call i64 @.Llzma2_decoder_end.1(i32 1, i64 325, i64 127, i64 ptrtoint (i32** @global_var_18 to i64), i64 %r8.13.reload, i64 ptrtoint (i32* @0 to i64)), !insn.addr !3975
  %1055 = trunc i64 %1054 to i32, !insn.addr !3976
  %1056 = icmp eq i32 %1055, 0, !insn.addr !3976
  store i64 ptrtoint (i32** @global_var_18 to i64), i64* %rcx.1.reg2mem, !insn.addr !3977
  store i64 127, i64* %rdx.2.reg2mem, !insn.addr !3977
  br i1 %1056, label %dec_label_pc_5a42, label %dec_label_pc_6c92, !insn.addr !3977

dec_label_pc_6c92:                                ; preds = %dec_label_pc_6c71
  %1057 = load i64, i64* %104, align 8, !insn.addr !3978
  %1058 = add i64 %1057, 64, !insn.addr !3979
  %1059 = inttoptr i64 %1058 to i64*, !insn.addr !3979
  %1060 = load i64, i64* %1059, align 8, !insn.addr !3979
  %1061 = trunc i64 %1060 to i32, !insn.addr !3980
  %1062 = call i64 @.Llzma2_decoder_end.1(i32 %1061, i64 298, i64 4, i64 18, i64 %r8.13.reload, i64 ptrtoint (i32* @0 to i64)), !insn.addr !3980
  %1063 = trunc i64 %1062 to i32, !insn.addr !3981
  %1064 = icmp eq i32 %1063, 0, !insn.addr !3981
  store i64 18, i64* %rcx.1.reg2mem, !insn.addr !3982
  store i64 4, i64* %rdx.2.reg2mem, !insn.addr !3982
  br i1 %1064, label %dec_label_pc_5a42, label %dec_label_pc_6cb6, !insn.addr !3982

dec_label_pc_6cb6:                                ; preds = %dec_label_pc_6c92
  %1065 = load i64, i64* %104, align 8, !insn.addr !3983
  %1066 = add i64 %1065, ptrtoint (i32** @global_var_48 to i64), !insn.addr !3984
  %1067 = inttoptr i64 %1066 to i64*, !insn.addr !3984
  %1068 = load i64, i64* %1067, align 8, !insn.addr !3984
  %1069 = call i64 @.Llzma_check_init.part.0(i64 302, i64 19, i64 4, i64 32, i64 %1068), !insn.addr !3985
  %1070 = trunc i64 %1069 to i32, !insn.addr !3986
  %1071 = icmp eq i32 %1070, 0, !insn.addr !3986
  store i64 32, i64* %rcx.1.reg2mem, !insn.addr !3987
  store i64 4, i64* %rdx.2.reg2mem, !insn.addr !3987
  br i1 %1071, label %dec_label_pc_5a42, label %dec_label_pc_6cdf, !insn.addr !3987

dec_label_pc_6cdf:                                ; preds = %dec_label_pc_6cb6
  %1072 = load i64, i64* %168, align 8, !insn.addr !3988
  %1073 = add i64 %1072, 8, !insn.addr !3989
  %1074 = inttoptr i64 %1073 to i64*, !insn.addr !3989
  %1075 = load i64, i64* %1074, align 8, !insn.addr !3989
  %1076 = trunc i64 %1075 to i32, !insn.addr !3990
  %1077 = call i64 @.Llzma2_decoder_end.1(i32 %1076, i64 306, i64 6, i64 20, i64 %1068, i64 ptrtoint (i32* @0 to i64)), !insn.addr !3990
  %1078 = trunc i64 %1077 to i32, !insn.addr !3991
  %1079 = icmp eq i32 %1078, 0, !insn.addr !3991
  store i64 20, i64* %rcx.1.reg2mem, !insn.addr !3992
  store i64 6, i64* %rdx.2.reg2mem, !insn.addr !3992
  br i1 %1079, label %dec_label_pc_5a42, label %dec_label_pc_6d03, !insn.addr !3992

dec_label_pc_6d03:                                ; preds = %dec_label_pc_6cdf
  %1080 = load i64, i64* %104, align 8, !insn.addr !3993
  %1081 = add i64 %1080, 80, !insn.addr !3994
  %1082 = inttoptr i64 %1081 to i64*, !insn.addr !3994
  %1083 = load i64, i64* %1082, align 8, !insn.addr !3994
  %1084 = call i64 @.Llzma_check_init.part.0(i64 312, i64 21, i64 2, i64 16, i64 %1083), !insn.addr !3995
  %1085 = trunc i64 %1084 to i32, !insn.addr !3996
  %1086 = icmp eq i32 %1085, 0, !insn.addr !3996
  store i64 16, i64* %rcx.1.reg2mem, !insn.addr !3997
  store i64 2, i64* %rdx.2.reg2mem, !insn.addr !3997
  br i1 %1086, label %dec_label_pc_5a42, label %dec_label_pc_6d2c, !insn.addr !3997

dec_label_pc_6d2c:                                ; preds = %dec_label_pc_6d03
  %1087 = load i64, i64* %104, align 8, !insn.addr !3998
  %1088 = add i64 %1087, 112, !insn.addr !3999
  %1089 = inttoptr i64 %1088 to i64*, !insn.addr !3999
  %1090 = load i64, i64* %1089, align 8, !insn.addr !3999
  %1091 = call i64 @.Llzma_check_init.part.0(i64 238, i64 16, i64 38, i64 32, i64 %1090), !insn.addr !4000
  %1092 = trunc i64 %1091 to i32, !insn.addr !4001
  %1093 = icmp eq i32 %1092, 0, !insn.addr !4001
  store i64 32, i64* %rcx.1.reg2mem, !insn.addr !4002
  store i64 38, i64* %rdx.2.reg2mem, !insn.addr !4002
  br i1 %1093, label %dec_label_pc_5a42, label %dec_label_pc_6d55, !insn.addr !4002

dec_label_pc_6d55:                                ; preds = %dec_label_pc_6d2c
  %1094 = load i64, i64* %104, align 8, !insn.addr !4003
  %1095 = add i64 %1094, 120, !insn.addr !4004
  %1096 = inttoptr i64 %1095 to i64*, !insn.addr !4004
  %1097 = load i64, i64* %1096, align 8, !insn.addr !4004
  %1098 = call i64 @.Llzma_check_init.part.0(i64 320, i64 23, i64 5, i64 32, i64 %1097), !insn.addr !4005
  %1099 = trunc i64 %1098 to i32, !insn.addr !4006
  %1100 = icmp eq i32 %1099, 0, !insn.addr !4006
  store i64 32, i64* %rcx.1.reg2mem, !insn.addr !4007
  store i64 5, i64* %rdx.2.reg2mem, !insn.addr !4007
  br i1 %1100, label %dec_label_pc_5a42, label %dec_label_pc_6d7e, !insn.addr !4007

dec_label_pc_6d7e:                                ; preds = %dec_label_pc_6d55
  %1101 = load i64, i64* %168, align 8, !insn.addr !4008
  %1102 = inttoptr i64 %1101 to i64*, !insn.addr !4009
  %1103 = load i64, i64* %1102, align 8, !insn.addr !4009
  %1104 = call i64 @.Llzma_check_init.part.0(i64 314, i64 22, i64 6, i64 32, i64 %1103), !insn.addr !4010
  %1105 = trunc i64 %1104 to i32, !insn.addr !4011
  %1106 = icmp eq i32 %1105, 0, !insn.addr !4011
  store i64 32, i64* %rcx.1.reg2mem, !insn.addr !4012
  store i64 6, i64* %rdx.2.reg2mem, !insn.addr !4012
  br i1 %1106, label %dec_label_pc_5a42, label %dec_label_pc_6da6, !insn.addr !4012

dec_label_pc_6da6:                                ; preds = %dec_label_pc_6d7e
  %1107 = add i64 %3, 40, !insn.addr !4013
  %1108 = inttoptr i64 %1107 to i64*, !insn.addr !4013
  %1109 = load i64, i64* %1108, align 8, !insn.addr !4013
  %1110 = add i64 %1109, 48, !insn.addr !4014
  %1111 = inttoptr i64 %1110 to i64*, !insn.addr !4014
  %1112 = load i64, i64* %1111, align 8, !insn.addr !4014
  %1113 = call i64 @.Llzma_check_init.part.0(i64 276, i64 17, i64 22, i64 16, i64 %1112), !insn.addr !4015
  %1114 = trunc i64 %1113 to i32, !insn.addr !4016
  %1115 = icmp eq i32 %1114, 0, !insn.addr !4016
  store i64 16, i64* %rcx.1.reg2mem, !insn.addr !4017
  store i64 22, i64* %rdx.2.reg2mem, !insn.addr !4017
  br i1 %1115, label %dec_label_pc_5a42, label %dec_label_pc_6dd0, !insn.addr !4017

dec_label_pc_6dd0:                                ; preds = %dec_label_pc_6da6
  %1116 = add i64 %111, 664, !insn.addr !4018
  %1117 = inttoptr i64 %1116 to i32*, !insn.addr !4018
  %1118 = load i32, i32* %1117, align 4, !insn.addr !4018
  %1119 = icmp eq i32 %1118, 456, !insn.addr !4018
  %1120 = icmp eq i1 %1119, false, !insn.addr !4019
  store i64 16, i64* %rcx.1.reg2mem, !insn.addr !4019
  store i64 22, i64* %rdx.2.reg2mem, !insn.addr !4019
  br i1 %1120, label %dec_label_pc_5a42, label %dec_label_pc_6de1, !insn.addr !4019

dec_label_pc_6de1:                                ; preds = %dec_label_pc_6dd0
  %1121 = add i64 %111, 248, !insn.addr !4020
  %1122 = inttoptr i64 %1121 to i64*, !insn.addr !4020
  %1123 = load i64, i64* %1122, align 8, !insn.addr !4020
  %1124 = add i64 %3, 472, !insn.addr !4021
  %1125 = inttoptr i64 %1124 to i64*, !insn.addr !4021
  %1126 = load i64, i64* %1125, align 8, !insn.addr !4021
  %1127 = add i64 %3, 2832, !insn.addr !4022
  %1128 = inttoptr i64 %1123 to i64*, !insn.addr !4023
  store i64 %111, i64* %1128, align 8, !insn.addr !4023
  %1129 = add i64 %3, 144, !insn.addr !4024
  %1130 = inttoptr i64 %1129 to i64*, !insn.addr !4024
  %1131 = load i64, i64* %1130, align 8, !insn.addr !4024
  %1132 = add i64 %1131, 8, !insn.addr !4025
  %1133 = add i64 %1132, %1126, !insn.addr !4026
  %1134 = inttoptr i64 %1133 to i32*, !insn.addr !4027
  %1135 = load i32, i32* %1134, align 4, !insn.addr !4027
  %1136 = add i64 %111, 80, !insn.addr !4028
  %1137 = inttoptr i64 %1136 to i64*, !insn.addr !4028
  store i64 %1133, i64* %1137, align 8, !insn.addr !4028
  %1138 = add i64 %111, 88, !insn.addr !4029
  %1139 = inttoptr i64 %1138 to i32*, !insn.addr !4029
  store i32 %1135, i32* %1139, align 4, !insn.addr !4029
  store i32 2, i32* %1134, align 4, !insn.addr !4030
  %1140 = add i64 %111, 96, !insn.addr !4031
  %1141 = inttoptr i64 %1140 to i64*, !insn.addr !4031
  %1142 = load i64, i64* %1141, align 8, !insn.addr !4031
  %1143 = add i64 %111, 104, !insn.addr !4032
  %1144 = inttoptr i64 %1143 to i8*, !insn.addr !4032
  %1145 = load i8, i8* %1144, align 1, !insn.addr !4032
  %1146 = inttoptr i64 %1142 to i8*, !insn.addr !4033
  %1147 = load i8, i8* %1146, align 1, !insn.addr !4033
  %1148 = or i8 %1147, %1145, !insn.addr !4033
  store i8 %1148, i8* %1146, align 1, !insn.addr !4033
  %1149 = add i64 %3, 496, !insn.addr !4034
  %1150 = inttoptr i64 %1149 to i64*, !insn.addr !4034
  %1151 = load i64, i64* %1150, align 8, !insn.addr !4034
  %1152 = add i64 %1151, %1132, !insn.addr !4034
  %1153 = inttoptr i64 %1152 to i32*, !insn.addr !4035
  %1154 = load i32, i32* %1153, align 4, !insn.addr !4035
  %1155 = add i64 %111, 64, !insn.addr !4036
  %1156 = inttoptr i64 %1155 to i64*, !insn.addr !4036
  store i64 %1152, i64* %1156, align 8, !insn.addr !4036
  %1157 = add i64 %111, ptrtoint (i32** @global_var_48 to i64), !insn.addr !4037
  %1158 = inttoptr i64 %1157 to i32*, !insn.addr !4037
  store i32 %1154, i32* %1158, align 4, !insn.addr !4037
  %1159 = add i64 %111, 128, !insn.addr !4038
  store i32 1, i32* %1153, align 4, !insn.addr !4039
  %1160 = inttoptr i64 %1159 to i8*, !insn.addr !4040
  call void @__asm_rep_stosd_memset(i8* %1160, i32 0, i64 30), !insn.addr !4040
  %1161 = load i64, i64* %104, align 8, !insn.addr !4041
  %1162 = add i64 %1161, 64, !insn.addr !4042
  %1163 = inttoptr i64 %1162 to i64*, !insn.addr !4042
  %1164 = load i64, i64* %1163, align 8, !insn.addr !4042
  %1165 = add i64 %111, 160, !insn.addr !4043
  %1166 = inttoptr i64 %1165 to i64*, !insn.addr !4043
  store i64 %1164, i64* %1166, align 8, !insn.addr !4043
  %1167 = add i64 %111, 112, !insn.addr !4044
  %1168 = inttoptr i64 %1167 to i64*, !insn.addr !4044
  %1169 = load i64, i64* %1168, align 8, !insn.addr !4044
  %1170 = inttoptr i64 %1169 to i64*, !insn.addr !4045
  store i64 %1159, i64* %1170, align 8, !insn.addr !4045
  %1171 = add i64 %111, 120, !insn.addr !4046
  %1172 = inttoptr i64 %1171 to i64*, !insn.addr !4046
  %1173 = load i64, i64* %1172, align 8, !insn.addr !4046
  %1174 = add i64 %3, 2856, !insn.addr !4047
  %1175 = inttoptr i64 %1174 to i64*, !insn.addr !4047
  %1176 = load i64, i64* %1175, align 8, !insn.addr !4047
  %1177 = inttoptr i64 %1173 to i32*, !insn.addr !4048
  store i32 1, i32* %1177, align 4, !insn.addr !4048
  %1178 = icmp eq i64 %1176, 0, !insn.addr !4049
  %1179 = icmp eq i1 %1178, false, !insn.addr !4050
  store i64 0, i64* %rax.452.reg2mem, !insn.addr !4050
  br i1 %1179, label %dec_label_pc_6ea3, label %dec_label_pc_6e7e, !insn.addr !4050

dec_label_pc_6e7e:                                ; preds = %dec_label_pc_6ea3, %dec_label_pc_6de1
  %1180 = inttoptr i64 %1124 to i8*, !insn.addr !4051
  call void @__asm_rep_stosd_memset(i8* %1180, i32 0, i64 598), !insn.addr !4051
  store i64 1, i64* %rsi.1.reg2mem, !insn.addr !4052
  br label %dec_label_pc_5a80, !insn.addr !4052

dec_label_pc_6ea3:                                ; preds = %dec_label_pc_6de1, %dec_label_pc_6ea3
  %rax.452.reload = load i64, i64* %rax.452.reg2mem
  %1181 = add i64 %1127, %rax.452.reload, !insn.addr !4053
  %1182 = inttoptr i64 %1181 to i8*, !insn.addr !4053
  %1183 = load i8, i8* %1182, align 1, !insn.addr !4053
  %1184 = add i64 %rax.452.reload, %1176, !insn.addr !4054
  %1185 = inttoptr i64 %1184 to i8*, !insn.addr !4054
  store i8 %1183, i8* %1185, align 1, !insn.addr !4054
  %1186 = add nuw nsw i64 %rax.452.reload, 1, !insn.addr !4055
  %exitcond = icmp eq i64 %1186, 24
  store i64 %1186, i64* %rax.452.reg2mem, !insn.addr !4050
  br i1 %exitcond, label %dec_label_pc_6e7e, label %dec_label_pc_6ea3, !insn.addr !4050

dec_label_pc_6eb2:                                ; preds = %dec_label_pc_6bbd
  store i32 1264, i32* %993, align 8, !insn.addr !4056
  %1187 = call i64 @.Llzip_decode.0(i64 %657, i64 %715, i64 0, i64 %978), !insn.addr !4057
  %1188 = add i64 %652, 32, !insn.addr !4058
  %1189 = inttoptr i64 %1188 to i64*, !insn.addr !4058
  store i64 %1187, i64* %1189, align 8, !insn.addr !4058
  %1190 = icmp eq i64 %1187, 0, !insn.addr !4059
  br i1 %1190, label %dec_label_pc_6be3, label %dec_label_pc_6ed8, !insn.addr !4060

dec_label_pc_6ed8:                                ; preds = %dec_label_pc_6eb2
  store i32 472, i32* %993, align 8, !insn.addr !4061
  %1191 = call i64 @.Llzip_decode.0(i64 %657, i64 %715, i64 0, i64 %978), !insn.addr !4062
  %1192 = add i64 %652, 40, !insn.addr !4063
  %1193 = inttoptr i64 %1192 to i64*, !insn.addr !4063
  store i64 %1191, i64* %1193, align 8, !insn.addr !4063
  %1194 = icmp eq i64 %1191, 0, !insn.addr !4064
  br i1 %1194, label %dec_label_pc_6be3, label %dec_label_pc_6efe, !insn.addr !4065

dec_label_pc_6efe:                                ; preds = %dec_label_pc_6ed8
  store i32 2832, i32* %993, align 8, !insn.addr !4066
  %1195 = call i64 @.Llzip_decode.0(i64 %657, i64 %715, i64 0, i64 %978), !insn.addr !4067
  %1196 = add i64 %652, 48, !insn.addr !4068
  %1197 = inttoptr i64 %1196 to i64*, !insn.addr !4068
  store i64 %1195, i64* %1197, align 8, !insn.addr !4068
  %1198 = icmp eq i64 %1195, 0, !insn.addr !4069
  %1199 = icmp eq i1 %1198, false, !insn.addr !4070
  store i64 %978, i64* %rcx.18.reg2mem, !insn.addr !4070
  store i64 %639, i64* %r8.13.reg2mem, !insn.addr !4070
  br i1 %1199, label %dec_label_pc_6beb, label %dec_label_pc_6be3, !insn.addr !4070

dec_label_pc_6f31:                                ; preds = %dec_label_pc_5aaa, %dec_label_pc_5a80
  ret i64 0, !insn.addr !4071

; uselistorder directives
  uselistorder i64 %1195, { 1, 0 }
  uselistorder i64 %1191, { 1, 0 }
  uselistorder i64 %1187, { 1, 0 }
  uselistorder i64 %rax.452.reload, { 0, 2, 1 }
  uselistorder i64 %1159, { 1, 0 }
  uselistorder i64 %1152, { 1, 0 }
  uselistorder i64 %1133, { 1, 0 }
  uselistorder i64 %1004, { 0, 4, 1, 3, 2, 5 }
  uselistorder i64 %rcx.18.reload, { 1, 0 }
  uselistorder i64 %r8.13.reload, { 1, 0 }
  uselistorder i64 %998, { 1, 0 }
  uselistorder i64 %994, { 1, 0 }
  uselistorder i64 %978, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i64 %rbx.10.reload, { 1, 2, 0 }
  uselistorder i64 %r14.8.reload, { 1, 2, 0 }
  uselistorder i64 %969, { 1, 0, 2 }
  uselistorder i64 %r14.7.reload, { 0, 3, 2, 1 }
  uselistorder i64 %960, { 1, 0 }
  uselistorder i64 %935, { 1, 0, 2 }
  uselistorder i64 %rbx.9.reload, { 0, 3, 2, 1 }
  uselistorder i64 %rcx.17.reload, { 1, 0 }
  uselistorder i64 %r9.8.reload, { 1, 0 }
  uselistorder i64 %r14.6.reload, { 1, 0 }
  uselistorder i64 %900, { 0, 1, 2, 4, 3, 5 }
  uselistorder i64 %891, { 1, 0, 2 }
  uselistorder i64 %882, { 1, 0 }
  uselistorder i64 %r9.6.reload, { 3, 0, 1, 2 }
  uselistorder i64 %866, { 1, 0 }
  uselistorder i64 %853, { 1, 0 }
  uselistorder i64 %833, { 1, 0 }
  uselistorder i64 %r9.363157.reload, { 1, 0 }
  uselistorder i64 %rbx.859159.reload, { 1, 3, 4, 5, 0, 2 }
  uselistorder i64 %r14.465155.reload, { 1, 2, 7, 3, 4, 5, 6, 9, 0, 8 }
  uselistorder i64 %815, { 1, 0 }
  uselistorder i8 %808, { 1, 0 }
  uselistorder i8 %792, { 1, 0 }
  uselistorder i64 %r9.2.ph83.reload, { 2, 3, 0, 1 }
  uselistorder i64* %755, { 1, 0 }
  uselistorder i64* %745, { 2, 1, 0, 3, 4, 5 }
  uselistorder i64* %741, { 1, 0, 2, 3 }
  uselistorder i64* %739, { 3, 4, 2, 1, 0, 5, 6 }
  uselistorder i64* %719, { 2, 1, 0, 3, 4 }
  uselistorder i32* %716, { 2, 1, 0, 3 }
  uselistorder i64 %715, { 4, 3, 2, 1, 0, 5, 6, 8, 7, 9 }
  uselistorder i8* %710, { 2, 0, 1 }
  uselistorder i64* %685, { 7, 6, 5, 2, 1, 3, 4, 0, 8 }
  uselistorder i64 %670, { 2, 1, 0, 3 }
  uselistorder i64 %662, { 1, 0 }
  uselistorder i64 %657, { 5, 4, 3, 2, 1, 6, 7, 0, 8 }
  uselistorder i64 %652, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10 }
  uselistorder i64 %rcx.14.reload, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i64 %r8.7.reload, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i64 %rcx.12.reload, { 1, 0, 2 }
  uselistorder i64 %608, { 1, 0 }
  uselistorder i64 %r14.0.reload, { 1, 0 }
  uselistorder i64 %583, { 4, 0, 2, 1, 3, 5 }
  uselistorder i64 %581, { 3, 1, 2, 0, 4 }
  uselistorder i64 %rbx.5.reload, { 1, 0 }
  uselistorder i64 %r12.2.reload, { 2, 1, 0 }
  uselistorder i64 %557, { 1, 0, 2 }
  uselistorder i64 %553, { 1, 0 }
  uselistorder i64 %540, { 1, 0 }
  uselistorder i64 %525, { 1, 0 }
  uselistorder i64 %524, { 1, 0 }
  uselistorder i64 %523, { 1, 0 }
  uselistorder i64 %515, { 1, 0, 2, 3 }
  uselistorder i64 %r8.5.reload, { 2, 1, 0 }
  uselistorder i64* %488, { 1, 0, 3, 4, 5, 2, 6 }
  uselistorder i64* %485, { 0, 1, 2, 3, 10, 8, 6, 7, 5, 9, 4 }
  uselistorder i64 %478, { 0, 2, 1 }
  uselistorder i64* %465, { 1, 2, 3, 0, 4, 5 }
  uselistorder i64 %464, { 1, 0, 2, 3, 4, 5 }
  uselistorder i64 %rcx.5.reload, { 0, 3, 2, 1 }
  uselistorder i64 %443, { 0, 2, 1, 3 }
  uselistorder i64 %426, { 0, 2, 1 }
  uselistorder i64 %413, { 0, 2, 1, 3 }
  uselistorder i64 %409, { 1, 0 }
  uselistorder i64 %395, { 11, 12, 10, 9, 14, 13, 3, 5, 4, 8, 7, 6, 15, 0, 2, 1, 16, 17, 18, 20, 19 }
  uselistorder i64 %346, { 1, 0 }
  uselistorder i32* %321, { 1, 0, 2, 3 }
  uselistorder i64 %316, { 1, 0 }
  uselistorder i64 %291, { 1, 0 }
  uselistorder i64 %287, { 1, 0 }
  uselistorder i64 %282, { 1, 0 }
  uselistorder i64 %271, { 0, 2, 1 }
  uselistorder i64 %256, { 1, 0 }
  uselistorder i64 %252, { 1, 0 }
  uselistorder i64 %251, { 1, 0 }
  uselistorder i64 %243, { 1, 0 }
  uselistorder i64 %229, { 1, 0 }
  uselistorder i64 %216, { 1, 0 }
  uselistorder i64 %rax.1.reload, { 0, 1, 3, 2 }
  uselistorder i64 %183, { 1, 0 }
  uselistorder i64 %158, { 1, 0 }
  uselistorder i64 %132, { 1, 0 }
  uselistorder i64* %125, { 0, 3, 4, 2, 1, 5, 6, 7, 8 }
  uselistorder i64 %115, { 2, 1, 3, 0, 4 }
  uselistorder i64 %114, { 1, 9, 0, 10, 2, 11, 16, 17, 14, 15, 3, 18, 4, 19, 20, 5, 6, 7, 21, 12, 13, 8, 22, 23, 24, 25 }
  uselistorder i64 %112, { 5, 4, 2, 3, 1, 0, 6, 7, 8 }
  uselistorder i64 %111, { 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 33, 32, 19, 20, 17, 18, 16, 14, 15, 12, 13, 10, 11, 8, 9, 34, 6, 7, 35, 5, 3, 4, 36, 37, 38, 39, 40, 41, 42, 43, 1, 2, 0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 63, 65, 72, 67, 70, 64, 69, 71, 73, 66 }
  uselistorder i64 %rax.050.reload, { 0, 2, 1 }
  uselistorder i64 %rdx.1.reload, { 0, 2, 1 }
  uselistorder i64 %rbx.0.reload, { 2, 1, 0 }
  uselistorder i64 %34, { 4, 5, 3, 6, 1, 2, 7, 8, 0, 9 }
  uselistorder i64 %spec.select, { 2, 1, 0 }
  uselistorder i64 %24, { 1, 0, 2, 3 }
  uselistorder i64 %7, { 1, 3, 0, 4, 2, 6, 9, 8, 7, 5 }
  uselistorder i64 %3, { 22, 21, 20, 18, 19, 17, 16, 15, 14, 33, 34, 35, 32, 31, 48, 47, 49, 46, 45, 52, 51, 53, 50, 44, 43, 42, 41, 40, 54, 38, 55, 56, 39, 36, 37, 30, 29, 28, 27, 26, 25, 24, 23, 13, 10, 11, 12, 9, 7, 8, 5, 6, 4, 67, 66, 64, 65, 63, 62, 61, 60, 59, 58, 57, 3, 2, 0, 1 }
  uselistorder i64* %stack_var_-2904, { 9, 7, 0, 8, 3, 4, 2, 10, 11, 12, 16, 5, 6, 13, 14, 15, 1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i64* %stack_var_-2432, { 1, 0 }
  uselistorder i64** %stack_var_-2764, { 3, 2, 1, 0 }
  uselistorder i64* %stack_var_-2720, { 1, 0, 2 }
  uselistorder i64* %stack_var_-2608, { 0, 2, 3, 1, 4 }
  uselistorder i64* %stack_var_-2520, { 1, 0, 2 }
  uselistorder i64* %rbx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.1.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.1.reg2mem, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 2, 3, 1, 4 }
  uselistorder i64* %rdx.2.reg2mem, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 2, 3, 1, 4 }
  uselistorder i64* %rsi.1.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.050.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.1.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.3.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.5.reg2mem, { 0, 2, 3, 1, 4 }
  uselistorder i64* %r8.1.reg2mem, { 0, 2, 3, 1, 4 }
  uselistorder i64* %r12.1.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge14.in.in.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbx.292.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r8.490.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rbx.489.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r8.5.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rsi.2.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rdi.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %r8.6.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbx.5.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r12.2.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.10.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r12.3.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r14.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.14.reg2mem, { 0, 5, 3, 6, 1, 2, 7, 4, 8 }
  uselistorder i64* %r8.7.reg2mem, { 0, 5, 3, 6, 1, 2, 7, 4, 8 }
  uselistorder i64* %.reg2mem202, { 1, 2, 0 }
  uselistorder i64* %.reg2mem204, { 1, 2, 0 }
  uselistorder i64* %rbx.7.reg2mem, { 6, 3, 2, 5, 1, 4, 0, 7 }
  uselistorder i64* %r8.8.reg2mem, { 6, 3, 2, 5, 1, 4, 0, 7 }
  uselistorder i64* %r9.1.reg2mem, { 6, 3, 2, 5, 1, 4, 0, 7 }
  uselistorder i64* %r14.2.reg2mem, { 6, 3, 2, 5, 1, 4, 0, 7 }
  uselistorder i8* %rax.3.reg2mem, { 0, 4, 5, 2, 3, 1 }
  uselistorder i64* %r10.3.reg2mem, { 0, 4, 5, 2, 3, 1 }
  uselistorder i64* %r10.4.reg2mem, { 0, 2, 3, 1 }
  uselistorder i64* %rbx.8.lcssa.reg2mem, { 2, 1, 0 }
  uselistorder i64* %r14.4.lcssa.reg2mem, { 2, 1, 0 }
  uselistorder i64* %r9.4.reg2mem, { 2, 1, 0 }
  uselistorder i64* %rbx.859159.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdi.161158.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r9.363157.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r10.564156.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r14.465155.reg2mem, { 1, 0, 2 }
  uselistorder i64* %.reg2mem214, { 1, 0, 2 }
  uselistorder i64* %r9.5.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge11.reg2mem, { 0, 2, 1 }
  uselistorder i64* %r9.6.reg2mem, { 0, 2, 3, 4, 1, 5 }
  uselistorder i64* %rcx.17.reg2mem, { 0, 2, 1 }
  uselistorder i64* %r9.8.reg2mem, { 0, 2, 1 }
  uselistorder i64* %r10.8.reg2mem, { 0, 2, 1 }
  uselistorder i64* %r14.6.reg2mem, { 0, 2, 1 }
  uselistorder i64* %.reg2mem216, { 1, 0, 2 }
  uselistorder i64* %rdi.2.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.10.reg2mem, { 0, 2, 1, 3 }
  uselistorder i64* %r14.8.reg2mem, { 0, 2, 1, 3 }
  uselistorder i64* %rcx.18.reg2mem, { 6, 0, 7, 2, 1, 3, 5, 4, 8, 9, 10, 11 }
  uselistorder i64* %r8.13.reg2mem, { 6, 0, 7, 2, 1, 3, 5, 4, 8, 9, 10, 11 }
  uselistorder i64* %rax.452.reg2mem, { 2, 0, 1 }
  uselistorder i64 (i64, i64, i64, i64, i64)* @.Llzma_check_init.part.0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i64 (i64, i64, i64)* @lzma_free, { 12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 11 }
  uselistorder i32 -16711936, { 0, 1, 2, 3, 9, 4, 8, 10, 5, 6, 11, 12, 13, 14, 15, 7 }
  uselistorder i16 4160, { 0, 1, 4, 2, 3 }
  uselistorder i64 (i64, i64, i64)* @.Llzma_block_buffer_encode.0, { 2, 1, 3, 0 }
  uselistorder i64 304, { 1, 0 }
  uselistorder i64 127, { 0, 3, 4, 1, 2 }
  uselistorder i64 (i64, i64, i32, i64)* @.Lstream_encoder_mt_init.1, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 112, { 1, 0 }
  uselistorder i64 392, { 1, 2, 0 }
  uselistorder i64 (i64, i64, i64, i64)* @function_2c40, { 1, 0 }
  uselistorder i64 (i64, i64, i64, i64, i64)* @.Llzma_properties_size.0, { 5, 4, 3, 2, 1, 8, 7, 6, 0 }
  uselistorder i64 (i64, i64, i32, i32, i32)* @.Lstream_encoder_update.1, { 1, 0, 2 }
  uselistorder i64 (i64, i64, i32, i32, i32)* @.Lstream_encoder_update.0, { 2, 1, 4, 0, 3 }
  uselistorder i64 384, { 1, 2, 0 }
  uselistorder i64 (i64, i64, i64, i64, i64, i64*, i64)* @function_2a30, { 2, 1, 0 }
  uselistorder i64 896, { 1, 0 }
  uselistorder i64 (i64, i64, i64)* @.Lcrc64_generic.0, { 1, 0 }
  uselistorder i64 (i64, i64, i64, i64)* @.Llzip_decode.0, { 15, 14, 13, 12, 11, 10, 9, 0, 8, 7, 6, 5, 4, 3, 1, 16, 2 }
  uselistorder i64 (i64, i64*, i64)* @.Lmicrolzma_decode.0, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i64 2808, { 1, 0 }
  uselistorder i64 (i64, i64, i32, i64)* @.Lcrc_init.0, { 21, 20, 19, 18, 17, 16, 15, 14, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 12, 0 }
  uselistorder i64 (i64, i64, i64, i64)* @lzma_alloc, { 23, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 21 }
  uselistorder i64 1296, { 1, 0 }
  uselistorder i64 280, { 2, 0, 3, 4, 5, 1 }
  uselistorder i64 288, { 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 3, 4, 5 }
  uselistorder i64 272, { 1, 0 }
  uselistorder i64 296, { 1, 2, 0 }
  uselistorder i64 (i64, i64*, i64, i64)* @.Llzma_check_update.0, { 6, 5, 4, 2, 1, 7, 3, 0 }
  uselistorder i64 552, { 3, 4, 0, 1, 2 }
  uselistorder i64 672, { 1, 0 }
  uselistorder i64 2856, { 1, 2, 0 }
  uselistorder i64 (i64)* @.Lstream_decoder_memconfig.part.1, { 12, 11, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9 }
  uselistorder i64 -4096, { 0, 7, 8, 1, 9, 3, 2, 10, 4, 11, 5, 12, 6, 13 }
  uselistorder label %dec_label_pc_6ea3, { 1, 0 }
  uselistorder label %dec_label_pc_6beb, { 5, 6, 1, 0, 2, 4, 3, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_6b37, { 1, 0, 2 }
  uselistorder label %dec_label_pc_67f6, { 1, 2, 0 }
  uselistorder label %dec_label_pc_67e8, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_66e2.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_6730, { 5, 2, 1, 4, 0, 3, 6 }
  uselistorder label %dec_label_pc_66e2, { 1, 0 }
  uselistorder label %dec_label_pc_65aa, { 3, 2, 4, 0, 1, 5, 6, 7 }
  uselistorder label %dec_label_pc_63c3, { 1, 0 }
  uselistorder label %dec_label_pc_6320, { 1, 0 }
  uselistorder label %dec_label_pc_6320.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_62ad, { 1, 0 }
  uselistorder label %dec_label_pc_5ac2, { 1, 0 }
  uselistorder label %dec_label_pc_5a42, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 3, 2, 0, 1 }
}

define i64 @.Llzma_delta_props_encoder(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6f50:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !4072
  %rax.0.reg2mem = alloca i64, !insn.addr !4072
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %stack_var_-320 = alloca i64, align 8
  %stack_var_-136 = alloca i64, align 8
  %stack_var_-160 = alloca i64, align 8
  %stack_var_-296 = alloca i64, align 8
  %3 = bitcast i64* %stack_var_-296 to i8*, !insn.addr !4073
  call void @__asm_rep_stosd_memset(i8* nonnull %3, i32 0, i64 34), !insn.addr !4073
  %4 = bitcast i64* %stack_var_-160 to i8*, !insn.addr !4074
  call void @__asm_rep_stosd_memset(i8* nonnull %4, i32 0, i64 34), !insn.addr !4074
  %5 = load i64, i64* inttoptr (i64 28551 to i64*), align 8, !insn.addr !4075
  store i64 %5, i64* %stack_var_-320, align 8, !insn.addr !4076
  %6 = call i64 @lzma_check_init(i64* nonnull %stack_var_-136), !insn.addr !4077
  %7 = ptrtoint i64* %stack_var_-296 to i64, !insn.addr !4078
  %8 = ptrtoint i64* %stack_var_-320 to i64, !insn.addr !4079
  %9 = call i64 @.Llzma_delta_decoder_init.part.0(i64* nonnull %stack_var_-296), !insn.addr !4080
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !4080
  br label %dec_label_pc_6fc3, !insn.addr !4080

dec_label_pc_6fc3:                                ; preds = %dec_label_pc_6fc7, %dec_label_pc_6f50
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = trunc i64 %rax.0.reload to i32, !insn.addr !4081
  %11 = icmp eq i32 %10, 0, !insn.addr !4081
  br i1 %11, label %dec_label_pc_701e, label %dec_label_pc_6fc7, !insn.addr !4082

dec_label_pc_6fc7:                                ; preds = %dec_label_pc_6fc3
  %12 = call i64 @.Llzma_delta_decoder_init.part.0(i64* nonnull %stack_var_-296), !insn.addr !4083
  %13 = trunc i64 %12 to i32, !insn.addr !4084
  %14 = icmp eq i32 %13, 5, !insn.addr !4084
  %15 = icmp eq i1 %14, false, !insn.addr !4085
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !4085
  br i1 %15, label %dec_label_pc_6fc3, label %dec_label_pc_6fd9, !insn.addr !4085

dec_label_pc_6fd9:                                ; preds = %dec_label_pc_6fc7
  %16 = inttoptr i64 %arg1 to i64*, !insn.addr !4086
  store i64 1, i64* %16, align 8, !insn.addr !4086
  %17 = add i64 %arg1, 8, !insn.addr !4087
  %18 = inttoptr i64 %17 to i64*, !insn.addr !4087
  store i64 0, i64* %18, align 8, !insn.addr !4087
  %19 = add i64 %arg1, 16, !insn.addr !4088
  %20 = inttoptr i64 %19 to i64*, !insn.addr !4088
  store i64 0, i64* %20, align 8, !insn.addr !4088
  %21 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !4089
  %22 = inttoptr i64 %21 to i64*, !insn.addr !4089
  store i64 0, i64* %22, align 8, !insn.addr !4089
  %23 = add i64 %arg1, 32, !insn.addr !4090
  %24 = inttoptr i64 %23 to i64*, !insn.addr !4090
  store i64 0, i64* %24, align 8, !insn.addr !4090
  %25 = call %2 @__asm_cpuid.2(i32 0), !insn.addr !4091
  %26 = extractvalue %2 %25, 0, !insn.addr !4091
  %27 = icmp eq i32 %26, 0, !insn.addr !4092
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4093
  br i1 %27, label %dec_label_pc_7043, label %dec_label_pc_6fff, !insn.addr !4093

dec_label_pc_6fff:                                ; preds = %dec_label_pc_6fd9
  %28 = call %3 @__asm_cpuid.3(i32 1), !insn.addr !4094
  %29 = extractvalue %3 %28, 0, !insn.addr !4094
  %30 = extractvalue %3 %28, 1, !insn.addr !4094
  %31 = extractvalue %3 %28, 2, !insn.addr !4094
  %32 = extractvalue %3 %28, 3, !insn.addr !4094
  %33 = inttoptr i64 %17 to i32*, !insn.addr !4095
  store i32 %29, i32* %33, align 4, !insn.addr !4095
  %34 = inttoptr i64 %19 to i32*, !insn.addr !4096
  store i32 %30, i32* %34, align 4, !insn.addr !4096
  %35 = inttoptr i64 %21 to i32*, !insn.addr !4097
  store i32 %31, i32* %35, align 4, !insn.addr !4097
  %36 = inttoptr i64 %23 to i32*, !insn.addr !4098
  store i32 %32, i32* %36, align 4, !insn.addr !4098
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4098
  br label %dec_label_pc_7043, !insn.addr !4098

dec_label_pc_701e:                                ; preds = %dec_label_pc_6fc3
  %37 = call i64 @.Lmicrolzma_encoder_init.1(i64* nonnull %stack_var_-160, i64 0, i64 %7, i64 %8, i64 %2, i64 %1), !insn.addr !4099
  store i64 %37, i64* %storemerge.reg2mem, !insn.addr !4099
  br label %dec_label_pc_7043, !insn.addr !4099

dec_label_pc_7043:                                ; preds = %dec_label_pc_6fd9, %dec_label_pc_6fff, %dec_label_pc_701e
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4100

; uselistorder directives
  uselistorder i64* %stack_var_-296, { 0, 1, 3, 2 }
  uselistorder i64* %rax.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i32 5, { 2, 0, 1, 3 }
  uselistorder i64 (i64*)* @.Llzma_delta_decoder_init.part.0, { 1, 0 }
  uselistorder label %dec_label_pc_7043, { 2, 1, 0 }
}

define i64 @function_7050(i64 %arg1) local_unnamed_addr {
dec_label_pc_7050:
  %merge.reg2mem = alloca i64, !insn.addr !4101
  %rax.0.reg2mem = alloca i64, !insn.addr !4101
  %0 = trunc i64 %arg1 to i8
  %1 = icmp eq i8 %0, 0, !insn.addr !4101
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4102
  store i64 0, i64* %merge.reg2mem, !insn.addr !4102
  br i1 %1, label %dec_label_pc_7064, label %dec_label_pc_705a, !insn.addr !4102

dec_label_pc_705a:                                ; preds = %dec_label_pc_7050, %dec_label_pc_705a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %2 = add i64 %rax.0.reload, 1, !insn.addr !4103
  %3 = add i64 %2, %arg1, !insn.addr !4104
  %4 = inttoptr i64 %3 to i8*, !insn.addr !4104
  %5 = load i8, i8* %4, align 1, !insn.addr !4104
  %6 = icmp eq i8 %5, 0, !insn.addr !4104
  %7 = icmp eq i1 %6, false, !insn.addr !4105
  store i64 %2, i64* %rax.0.reg2mem, !insn.addr !4105
  store i64 %2, i64* %merge.reg2mem, !insn.addr !4105
  br i1 %7, label %dec_label_pc_705a, label %dec_label_pc_7064, !insn.addr !4105

dec_label_pc_7064:                                ; preds = %dec_label_pc_705a, %dec_label_pc_7050
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !4106

; uselistorder directives
  uselistorder i64* %rax.0.reg2mem, { 2, 0, 1 }
  uselistorder label %dec_label_pc_705a, { 1, 0 }
}

define i64 @function_7070(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7070:
  %rax.0.reg2mem = alloca i64, !insn.addr !4107
  %rdx.0.reg2mem = alloca i64, !insn.addr !4107
  %0 = icmp eq i64 %arg2, 0, !insn.addr !4108
  %1 = icmp eq i1 %0, false, !insn.addr !4109
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !4109
  store i64 %arg2, i64* %rax.0.reg2mem, !insn.addr !4109
  br i1 %1, label %dec_label_pc_7088, label %dec_label_pc_7091, !insn.addr !4109

dec_label_pc_707f:                                ; preds = %dec_label_pc_7088
  %2 = add i64 %rdx.0.reload, 1, !insn.addr !4110
  %3 = icmp eq i64 %2, %arg2, !insn.addr !4111
  store i64 %2, i64* %rdx.0.reg2mem, !insn.addr !4112
  store i64 %arg2, i64* %rax.0.reg2mem, !insn.addr !4112
  br i1 %3, label %dec_label_pc_7091, label %dec_label_pc_7088, !insn.addr !4112

dec_label_pc_7088:                                ; preds = %dec_label_pc_7070, %dec_label_pc_707f
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %4 = add i64 %rdx.0.reload, %arg1, !insn.addr !4113
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4113
  %6 = load i8, i8* %5, align 1, !insn.addr !4113
  %7 = icmp eq i8 %6, 0, !insn.addr !4113
  %8 = icmp eq i1 %7, false, !insn.addr !4114
  store i64 %rdx.0.reload, i64* %rax.0.reg2mem, !insn.addr !4114
  br i1 %8, label %dec_label_pc_707f, label %dec_label_pc_7091, !insn.addr !4114

dec_label_pc_7091:                                ; preds = %dec_label_pc_7088, %dec_label_pc_707f, %dec_label_pc_7070
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !4115

; uselistorder directives
  uselistorder i64 %rdx.0.reload, { 0, 2, 1 }
  uselistorder i64* %rdx.0.reg2mem, { 0, 2, 1 }
  uselistorder i64 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_7088, { 1, 0 }
}

define i64 @function_70a0(i64 %arg1, i128* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_70a0:
  %0 = icmp ne i64 %arg3, 0, !insn.addr !4116
  %retval = sext i1 %0 to i64
  ret i64 %retval
}

define i64 @function_7110(i64 %arg1, i64 %arg2, i16 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_7110:
  %0 = icmp ne i16 %arg3, 0, !insn.addr !4117
  %spec.select = sext i1 %0 to i64
  ret i64 %spec.select
}

define i64 @function_7190(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7190:
  %merge.reg2mem = alloca i64, !insn.addr !4118
  %rax.0.reg2mem = alloca i64, !insn.addr !4118
  %0 = trunc i64 %arg2 to i32, !insn.addr !4119
  %1 = add i64 %arg1, -8
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4118
  br label %dec_label_pc_7192, !insn.addr !4118

dec_label_pc_7192:                                ; preds = %dec_label_pc_7196, %dec_label_pc_7190
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %2 = trunc i64 %rax.0.reload to i32, !insn.addr !4119
  %3 = icmp ult i32 %2, %0, !insn.addr !4119
  %4 = icmp eq i1 %3, false, !insn.addr !4120
  store i64 0, i64* %merge.reg2mem, !insn.addr !4120
  br i1 %4, label %dec_label_pc_71a1, label %dec_label_pc_7196, !insn.addr !4120

dec_label_pc_7196:                                ; preds = %dec_label_pc_7192
  %5 = add i64 %rax.0.reload, 1, !insn.addr !4121
  %6 = mul i64 %5, 8, !insn.addr !4122
  %7 = add i64 %1, %6, !insn.addr !4122
  %8 = inttoptr i64 %7 to i64*, !insn.addr !4122
  %9 = load i64, i64* %8, align 8, !insn.addr !4122
  %10 = icmp eq i64 %9, 0, !insn.addr !4122
  %11 = icmp eq i1 %10, false, !insn.addr !4123
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !4123
  store i64 1, i64* %merge.reg2mem, !insn.addr !4123
  br i1 %11, label %dec_label_pc_7192, label %dec_label_pc_71a1, !insn.addr !4123

dec_label_pc_71a1:                                ; preds = %dec_label_pc_7192, %dec_label_pc_7196
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !4124

; uselistorder directives
  uselistorder i64* %rax.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %merge.reg2mem, { 0, 2, 1 }
  uselistorder label %dec_label_pc_71a1, { 1, 0 }
}

define i64 @function_71b0(i64* %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_71b0:
  %0 = icmp eq i64* %arg1, null, !insn.addr !4125
  br i1 %0, label %dec_label_pc_72be, label %dec_label_pc_71cd, !insn.addr !4126

dec_label_pc_71cd:                                ; preds = %dec_label_pc_71b0
  %1 = trunc i64 %arg2 to i32, !insn.addr !4127
  %2 = icmp eq i32 %1, 0, !insn.addr !4127
  %3 = icmp eq i64* %arg4, null, !insn.addr !4128
  %or.cond = or i1 %2, %3
  %4 = icmp eq i64 %arg5, 0, !insn.addr !4129
  %or.cond4 = or i1 %or.cond, %4
  %5 = icmp eq i64 %arg6, 0, !insn.addr !4130
  %or.cond5 = or i1 %or.cond4, %5
  br i1 %or.cond5, label %dec_label_pc_72be, label %dec_label_pc_71f3, !insn.addr !4131

dec_label_pc_71f3:                                ; preds = %dec_label_pc_71cd
  %6 = add i64 %arg6, 160, !insn.addr !4132
  %7 = call i64 @function_7190(i64 %6, i64 6), !insn.addr !4133
  ret i64 0

dec_label_pc_72be:                                ; preds = %dec_label_pc_71b0, %dec_label_pc_71cd
  ret i64 0, !insn.addr !4134

; uselistorder directives
  uselistorder i64 %arg6, { 1, 0 }
  uselistorder label %dec_label_pc_72be, { 1, 0 }
}

define i64 @function_72d0(i128* %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_72d0:
  ret i64 0
}

define i64 @function_7340(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_7340:
  %rax.0.reg2mem = alloca i64, !insn.addr !4135
  %rbp.0.reg2mem = alloca i64, !insn.addr !4135
  %rbx.0.reg2mem = alloca i32, !insn.addr !4135
  %0 = icmp eq i64 %arg5, 0, !insn.addr !4136
  %1 = icmp ult i64 %arg2, 6
  %2 = or i1 %1, %0
  %3 = icmp eq i64 %arg4, 0, !insn.addr !4137
  %4 = or i1 %3, %2
  %5 = icmp eq i1 %4, false
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4138
  br i1 %5, label %dec_label_pc_7374, label %dec_label_pc_7405, !insn.addr !4138

dec_label_pc_7374:                                ; preds = %dec_label_pc_7340
  %6 = add i64 %arg5, 256, !insn.addr !4139
  %7 = inttoptr i64 %6 to i64*, !insn.addr !4139
  %8 = load i64, i64* %7, align 8, !insn.addr !4139
  %9 = icmp eq i64 %8, 0, !insn.addr !4139
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4140
  br i1 %9, label %dec_label_pc_7405, label %dec_label_pc_7381, !insn.addr !4140

dec_label_pc_7381:                                ; preds = %dec_label_pc_7374
  store i64 0, i64* %arg3, align 8, !insn.addr !4141
  %10 = add i64 %arg5, 104, !insn.addr !4142
  %11 = inttoptr i64 %10 to i64*, !insn.addr !4142
  %12 = load i64, i64* %11, align 8, !insn.addr !4142
  %13 = icmp ne i64 %12, 0, !insn.addr !4143
  %14 = trunc i64 %12 to i32, !insn.addr !4144
  %15 = icmp ult i32 %14, 16385
  %or.cond3 = icmp eq i1 %13, %15
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4145
  br i1 %or.cond3, label %dec_label_pc_73a3, label %dec_label_pc_7405, !insn.addr !4145

dec_label_pc_73a3:                                ; preds = %dec_label_pc_7381
  %16 = add i32 %14, 7, !insn.addr !4146
  %17 = udiv i32 %16, 8, !insn.addr !4147
  %18 = icmp ult i32 %16, 8
  %19 = zext i32 %17 to i64, !insn.addr !4147
  %20 = add i64 %arg2, -6, !insn.addr !4148
  %21 = icmp ult i64 %20, %19, !insn.addr !4149
  %or.cond5 = or i1 %18, %21
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4150
  br i1 %or.cond5, label %dec_label_pc_7405, label %dec_label_pc_73b6, !insn.addr !4150

dec_label_pc_73b6:                                ; preds = %dec_label_pc_73a3
  %22 = add i64 %arg1, 4, !insn.addr !4151
  %23 = inttoptr i64 %22 to i8*, !insn.addr !4151
  store i8 0, i8* %23, align 1, !insn.addr !4151
  %sext = mul i64 %12, 4294967296
  %24 = ashr exact i64 %sext, 32, !insn.addr !4152
  %25 = icmp eq i64 %24, %19, !insn.addr !4153
  %26 = icmp eq i1 %25, false, !insn.addr !4154
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4154
  br i1 %26, label %dec_label_pc_7405, label %dec_label_pc_73d5, !insn.addr !4154

dec_label_pc_73d5:                                ; preds = %dec_label_pc_73b6
  %27 = add i64 %arg1, 5, !insn.addr !4155
  %28 = inttoptr i64 %27 to i8*, !insn.addr !4156
  %29 = load i8, i8* %28, align 1, !insn.addr !4156
  %30 = icmp slt i8 %29, 0, !insn.addr !4156
  %31 = icmp eq i1 %30, false, !insn.addr !4157
  br i1 %31, label %dec_label_pc_73e3, label %dec_label_pc_73dc, !insn.addr !4157

dec_label_pc_73dc:                                ; preds = %dec_label_pc_73d5
  %32 = add nuw nsw i64 %19, 1, !insn.addr !4158
  %33 = add nuw nsw i32 %17, 1, !insn.addr !4159
  store i32 %33, i32* %rbx.0.reg2mem, !insn.addr !4160
  store i64 %32, i64* %rbp.0.reg2mem, !insn.addr !4160
  br label %dec_label_pc_73f2, !insn.addr !4160

dec_label_pc_73e3:                                ; preds = %dec_label_pc_73d5
  %34 = call i64 @function_1b10(i64 %22, i64 %27, i64 %19), !insn.addr !4161
  store i32 %17, i32* %rbx.0.reg2mem, !insn.addr !4161
  store i64 %19, i64* %rbp.0.reg2mem, !insn.addr !4161
  br label %dec_label_pc_73f2, !insn.addr !4161

dec_label_pc_73f2:                                ; preds = %dec_label_pc_73e3, %dec_label_pc_73dc
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %rbx.0.reload = load i32, i32* %rbx.0.reg2mem
  %35 = add nsw i64 %rbp.0.reload, 4, !insn.addr !4162
  %36 = call i32 @llvm.bswap.i32(i32 %rbx.0.reload), !insn.addr !4163
  %37 = inttoptr i64 %arg1 to i32*, !insn.addr !4164
  store i32 %36, i32* %37, align 4, !insn.addr !4164
  store i64 %35, i64* %arg3, align 8, !insn.addr !4165
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !4165
  br label %dec_label_pc_7405, !insn.addr !4165

dec_label_pc_7405:                                ; preds = %dec_label_pc_7381, %dec_label_pc_7374, %dec_label_pc_73a3, %dec_label_pc_73b6, %dec_label_pc_7340, %dec_label_pc_73f2
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !4166

; uselistorder directives
  uselistorder i64 %27, { 1, 0 }
  uselistorder i64 %19, { 0, 3, 2, 4, 1 }
  uselistorder i32 %17, { 0, 2, 1 }
  uselistorder i32* %rbx.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbp.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.0.reg2mem, { 0, 6, 4, 3, 2, 1, 5 }
  uselistorder label %dec_label_pc_7405, { 5, 3, 2, 0, 1, 4 }
}

define i64 @function_7420(i64 %arg1, i64 %arg2, i128* %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_7420:
  %0 = alloca i128
  %1 = alloca i64
  %2 = load i64, i64* %1
  %3 = load i128, i128* %0
  %4 = load i128, i128* %0
  %5 = load i128, i128* %0
  %6 = load i128, i128* %0
  %7 = load i128, i128* %0
  %8 = load i128, i128* %0
  %9 = load i128, i128* %0
  %10 = load i128, i128* %0
  %stack_var_-208 = alloca i32, align 4
  %11 = trunc i64 %2 to i8, !insn.addr !4167
  %12 = icmp eq i8 %11, 0, !insn.addr !4167
  br i1 %12, label %dec_label_pc_7474, label %dec_label_pc_743d, !insn.addr !4168

dec_label_pc_743d:                                ; preds = %dec_label_pc_7420
  %13 = call i64 @__asm_movaps(i128 %10), !insn.addr !4169
  %14 = call i64 @__asm_movaps(i128 %9), !insn.addr !4170
  %15 = call i64 @__asm_movaps(i128 %8), !insn.addr !4171
  %16 = call i64 @__asm_movaps(i128 %7), !insn.addr !4172
  %17 = call i64 @__asm_movaps(i128 %6), !insn.addr !4173
  %18 = call i64 @__asm_movaps(i128 %5), !insn.addr !4174
  %19 = call i64 @__asm_movaps(i128 %4), !insn.addr !4175
  %20 = call i64 @__asm_movaps(i128 %3), !insn.addr !4176
  br label %dec_label_pc_7474, !insn.addr !4176

dec_label_pc_7474:                                ; preds = %dec_label_pc_743d, %dec_label_pc_7420
  %21 = ptrtoint i32* %stack_var_-208 to i64, !insn.addr !4177
  ret i64 %21, !insn.addr !4178

; uselistorder directives
  uselistorder i128* %0, { 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i64 @function_74d0(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_74d0:
  %storemerge.reg2mem = alloca i64, !insn.addr !4179
  %rdx.1.reg2mem = alloca i64, !insn.addr !4179
  %rcx.0.reg2mem = alloca i64, !insn.addr !4179
  %0 = icmp eq i64 %arg1, 0, !insn.addr !4179
  %1 = icmp eq i64 %arg3, 0, !insn.addr !4180
  %or.cond = or i1 %0, %1
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4181
  br i1 %or.cond, label %dec_label_pc_7522, label %dec_label_pc_74da, !insn.addr !4181

dec_label_pc_74da:                                ; preds = %dec_label_pc_74d0
  %2 = add i64 %arg3, 8, !insn.addr !4182
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4182
  %4 = load i64, i64* %3, align 8, !insn.addr !4182
  %5 = icmp ne i64 %4, 0, !insn.addr !4183
  %6 = add i64 %4, -8, !insn.addr !4184
  %7 = icmp ult i64 %6, 128
  %or.cond3 = icmp eq i1 %5, %7
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4185
  br i1 %or.cond3, label %dec_label_pc_74fc, label %dec_label_pc_7522, !insn.addr !4185

dec_label_pc_74fc:                                ; preds = %dec_label_pc_74da
  %8 = udiv i64 %4, 8, !insn.addr !4186
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !4187
  br label %dec_label_pc_7504, !insn.addr !4187

dec_label_pc_7504:                                ; preds = %dec_label_pc_750b, %dec_label_pc_74fc
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %9 = mul i64 %rcx.0.reload, 8, !insn.addr !4188
  %10 = add i64 %9, %arg1, !insn.addr !4188
  %11 = inttoptr i64 %10 to i64*, !insn.addr !4188
  %12 = load i64, i64* %11, align 8, !insn.addr !4188
  %13 = icmp eq i64 %12, 0, !insn.addr !4188
  store i64 %rcx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !4189
  br i1 %13, label %dec_label_pc_7519, label %dec_label_pc_750b, !insn.addr !4189

dec_label_pc_750b:                                ; preds = %dec_label_pc_7504
  %14 = add nuw nsw i64 %rcx.0.reload, 1, !insn.addr !4190
  %15 = and i64 %14, 4294967295, !insn.addr !4190
  %16 = icmp ult i64 %15, %8, !insn.addr !4191
  store i64 %15, i64* %rcx.0.reg2mem, !insn.addr !4192
  store i64 %8, i64* %rdx.1.reg2mem, !insn.addr !4192
  br i1 %16, label %dec_label_pc_7504, label %dec_label_pc_7519, !insn.addr !4192

dec_label_pc_7519:                                ; preds = %dec_label_pc_750b, %dec_label_pc_7504
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  store i64 %rdx.1.reload, i64* %arg2, align 8, !insn.addr !4193
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !4194
  br label %dec_label_pc_7522, !insn.addr !4194

dec_label_pc_7522:                                ; preds = %dec_label_pc_74da, %dec_label_pc_74d0, %dec_label_pc_7519
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4195

; uselistorder directives
  uselistorder i64 %rcx.0.reload, { 1, 0, 2 }
  uselistorder i64* %rcx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_7522, { 2, 0, 1 }
}

define i64 @function_7530(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_7530:
  %0 = alloca i128
  %1 = load i128, i128* %0
  %2 = load i128, i128* %0
  %stack_var_-4146 = alloca i64, align 8
  %3 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !4196
  %4 = bitcast i64* %stack_var_-4146 to i8*, !insn.addr !4197
  call void @__asm_rep_stosb_memset(i8* nonnull %4, i8 0, i64 4090), !insn.addr !4197
  call void @__asm_movups(i128 %2, i128 %3), !insn.addr !4198
  ret i64 0

; uselistorder directives
  uselistorder i128* %0, { 1, 0 }
}

define i64 @function_7650(i64 %arg1, i128* %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i128* %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_7650:
  %0 = alloca i128
  %r9.0.reg2mem = alloca i64, !insn.addr !4199
  %rsi.1.reg2mem = alloca i64, !insn.addr !4199
  %.reg2mem = alloca i64, !insn.addr !4199
  %rax.1.reg2mem = alloca i64, !insn.addr !4199
  %rax.0.reg2mem = alloca i64, !insn.addr !4199
  %1 = load i128, i128* %0
  %stack_var_-189 = alloca i64, align 8
  %stack_var_-193 = alloca i128, align 8
  %stack_var_-177 = alloca i64, align 8
  %2 = icmp eq i64 %arg1, 0, !insn.addr !4200
  %3 = icmp eq i128* %arg2, null, !insn.addr !4201
  %or.cond5 = or i1 %2, %3
  %4 = icmp eq i64 %arg4, 0, !insn.addr !4202
  %or.cond6 = or i1 %or.cond5, %4
  %5 = icmp ugt i64 %arg3, -34
  %or.cond7.not = or i1 %5, %or.cond6
  %6 = icmp eq i64 %arg7, 0, !insn.addr !4203
  %or.cond8 = or i1 %or.cond7.not, %6
  br i1 %or.cond8, label %dec_label_pc_78c3, label %dec_label_pc_76ae, !insn.addr !4204

dec_label_pc_76ae:                                ; preds = %dec_label_pc_7650
  %7 = add i64 %arg3, 32, !insn.addr !4205
  %8 = icmp ugt i64 %7, %arg4, !insn.addr !4206
  br i1 %8, label %dec_label_pc_78c3, label %dec_label_pc_76ba, !insn.addr !4207

dec_label_pc_76ba:                                ; preds = %dec_label_pc_76ae
  %9 = add i64 %arg7, 8, !insn.addr !4208
  %10 = inttoptr i64 %9 to i64*, !insn.addr !4208
  %11 = load i64, i64* %10, align 8, !insn.addr !4208
  %12 = icmp eq i64 %11, 0, !insn.addr !4209
  br i1 %12, label %dec_label_pc_78c3, label %dec_label_pc_76c7, !insn.addr !4210

dec_label_pc_76c7:                                ; preds = %dec_label_pc_76ba
  %13 = ptrtoint i128* %arg2 to i64
  %14 = trunc i64 %arg1 to i32
  %15 = icmp eq i32 %14, 2, !insn.addr !4211
  br i1 %15, label %dec_label_pc_7732, label %dec_label_pc_76ce, !insn.addr !4212

dec_label_pc_76ce:                                ; preds = %dec_label_pc_76c7
  %16 = ptrtoint i128* %arg6 to i64
  %17 = icmp sgt i32 %14, 2, !insn.addr !4213
  br i1 %17, label %dec_label_pc_76f4, label %dec_label_pc_76d0, !insn.addr !4213

dec_label_pc_76d0:                                ; preds = %dec_label_pc_76ce
  %18 = icmp eq i32 %14, 0, !insn.addr !4214
  br i1 %18, label %dec_label_pc_7702, label %dec_label_pc_76d4, !insn.addr !4215

dec_label_pc_76d4:                                ; preds = %dec_label_pc_76d0
  %19 = icmp eq i32 %14, 1, !insn.addr !4216
  %20 = icmp eq i1 %19, false, !insn.addr !4217
  br i1 %20, label %dec_label_pc_78c3, label %dec_label_pc_76dc, !insn.addr !4217

dec_label_pc_76dc:                                ; preds = %dec_label_pc_76d4
  %21 = add i64 %arg1, 16, !insn.addr !4218
  %22 = inttoptr i64 %21 to i64*, !insn.addr !4218
  %23 = load i64, i64* %22, align 8, !insn.addr !4218
  %24 = add i64 %13, %arg3, !insn.addr !4219
  %25 = sub i64 %arg4, %arg3, !insn.addr !4220
  %26 = call i64 @function_3b60(i64 %23, i64 %24, i64 %25, i64 %arg7, i64 %arg5, i64 %16), !insn.addr !4221
  store i64 %26, i64* %rax.0.reg2mem, !insn.addr !4222
  br label %dec_label_pc_7718, !insn.addr !4222

dec_label_pc_76f4:                                ; preds = %dec_label_pc_76ce
  %27 = icmp eq i32 %14, 3, !insn.addr !4223
  br i1 %27, label %dec_label_pc_7815, label %dec_label_pc_78c3, !insn.addr !4224

dec_label_pc_7702:                                ; preds = %dec_label_pc_76d0
  %28 = add i64 %arg1, 8, !insn.addr !4225
  %29 = inttoptr i64 %28 to i64*, !insn.addr !4225
  %30 = load i64, i64* %29, align 8, !insn.addr !4225
  %31 = add i64 %13, %arg3, !insn.addr !4226
  %32 = sub i64 %arg4, %arg3, !insn.addr !4227
  %33 = call i64 @function_7530(i64 %30, i64 %31, i64 %32, i64 %11), !insn.addr !4228
  store i64 %33, i64* %rax.0.reg2mem, !insn.addr !4228
  br label %dec_label_pc_7718, !insn.addr !4228

dec_label_pc_7718:                                ; preds = %dec_label_pc_7870, %dec_label_pc_7702, %dec_label_pc_76dc
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %34 = trunc i64 %rax.0.reload to i32, !insn.addr !4229
  %35 = icmp eq i32 %34, 0, !insn.addr !4229
  br i1 %35, label %dec_label_pc_78c3, label %dec_label_pc_7720, !insn.addr !4230

dec_label_pc_7720:                                ; preds = %dec_label_pc_7718
  %36 = load i64, i64* %10, align 8, !insn.addr !4231
  %37 = icmp eq i64 %36, 0, !insn.addr !4232
  %38 = icmp eq i1 %37, false, !insn.addr !4233
  br i1 %38, label %dec_label_pc_787a, label %dec_label_pc_78c3, !insn.addr !4233

dec_label_pc_7732:                                ; preds = %dec_label_pc_76c7
  %39 = zext i1 %8 to i8, !insn.addr !4234
  %40 = add i64 %arg1, 32, !insn.addr !4235
  %41 = inttoptr i64 %40 to i64*, !insn.addr !4235
  %42 = load i64, i64* %41, align 8, !insn.addr !4235
  %43 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !4236
  %44 = load i128, i128* %stack_var_-193, align 8, !insn.addr !4237
  call void @__asm_movups(i128 %44, i128 %43), !insn.addr !4237
  %45 = bitcast i64* %stack_var_-177 to i8*, !insn.addr !4238
  call void @__asm_rep_stosb_memset(i8* nonnull %45, i8 %39, i64 121), !insn.addr !4238
  %46 = icmp eq i64 %42, 0, !insn.addr !4239
  br i1 %46, label %dec_label_pc_78c3, label %dec_label_pc_7753, !insn.addr !4240

dec_label_pc_7753:                                ; preds = %dec_label_pc_7732
  %47 = add i64 %11, ptrtoint (i32** @global_var_48 to i64), !insn.addr !4241
  %48 = inttoptr i64 %47 to i64*, !insn.addr !4241
  %49 = load i64, i64* %48, align 8, !insn.addr !4241
  %50 = icmp eq i64 %49, 0, !insn.addr !4242
  br i1 %50, label %dec_label_pc_78c3, label %dec_label_pc_7761, !insn.addr !4243

dec_label_pc_7761:                                ; preds = %dec_label_pc_7753
  %51 = add i64 %11, 80, !insn.addr !4244
  %52 = inttoptr i64 %51 to i64*, !insn.addr !4244
  %53 = load i64, i64* %52, align 8, !insn.addr !4244
  %54 = icmp eq i64 %53, 0, !insn.addr !4244
  br i1 %54, label %dec_label_pc_78c3, label %dec_label_pc_776d, !insn.addr !4245

dec_label_pc_776d:                                ; preds = %dec_label_pc_7761
  %55 = add i64 %11, 64, !insn.addr !4246
  %56 = inttoptr i64 %55 to i64*, !insn.addr !4246
  %57 = load i64, i64* %56, align 8, !insn.addr !4246
  %58 = icmp ne i64 %57, 0, !insn.addr !4246
  %59 = icmp ult i64 %49, 134
  %or.cond9 = icmp eq i1 %59, %58
  br i1 %or.cond9, label %dec_label_pc_77be, label %dec_label_pc_78c3, !insn.addr !4247

dec_label_pc_77be:                                ; preds = %dec_label_pc_776d
  %60 = trunc i64 %49 to i32, !insn.addr !4248
  %61 = call i32 @llvm.bswap.i32(i32 %60), !insn.addr !4248
  %62 = sext i32 %61 to i128, !insn.addr !4249
  store i128 %62, i128* %stack_var_-193, align 8, !insn.addr !4249
  %63 = ptrtoint i128* %stack_var_-193 to i64, !insn.addr !4250
  %64 = icmp eq i64 %49, %63, !insn.addr !4251
  %65 = icmp eq i1 %64, false, !insn.addr !4252
  br i1 %65, label %dec_label_pc_78c3, label %dec_label_pc_77fc, !insn.addr !4252

dec_label_pc_77fc:                                ; preds = %dec_label_pc_77be
  %66 = add i64 %49, 4, !insn.addr !4253
  store i64 %63, i64* %.reg2mem, !insn.addr !4254
  store i64 %66, i64* %rsi.1.reg2mem, !insn.addr !4254
  store i64 0, i64* %r9.0.reg2mem, !insn.addr !4254
  br label %dec_label_pc_7870, !insn.addr !4254

dec_label_pc_7815:                                ; preds = %dec_label_pc_76f4
  %67 = add i64 %arg1, 48, !insn.addr !4255
  %68 = inttoptr i64 %67 to i64*, !insn.addr !4255
  %69 = load i64, i64* %68, align 8, !insn.addr !4255
  %70 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !4256
  %71 = load i128, i128* %stack_var_-193, align 8, !insn.addr !4257
  call void @__asm_movups(i128 %71, i128 %70), !insn.addr !4257
  %72 = bitcast i64* %stack_var_-177 to i8*, !insn.addr !4258
  call void @__asm_rep_stosd_memset(i8* nonnull %72, i32 0, i64 5), !insn.addr !4258
  %73 = icmp eq i64 %69, 0, !insn.addr !4259
  br i1 %73, label %dec_label_pc_78c3, label %dec_label_pc_7838, !insn.addr !4260

dec_label_pc_7838:                                ; preds = %dec_label_pc_7815
  store i128 536870912, i128* %stack_var_-193, align 8, !insn.addr !4261
  %74 = ptrtoint i64* %stack_var_-189 to i64, !insn.addr !4262
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !4262
  br label %dec_label_pc_784c, !insn.addr !4262

dec_label_pc_784c:                                ; preds = %dec_label_pc_784c, %dec_label_pc_7838
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %75 = add i64 %rax.1.reload, %69, !insn.addr !4263
  %76 = inttoptr i64 %75 to i8*, !insn.addr !4263
  %77 = load i8, i8* %76, align 1, !insn.addr !4263
  %78 = add i64 %rax.1.reload, %74, !insn.addr !4264
  %79 = inttoptr i64 %78 to i8*, !insn.addr !4264
  store i8 %77, i8* %79, align 1, !insn.addr !4264
  %80 = add nuw nsw i64 %rax.1.reload, 1, !insn.addr !4265
  %exitcond = icmp eq i64 %80, 32
  store i64 %80, i64* %rax.1.reg2mem, !insn.addr !4266
  br i1 %exitcond, label %dec_label_pc_7870.loopexit, label %dec_label_pc_784c, !insn.addr !4266

dec_label_pc_7870.loopexit:                       ; preds = %dec_label_pc_784c
  %81 = ptrtoint i128* %stack_var_-193 to i64, !insn.addr !4267
  store i64 %81, i64* %.reg2mem
  store i64 36, i64* %rsi.1.reg2mem
  store i64 %16, i64* %r9.0.reg2mem
  br label %dec_label_pc_7870

dec_label_pc_7870:                                ; preds = %dec_label_pc_7870.loopexit, %dec_label_pc_77fc
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4268
  %rdx.0 = add i64 %13, %arg3
  %rcx.0 = sub i64 %arg4, %arg3
  %82 = inttoptr i64 %.reload to i128*, !insn.addr !4268
  %83 = call i64 @function_72d0(i128* %82, i64 %rsi.1.reload, i64 %rdx.0, i64 %rcx.0, i64 %11, i64 %r9.0.reload), !insn.addr !4268
  store i64 %83, i64* %rax.0.reg2mem, !insn.addr !4269
  br label %dec_label_pc_7718, !insn.addr !4269

dec_label_pc_787a:                                ; preds = %dec_label_pc_7720
  %84 = add i64 %36, 112, !insn.addr !4270
  %85 = call i64 @function_7190(i64 %84, i64 6), !insn.addr !4271
  br label %dec_label_pc_78c3

dec_label_pc_78c3:                                ; preds = %dec_label_pc_787a, %dec_label_pc_7720, %dec_label_pc_76f4, %dec_label_pc_7815, %dec_label_pc_77be, %dec_label_pc_7761, %dec_label_pc_7753, %dec_label_pc_7732, %dec_label_pc_7718, %dec_label_pc_76d4, %dec_label_pc_76ba, %dec_label_pc_76ae, %dec_label_pc_7650, %dec_label_pc_776d
  ret i64 0

; uselistorder directives
  uselistorder i64 %rax.1.reload, { 0, 2, 1 }
  uselistorder i64 %49, { 2, 1, 3, 0, 4 }
  uselistorder i32 %14, { 2, 4, 3, 1, 0 }
  uselistorder i64 %13, { 0, 2, 1 }
  uselistorder i64 %11, { 0, 3, 2, 4, 1, 5 }
  uselistorder i128 %1, { 2, 3, 0, 1 }
  uselistorder i64* %rax.0.reg2mem, { 3, 0, 2, 1 }
  uselistorder i64* %rax.1.reg2mem, { 1, 0, 2 }
  uselistorder i64 %arg7, { 1, 2, 0 }
  uselistorder i64 %arg4, { 1, 4, 3, 2, 0 }
  uselistorder i64 %arg3, { 2, 1, 6, 5, 4, 3, 7, 0 }
  uselistorder i128* %arg2, { 1, 0 }
  uselistorder i64 %arg1, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_78c3, { 0, 3, 4, 13, 5, 6, 7, 1, 8, 2, 9, 10, 11, 12 }
}

define i64 @.Llength_encoder_reset.0(i64 %arg1) local_unnamed_addr {
dec_label_pc_7940:
  %merge.reg2mem = alloca i64, !insn.addr !4272
  %rax.0.reg2mem = alloca i64, !insn.addr !4272
  %0 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !4273
  %1 = inttoptr i64 %0 to i64*, !insn.addr !4273
  %2 = load i64, i64* %1, align 8, !insn.addr !4273
  %3 = and i64 %2, -32
  %4 = icmp eq i64 %3, 32, !insn.addr !4274
  %5 = icmp eq i64 %2, 64, !insn.addr !4274
  %6 = or i1 %5, %4, !insn.addr !4275
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4275
  store i64 0, i64* %merge.reg2mem, !insn.addr !4275
  br i1 %6, label %dec_label_pc_7959, label %dec_label_pc_7967, !insn.addr !4275

dec_label_pc_7959:                                ; preds = %dec_label_pc_7940, %dec_label_pc_795f
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %7 = add i64 %rax.0.reload, %arg1, !insn.addr !4276
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4276
  %9 = load i8, i8* %8, align 1, !insn.addr !4276
  %10 = icmp slt i8 %9, 0, !insn.addr !4276
  store i64 1, i64* %merge.reg2mem, !insn.addr !4277
  br i1 %10, label %dec_label_pc_7967, label %dec_label_pc_795f, !insn.addr !4277

dec_label_pc_795f:                                ; preds = %dec_label_pc_7959
  %11 = add i64 %rax.0.reload, 1, !insn.addr !4278
  %12 = icmp eq i64 %2, %11, !insn.addr !4279
  %13 = icmp eq i1 %12, false, !insn.addr !4280
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !4280
  store i64 0, i64* %merge.reg2mem, !insn.addr !4280
  br i1 %13, label %dec_label_pc_7959, label %dec_label_pc_7967, !insn.addr !4280

dec_label_pc_7967:                                ; preds = %dec_label_pc_7959, %dec_label_pc_795f, %dec_label_pc_7940
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !4281

; uselistorder directives
  uselistorder i64* %rax.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %merge.reg2mem, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_7967, { 1, 0, 2 }
  uselistorder label %dec_label_pc_7959, { 1, 0 }
}

define i64 @.Lstream_decoder_mt_get_progress.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_7970:
  %storemerge.reg2mem = alloca i64, !insn.addr !4282
  %rdi.0.reg2mem = alloca i64, !insn.addr !4282
  %rsi.0.reg2mem = alloca i64, !insn.addr !4282
  %rbp.0.reg2mem = alloca i64, !insn.addr !4282
  %rbx.0.reg2mem = alloca i64, !insn.addr !4282
  %0 = icmp eq i64 %arg2, 0, !insn.addr !4283
  %1 = icmp eq i64 %arg1, 0, !insn.addr !4284
  %or.cond.not = or i1 %1, %0
  %2 = icmp eq i64 %arg3, 0, !insn.addr !4285
  %or.cond3 = or i1 %or.cond.not, %2
  %3 = icmp eq i64 %arg4, 0, !insn.addr !4286
  %or.cond4 = or i1 %or.cond3, %3
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4287
  br i1 %or.cond4, label %dec_label_pc_7a27, label %dec_label_pc_79a8, !insn.addr !4287

dec_label_pc_79a8:                                ; preds = %dec_label_pc_7970
  %4 = add i64 %arg2, 87, !insn.addr !4288
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4288
  %6 = load i8, i8* %5, align 1, !insn.addr !4288
  %7 = add i64 %arg2, 86, !insn.addr !4289
  %8 = inttoptr i64 %7 to i8*, !insn.addr !4289
  %9 = load i8, i8* %8, align 1, !insn.addr !4289
  %10 = and i8 %9, %6, !insn.addr !4290
  %11 = icmp slt i8 %10, 0, !insn.addr !4290
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !4291
  store i64 0, i64* %rbp.0.reg2mem, !insn.addr !4291
  store i64 ptrtoint (i32** @global_var_48 to i64), i64* %rsi.0.reg2mem, !insn.addr !4291
  br i1 %11, label %dec_label_pc_79dc, label %dec_label_pc_79b8, !insn.addr !4291

dec_label_pc_79b8:                                ; preds = %dec_label_pc_79a8
  %12 = sext i8 %9 to i32, !insn.addr !4292
  %13 = mul i32 %12, 8, !insn.addr !4292
  %14 = sext i8 %6 to i32, !insn.addr !4293
  %15 = mul i32 %14, 8, !insn.addr !4293
  %16 = sext i32 %15 to i64, !insn.addr !4294
  %17 = sext i32 %13 to i64, !insn.addr !4295
  %18 = icmp ult i32 %15, %13, !insn.addr !4296
  %19 = icmp eq i1 %18, false, !insn.addr !4297
  %spec.select.v = select i1 %19, i64 %16, i64 %17
  %spec.select = add nsw i64 %spec.select.v, 8
  store i64 %16, i64* %rbx.0.reg2mem
  store i64 %17, i64* %rbp.0.reg2mem
  store i64 %spec.select, i64* %rsi.0.reg2mem
  br label %dec_label_pc_79dc

dec_label_pc_79dc:                                ; preds = %dec_label_pc_79b8, %dec_label_pc_79a8
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %20 = inttoptr i64 %rsi.0.reload to i64*, !insn.addr !4298
  %21 = call i64 @.Lhc_find_func.1(i64 %arg1, i64* %20, i64 %arg2, i64 %arg4), !insn.addr !4298
  %22 = trunc i64 %21 to i32, !insn.addr !4299
  %23 = icmp eq i32 %22, 0, !insn.addr !4299
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4300
  br i1 %23, label %dec_label_pc_7a27, label %dec_label_pc_79eb, !insn.addr !4300

dec_label_pc_79eb:                                ; preds = %dec_label_pc_79dc
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %24 = load i8, i8* %8, align 1, !insn.addr !4301
  %25 = icmp slt i8 %24, 0, !insn.addr !4301
  store i64 %arg1, i64* %rdi.0.reg2mem, !insn.addr !4302
  br i1 %25, label %dec_label_pc_79fe, label %dec_label_pc_79f3, !insn.addr !4302

dec_label_pc_79f3:                                ; preds = %dec_label_pc_79eb
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %26 = add i64 %rbp.0.reload, %arg1, !insn.addr !4303
  %27 = inttoptr i64 %26 to i64*, !insn.addr !4303
  %28 = load i64, i64* %27, align 8, !insn.addr !4303
  store i64 %28, i64* %rdi.0.reg2mem, !insn.addr !4304
  br label %dec_label_pc_79fe, !insn.addr !4304

dec_label_pc_79fe:                                ; preds = %dec_label_pc_79eb, %dec_label_pc_79f3
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %29 = inttoptr i64 %arg3 to i64*, !insn.addr !4305
  store i64 %rdi.0.reload, i64* %29, align 8, !insn.addr !4305
  %30 = load i8, i8* %5, align 1, !insn.addr !4306
  %31 = icmp slt i8 %30, 0, !insn.addr !4306
  %storemerge1.in.in.v = select i1 %31, i64 ptrtoint (i32** @global_var_18 to i64), i64 %rbx.0.reload
  %storemerge1.in.in = add i64 %storemerge1.in.in.v, %arg1
  %storemerge1.in = inttoptr i64 %storemerge1.in.in to i64*
  %storemerge1 = load i64, i64* %storemerge1.in, align 8
  %32 = inttoptr i64 %arg4 to i64*, !insn.addr !4307
  store i64 %storemerge1, i64* %32, align 8, !insn.addr !4307
  %33 = inttoptr i64 %storemerge1 to i64*, !insn.addr !4308
  %34 = call i64 @.Lhc_find_func.1(i64 %rdi.0.reload, i64* %33, i64 %arg2, i64 %arg4), !insn.addr !4308
  %35 = trunc i64 %34 to i32, !insn.addr !4309
  %36 = icmp eq i32 %35, 0, !insn.addr !4309
  %37 = icmp eq i1 %36, false, !insn.addr !4310
  %38 = zext i1 %37 to i64, !insn.addr !4311
  store i64 %38, i64* %storemerge.reg2mem, !insn.addr !4311
  br label %dec_label_pc_7a27, !insn.addr !4311

dec_label_pc_7a27:                                ; preds = %dec_label_pc_7970, %dec_label_pc_79dc, %dec_label_pc_79fe
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4312

; uselistorder directives
  uselistorder i64 %rdi.0.reload, { 1, 0 }
  uselistorder i32 %15, { 1, 0 }
  uselistorder i32 %13, { 1, 0 }
  uselistorder i8 %9, { 1, 0 }
  uselistorder i8 %6, { 1, 0 }
  uselistorder i64* %rbx.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbp.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rsi.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64 %arg4, { 1, 2, 3, 0 }
  uselistorder i64 %arg3, { 1, 0 }
  uselistorder i64 %arg2, { 0, 1, 3, 2, 4 }
  uselistorder i64 %arg1, { 1, 2, 0, 4, 3 }
  uselistorder label %dec_label_pc_7a27, { 2, 1, 0 }
  uselistorder label %dec_label_pc_79fe, { 1, 0 }
}

define i64 @.Lthreads_stop.0(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_7a40:
  %0 = alloca i64
  %rax.0.reg2mem = alloca i64, !insn.addr !4313
  %r14.1.reg2mem = alloca i64, !insn.addr !4313
  %rcx.1.reg2mem = alloca i64, !insn.addr !4313
  %rcx.05.reg2mem = alloca i64, !insn.addr !4313
  %r12.16.reg2mem = alloca i64, !insn.addr !4313
  %r14.08.reg2mem = alloca i64, !insn.addr !4313
  %r13.0.reg2mem = alloca i64, !insn.addr !4313
  %r12.0.in.in.reg2mem = alloca i64, !insn.addr !4313
  %1 = load i64, i64* %0
  %2 = icmp ne i64* %arg1, null, !insn.addr !4314
  %3 = icmp eq i64 %arg2, 0, !insn.addr !4315
  %4 = icmp eq i1 %3, false, !insn.addr !4316
  %or.cond4 = icmp eq i1 %2, %4
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4317
  br i1 %or.cond4, label %dec_label_pc_7a67, label %dec_label_pc_7bc8, !insn.addr !4317

dec_label_pc_7a67:                                ; preds = %dec_label_pc_7a40
  %5 = add i64 %arg2, ptrtoint (i32** @global_var_48 to i64), !insn.addr !4318
  %6 = inttoptr i64 %5 to i64*, !insn.addr !4318
  %7 = load i64, i64* %6, align 8, !insn.addr !4318
  %8 = icmp eq i64 %7, 0, !insn.addr !4319
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4320
  br i1 %8, label %dec_label_pc_7bc8, label %dec_label_pc_7a73, !insn.addr !4320

dec_label_pc_7a73:                                ; preds = %dec_label_pc_7a67
  %9 = call i64 @.Lhc_find_func.1(i64 %7, i64* inttoptr (i64 8 to i64*), i64 %arg2, i64 %arg4), !insn.addr !4321
  %10 = trunc i64 %9 to i32, !insn.addr !4322
  %11 = icmp eq i32 %10, 0, !insn.addr !4322
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4323
  br i1 %11, label %dec_label_pc_7bc8, label %dec_label_pc_7a84, !insn.addr !4323

dec_label_pc_7a84:                                ; preds = %dec_label_pc_7a73
  %12 = load i64, i64* %6, align 8, !insn.addr !4324
  %13 = inttoptr i64 %12 to i64*, !insn.addr !4325
  %14 = load i64, i64* %13, align 8, !insn.addr !4325
  %15 = call i64 @.Lhc_find_func.1(i64 %14, i64* inttoptr (i64 32 to i64*), i64 %arg2, i64 %arg4), !insn.addr !4326
  %16 = trunc i64 %15 to i32, !insn.addr !4327
  %17 = icmp eq i32 %16, 0, !insn.addr !4327
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4328
  br i1 %17, label %dec_label_pc_7bc8, label %dec_label_pc_7a9f, !insn.addr !4328

dec_label_pc_7a9f:                                ; preds = %dec_label_pc_7a84
  %18 = add i64 %arg2, 85, !insn.addr !4329
  %19 = inttoptr i64 %18 to i8*, !insn.addr !4329
  %20 = load i8, i8* %19, align 1, !insn.addr !4329
  %21 = add i64 %14, 16, !insn.addr !4330
  %22 = icmp slt i8 %20, 0, !insn.addr !4331
  store i64 %21, i64* %r12.0.in.in.reg2mem, !insn.addr !4332
  br i1 %22, label %dec_label_pc_7ab5, label %dec_label_pc_7aab, !insn.addr !4332

dec_label_pc_7aab:                                ; preds = %dec_label_pc_7a9f
  %23 = sext i8 %20 to i32, !insn.addr !4333
  %24 = mul i32 %23, 4, !insn.addr !4333
  %25 = sext i32 %24 to i64, !insn.addr !4334
  %26 = add i64 %14, %25, !insn.addr !4335
  store i64 %26, i64* %r12.0.in.in.reg2mem, !insn.addr !4335
  br label %dec_label_pc_7ab5, !insn.addr !4335

dec_label_pc_7ab5:                                ; preds = %dec_label_pc_7aab, %dec_label_pc_7a9f
  %r12.0.in.in.reload = load i64, i64* %r12.0.in.in.reg2mem
  %r12.0.in = inttoptr i64 %r12.0.in.in.reload to i64*
  %r12.0 = load i64, i64* %r12.0.in, align 8
  %27 = add i64 %arg2, 87, !insn.addr !4336
  %28 = inttoptr i64 %27 to i8*, !insn.addr !4336
  %29 = load i8, i8* %28, align 1, !insn.addr !4336
  %30 = add i64 %arg2, 86, !insn.addr !4337
  %31 = inttoptr i64 %30 to i8*, !insn.addr !4337
  %32 = load i8, i8* %31, align 1, !insn.addr !4337
  %33 = and i8 %32, %29, !insn.addr !4338
  %34 = icmp slt i8 %33, 0, !insn.addr !4338
  store i64 ptrtoint (i32** @global_var_48 to i64), i64* %r13.0.reg2mem, !insn.addr !4339
  br i1 %34, label %dec_label_pc_7adf, label %dec_label_pc_7ac7, !insn.addr !4339

dec_label_pc_7ac7:                                ; preds = %dec_label_pc_7ab5
  %35 = sext i8 %32 to i32, !insn.addr !4340
  %36 = mul i32 %35, 8, !insn.addr !4340
  %37 = sext i8 %29 to i32, !insn.addr !4341
  %38 = mul i32 %37, 8, !insn.addr !4341
  %narrow = add nsw i32 %38, 8
  %39 = sext i32 %narrow to i64, !insn.addr !4342
  %40 = icmp ult i32 %38, %36, !insn.addr !4343
  %41 = icmp eq i1 %40, false, !insn.addr !4344
  store i64 %39, i64* %r13.0.reg2mem, !insn.addr !4344
  br i1 %41, label %dec_label_pc_7adf, label %dec_label_pc_7adb, !insn.addr !4344

dec_label_pc_7adb:                                ; preds = %dec_label_pc_7ac7
  %narrow1 = add nsw i32 %36, 8
  %42 = sext i32 %narrow1 to i64, !insn.addr !4345
  store i64 %42, i64* %r13.0.reg2mem, !insn.addr !4345
  br label %dec_label_pc_7adf, !insn.addr !4345

dec_label_pc_7adf:                                ; preds = %dec_label_pc_7adb, %dec_label_pc_7ac7, %dec_label_pc_7ab5
  %43 = call i64 @.Lhc_find_func.1(i64 %r12.0, i64* inttoptr (i64 8 to i64*), i64 %arg2, i64 %arg4), !insn.addr !4346
  %44 = trunc i64 %43 to i32, !insn.addr !4347
  %45 = icmp eq i32 %44, 0, !insn.addr !4347
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4348
  br i1 %45, label %dec_label_pc_7bc8, label %dec_label_pc_7af7, !insn.addr !4348

dec_label_pc_7af7:                                ; preds = %dec_label_pc_7adf
  %46 = inttoptr i64 %r12.0 to i64*, !insn.addr !4349
  %47 = load i64, i64* %46, align 8, !insn.addr !4349
  %48 = call i64 @.Lhc_find_func.1(i64 %47, i64* inttoptr (i64 1024 to i64*), i64 %arg2, i64 %arg4), !insn.addr !4350
  %49 = trunc i64 %48 to i32, !insn.addr !4351
  %50 = icmp eq i32 %49, 0, !insn.addr !4351
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4352
  br i1 %50, label %dec_label_pc_7bc8, label %dec_label_pc_7b10, !insn.addr !4352

dec_label_pc_7b10:                                ; preds = %dec_label_pc_7af7
  %51 = ptrtoint i64* %arg1 to i64
  %52 = add i64 %arg2, 84, !insn.addr !4353
  %53 = inttoptr i64 %52 to i8*, !insn.addr !4353
  %54 = load i8, i8* %53, align 1, !insn.addr !4353
  %55 = load i64, i64* %46, align 8, !insn.addr !4354
  %56 = icmp slt i8 %54, 0, !insn.addr !4355
  br i1 %56, label %dec_label_pc_7b4e, label %dec_label_pc_7b1c, !insn.addr !4356

dec_label_pc_7b1c:                                ; preds = %dec_label_pc_7b10
  %57 = sext i8 %54 to i32, !insn.addr !4357
  %58 = mul i32 %57, 8, !insn.addr !4357
  %59 = add i64 %51, ptrtoint (i32** @global_var_18 to i64), !insn.addr !4358
  %60 = sext i32 %58 to i64, !insn.addr !4359
  %61 = add i64 %55, %60, !insn.addr !4360
  %62 = inttoptr i64 %61 to i64*, !insn.addr !4360
  %63 = load i64, i64* %62, align 8, !insn.addr !4360
  %64 = call i64 @.Lstream_decoder_mt_get_progress.0(i64 %63, i64 %arg2, i64 %51, i64 %59, i64 %1), !insn.addr !4361
  %65 = trunc i64 %64 to i32, !insn.addr !4362
  %66 = icmp eq i32 %65, 0, !insn.addr !4362
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4363
  br i1 %66, label %dec_label_pc_7bc8, label %dec_label_pc_7b3c, !insn.addr !4363

dec_label_pc_7b3c:                                ; preds = %dec_label_pc_7b1c
  %67 = call i64 @.Llength_encoder_reset.0(i64 %51), !insn.addr !4364
  %68 = trunc i64 %67 to i32, !insn.addr !4365
  %69 = icmp eq i32 %68, 0, !insn.addr !4365
  %70 = icmp eq i1 %69, false, !insn.addr !4366
  %71 = zext i1 %70 to i64, !insn.addr !4367
  store i64 %71, i64* %rax.0.reg2mem, !insn.addr !4368
  br label %dec_label_pc_7bc8, !insn.addr !4368

dec_label_pc_7b4e:                                ; preds = %dec_label_pc_7b10
  %72 = icmp ult i64 %55, -1024, !insn.addr !4369
  %73 = icmp eq i1 %72, false, !insn.addr !4370
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4370
  br i1 %73, label %dec_label_pc_7bc8, label %dec_label_pc_7b62.lr.ph, !insn.addr !4370

dec_label_pc_7b62.lr.ph:                          ; preds = %dec_label_pc_7b4e
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %74 = add i64 %55, 1024, !insn.addr !4371
  %75 = inttoptr i64 %r13.0.reload to i64*, !insn.addr !4372
  %76 = add i64 %51, ptrtoint (i32** @global_var_18 to i64)
  store i64 0, i64* %r14.08.reg2mem
  store i64 %55, i64* %r12.16.reg2mem
  store i64 %arg4, i64* %rcx.05.reg2mem
  br label %dec_label_pc_7b62

dec_label_pc_7b62:                                ; preds = %dec_label_pc_7b62.lr.ph, %dec_label_pc_7bc2
  %rcx.05.reload = load i64, i64* %rcx.05.reg2mem
  %r12.16.reload = load i64, i64* %r12.16.reg2mem
  %r14.08.reload = load i64, i64* %r14.08.reg2mem
  %77 = call i64 @.Lhc_find_func.1(i64 %r12.16.reload, i64* %75, i64 %arg2, i64 %rcx.05.reload), !insn.addr !4372
  %78 = trunc i64 %77 to i32, !insn.addr !4373
  %79 = icmp eq i32 %78, 0, !insn.addr !4373
  store i64 %rcx.05.reload, i64* %rcx.1.reg2mem, !insn.addr !4374
  store i64 %r14.08.reload, i64* %r14.1.reg2mem, !insn.addr !4374
  br i1 %79, label %dec_label_pc_7bc2, label %dec_label_pc_7b74, !insn.addr !4374

dec_label_pc_7b74:                                ; preds = %dec_label_pc_7b62
  %80 = inttoptr i64 %r12.16.reload to i64*, !insn.addr !4375
  %81 = load i64, i64* %80, align 8, !insn.addr !4375
  %82 = call i64 @.Lstream_decoder_mt_get_progress.0(i64 %81, i64 %arg2, i64 %51, i64 %76, i64 %1), !insn.addr !4376
  %83 = trunc i64 %82 to i32, !insn.addr !4377
  %84 = icmp eq i32 %83, 0, !insn.addr !4377
  store i64 %76, i64* %rcx.1.reg2mem, !insn.addr !4378
  store i64 %r14.08.reload, i64* %r14.1.reg2mem, !insn.addr !4378
  br i1 %84, label %dec_label_pc_7bc2, label %dec_label_pc_7b8b, !insn.addr !4378

dec_label_pc_7b8b:                                ; preds = %dec_label_pc_7b74
  %85 = trunc i64 %r14.08.reload to i32, !insn.addr !4379
  %86 = icmp ult i32 %85, 2
  br i1 %86, label %dec_label_pc_7ba4, label %dec_label_pc_7b91, !insn.addr !4380

dec_label_pc_7b91:                                ; preds = %dec_label_pc_7b8b
  %87 = call i64 @.Llength_encoder_reset.0(i64 %51), !insn.addr !4381
  %88 = trunc i64 %87 to i32, !insn.addr !4382
  %89 = icmp eq i32 %88, 0, !insn.addr !4382
  store i64 %76, i64* %rcx.1.reg2mem, !insn.addr !4383
  store i64 %r14.08.reload, i64* %r14.1.reg2mem, !insn.addr !4383
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !4383
  br i1 %89, label %dec_label_pc_7bc2, label %dec_label_pc_7bc8, !insn.addr !4383

dec_label_pc_7ba4:                                ; preds = %dec_label_pc_7b8b
  %90 = trunc i64 %81 to i32
  %91 = add i32 %90, 7, !insn.addr !4384
  %92 = call i64 @.Lsimple_coder_update.0(i64 %81, i32 %91, i64 %51, i64 %76), !insn.addr !4384
  %93 = trunc i64 %92 to i32, !insn.addr !4385
  %94 = icmp ne i32 %93, 2448, !insn.addr !4385
  %95 = icmp eq i32 %93, 3336, !insn.addr !4386
  %96 = icmp eq i1 %95, false, !insn.addr !4387
  %or.cond = icmp eq i1 %94, %96
  store i64 %76, i64* %rcx.1.reg2mem, !insn.addr !4388
  store i64 %r14.08.reload, i64* %r14.1.reg2mem, !insn.addr !4388
  br i1 %or.cond, label %dec_label_pc_7bc2, label %dec_label_pc_7bbf, !insn.addr !4388

dec_label_pc_7bbf:                                ; preds = %dec_label_pc_7ba4
  %97 = add i64 %r14.08.reload, 1, !insn.addr !4389
  %98 = and i64 %97, 4294967295, !insn.addr !4389
  store i64 %76, i64* %rcx.1.reg2mem, !insn.addr !4389
  store i64 %98, i64* %r14.1.reg2mem, !insn.addr !4389
  br label %dec_label_pc_7bc2, !insn.addr !4389

dec_label_pc_7bc2:                                ; preds = %dec_label_pc_7ba4, %dec_label_pc_7bbf, %dec_label_pc_7b91, %dec_label_pc_7b74, %dec_label_pc_7b62
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %99 = add i64 %r12.16.reload, 8, !insn.addr !4390
  %100 = icmp ult i64 %99, %74, !insn.addr !4369
  %101 = icmp eq i1 %100, false, !insn.addr !4370
  store i64 %r14.1.reload, i64* %r14.08.reg2mem, !insn.addr !4370
  store i64 %99, i64* %r12.16.reg2mem, !insn.addr !4370
  store i64 %rcx.1.reload, i64* %rcx.05.reg2mem, !insn.addr !4370
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4370
  br i1 %101, label %dec_label_pc_7bc8, label %dec_label_pc_7b62, !insn.addr !4370

dec_label_pc_7bc8:                                ; preds = %dec_label_pc_7bc2, %dec_label_pc_7b91, %dec_label_pc_7b4e, %dec_label_pc_7a40, %dec_label_pc_7a67, %dec_label_pc_7a73, %dec_label_pc_7a84, %dec_label_pc_7adf, %dec_label_pc_7af7, %dec_label_pc_7b1c, %dec_label_pc_7b3c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !4391

; uselistorder directives
  uselistorder i64 %r14.08.reload, { 4, 0, 1, 5, 2, 3 }
  uselistorder i64 %r12.16.reload, { 2, 0, 1 }
  uselistorder i64 %76, { 2, 0, 4, 1, 3, 5 }
  uselistorder i64 %55, { 0, 3, 2, 1 }
  uselistorder i64 %51, { 4, 3, 6, 5, 0, 2, 1 }
  uselistorder i32 %36, { 1, 0 }
  uselistorder i8 %32, { 1, 0 }
  uselistorder i8 %29, { 1, 0 }
  uselistorder i64 %r12.0, { 1, 0 }
  uselistorder i64 %1, { 1, 0 }
  uselistorder i64* %r14.08.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r12.16.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.05.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.1.reg2mem, { 0, 3, 1, 2, 4, 5 }
  uselistorder i64* %r14.1.reg2mem, { 0, 3, 1, 2, 4, 5 }
  uselistorder i64* %rax.0.reg2mem, { 0, 1, 2, 3, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 7, { 1, 2, 0 }
  uselistorder i64 (i64)* @.Llength_encoder_reset.0, { 1, 0 }
  uselistorder i64 1024, { 1, 0 }
  uselistorder i64 %arg2, { 2, 3, 1, 4, 5, 6, 8, 7, 9, 10, 11, 12, 0 }
  uselistorder i64* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_7bc8, { 0, 1, 2, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_7bc2, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_7b62, { 1, 0 }
}

define i64 @.Lindex_decode.1(i64 %arg1, i32 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_7be0:
  %storemerge.reg2mem = alloca i64, !insn.addr !4392
  %r13.1.reg2mem = alloca i64, !insn.addr !4392
  %rax.0.reg2mem = alloca i64, !insn.addr !4392
  %r13.0.reg2mem = alloca i64, !insn.addr !4392
  %rbp.0.reg2mem = alloca i64, !insn.addr !4392
  %stack_var_-60 = alloca i64, align 8
  %0 = icmp eq i64 %arg1, 0, !insn.addr !4393
  %1 = icmp eq i64 %arg3, 0, !insn.addr !4394
  %or.cond2 = or i1 %0, %1
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4395
  br i1 %or.cond2, label %dec_label_pc_7c69, label %dec_label_pc_7c14.preheader, !insn.addr !4395

dec_label_pc_7c14.preheader:                      ; preds = %dec_label_pc_7be0
  %2 = add i64 %arg3, 96, !insn.addr !4396
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4396
  %4 = add i64 %arg3, 80
  %5 = inttoptr i64 %4 to i64*
  %6 = ptrtoint i64* %stack_var_-60 to i64
  store i64 0, i64* %rbp.0.reg2mem
  store i64 4294967295, i64* %r13.0.reg2mem
  br label %dec_label_pc_7c14

dec_label_pc_7c14:                                ; preds = %dec_label_pc_7c14.preheader, %dec_label_pc_7c60
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  store i64 0, i64* %stack_var_-60, align 8, !insn.addr !4397
  %7 = load i64, i64* %3, align 8, !insn.addr !4396
  %8 = icmp eq i64 %7, 0, !insn.addr !4398
  store i64 %r13.0.reload, i64* %r13.1.reg2mem, !insn.addr !4399
  br i1 %8, label %dec_label_pc_7c60, label %dec_label_pc_7c23, !insn.addr !4399

dec_label_pc_7c23:                                ; preds = %dec_label_pc_7c14
  %9 = load i64, i64* %5, align 8, !insn.addr !4400
  %10 = icmp eq i64 %9, 0, !insn.addr !4400
  store i64 %r13.0.reload, i64* %r13.1.reg2mem, !insn.addr !4401
  br i1 %10, label %dec_label_pc_7c60, label %dec_label_pc_7c2a, !insn.addr !4401

dec_label_pc_7c2a:                                ; preds = %dec_label_pc_7c23
  %11 = trunc i64 %7 to i32, !insn.addr !4402
  %12 = icmp slt i32 %11, 0, !insn.addr !4402
  %13 = icmp eq i1 %12, false, !insn.addr !4403
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !4403
  br i1 %13, label %dec_label_pc_7c3c, label %dec_label_pc_7c41, !insn.addr !4403

dec_label_pc_7c3c:                                ; preds = %dec_label_pc_7c2a
  %14 = icmp eq i32 %11, 0, !insn.addr !4402
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !4404
  br i1 %14, label %dec_label_pc_7c4d, label %dec_label_pc_7c41, !insn.addr !4404

dec_label_pc_7c41:                                ; preds = %dec_label_pc_7c3c, %dec_label_pc_7c2a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %15 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !4405
  %16 = load i32, i32* %15, align 4, !insn.addr !4405
  %17 = icmp ne i32 %16, 22, !insn.addr !4406
  %18 = icmp eq i32 %16, 107, !insn.addr !4407
  %19 = icmp eq i1 %18, false, !insn.addr !4408
  %or.cond = icmp eq i1 %17, %19
  store i64 %r13.0.reload, i64* %r13.1.reg2mem, !insn.addr !4409
  br i1 %or.cond, label %dec_label_pc_7c60, label %dec_label_pc_7c4d, !insn.addr !4409

dec_label_pc_7c4d:                                ; preds = %dec_label_pc_7c41, %dec_label_pc_7c3c
  %20 = add i64 %r13.0.reload, 1, !insn.addr !4410
  %21 = and i64 %20, 4294967295, !insn.addr !4410
  %22 = trunc i64 %20 to i32, !insn.addr !4411
  %23 = icmp eq i32 %22, %arg2, !insn.addr !4411
  %24 = icmp eq i1 %23, false, !insn.addr !4412
  store i64 %21, i64* %r13.1.reg2mem, !insn.addr !4412
  br i1 %24, label %dec_label_pc_7c60, label %dec_label_pc_7c55, !insn.addr !4412

dec_label_pc_7c55:                                ; preds = %dec_label_pc_7c4d
  %25 = trunc i64 %rbp.0.reload to i32, !insn.addr !4413
  %26 = inttoptr i64 %arg1 to i32*, !insn.addr !4413
  store i32 %25, i32* %26, align 4, !insn.addr !4413
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !4414
  br label %dec_label_pc_7c69, !insn.addr !4414

dec_label_pc_7c60:                                ; preds = %dec_label_pc_7c41, %dec_label_pc_7c4d, %dec_label_pc_7c23, %dec_label_pc_7c14
  %r13.1.reload = load i64, i64* %r13.1.reg2mem
  %27 = add nuw nsw i64 %rbp.0.reload, 1, !insn.addr !4415
  %28 = and i64 %27, 4294967295, !insn.addr !4415
  %29 = trunc i64 %27 to i32, !insn.addr !4416
  %30 = icmp eq i32 %29, 64, !insn.addr !4416
  %31 = icmp eq i1 %30, false, !insn.addr !4417
  store i64 %28, i64* %rbp.0.reg2mem, !insn.addr !4417
  store i64 %r13.1.reload, i64* %r13.0.reg2mem, !insn.addr !4417
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4417
  br i1 %31, label %dec_label_pc_7c14, label %dec_label_pc_7c69, !insn.addr !4417

dec_label_pc_7c69:                                ; preds = %dec_label_pc_7c60, %dec_label_pc_7be0, %dec_label_pc_7c55
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4418

; uselistorder directives
  uselistorder i64 %r13.0.reload, { 3, 0, 1, 2 }
  uselistorder i64* %stack_var_-60, { 1, 0 }
  uselistorder i64* %rbp.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r13.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r13.1.reg2mem, { 0, 2, 1, 3, 4 }
  uselistorder i64* %storemerge.reg2mem, { 0, 1, 3, 2 }
  uselistorder i64 %arg3, { 1, 2, 0 }
  uselistorder label %dec_label_pc_7c69, { 0, 2, 1 }
  uselistorder label %dec_label_pc_7c60, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_7c14, { 1, 0 }
}

define i64 @.Lindex_encode.1(i64 %arg1, i32* %arg2, i64 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_7c80:
  %storemerge.reg2mem = alloca i64, !insn.addr !4419
  %rax.0.reg2mem = alloca i64, !insn.addr !4419
  %rdx.0.reg2mem = alloca i64, !insn.addr !4419
  %storemerge2.in.in.in.reg2mem = alloca i64, !insn.addr !4419
  %0 = icmp eq i64 %arg1, 0, !insn.addr !4420
  %1 = icmp eq i1 %0, false, !insn.addr !4421
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4421
  br i1 %1, label %dec_label_pc_7ca2, label %dec_label_pc_7d5d, !insn.addr !4421

dec_label_pc_7ca2:                                ; preds = %dec_label_pc_7c80
  %2 = add i64 %arg1, 16, !insn.addr !4422
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4422
  %4 = load i64, i64* %3, align 8, !insn.addr !4422
  %5 = icmp eq i64 %4, 0, !insn.addr !4423
  %6 = icmp eq i32* %arg2, null, !insn.addr !4424
  %or.cond = or i1 %6, %5
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4425
  br i1 %or.cond, label %dec_label_pc_7d5d, label %dec_label_pc_7cb6, !insn.addr !4425

dec_label_pc_7cb6:                                ; preds = %dec_label_pc_7ca2
  %7 = add i64 %arg1, ptrtoint (i32** @global_var_48 to i64), !insn.addr !4426
  %8 = inttoptr i64 %7 to i64*, !insn.addr !4426
  %9 = load i64, i64* %8, align 8, !insn.addr !4426
  %10 = icmp eq i64 %9, 0, !insn.addr !4427
  store i64 %4, i64* %rdx.0.reg2mem, !insn.addr !4428
  br i1 %10, label %dec_label_pc_7d03, label %dec_label_pc_7cbf, !insn.addr !4428

dec_label_pc_7cbf:                                ; preds = %dec_label_pc_7cb6
  %11 = sext i32 %arg4 to i64
  %12 = inttoptr i64 %9 to i64*, !insn.addr !4429
  %13 = load i64, i64* %12, align 8, !insn.addr !4429
  %14 = call i64 @.Lhc_find_func.1(i64 %13, i64* inttoptr (i64 4 to i64*), i64 %arg1, i64 %11), !insn.addr !4430
  %15 = trunc i64 %14 to i32, !insn.addr !4431
  %16 = icmp eq i32 %15, 0, !insn.addr !4431
  br i1 %16, label %dec_label_pc_7cbf.dec_label_pc_7cff_crit_edge, label %dec_label_pc_7cd9, !insn.addr !4432

dec_label_pc_7cbf.dec_label_pc_7cff_crit_edge:    ; preds = %dec_label_pc_7cbf
  %.pre = load i64, i64* %3, align 8
  store i64 %.pre, i64* %rdx.0.reg2mem
  br label %dec_label_pc_7d03

dec_label_pc_7cd9:                                ; preds = %dec_label_pc_7cbf
  %17 = icmp eq i32 %arg4, 0, !insn.addr !4433
  %18 = icmp eq i1 %17, false, !insn.addr !4434
  store i64 %13, i64* %storemerge2.in.in.in.reg2mem, !insn.addr !4434
  br i1 %18, label %dec_label_pc_7ce3, label %dec_label_pc_7cec, !insn.addr !4434

dec_label_pc_7ce3:                                ; preds = %dec_label_pc_7cd9
  %19 = icmp eq i32 %arg4, 1, !insn.addr !4435
  %20 = icmp eq i1 %19, false, !insn.addr !4436
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4436
  br i1 %20, label %dec_label_pc_7d5d, label %dec_label_pc_7ce8, !insn.addr !4436

dec_label_pc_7ce8:                                ; preds = %dec_label_pc_7ce3
  %21 = add i64 %13, 4, !insn.addr !4437
  store i64 %21, i64* %storemerge2.in.in.in.reg2mem, !insn.addr !4437
  br label %dec_label_pc_7cec, !insn.addr !4437

dec_label_pc_7cec:                                ; preds = %dec_label_pc_7cd9, %dec_label_pc_7ce8
  %storemerge2.in.in.in.reload = load i64, i64* %storemerge2.in.in.in.reg2mem
  %storemerge2.in.in = inttoptr i64 %storemerge2.in.in.in.reload to i32*
  %storemerge2.in = load i32, i32* %storemerge2.in.in, align 4
  %22 = load i64, i64* %3, align 8, !insn.addr !4438
  %23 = icmp sgt i32 %storemerge2.in, -1, !insn.addr !4439
  %24 = icmp eq i64 %22, 0, !insn.addr !4440
  %25 = icmp eq i1 %24, false, !insn.addr !4441
  %or.cond4 = icmp eq i1 %23, %25
  store i64 %22, i64* %rdx.0.reg2mem, !insn.addr !4442
  br i1 %or.cond4, label %dec_label_pc_7d1d, label %dec_label_pc_7d03, !insn.addr !4442

dec_label_pc_7d03:                                ; preds = %dec_label_pc_7d48, %dec_label_pc_7d1d, %dec_label_pc_7d24, %dec_label_pc_7cec, %dec_label_pc_7cbf.dec_label_pc_7cff_crit_edge, %dec_label_pc_7cb6
  %26 = ptrtoint i32* %arg2 to i64
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %27 = trunc i64 %arg3 to i32, !insn.addr !4443
  %28 = call i64 @.Lindex_decode.1(i64 %26, i32 %27, i64 %rdx.0.reload), !insn.addr !4444
  ret i64 %28, !insn.addr !4444

dec_label_pc_7d1d:                                ; preds = %dec_label_pc_7cec
  %29 = add i64 %22, ptrtoint (i32** @global_var_48 to i64), !insn.addr !4445
  %30 = inttoptr i64 %29 to i64*, !insn.addr !4445
  %31 = load i64, i64* %30, align 8, !insn.addr !4445
  %32 = icmp eq i64 %31, 0, !insn.addr !4445
  store i64 %22, i64* %rdx.0.reg2mem, !insn.addr !4446
  br i1 %32, label %dec_label_pc_7d03, label %dec_label_pc_7d24, !insn.addr !4446

dec_label_pc_7d24:                                ; preds = %dec_label_pc_7d1d
  %33 = add i64 %22, 80, !insn.addr !4447
  %34 = inttoptr i64 %33 to i64*, !insn.addr !4447
  %35 = load i64, i64* %34, align 8, !insn.addr !4447
  %36 = icmp eq i64 %35, 0, !insn.addr !4447
  store i64 %22, i64* %rdx.0.reg2mem, !insn.addr !4448
  store i64 %14, i64* %rax.0.reg2mem, !insn.addr !4448
  br i1 %36, label %dec_label_pc_7d03, label %dec_label_pc_7d30, !insn.addr !4448

dec_label_pc_7d30:                                ; preds = %dec_label_pc_7d24, %dec_label_pc_7d48
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %37 = trunc i64 %rax.0.reload to i32, !insn.addr !4449
  %38 = icmp slt i32 %37, 0, !insn.addr !4449
  %39 = icmp eq i1 %38, false, !insn.addr !4450
  br i1 %39, label %dec_label_pc_7d54, label %dec_label_pc_7d48, !insn.addr !4450

dec_label_pc_7d48:                                ; preds = %dec_label_pc_7d30
  %40 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !4451
  %41 = load i32, i32* %40, align 4, !insn.addr !4451
  store i64 %22, i64* %rdx.0.reg2mem
  store i64 4, i64* %rax.0.reg2mem
  switch i32 %41, label %dec_label_pc_7d54 [
    i32 4, label %dec_label_pc_7d30
    i32 9, label %dec_label_pc_7d03
  ]

dec_label_pc_7d54:                                ; preds = %dec_label_pc_7d48, %dec_label_pc_7d30
  store i32 %storemerge2.in, i32* %arg2, align 4, !insn.addr !4452
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !4453
  br label %dec_label_pc_7d5d, !insn.addr !4453

dec_label_pc_7d5d:                                ; preds = %dec_label_pc_7c80, %dec_label_pc_7ca2, %dec_label_pc_7ce3, %dec_label_pc_7d54
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4454

; uselistorder directives
  uselistorder i64 %22, { 0, 2, 5, 1, 6, 3, 4 }
  uselistorder i32 %storemerge2.in, { 1, 0 }
  uselistorder i64 %13, { 1, 0, 2 }
  uselistorder i64* %3, { 1, 0, 2 }
  uselistorder i64* %storemerge2.in.in.in.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rdx.0.reg2mem, { 1, 3, 2, 0, 4, 5, 6 }
  uselistorder i64* %rax.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 4, 3, 2, 1 }
  uselistorder i32* %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_7d5d, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_7d30, { 1, 0 }
  uselistorder label %dec_label_pc_7d03, { 0, 2, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_7cec, { 1, 0 }
}

define i64 @.Llzma_block_unpadded_size.1(i64 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_7d70:
  %rcx.0.reg2mem = alloca i32, !insn.addr !4455
  %0 = icmp eq i64 %arg5, 0, !insn.addr !4456
  %1 = icmp eq i1 %0, false, !insn.addr !4457
  br i1 %1, label %dec_label_pc_7d7c, label %dec_label_pc_7d79, !insn.addr !4457

dec_label_pc_7d79:                                ; preds = %dec_label_pc_7dd0, %dec_label_pc_7dc4, %dec_label_pc_7dba, %dec_label_pc_7dad, %dec_label_pc_7d98, %dec_label_pc_7d8e, %dec_label_pc_7d85, %dec_label_pc_7d7c, %dec_label_pc_7d70
  ret i64 0, !insn.addr !4458

dec_label_pc_7d7c:                                ; preds = %dec_label_pc_7d70
  %2 = add i64 %arg5, 32, !insn.addr !4459
  %3 = inttoptr i64 %2 to i64*, !insn.addr !4459
  %4 = load i64, i64* %3, align 8, !insn.addr !4459
  %5 = icmp eq i64 %4, 0, !insn.addr !4460
  br i1 %5, label %dec_label_pc_7d79, label %dec_label_pc_7d85, !insn.addr !4461

dec_label_pc_7d85:                                ; preds = %dec_label_pc_7d7c
  %6 = add i64 %4, 16, !insn.addr !4462
  %7 = inttoptr i64 %6 to i64*, !insn.addr !4462
  %8 = load i64, i64* %7, align 8, !insn.addr !4462
  %9 = icmp eq i64 %8, 0, !insn.addr !4463
  br i1 %9, label %dec_label_pc_7d79, label %dec_label_pc_7d8e, !insn.addr !4464

dec_label_pc_7d8e:                                ; preds = %dec_label_pc_7d85
  %10 = add i64 %4, 4, !insn.addr !4465
  %11 = inttoptr i64 %10 to i32*, !insn.addr !4465
  %12 = load i32, i32* %11, align 4, !insn.addr !4465
  %13 = icmp eq i32 %12, 0, !insn.addr !4465
  br i1 %13, label %dec_label_pc_7d79, label %dec_label_pc_7d94, !insn.addr !4466

dec_label_pc_7d94:                                ; preds = %dec_label_pc_7d8e
  %14 = trunc i64 %arg1 to i32, !insn.addr !4467
  %15 = icmp eq i32 %14, 0, !insn.addr !4467
  %16 = icmp eq i1 %15, false, !insn.addr !4468
  br i1 %16, label %dec_label_pc_7dc0, label %dec_label_pc_7d98, !insn.addr !4468

dec_label_pc_7d98:                                ; preds = %dec_label_pc_7d94
  %17 = add i64 %4, 200, !insn.addr !4469
  %18 = inttoptr i64 %17 to i64*, !insn.addr !4469
  %19 = load i64, i64* %18, align 8, !insn.addr !4469
  %20 = icmp eq i64 %19, 0, !insn.addr !4470
  br i1 %20, label %dec_label_pc_7d79, label %dec_label_pc_7da4, !insn.addr !4471

dec_label_pc_7da4:                                ; preds = %dec_label_pc_7d98
  %21 = inttoptr i64 %19 to i32*, !insn.addr !4472
  %22 = load i32, i32* %21, align 4, !insn.addr !4472
  %23 = icmp sgt i32 %22, 2, !insn.addr !4473
  br i1 %23, label %dec_label_pc_7dba, label %dec_label_pc_7dad, !insn.addr !4473

dec_label_pc_7dad:                                ; preds = %dec_label_pc_7da4
  %24 = icmp slt i32 %22, 0, !insn.addr !4474
  br i1 %24, label %dec_label_pc_7d79, label %dec_label_pc_7db2, !insn.addr !4475

dec_label_pc_7db2:                                ; preds = %dec_label_pc_7dad
  store i32 3, i32* %21, align 4, !insn.addr !4476
  br label %dec_label_pc_7dc0, !insn.addr !4477

dec_label_pc_7dba:                                ; preds = %dec_label_pc_7da4
  %25 = icmp eq i32 %22, 3, !insn.addr !4478
  %26 = icmp eq i1 %25, false, !insn.addr !4479
  br i1 %26, label %dec_label_pc_7d79, label %dec_label_pc_7dc0, !insn.addr !4479

dec_label_pc_7dc0:                                ; preds = %dec_label_pc_7dba, %dec_label_pc_7db2, %dec_label_pc_7d94
  %27 = icmp eq i32 %arg2, 0, !insn.addr !4480
  br i1 %27, label %dec_label_pc_7dd9, label %dec_label_pc_7dc4, !insn.addr !4481

dec_label_pc_7dc4:                                ; preds = %dec_label_pc_7dc0
  %28 = add i64 %4, 192, !insn.addr !4482
  %29 = inttoptr i64 %28 to i64*, !insn.addr !4482
  %30 = load i64, i64* %29, align 8, !insn.addr !4482
  %31 = icmp eq i64 %30, 0, !insn.addr !4483
  br i1 %31, label %dec_label_pc_7d79, label %dec_label_pc_7dd0, !insn.addr !4484

dec_label_pc_7dd0:                                ; preds = %dec_label_pc_7dc4
  %32 = inttoptr i64 %30 to i32*, !insn.addr !4485
  %33 = load i32, i32* %32, align 4, !insn.addr !4485
  %34 = icmp ult i32 %33, 2
  br i1 %34, label %dec_label_pc_7dd5, label %dec_label_pc_7d79, !insn.addr !4486

dec_label_pc_7dd5:                                ; preds = %dec_label_pc_7dd0
  store i32 0, i32* %32, align 4, !insn.addr !4487
  br label %dec_label_pc_7dd9, !insn.addr !4487

dec_label_pc_7dd9:                                ; preds = %dec_label_pc_7dd5, %dec_label_pc_7dc0
  %35 = add i64 %4, 56, !insn.addr !4488
  %36 = inttoptr i64 %35 to i64*, !insn.addr !4488
  %37 = load i64, i64* %36, align 8, !insn.addr !4488
  %38 = icmp eq i32 %arg3, 0, !insn.addr !4489
  %39 = icmp eq i1 %38, false, !insn.addr !4490
  store i32 %arg4, i32* %rcx.0.reg2mem, !insn.addr !4490
  br i1 %39, label %dec_label_pc_7de7, label %dec_label_pc_7de1, !insn.addr !4490

dec_label_pc_7de1:                                ; preds = %dec_label_pc_7dd9
  %40 = add i64 %37, -8, !insn.addr !4491
  %41 = inttoptr i64 %40 to i32*, !insn.addr !4491
  %42 = load i32, i32* %41, align 4, !insn.addr !4491
  %43 = add i32 %42, 1, !insn.addr !4492
  store i32 %43, i32* %rcx.0.reg2mem, !insn.addr !4492
  br label %dec_label_pc_7de7, !insn.addr !4492

dec_label_pc_7de7:                                ; preds = %dec_label_pc_7de1, %dec_label_pc_7dd9
  %rcx.0.reload = load i32, i32* %rcx.0.reg2mem
  %44 = add i64 %4, 64, !insn.addr !4493
  %45 = inttoptr i64 %44 to i32*, !insn.addr !4493
  store i32 %rcx.0.reload, i32* %45, align 4, !insn.addr !4493
  %46 = inttoptr i64 %37 to i64*, !insn.addr !4494
  store i64 %8, i64* %46, align 8, !insn.addr !4494
  ret i64 1, !insn.addr !4495

; uselistorder directives
  uselistorder i64 %4, { 1, 2, 0, 4, 3, 5, 6 }
}

define i64 @.Llzma_rc_prices.1(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_7e00:
  %rdx.0.reg2mem = alloca i64, !insn.addr !4496
  %.reg2mem = alloca i64, !insn.addr !4496
  %merge.reg2mem = alloca i64, !insn.addr !4496
  %0 = add i64 %arg2, 48, !insn.addr !4497
  %1 = inttoptr i64 %0 to i64*, !insn.addr !4497
  %2 = load i64, i64* %1, align 8, !insn.addr !4497
  %3 = icmp ne i64 %arg1, 0, !insn.addr !4498
  %4 = icmp eq i64 %2, 0, !insn.addr !4499
  %5 = icmp eq i1 %4, false, !insn.addr !4500
  %or.cond = icmp eq i1 %3, %5
  store i64 0, i64* %merge.reg2mem, !insn.addr !4501
  br i1 %or.cond, label %dec_label_pc_7e15, label %dec_label_pc_7e12, !insn.addr !4501

dec_label_pc_7e12:                                ; preds = %dec_label_pc_7e00, %dec_label_pc_7e42, %dec_label_pc_7ea8, %dec_label_pc_7e9d, %dec_label_pc_7e92, %dec_label_pc_7e8b, %dec_label_pc_7e30, %dec_label_pc_7e27, %dec_label_pc_7e1e, %dec_label_pc_7e15
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !4502

dec_label_pc_7e15:                                ; preds = %dec_label_pc_7e00
  %6 = add i64 %2, 56, !insn.addr !4503
  %7 = inttoptr i64 %6 to i64*, !insn.addr !4503
  %8 = load i64, i64* %7, align 8, !insn.addr !4503
  %9 = icmp eq i64 %8, 0, !insn.addr !4504
  store i64 0, i64* %merge.reg2mem, !insn.addr !4505
  br i1 %9, label %dec_label_pc_7e12, label %dec_label_pc_7e1e, !insn.addr !4505

dec_label_pc_7e1e:                                ; preds = %dec_label_pc_7e15
  %10 = add i64 %2, 64, !insn.addr !4506
  %11 = inttoptr i64 %10 to i64*, !insn.addr !4506
  %12 = load i64, i64* %11, align 8, !insn.addr !4506
  %13 = icmp eq i64 %12, 0, !insn.addr !4507
  store i64 0, i64* %merge.reg2mem, !insn.addr !4508
  br i1 %13, label %dec_label_pc_7e12, label %dec_label_pc_7e27, !insn.addr !4508

dec_label_pc_7e27:                                ; preds = %dec_label_pc_7e1e
  %14 = add i64 %2, 96, !insn.addr !4509
  %15 = inttoptr i64 %14 to i64*, !insn.addr !4509
  %16 = load i64, i64* %15, align 8, !insn.addr !4509
  %17 = icmp eq i64 %16, 0, !insn.addr !4510
  store i64 0, i64* %merge.reg2mem, !insn.addr !4511
  br i1 %17, label %dec_label_pc_7e12, label %dec_label_pc_7e30, !insn.addr !4511

dec_label_pc_7e30:                                ; preds = %dec_label_pc_7e27
  %18 = add i64 %2, 4, !insn.addr !4512
  %19 = inttoptr i64 %18 to i32*, !insn.addr !4512
  %20 = load i32, i32* %19, align 4, !insn.addr !4512
  %21 = icmp eq i32 %20, 0, !insn.addr !4512
  store i64 0, i64* %merge.reg2mem, !insn.addr !4513
  br i1 %21, label %dec_label_pc_7e12, label %dec_label_pc_7e36, !insn.addr !4513

dec_label_pc_7e36:                                ; preds = %dec_label_pc_7e30
  %22 = and i64 %arg1, 8
  %23 = icmp eq i64 %22, 0, !insn.addr !4514
  br i1 %23, label %dec_label_pc_7e4b, label %dec_label_pc_7e42, !insn.addr !4515

dec_label_pc_7e42:                                ; preds = %dec_label_pc_7e36
  %24 = add i64 %arg2, 144, !insn.addr !4516
  %25 = inttoptr i64 %24 to i32*, !insn.addr !4516
  %26 = load i32, i32* %25, align 4, !insn.addr !4516
  %27 = icmp eq i32 %26, 0, !insn.addr !4516
  %28 = icmp eq i1 %27, false, !insn.addr !4517
  store i64 1, i64* %merge.reg2mem, !insn.addr !4517
  br i1 %28, label %dec_label_pc_7e12, label %dec_label_pc_7e4b, !insn.addr !4517

dec_label_pc_7e4b:                                ; preds = %dec_label_pc_7e42, %dec_label_pc_7e36
  %29 = inttoptr i64 %12 to i64*
  %30 = load i64, i64* %29, align 8, !insn.addr !4518
  %31 = icmp eq i64 %30, 0, !insn.addr !4519
  store i64 0, i64* %.reg2mem, !insn.addr !4520
  store i64 %8, i64* %rdx.0.reg2mem, !insn.addr !4520
  br i1 %31, label %dec_label_pc_7e6a, label %dec_label_pc_7e53, !insn.addr !4520

dec_label_pc_7e53:                                ; preds = %dec_label_pc_7e4b
  %32 = add i64 %arg2, 88, !insn.addr !4521
  %33 = inttoptr i64 %32 to i64*, !insn.addr !4521
  %34 = load i64, i64* %33, align 8, !insn.addr !4521
  %35 = icmp ult i64 %30, %34, !insn.addr !4521
  store i64 %30, i64* %.reg2mem, !insn.addr !4522
  store i64 %8, i64* %rdx.0.reg2mem, !insn.addr !4522
  br i1 %35, label %dec_label_pc_7e6a, label %dec_label_pc_7e59, !insn.addr !4522

dec_label_pc_7e59:                                ; preds = %dec_label_pc_7e53
  %36 = add i64 %arg2, 96, !insn.addr !4523
  %37 = inttoptr i64 %36 to i64*, !insn.addr !4523
  %38 = load i64, i64* %37, align 8, !insn.addr !4523
  %39 = icmp ult i64 %30, %38, !insn.addr !4523
  %40 = icmp eq i1 %39, false, !insn.addr !4524
  store i64 %30, i64* %.reg2mem, !insn.addr !4524
  store i64 %8, i64* %rdx.0.reg2mem, !insn.addr !4524
  br i1 %40, label %dec_label_pc_7e6a, label %dec_label_pc_7e5f, !insn.addr !4524

dec_label_pc_7e5f:                                ; preds = %dec_label_pc_7e59
  store i64 %12, i64* %7, align 8, !insn.addr !4525
  store i64 %8, i64* %11, align 8, !insn.addr !4526
  %.phi.trans.insert = inttoptr i64 %8 to i64*
  %.pre = load i64, i64* %.phi.trans.insert, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !4527
  store i64 %12, i64* %rdx.0.reg2mem, !insn.addr !4527
  br label %dec_label_pc_7e6a, !insn.addr !4527

dec_label_pc_7e6a:                                ; preds = %dec_label_pc_7e5f, %dec_label_pc_7e59, %dec_label_pc_7e53, %dec_label_pc_7e4b
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4528
  %41 = inttoptr i64 %rdx.0.reload to i64*, !insn.addr !4529
  %42 = load i64, i64* %41, align 8, !insn.addr !4529
  %43 = add i64 %2, ptrtoint (i32** @global_var_48 to i64), !insn.addr !4530
  %44 = inttoptr i64 %43 to i64*, !insn.addr !4530
  store i64 %42, i64* %44, align 8, !insn.addr !4530
  %45 = add i64 %2, 80, !insn.addr !4531
  %46 = inttoptr i64 %45 to i64*, !insn.addr !4531
  store i64 %.reload, i64* %46, align 8, !insn.addr !4531
  %47 = icmp eq i1 %23, false, !insn.addr !4532
  br i1 %47, label %dec_label_pc_7e85, label %dec_label_pc_7e7d, !insn.addr !4532

dec_label_pc_7e7d:                                ; preds = %dec_label_pc_7e6a
  %48 = inttoptr i64 %2 to i32*, !insn.addr !4533
  store i32 1, i32* %48, align 4, !insn.addr !4533
  br label %dec_label_pc_7ea8, !insn.addr !4534

dec_label_pc_7e85:                                ; preds = %dec_label_pc_7e6a
  %49 = and i64 %arg1, 16
  %50 = icmp eq i64 %49, 0, !insn.addr !4535
  br i1 %50, label %dec_label_pc_7ea8, label %dec_label_pc_7e8b, !insn.addr !4536

dec_label_pc_7e8b:                                ; preds = %dec_label_pc_7e85
  %51 = add i64 %2, 16, !insn.addr !4537
  %52 = inttoptr i64 %51 to i64*, !insn.addr !4537
  %53 = load i64, i64* %52, align 8, !insn.addr !4537
  %54 = icmp eq i64 %53, 0, !insn.addr !4537
  store i64 0, i64* %merge.reg2mem, !insn.addr !4538
  br i1 %54, label %dec_label_pc_7e12, label %dec_label_pc_7e92, !insn.addr !4538

dec_label_pc_7e92:                                ; preds = %dec_label_pc_7e8b
  %55 = add i64 %2, 24, !insn.addr !4539
  %56 = inttoptr i64 %55 to i64*, !insn.addr !4539
  %57 = load i64, i64* %56, align 8, !insn.addr !4539
  %58 = icmp eq i64 %57, 0, !insn.addr !4539
  store i64 0, i64* %merge.reg2mem, !insn.addr !4540
  br i1 %58, label %dec_label_pc_7e12, label %dec_label_pc_7e9d, !insn.addr !4540

dec_label_pc_7e9d:                                ; preds = %dec_label_pc_7e92
  %59 = add i64 %2, 32, !insn.addr !4541
  %60 = inttoptr i64 %59 to i64*, !insn.addr !4541
  %61 = load i64, i64* %60, align 8, !insn.addr !4541
  %62 = icmp eq i64 %61, 0, !insn.addr !4541
  store i64 0, i64* %merge.reg2mem, !insn.addr !4542
  br i1 %62, label %dec_label_pc_7e12, label %dec_label_pc_7ea8, !insn.addr !4542

dec_label_pc_7ea8:                                ; preds = %dec_label_pc_7e9d, %dec_label_pc_7e85, %dec_label_pc_7e7d
  store i64 %16, i64* %41, align 8, !insn.addr !4543
  store i64 1, i64* %merge.reg2mem, !insn.addr !4543
  br label %dec_label_pc_7e12, !insn.addr !4543

; uselistorder directives
  uselistorder i64 %30, { 0, 2, 1, 3, 4 }
  uselistorder i1 %23, { 1, 0 }
  uselistorder i64 %8, { 3, 4, 0, 1, 2, 5 }
  uselistorder i64 %2, { 4, 3, 2, 1, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i64* %merge.reg2mem, { 2, 10, 9, 8, 1, 7, 6, 5, 4, 0, 3 }
  uselistorder i64 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_7e12, { 2, 3, 4, 5, 1, 6, 7, 8, 9, 0 }
}

define i64 @.Lstream_encoder_mt_init.part.0(i64 %arg1) local_unnamed_addr {
dec_label_pc_7ec0:
  %merge.reg2mem = alloca i64, !insn.addr !4544
  %storemerge.reg2mem = alloca i1, !insn.addr !4544
  %cf.0.reg2mem = alloca i1, !insn.addr !4544
  %0 = icmp eq i64 %arg1, 0, !insn.addr !4545
  store i64 0, i64* %merge.reg2mem, !insn.addr !4546
  br i1 %0, label %dec_label_pc_7eef, label %dec_label_pc_7ec9, !insn.addr !4546

dec_label_pc_7ec9:                                ; preds = %dec_label_pc_7ec0
  %1 = add i64 %arg1, 260, !insn.addr !4547
  %2 = inttoptr i64 %1 to i32*, !insn.addr !4547
  %3 = load i32, i32* %2, align 4, !insn.addr !4547
  %4 = icmp sgt i32 %3, 2, !insn.addr !4548
  br i1 %4, label %dec_label_pc_7ee7, label %dec_label_pc_7ed4, !insn.addr !4548

dec_label_pc_7ed4:                                ; preds = %dec_label_pc_7ec9
  %5 = icmp eq i32 %3, 0, !insn.addr !4549
  %6 = icmp slt i32 %3, 0, !insn.addr !4549
  %7 = icmp eq i1 %6, false, !insn.addr !4550
  %8 = icmp eq i1 %5, false, !insn.addr !4550
  %9 = icmp eq i1 %7, %8, !insn.addr !4550
  br i1 %9, label %dec_label_pc_7ef5, label %dec_label_pc_7ed8, !insn.addr !4550

dec_label_pc_7ed8:                                ; preds = %dec_label_pc_7ed4
  br i1 %8, label %dec_label_pc_7f31, label %dec_label_pc_7eda, !insn.addr !4551

dec_label_pc_7eda:                                ; preds = %dec_label_pc_7ed8
  %10 = add i64 %arg1, 232, !insn.addr !4552
  %11 = inttoptr i64 %10 to i64*, !insn.addr !4552
  %12 = load i64, i64* %11, align 8, !insn.addr !4552
  %13 = icmp ult i64 %12, 174, !insn.addr !4552
  %14 = icmp eq i64 %12, 174, !insn.addr !4552
  store i1 %13, i1* %cf.0.reg2mem, !insn.addr !4553
  store i1 %14, i1* %storemerge.reg2mem, !insn.addr !4553
  br label %dec_label_pc_7eed, !insn.addr !4553

dec_label_pc_7ee7:                                ; preds = %dec_label_pc_7ec9
  %15 = add i32 %3, -3, !insn.addr !4554
  %16 = icmp eq i32 %15, 0, !insn.addr !4555
  %17 = icmp eq i32 %15, 1, !insn.addr !4555
  store i1 %16, i1* %cf.0.reg2mem, !insn.addr !4555
  store i1 %17, i1* %storemerge.reg2mem, !insn.addr !4555
  br label %dec_label_pc_7eed, !insn.addr !4555

dec_label_pc_7eed:                                ; preds = %dec_label_pc_7ee7, %dec_label_pc_7eda
  %storemerge.reload = load i1, i1* %storemerge.reg2mem
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %18 = or i1 %cf.0.reload, %storemerge.reload, !insn.addr !4556
  store i64 1, i64* %merge.reg2mem, !insn.addr !4556
  br i1 %18, label %dec_label_pc_7eef, label %dec_label_pc_7f31, !insn.addr !4556

dec_label_pc_7eef:                                ; preds = %dec_label_pc_7f18, %dec_label_pc_7f31, %dec_label_pc_7ec0, %dec_label_pc_7eed
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !4557

dec_label_pc_7ef5:                                ; preds = %dec_label_pc_7ed4
  %19 = add i64 %arg1, 248, !insn.addr !4558
  %20 = inttoptr i64 %19 to i64*, !insn.addr !4558
  %21 = load i64, i64* %20, align 8, !insn.addr !4558
  %22 = icmp eq i64 %21, 0, !insn.addr !4559
  br i1 %22, label %dec_label_pc_7f31, label %dec_label_pc_7f01, !insn.addr !4560

dec_label_pc_7f01:                                ; preds = %dec_label_pc_7ef5
  %23 = add i64 %arg1, 232, !insn.addr !4561
  %24 = inttoptr i64 %23 to i64*, !insn.addr !4561
  %25 = load i64, i64* %24, align 8, !insn.addr !4561
  %26 = icmp ult i64 %25, 174
  br i1 %26, label %dec_label_pc_7f31, label %dec_label_pc_7f10, !insn.addr !4562

dec_label_pc_7f10:                                ; preds = %dec_label_pc_7f01
  %27 = inttoptr i64 %21 to i16*, !insn.addr !4563
  %28 = load i16, i16* %27, align 2, !insn.addr !4563
  %29 = zext i16 %28 to i64, !insn.addr !4563
  %30 = icmp ugt i64 %25, %29, !insn.addr !4564
  br i1 %30, label %dec_label_pc_7f31, label %dec_label_pc_7f18, !insn.addr !4565

dec_label_pc_7f18:                                ; preds = %dec_label_pc_7f10
  %31 = add nuw nsw i64 %29, 96, !insn.addr !4566
  %32 = add i64 %arg1, 224, !insn.addr !4567
  %33 = inttoptr i64 %32 to i64*, !insn.addr !4567
  %34 = load i64, i64* %33, align 8, !insn.addr !4567
  %35 = icmp ult i64 %34, %31, !insn.addr !4567
  %36 = icmp eq i1 %35, false, !insn.addr !4568
  store i64 1, i64* %merge.reg2mem, !insn.addr !4568
  br i1 %36, label %dec_label_pc_7eef, label %dec_label_pc_7f31, !insn.addr !4568

dec_label_pc_7f31:                                ; preds = %dec_label_pc_7eed, %dec_label_pc_7f18, %dec_label_pc_7f10, %dec_label_pc_7f01, %dec_label_pc_7ef5, %dec_label_pc_7ed8
  store i32 -1, i32* %2, align 4, !insn.addr !4569
  store i64 0, i64* %merge.reg2mem, !insn.addr !4569
  br label %dec_label_pc_7eef, !insn.addr !4569

; uselistorder directives
  uselistorder i32 %15, { 1, 0 }
  uselistorder i1* %cf.0.reg2mem, { 0, 2, 1 }
  uselistorder i1* %storemerge.reg2mem, { 0, 2, 1 }
  uselistorder i64* %merge.reg2mem, { 2, 3, 0, 4, 1 }
  uselistorder i64 %arg1, { 1, 2, 3, 0, 4, 5 }
  uselistorder label %dec_label_pc_7f31, { 1, 2, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_7eef, { 1, 0, 3, 2 }
}

define i64 @.Lworker_start.0(i64* %arg1, i64 %arg2, i64* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_7f40:
  %merge.reg2mem = alloca i64, !insn.addr !4570
  %rdx.2.reg2mem = alloca i64, !insn.addr !4570
  %rcx.0.reg2mem = alloca i64, !insn.addr !4570
  %r11.1.reg2mem = alloca i64, !insn.addr !4570
  %rdx.1.reg2mem = alloca i64, !insn.addr !4570
  %r10.1.reg2mem = alloca i64, !insn.addr !4570
  %rdx.0.reg2mem = alloca i64, !insn.addr !4570
  %r11.0.reg2mem = alloca i64, !insn.addr !4570
  %r10.0.reg2mem = alloca i64, !insn.addr !4570
  %rax.0.reg2mem = alloca i64, !insn.addr !4570
  %0 = icmp eq i64* %arg1, null, !insn.addr !4571
  %1 = icmp ult i64 %arg2, 7
  %or.cond = or i1 %0, %1
  store i64 0, i64* %merge.reg2mem, !insn.addr !4572
  br i1 %or.cond, label %dec_label_pc_808c, label %dec_label_pc_7f57, !insn.addr !4572

dec_label_pc_7f57:                                ; preds = %dec_label_pc_7f40
  %2 = icmp eq i64* %arg3, null, !insn.addr !4573
  %3 = icmp eq i64 %arg4, 0, !insn.addr !4574
  %or.cond3 = or i1 %2, %3
  store i64 0, i64* %merge.reg2mem, !insn.addr !4575
  br i1 %or.cond3, label %dec_label_pc_808c, label %dec_label_pc_7f74, !insn.addr !4575

dec_label_pc_7f74:                                ; preds = %dec_label_pc_7f57
  %4 = add i64 %arg4, 56, !insn.addr !4576
  %5 = inttoptr i64 %4 to i64*, !insn.addr !4576
  %6 = load i64, i64* %5, align 8, !insn.addr !4576
  %7 = icmp eq i64 %6, 0, !insn.addr !4577
  store i64 0, i64* %merge.reg2mem, !insn.addr !4578
  br i1 %7, label %dec_label_pc_808c, label %dec_label_pc_7f83, !insn.addr !4578

dec_label_pc_7f83:                                ; preds = %dec_label_pc_7f74
  %8 = add i64 %arg4, 64, !insn.addr !4579
  %9 = inttoptr i64 %8 to i64*, !insn.addr !4579
  %10 = load i64, i64* %9, align 8, !insn.addr !4579
  %11 = icmp eq i64 %10, 0, !insn.addr !4580
  store i64 0, i64* %merge.reg2mem, !insn.addr !4581
  br i1 %11, label %dec_label_pc_808c, label %dec_label_pc_7f90, !insn.addr !4581

dec_label_pc_7f90:                                ; preds = %dec_label_pc_7f83
  %12 = ptrtoint i64* %arg1 to i64
  %13 = add i64 %12, %arg2, !insn.addr !4582
  %14 = icmp ult i64 %13, %12, !insn.addr !4582
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4583
  store i64 0, i64* %merge.reg2mem, !insn.addr !4583
  br i1 %14, label %dec_label_pc_808c, label %dec_label_pc_7fa4, !insn.addr !4583

dec_label_pc_7fa4:                                ; preds = %dec_label_pc_7f90, %dec_label_pc_7fe0
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %15 = add i64 %rax.0.reload, %12, !insn.addr !4584
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !4585
  store i64 %r10.0.reload, i64* %r10.1.reg2mem, !insn.addr !4585
  br label %dec_label_pc_7fb0, !insn.addr !4585

dec_label_pc_7fb0:                                ; preds = %dec_label_pc_7fbc, %dec_label_pc_7fa4
  %r10.1.reload = load i64, i64* %r10.1.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %16 = add i64 %rdx.0.reload, %15, !insn.addr !4586
  %17 = inttoptr i64 %16 to i8*, !insn.addr !4586
  %18 = load i8, i8* %17, align 1, !insn.addr !4586
  %19 = zext i8 %18 to i64, !insn.addr !4586
  %20 = and i64 %r10.1.reload, -256, !insn.addr !4586
  %21 = or i64 %20, %19, !insn.addr !4586
  %22 = add i64 %rdx.0.reload, %6, !insn.addr !4587
  %23 = inttoptr i64 %22 to i8*, !insn.addr !4587
  %24 = load i8, i8* %23, align 1, !insn.addr !4587
  %25 = sext i8 %24 to i64, !insn.addr !4588
  %26 = icmp eq i64 %21, %25
  store i64 0, i64* %rdx.1.reg2mem, !insn.addr !4588
  store i64 %r11.0.reload, i64* %r11.1.reg2mem, !insn.addr !4588
  br i1 %26, label %dec_label_pc_7fbc, label %dec_label_pc_7fc9, !insn.addr !4588

dec_label_pc_7fbc:                                ; preds = %dec_label_pc_7fb0
  %27 = add nuw nsw i64 %rdx.0.reload, 1, !insn.addr !4589
  %28 = icmp eq i64 %rdx.0.reload, 6, !insn.addr !4590
  %29 = icmp eq i1 %28, false, !insn.addr !4591
  store i64 %27, i64* %rdx.0.reg2mem, !insn.addr !4591
  store i64 %21, i64* %r10.1.reg2mem, !insn.addr !4591
  br i1 %29, label %dec_label_pc_7fb0, label %dec_label_pc_7ff1, !insn.addr !4591

dec_label_pc_7fc9:                                ; preds = %dec_label_pc_7fb0, %dec_label_pc_7fd5
  %r11.1.reload = load i64, i64* %r11.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %30 = add i64 %rdx.1.reload, %15, !insn.addr !4592
  %31 = inttoptr i64 %30 to i8*, !insn.addr !4592
  %32 = load i8, i8* %31, align 1, !insn.addr !4592
  %33 = zext i8 %32 to i64, !insn.addr !4592
  %34 = and i64 %r11.1.reload, -256, !insn.addr !4592
  %35 = or i64 %34, %33, !insn.addr !4592
  %36 = add i64 %rdx.1.reload, %10, !insn.addr !4593
  %37 = inttoptr i64 %36 to i8*, !insn.addr !4593
  %38 = load i8, i8* %37, align 1, !insn.addr !4593
  %39 = sext i8 %38 to i64, !insn.addr !4594
  %40 = icmp eq i64 %35, %39
  br i1 %40, label %dec_label_pc_7fd5, label %dec_label_pc_7fe0, !insn.addr !4594

dec_label_pc_7fd5:                                ; preds = %dec_label_pc_7fc9
  %41 = add nuw nsw i64 %rdx.1.reload, 1, !insn.addr !4595
  %42 = icmp eq i64 %rdx.1.reload, 6, !insn.addr !4596
  %43 = icmp eq i1 %42, false, !insn.addr !4597
  store i64 %41, i64* %rdx.1.reg2mem, !insn.addr !4597
  store i64 %35, i64* %r11.1.reg2mem, !insn.addr !4597
  br i1 %43, label %dec_label_pc_7fc9, label %dec_label_pc_7ff1, !insn.addr !4597

dec_label_pc_7fe0:                                ; preds = %dec_label_pc_7fc9
  %44 = add i64 %rax.0.reload, 1, !insn.addr !4598
  %45 = sub i64 %arg2, %44, !insn.addr !4599
  %46 = icmp eq i64 %45, 6, !insn.addr !4600
  %47 = icmp eq i1 %46, false, !insn.addr !4601
  store i64 %44, i64* %rax.0.reg2mem, !insn.addr !4601
  store i64 %21, i64* %r10.0.reg2mem, !insn.addr !4601
  store i64 %35, i64* %r11.0.reg2mem, !insn.addr !4601
  store i64 0, i64* %merge.reg2mem, !insn.addr !4601
  br i1 %47, label %dec_label_pc_7fa4, label %dec_label_pc_808c, !insn.addr !4601

dec_label_pc_7ff1:                                ; preds = %dec_label_pc_7fbc, %dec_label_pc_7fd5
  %48 = icmp ult i64 %rax.0.reload, 8
  %49 = icmp eq i64 %15, 0, !insn.addr !4602
  %or.cond5 = or i1 %48, %49
  store i64 0, i64* %merge.reg2mem, !insn.addr !4603
  br i1 %or.cond5, label %dec_label_pc_808c, label %dec_label_pc_8004, !insn.addr !4603

dec_label_pc_8004:                                ; preds = %dec_label_pc_7ff1
  %50 = add i64 %15, -8, !insn.addr !4604
  %51 = inttoptr i64 %50 to i32*, !insn.addr !4604
  %52 = load i32, i32* %51, align 4, !insn.addr !4604
  %53 = call i32 @llvm.bswap.i32(i32 %52), !insn.addr !4605
  %54 = icmp ult i32 %53, 65536, !insn.addr !4606
  %55 = icmp eq i32 %52, 256, !insn.addr !4606
  %56 = or i1 %55, %54, !insn.addr !4607
  store i64 0, i64* %merge.reg2mem, !insn.addr !4607
  br i1 %56, label %dec_label_pc_8013, label %dec_label_pc_808c, !insn.addr !4607

dec_label_pc_8013:                                ; preds = %dec_label_pc_8004
  %57 = zext i32 %53 to i64, !insn.addr !4605
  %58 = add i64 %50, %57, !insn.addr !4608
  %59 = icmp ult i64 %13, %58, !insn.addr !4609
  store i64 0, i64* %merge.reg2mem, !insn.addr !4610
  br i1 %59, label %dec_label_pc_808c, label %dec_label_pc_801f, !insn.addr !4610

dec_label_pc_801f:                                ; preds = %dec_label_pc_8013
  %60 = sub i64 %arg2, %rax.0.reload
  %61 = call i64 @function_7070(i64 %15, i64 %60), !insn.addr !4611
  %62 = icmp ult i64 %61, %60, !insn.addr !4612
  %63 = icmp eq i1 %62, false, !insn.addr !4613
  store i64 0, i64* %merge.reg2mem, !insn.addr !4613
  br i1 %63, label %dec_label_pc_808c, label %dec_label_pc_8034, !insn.addr !4613

dec_label_pc_8034:                                ; preds = %dec_label_pc_801f
  %64 = add i64 %61, %15, !insn.addr !4614
  %65 = icmp ult i64 %64, %58, !insn.addr !4615
  %66 = icmp eq i1 %65, false, !insn.addr !4616
  store i64 0, i64* %merge.reg2mem, !insn.addr !4616
  br i1 %66, label %dec_label_pc_808c, label %dec_label_pc_803c, !insn.addr !4616

dec_label_pc_803c:                                ; preds = %dec_label_pc_8034
  %67 = inttoptr i64 %64 to i32*, !insn.addr !4617
  %68 = load i32, i32* %67, align 4, !insn.addr !4617
  %69 = call i32 @llvm.bswap.i32(i32 %68), !insn.addr !4618
  %70 = icmp ult i32 %69, 65536, !insn.addr !4619
  %71 = icmp eq i32 %68, 256, !insn.addr !4619
  %72 = or i1 %71, %70, !insn.addr !4620
  store i64 0, i64* %merge.reg2mem, !insn.addr !4620
  br i1 %72, label %dec_label_pc_8048, label %dec_label_pc_808c, !insn.addr !4620

dec_label_pc_8048:                                ; preds = %dec_label_pc_803c
  %73 = add i32 %69, 4
  %74 = zext i32 %73 to i64, !insn.addr !4621
  %75 = add i64 %64, %74, !insn.addr !4622
  %76 = icmp ult i64 %75, %58, !insn.addr !4623
  %77 = icmp eq i1 %76, false, !insn.addr !4624
  store i64 0, i64* %merge.reg2mem, !insn.addr !4624
  br i1 %77, label %dec_label_pc_808c, label %dec_label_pc_8055, !insn.addr !4624

dec_label_pc_8055:                                ; preds = %dec_label_pc_8048
  %78 = inttoptr i64 %75 to i32*, !insn.addr !4625
  %79 = load i32, i32* %78, align 4, !insn.addr !4625
  %80 = call i32 @llvm.bswap.i32(i32 %79), !insn.addr !4626
  %81 = icmp ult i32 %80, 65536, !insn.addr !4627
  %82 = icmp eq i32 %79, 256, !insn.addr !4627
  %83 = or i1 %82, %81, !insn.addr !4628
  store i64 0, i64* %merge.reg2mem, !insn.addr !4628
  br i1 %83, label %dec_label_pc_8061, label %dec_label_pc_808c, !insn.addr !4628

dec_label_pc_8061:                                ; preds = %dec_label_pc_8055
  %84 = zext i32 %80 to i64, !insn.addr !4626
  %85 = add i64 %75, 4, !insn.addr !4629
  %86 = add i64 %85, %84, !insn.addr !4630
  %87 = icmp ult i64 %58, %86, !insn.addr !4631
  %88 = icmp eq i1 %87, false, !insn.addr !4632
  store i64 0, i64* %merge.reg2mem, !insn.addr !4632
  br i1 %88, label %dec_label_pc_808c, label %dec_label_pc_806f, !insn.addr !4632

dec_label_pc_806f:                                ; preds = %dec_label_pc_8061
  %89 = inttoptr i64 %85 to i8*, !insn.addr !4633
  %90 = load i8, i8* %89, align 1, !insn.addr !4633
  %91 = icmp eq i8 %90, 0, !insn.addr !4633
  %92 = icmp eq i1 %91, false, !insn.addr !4634
  store i64 %85, i64* %rcx.0.reg2mem, !insn.addr !4634
  store i64 %84, i64* %rdx.2.reg2mem, !insn.addr !4634
  br i1 %92, label %dec_label_pc_807b, label %dec_label_pc_8075, !insn.addr !4634

dec_label_pc_8075:                                ; preds = %dec_label_pc_806f
  %93 = add i64 %75, 5, !insn.addr !4635
  %94 = add i32 %80, -1
  %95 = zext i32 %94 to i64, !insn.addr !4636
  store i64 %93, i64* %rcx.0.reg2mem, !insn.addr !4636
  store i64 %95, i64* %rdx.2.reg2mem, !insn.addr !4636
  br label %dec_label_pc_807b, !insn.addr !4636

dec_label_pc_807b:                                ; preds = %dec_label_pc_8075, %dec_label_pc_806f
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  store i64 %rcx.0.reload, i64* %arg1, align 8, !insn.addr !4637
  store i64 %rdx.2.reload, i64* %arg3, align 8, !insn.addr !4638
  store i64 1, i64* %merge.reg2mem, !insn.addr !4639
  br label %dec_label_pc_808c, !insn.addr !4639

dec_label_pc_808c:                                ; preds = %dec_label_pc_7fe0, %dec_label_pc_7f74, %dec_label_pc_7f83, %dec_label_pc_7f90, %dec_label_pc_8013, %dec_label_pc_801f, %dec_label_pc_8034, %dec_label_pc_8048, %dec_label_pc_8061, %dec_label_pc_807b, %dec_label_pc_8004, %dec_label_pc_803c, %dec_label_pc_8055, %dec_label_pc_7ff1, %dec_label_pc_7f57, %dec_label_pc_7f40
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !4640

; uselistorder directives
  uselistorder i64 %85, { 0, 2, 1 }
  uselistorder i32 %80, { 0, 2, 1 }
  uselistorder i32 %53, { 1, 0 }
  uselistorder i64 %35, { 1, 0, 2 }
  uselistorder i64 %rdx.1.reload, { 0, 1, 3, 2 }
  uselistorder i64 %21, { 1, 0, 2 }
  uselistorder i64 %rdx.0.reload, { 0, 1, 3, 2 }
  uselistorder i64 %15, { 0, 3, 2, 1, 4, 5 }
  uselistorder i64 %rax.0.reload, { 2, 3, 0, 1 }
  uselistorder i64* %rax.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r10.0.reg2mem, { 1, 0 }
  uselistorder i64* %r11.0.reg2mem, { 1, 0 }
  uselistorder i64* %rdx.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r10.1.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.1.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r11.1.reg2mem, { 2, 0, 1 }
  uselistorder i64* %merge.reg2mem, { 0, 7, 8, 6, 9, 5, 10, 11, 12, 4, 3, 1, 13, 14, 15, 2, 16 }
  uselistorder i32 65536, { 1, 2, 3, 0 }
  uselistorder i64 %arg4, { 0, 2, 1 }
  uselistorder i64* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_808c, { 9, 8, 12, 7, 11, 6, 5, 4, 10, 13, 0, 3, 2, 1, 14, 15 }
  uselistorder label %dec_label_pc_7ff1, { 1, 0 }
  uselistorder label %dec_label_pc_7fc9, { 1, 0 }
  uselistorder label %dec_label_pc_7fa4, { 1, 0 }
}

define i64 @.Lbt_skip_func.part.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_80a0:
  %storemerge.reg2mem = alloca i64, !insn.addr !4641
  %0 = load i32, i32* @global_var_cb40, align 4, !insn.addr !4642
  %1 = icmp eq i32 %0, 0, !insn.addr !4643
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4644
  br i1 %1, label %dec_label_pc_8113, label %dec_label_pc_80b0, !insn.addr !4644

dec_label_pc_80b0:                                ; preds = %dec_label_pc_80a0
  %2 = sext i32 %0 to i64, !insn.addr !4642
  %3 = add nsw i64 %2, 16, !insn.addr !4645
  %4 = inttoptr i64 %3 to i64*, !insn.addr !4645
  %5 = load i64, i64* %4, align 8, !insn.addr !4645
  %6 = icmp eq i64 %5, 0, !insn.addr !4646
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4647
  br i1 %6, label %dec_label_pc_8113, label %dec_label_pc_80bc, !insn.addr !4647

dec_label_pc_80bc:                                ; preds = %dec_label_pc_80b0
  %7 = add nsw i64 %2, 32, !insn.addr !4648
  %8 = inttoptr i64 %7 to i64*, !insn.addr !4648
  %9 = load i64, i64* %8, align 8, !insn.addr !4648
  %10 = icmp eq i64 %9, 0, !insn.addr !4649
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4650
  br i1 %10, label %dec_label_pc_8113, label %dec_label_pc_80c5, !insn.addr !4650

dec_label_pc_80c5:                                ; preds = %dec_label_pc_80bc
  %11 = add i64 %9, 132, !insn.addr !4651
  %12 = inttoptr i64 %11 to i16*, !insn.addr !4651
  %13 = load i16, i16* %12, align 2, !insn.addr !4651
  %14 = icmp eq i16 %13, 0, !insn.addr !4652
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4653
  br i1 %14, label %dec_label_pc_8113, label %dec_label_pc_80d1, !insn.addr !4653

dec_label_pc_80d1:                                ; preds = %dec_label_pc_80c5
  %15 = add i64 %9, 136, !insn.addr !4654
  %16 = inttoptr i64 %15 to i64*, !insn.addr !4654
  %17 = load i64, i64* %16, align 8, !insn.addr !4654
  %18 = icmp eq i64 %17, 0, !insn.addr !4655
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4656
  br i1 %18, label %dec_label_pc_8113, label %dec_label_pc_80df, !insn.addr !4656

dec_label_pc_80df:                                ; preds = %dec_label_pc_80d1
  %19 = and i64 %arg2, 4294967295, !insn.addr !4657
  %20 = call i64 @function_7110(i64 %19, i64 %17, i16 %13, i64 %5), !insn.addr !4658
  %21 = icmp slt i64 %20, 0, !insn.addr !4659
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4660
  br i1 %21, label %dec_label_pc_8113, label %dec_label_pc_80ec, !insn.addr !4660

dec_label_pc_80ec:                                ; preds = %dec_label_pc_80df
  %22 = add i64 %9, 160, !insn.addr !4661
  %23 = inttoptr i64 %22 to i64*, !insn.addr !4661
  %24 = load i64, i64* %23, align 8, !insn.addr !4661
  %25 = add i64 %9, 216, !insn.addr !4662
  %26 = inttoptr i64 %25 to i64*, !insn.addr !4662
  %27 = load i64, i64* %26, align 8, !insn.addr !4662
  %28 = inttoptr i64 %24 to i64*, !insn.addr !4663
  store i64 %27, i64* %28, align 8, !insn.addr !4663
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !4664
  br label %dec_label_pc_8113, !insn.addr !4664

dec_label_pc_8113:                                ; preds = %dec_label_pc_80a0, %dec_label_pc_80c5, %dec_label_pc_80d1, %dec_label_pc_80df, %dec_label_pc_80b0, %dec_label_pc_80bc, %dec_label_pc_80ec
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4665

; uselistorder directives
  uselistorder i64 %9, { 1, 0, 2, 3, 4 }
  uselistorder i32 %0, { 1, 0 }
  uselistorder i64* %storemerge.reg2mem, { 0, 7, 4, 3, 2, 6, 5, 1 }
  uselistorder label %dec_label_pc_8113, { 6, 3, 2, 1, 5, 4, 0 }
}

define i64 @.Llzma_code.part.1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_8120:
  %rsi.0.reg2mem = alloca i64, !insn.addr !4666
  %rdx.0.reg2mem = alloca i16, !insn.addr !4666
  %stack_var_-21 = alloca i64, align 8
  store i64 0, i64* %stack_var_-21, align 8, !insn.addr !4667
  %0 = trunc i64 %arg2 to i32, !insn.addr !4668
  %1 = icmp slt i32 %0, 0
  %2 = icmp eq i64 %arg3, 0, !insn.addr !4669
  %3 = or i1 %2, %1
  %4 = icmp eq i1 %3, false, !insn.addr !4670
  %5 = icmp eq i64 %arg1, 0, !insn.addr !4671
  %6 = icmp eq i1 %5, false, !insn.addr !4672
  %or.cond = icmp eq i1 %6, %4
  br i1 %or.cond, label %dec_label_pc_8175, label %dec_label_pc_815f, !insn.addr !4673

dec_label_pc_815f:                                ; preds = %dec_label_pc_8120
  ret i64 0

dec_label_pc_8175:                                ; preds = %dec_label_pc_8120
  %7 = load i32, i32* @global_var_cb40, align 4, !insn.addr !4674
  %8 = sext i32 %7 to i64, !insn.addr !4674
  %9 = add nsw i64 %8, 16, !insn.addr !4675
  %10 = inttoptr i64 %9 to i64*, !insn.addr !4675
  %11 = load i64, i64* %10, align 8, !insn.addr !4675
  %12 = add nsw i64 %8, 32, !insn.addr !4676
  %13 = inttoptr i64 %12 to i64*, !insn.addr !4676
  %14 = load i64, i64* %13, align 8, !insn.addr !4676
  %15 = add i64 %14, 144, !insn.addr !4677
  %16 = inttoptr i64 %15 to i16*, !insn.addr !4677
  %17 = load i16, i16* %16, align 2, !insn.addr !4677
  %18 = icmp eq i16 %17, 0, !insn.addr !4678
  br i1 %18, label %dec_label_pc_818d, label %dec_label_pc_8181, !insn.addr !4679

dec_label_pc_8181:                                ; preds = %dec_label_pc_8175
  %19 = add i64 %14, 152, !insn.addr !4680
  %20 = inttoptr i64 %19 to i64*, !insn.addr !4680
  %21 = load i64, i64* %20, align 8, !insn.addr !4680
  %22 = icmp eq i64 %21, 0, !insn.addr !4681
  %23 = icmp eq i1 %22, false, !insn.addr !4682
  store i16 %17, i16* %rdx.0.reg2mem, !insn.addr !4682
  store i64 %21, i64* %rsi.0.reg2mem, !insn.addr !4682
  br i1 %23, label %dec_label_pc_81c2, label %dec_label_pc_818d, !insn.addr !4682

dec_label_pc_818d:                                ; preds = %dec_label_pc_8181, %dec_label_pc_8175
  %24 = add i64 %14, 184, !insn.addr !4683
  %25 = inttoptr i64 %24 to i32*, !insn.addr !4683
  %26 = load i32, i32* %25, align 4, !insn.addr !4683
  %27 = icmp eq i32 %26, 0, !insn.addr !4683
  %28 = ptrtoint i64* %stack_var_-21 to i64, !insn.addr !4684
  %29 = select i1 %27, i64 83886080, i64 150994944, !insn.addr !4685
  store i64 %29, i64* %stack_var_-21, align 8, !insn.addr !4686
  %30 = trunc i64 %29 to i32, !insn.addr !4687
  %31 = call i32 @llvm.bswap.i32(i32 %30), !insn.addr !4687
  %32 = trunc i32 %31 to i16
  %33 = add nuw nsw i16 %32, 4, !insn.addr !4688
  store i16 %33, i16* %rdx.0.reg2mem, !insn.addr !4688
  store i64 %28, i64* %rsi.0.reg2mem, !insn.addr !4688
  br label %dec_label_pc_81c2, !insn.addr !4688

dec_label_pc_81c2:                                ; preds = %dec_label_pc_818d, %dec_label_pc_8181
  %34 = and i64 %arg2, 4294967295, !insn.addr !4689
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rdx.0.reload = load i16, i16* %rdx.0.reg2mem
  %35 = call i64 @function_7110(i64 %34, i64 %rsi.0.reload, i16 %rdx.0.reload, i64 %11), !insn.addr !4690
  %36 = add i64 %14, 160, !insn.addr !4691
  %37 = inttoptr i64 %36 to i64*, !insn.addr !4691
  %38 = load i64, i64* %37, align 8, !insn.addr !4691
  %39 = add i64 %14, 208, !insn.addr !4692
  %40 = inttoptr i64 %39 to i64*, !insn.addr !4692
  %41 = load i64, i64* %40, align 8, !insn.addr !4692
  %42 = inttoptr i64 %38 to i64*, !insn.addr !4693
  store i64 %41, i64* %42, align 8, !insn.addr !4693
  ret i64 1, !insn.addr !4694

; uselistorder directives
  uselistorder i64 %29, { 1, 0 }
  uselistorder i64 %14, { 2, 1, 3, 0, 4 }
  uselistorder i16* %rdx.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rsi.0.reg2mem, { 0, 2, 1 }
  uselistorder i64 %arg2, { 1, 0 }
}

define i64 @.Lparse_lzma12.0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_81f0:
  %storemerge.reg2mem = alloca i64, !insn.addr !4695
  %stack_var_-104 = alloca i64, align 8
  %stack_var_-152 = alloca i64, align 8
  %stack_var_-136 = alloca i64, align 8
  %stack_var_-184 = alloca i64, align 8
  %0 = icmp ne i64 %arg1, 0, !insn.addr !4696
  %1 = icmp eq i64 %arg2, 0, !insn.addr !4697
  %2 = icmp eq i1 %1, false, !insn.addr !4698
  %or.cond = icmp eq i1 %0, %2
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4699
  br i1 %or.cond, label %dec_label_pc_8214, label %dec_label_pc_827f, !insn.addr !4699

dec_label_pc_8214:                                ; preds = %dec_label_pc_81f0
  %3 = add i64 %arg2, 8, !insn.addr !4700
  %4 = inttoptr i64 %3 to i64*, !insn.addr !4700
  %5 = load i64, i64* %4, align 8, !insn.addr !4700
  %6 = icmp eq i64 %5, 0, !insn.addr !4701
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4702
  br i1 %6, label %dec_label_pc_827f, label %dec_label_pc_821d, !insn.addr !4702

dec_label_pc_821d:                                ; preds = %dec_label_pc_8214
  %7 = ptrtoint i64* %stack_var_-184 to i64, !insn.addr !4703
  %8 = ptrtoint i64* %stack_var_-136 to i64, !insn.addr !4704
  %9 = bitcast i64* %stack_var_-184 to i8*, !insn.addr !4705
  call void @__asm_rep_stosd_memset(i8* nonnull %9, i32 0, i64 12), !insn.addr !4705
  %10 = bitcast i64* %stack_var_-136 to i8*, !insn.addr !4706
  call void @__asm_rep_stosd_memset(i8* nonnull %10, i32 0, i64 28), !insn.addr !4706
  %11 = call i64 @function_71b0(i64* nonnull %stack_var_-184, i64 48, i64 %7, i64* nonnull %stack_var_-152, i64 %8, i64 %5), !insn.addr !4707
  %12 = trunc i64 %11 to i32, !insn.addr !4708
  %13 = icmp eq i32 %12, 0, !insn.addr !4708
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4709
  br i1 %13, label %dec_label_pc_827f, label %dec_label_pc_8257, !insn.addr !4709

dec_label_pc_8257:                                ; preds = %dec_label_pc_821d
  %14 = load i64, i64* %4, align 8, !insn.addr !4710
  %15 = add i64 %arg2, 264, !insn.addr !4711
  %16 = inttoptr i64 %15 to i64*, !insn.addr !4712
  %17 = call i64 @function_71b0(i64* %16, i64 57, i64 %8, i64* nonnull %stack_var_-104, i64 %arg1, i64 %14), !insn.addr !4712
  %18 = trunc i64 %17 to i32, !insn.addr !4713
  %19 = icmp eq i32 %18, 0, !insn.addr !4713
  %20 = icmp eq i1 %19, false, !insn.addr !4714
  %21 = zext i1 %20 to i64, !insn.addr !4715
  store i64 %21, i64* %storemerge.reg2mem, !insn.addr !4715
  br label %dec_label_pc_827f, !insn.addr !4715

dec_label_pc_827f:                                ; preds = %dec_label_pc_81f0, %dec_label_pc_8214, %dec_label_pc_821d, %dec_label_pc_8257
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4716

; uselistorder directives
  uselistorder i64* %storemerge.reg2mem, { 0, 4, 3, 2, 1 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_827f, { 3, 2, 1, 0 }
}

define i64 @.Llzip_decoder_memconfig.part.0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_8290:
  %0 = alloca i128
  %1 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !4717
  %rbx.0.reg2mem = alloca i64, !insn.addr !4717
  %storemerge7.reg2mem = alloca i64, !insn.addr !4717
  %rdx.0.reg2mem = alloca i64, !insn.addr !4717
  %rsi.2.reg2mem = alloca i64, !insn.addr !4717
  %storemerge6.reg2mem = alloca i64, !insn.addr !4717
  %rcx.5.reg2mem = alloca i64, !insn.addr !4717
  %rcx.4.reg2mem = alloca i64, !insn.addr !4717
  %rax.9.reg2mem = alloca i64, !insn.addr !4717
  %xmm0.233.reg2mem = alloca i128, !insn.addr !4717
  %rcx.334.reg2mem = alloca i64, !insn.addr !4717
  %r13.135.reg2mem = alloca i64, !insn.addr !4717
  %rcx.2.reg2mem = alloca i64, !insn.addr !4717
  %xmm0.1.reg2mem = alloca i128, !insn.addr !4717
  %xmm0.038.reg2mem = alloca i128, !insn.addr !4717
  %rcx.139.reg2mem = alloca i64, !insn.addr !4717
  %storemerge840.reg2mem = alloca i8*, !insn.addr !4717
  %rsi.030.reg2mem = alloca i64, !insn.addr !4717
  %r13.031.reg2mem = alloca i64, !insn.addr !4717
  %r15.032.reg2mem = alloca i64, !insn.addr !4717
  %rcx.0.reg2mem = alloca i64, !insn.addr !4717
  %.reg2mem62 = alloca i32, !insn.addr !4717
  %rax.8.reg2mem = alloca i64, !insn.addr !4717
  %.reg2mem = alloca i32, !insn.addr !4717
  %rax.7.reg2mem = alloca i64, !insn.addr !4717
  %storemerge9.in.in.in.reg2mem = alloca i64, !insn.addr !4717
  %rax.6.reg2mem = alloca i64, !insn.addr !4717
  %rax.5.reg2mem = alloca i64, !insn.addr !4717
  %rax.3.reg2mem = alloca i64, !insn.addr !4717
  %rdi = alloca i64, align 8
  %2 = load i64, i64* %1
  %3 = load i128, i128* %0
  %4 = load i64, i64* %1
  %stack_var_-2832 = alloca i128, align 8
  %stack_var_0 = alloca i64, align 8
  %stack_var_-3704 = alloca i32, align 4
  %5 = load i128, i128* %0
  %6 = load i128, i128* %0
  %stack_var_-2747 = alloca i64, align 8
  %stack_var_-3648 = alloca i128, align 8
  %7 = load i128, i128* %0
  %8 = load i128, i128* %0
  %stack_var_-3376 = alloca i64, align 8
  %stack_var_-3632 = alloca i64, align 8
  %stack_var_-3136 = alloca i64, align 8
  %stack_var_-3392 = alloca i128, align 8
  %stack_var_-2848 = alloca i128, align 8
  %stack_var_-3712 = alloca i32, align 4
  %stack_var_-2336 = alloca i128, align 8
  %9 = load i128, i128* %0
  %stack_var_-2320 = alloca i64, align 8
  %stack_var_-8 = alloca i64, align 8
  %10 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !4718
  call void @__asm_movups(i128 %9, i128 %10), !insn.addr !4719
  %11 = bitcast i64* %stack_var_-2320 to i8*, !insn.addr !4720
  call void @__asm_rep_stosd_memset(i8* nonnull %11, i32 0, i64 566), !insn.addr !4720
  store i32 -1, i32* %stack_var_-3712, align 4, !insn.addr !4721
  %12 = icmp eq i64 %arg1, 0, !insn.addr !4722
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4723
  br i1 %12, label %dec_label_pc_8cf2, label %dec_label_pc_82d8, !insn.addr !4723

dec_label_pc_82d8:                                ; preds = %dec_label_pc_8290
  %13 = add i64 %arg1, 16, !insn.addr !4724
  %14 = inttoptr i64 %13 to i64*, !insn.addr !4724
  %15 = load i64, i64* %14, align 8, !insn.addr !4724
  %16 = icmp eq i64 %15, 0, !insn.addr !4725
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4726
  br i1 %16, label %dec_label_pc_8cf2, label %dec_label_pc_82e6, !insn.addr !4726

dec_label_pc_82e6:                                ; preds = %dec_label_pc_82d8
  %17 = add i64 %arg1, ptrtoint (i32** @global_var_18 to i64), !insn.addr !4727
  %18 = inttoptr i64 %17 to i64*, !insn.addr !4727
  %19 = load i64, i64* %18, align 8, !insn.addr !4727
  %20 = icmp eq i64 %19, 0, !insn.addr !4728
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4729
  br i1 %20, label %dec_label_pc_8cf2, label %dec_label_pc_82f4, !insn.addr !4729

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e6
  %21 = trunc i64 %2 to i32
  %22 = icmp eq i32 %21, 3, !insn.addr !4730
  %23 = icmp eq i1 %22, false, !insn.addr !4731
  br i1 %23, label %dec_label_pc_8330, label %dec_label_pc_8300, !insn.addr !4731

dec_label_pc_8300:                                ; preds = %dec_label_pc_82f4
  %24 = add i64 %arg1, 8, !insn.addr !4732
  %25 = inttoptr i64 %24 to i64*, !insn.addr !4732
  %26 = load i64, i64* %25, align 8, !insn.addr !4732
  %27 = add i64 %26, 1, !insn.addr !4733
  %28 = inttoptr i64 %27 to i8*, !insn.addr !4733
  %29 = load i8, i8* %28, align 1, !insn.addr !4733
  %30 = and i8 %29, 64, !insn.addr !4733
  %31 = icmp eq i8 %30, 0, !insn.addr !4733
  %32 = icmp eq i1 %31, false, !insn.addr !4734
  br i1 %32, label %dec_label_pc_8330, label %dec_label_pc_830b, !insn.addr !4734

dec_label_pc_830b:                                ; preds = %dec_label_pc_8300
  %33 = add i64 %arg1, 48, !insn.addr !4735
  %34 = inttoptr i64 %33 to i64*, !insn.addr !4735
  %35 = load i64, i64* %34, align 8, !insn.addr !4735
  %36 = icmp eq i64 %35, 0, !insn.addr !4735
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4736
  br i1 %36, label %dec_label_pc_8cf2, label %dec_label_pc_8317, !insn.addr !4736

dec_label_pc_8317:                                ; preds = %dec_label_pc_830b
  %37 = add i64 %arg1, 32, !insn.addr !4737
  %38 = inttoptr i64 %37 to i64*, !insn.addr !4737
  %39 = load i64, i64* %38, align 8, !insn.addr !4737
  %40 = icmp eq i64 %39, 0, !insn.addr !4737
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4738
  br i1 %40, label %dec_label_pc_8cf2, label %dec_label_pc_8323, !insn.addr !4738

dec_label_pc_8323:                                ; preds = %dec_label_pc_8317
  %41 = add i64 %arg1, 40, !insn.addr !4739
  %42 = inttoptr i64 %41 to i16*, !insn.addr !4739
  %43 = load i16, i16* %42, align 2, !insn.addr !4739
  %44 = icmp eq i16 %43, 48, !insn.addr !4739
  %45 = icmp eq i1 %44, false, !insn.addr !4740
  %46 = icmp eq i64 %arg2, 0, !insn.addr !4741
  %or.cond13 = or i1 %46, %45
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4740
  br i1 %or.cond13, label %dec_label_pc_8cf2, label %dec_label_pc_8339, !insn.addr !4740

dec_label_pc_8330:                                ; preds = %dec_label_pc_8300, %dec_label_pc_82f4
  %.old = icmp eq i64 %arg2, 0, !insn.addr !4741
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4742
  br i1 %.old, label %dec_label_pc_8cf2, label %dec_label_pc_8339, !insn.addr !4742

dec_label_pc_8339:                                ; preds = %dec_label_pc_8323, %dec_label_pc_8330
  %47 = add i64 %arg2, 8, !insn.addr !4743
  %48 = inttoptr i64 %47 to i64*, !insn.addr !4743
  %49 = load i64, i64* %48, align 8, !insn.addr !4743
  %50 = icmp eq i64 %49, 0, !insn.addr !4744
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4745
  br i1 %50, label %dec_label_pc_8cf2, label %dec_label_pc_8346, !insn.addr !4745

dec_label_pc_8346:                                ; preds = %dec_label_pc_8339
  %51 = add i64 %arg2, 16, !insn.addr !4746
  %52 = inttoptr i64 %51 to i64*, !insn.addr !4746
  %53 = load i64, i64* %52, align 8, !insn.addr !4746
  store i64 %53, i64* %rdi, align 8, !insn.addr !4746
  %54 = icmp eq i64 %53, 0, !insn.addr !4747
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4748
  br i1 %54, label %dec_label_pc_8cf2, label %dec_label_pc_8353, !insn.addr !4748

dec_label_pc_8353:                                ; preds = %dec_label_pc_8346
  %55 = add i64 %53, 64, !insn.addr !4749
  %56 = inttoptr i64 %55 to i64*, !insn.addr !4749
  %57 = load i64, i64* %56, align 8, !insn.addr !4749
  %58 = icmp eq i64 %57, 0, !insn.addr !4749
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4750
  br i1 %58, label %dec_label_pc_8cf2, label %dec_label_pc_835e, !insn.addr !4750

dec_label_pc_835e:                                ; preds = %dec_label_pc_8353
  %59 = add i64 %53, 80, !insn.addr !4751
  %60 = inttoptr i64 %59 to i64*, !insn.addr !4751
  %61 = load i64, i64* %60, align 8, !insn.addr !4751
  %62 = icmp eq i64 %61, 0, !insn.addr !4751
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4752
  br i1 %62, label %dec_label_pc_8cf2, label %dec_label_pc_8369, !insn.addr !4752

dec_label_pc_8369:                                ; preds = %dec_label_pc_835e
  %63 = bitcast i64* %rdi to i32*
  %64 = trunc i64 %53 to i32
  %65 = add i64 %arg2, 32, !insn.addr !4753
  %66 = inttoptr i64 %65 to i64*, !insn.addr !4753
  %67 = load i64, i64* %66, align 8, !insn.addr !4753
  %68 = inttoptr i64 %67 to i32*, !insn.addr !4754
  %69 = load i32, i32* %68, align 4, !insn.addr !4754
  %70 = icmp eq i32 %69, 0, !insn.addr !4754
  %71 = icmp eq i1 %70, false, !insn.addr !4755
  br i1 %71, label %dec_label_pc_83bd, label %dec_label_pc_8372, !insn.addr !4755

dec_label_pc_8372:                                ; preds = %dec_label_pc_8369
  %72 = icmp eq i32 %21, 0, !insn.addr !4756
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4757
  br i1 %72, label %dec_label_pc_8cf2, label %dec_label_pc_837a, !insn.addr !4757

dec_label_pc_837a:                                ; preds = %dec_label_pc_8372
  %73 = add i64 %arg1, 8, !insn.addr !4758
  %74 = inttoptr i64 %73 to i64*, !insn.addr !4758
  %75 = load i64, i64* %74, align 8, !insn.addr !4758
  br i1 %23, label %dec_label_pc_83a8, label %dec_label_pc_8384, !insn.addr !4759

dec_label_pc_8384:                                ; preds = %dec_label_pc_837a
  %76 = add i64 %75, 2, !insn.addr !4760
  %77 = inttoptr i64 %76 to i8*, !insn.addr !4760
  %78 = load i8, i8* %77, align 1, !insn.addr !4760
  %79 = and i8 %78, 32, !insn.addr !4760
  %80 = icmp eq i8 %79, 0, !insn.addr !4760
  %81 = icmp eq i1 %80, false, !insn.addr !4761
  store i64 %75, i64* %rax.5.reg2mem, !insn.addr !4761
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4761
  br i1 %81, label %dec_label_pc_8cf2, label %dec_label_pc_846c, !insn.addr !4761

dec_label_pc_83a8:                                ; preds = %dec_label_pc_837a
  %82 = icmp eq i32 %21, 1
  store i64 %75, i64* %rax.3.reg2mem, !insn.addr !4762
  store i32 %64, i32* %.reg2mem, !insn.addr !4762
  store i64 %75, i64* %rax.8.reg2mem, !insn.addr !4762
  br i1 %82, label %dec_label_pc_845f, label %dec_label_pc_847f, !insn.addr !4762

dec_label_pc_83bd:                                ; preds = %dec_label_pc_8369
  %83 = add i64 %arg1, 8, !insn.addr !4763
  %84 = inttoptr i64 %83 to i64*, !insn.addr !4763
  %85 = load i64, i64* %84, align 8, !insn.addr !4763
  %86 = icmp eq i64 %85, 0, !insn.addr !4764
  br i1 %86, label %dec_label_pc_843d, label %dec_label_pc_83c7, !insn.addr !4765

dec_label_pc_83c7:                                ; preds = %dec_label_pc_83bd
  store i64 %85, i64* %rax.3.reg2mem
  store i32 %64, i32* %.reg2mem
  store i64 %85, i64* %rax.8.reg2mem
  switch i32 %21, label %dec_label_pc_8467 [
    i32 1, label %dec_label_pc_845f
    i32 2, label %dec_label_pc_847f
    i32 0, label %dec_label_pc_8454
  ]

dec_label_pc_843d:                                ; preds = %dec_label_pc_83bd
  %87 = icmp eq i32 %21, 0, !insn.addr !4766
  br i1 %87, label %dec_label_pc_8454, label %dec_label_pc_845a, !insn.addr !4767

dec_label_pc_8454:                                ; preds = %dec_label_pc_83c7, %dec_label_pc_843d
  %88 = add i64 %85, 1, !insn.addr !4768
  store i64 %85, i64* %rax.6.reg2mem, !insn.addr !4769
  store i64 %88, i64* %storemerge9.in.in.in.reg2mem, !insn.addr !4769
  br label %dec_label_pc_8470, !insn.addr !4769

dec_label_pc_845a:                                ; preds = %dec_label_pc_843d
  %89 = icmp eq i32 %21, 1, !insn.addr !4770
  %90 = icmp eq i1 %89, false, !insn.addr !4771
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !4771
  br i1 %90, label %dec_label_pc_8467, label %dec_label_pc_845f, !insn.addr !4771

dec_label_pc_845f:                                ; preds = %dec_label_pc_83a8, %dec_label_pc_83c7, %dec_label_pc_845a
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %91 = add i64 %rax.3.reload, 1, !insn.addr !4772
  %92 = inttoptr i64 %91 to i8*, !insn.addr !4772
  %93 = load i8, i8* %92, align 1, !insn.addr !4772
  %94 = urem i8 %93, 2, !insn.addr !4772
  %95 = icmp eq i8 %94, 0, !insn.addr !4772
  store i64 %rax.3.reload, i64* %rax.7.reg2mem, !insn.addr !4773
  store i32 %64, i32* %.reg2mem, !insn.addr !4773
  store i64 %rax.3.reload, i64* %rax.8.reg2mem, !insn.addr !4773
  br i1 %95, label %dec_label_pc_8472, label %dec_label_pc_847f, !insn.addr !4773

dec_label_pc_8467:                                ; preds = %dec_label_pc_83c7, %dec_label_pc_845a
  store i64 %85, i64* %rax.5.reg2mem, !insn.addr !4774
  store i32 %64, i32* %.reg2mem, !insn.addr !4774
  store i64 %85, i64* %rax.8.reg2mem, !insn.addr !4774
  br i1 %23, label %dec_label_pc_847f, label %dec_label_pc_846c, !insn.addr !4774

dec_label_pc_846c:                                ; preds = %dec_label_pc_8384, %dec_label_pc_8467
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %96 = add i64 %rax.5.reload, 3, !insn.addr !4775
  store i64 %rax.5.reload, i64* %rax.6.reg2mem, !insn.addr !4775
  store i64 %96, i64* %storemerge9.in.in.in.reg2mem, !insn.addr !4775
  br label %dec_label_pc_8470, !insn.addr !4775

dec_label_pc_8470:                                ; preds = %dec_label_pc_846c, %dec_label_pc_8454
  %storemerge9.in.in.in.reload = load i64, i64* %storemerge9.in.in.in.reg2mem
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %storemerge9.in.in = inttoptr i64 %storemerge9.in.in.in.reload to i8*
  %storemerge9.in = load i8, i8* %storemerge9.in.in, align 1
  %storemerge9 = icmp slt i8 %storemerge9.in, 0
  store i64 %rax.6.reload, i64* %rax.7.reg2mem, !insn.addr !4776
  store i32 %64, i32* %.reg2mem, !insn.addr !4776
  store i64 %rax.6.reload, i64* %rax.8.reg2mem, !insn.addr !4776
  br i1 %storemerge9, label %dec_label_pc_847f, label %dec_label_pc_8472, !insn.addr !4776

dec_label_pc_8472:                                ; preds = %dec_label_pc_8470, %dec_label_pc_845f
  %rax.7.reload = load i64, i64* %rax.7.reg2mem
  %97 = add i64 %67, 200, !insn.addr !4777
  %98 = inttoptr i64 %97 to i64*, !insn.addr !4777
  %99 = load i64, i64* %98, align 8, !insn.addr !4777
  %100 = inttoptr i64 %99 to i32*, !insn.addr !4778
  store i32 3, i32* %100, align 4, !insn.addr !4778
  %.pre = load i32, i32* %63, align 8
  store i32 %.pre, i32* %.reg2mem, !insn.addr !4778
  store i64 %rax.7.reload, i64* %rax.8.reg2mem, !insn.addr !4778
  br label %dec_label_pc_847f, !insn.addr !4778

dec_label_pc_847f:                                ; preds = %dec_label_pc_83a8, %dec_label_pc_83c7, %dec_label_pc_845f, %dec_label_pc_8472, %dec_label_pc_8470, %dec_label_pc_8467
  %.reload = load i32, i32* %.reg2mem
  switch i32 %.reload, label %dec_label_pc_8495 [
    i32 3, label %dec_label_pc_8527
    i32 1, label %dec_label_pc_8527
    i32 0, label %dec_label_pc_8527
  ]

dec_label_pc_8495:                                ; preds = %dec_label_pc_847f, %dec_label_pc_854b, %dec_label_pc_8540
  %101 = call i128 @__asm_xorps(i128 %10, i128 %10), !insn.addr !4779
  %102 = add i64 %arg2, 56, !insn.addr !4780
  %103 = inttoptr i64 %102 to i64*, !insn.addr !4780
  %104 = load i64, i64* %103, align 8, !insn.addr !4780
  %105 = load i128, i128* %stack_var_-3392, align 8, !insn.addr !4781
  call void @__asm_movups(i128 %105, i128 %101), !insn.addr !4781
  %106 = bitcast i128* %stack_var_-2848 to i8*, !insn.addr !4782
  call void @__asm_rep_stosd_memset(i8* nonnull %106, i32 0, i64 105), !insn.addr !4782
  %107 = bitcast i64* %stack_var_-3136 to i8*, !insn.addr !4783
  call void @__asm_rep_stosd_memset(i8* nonnull %107, i32 0, i64 ptrtoint ([3 x i8]* @global_var_47 to i64)), !insn.addr !4783
  %108 = icmp eq i64 %104, 0, !insn.addr !4784
  %109 = bitcast i64* %stack_var_-3632 to i8*, !insn.addr !4785
  call void @__asm_rep_stosd_memset(i8* nonnull %109, i32 0, i64 60), !insn.addr !4785
  call void @__asm_movups(i128 %8, i128 %101), !insn.addr !4786
  %110 = bitcast i64* %stack_var_-3376 to i8*, !insn.addr !4787
  call void @__asm_rep_stosd_memset(i8* nonnull %110, i32 0, i64 60), !insn.addr !4787
  call void @__asm_movups(i128 %7, i128 %101), !insn.addr !4788
  %111 = load i128, i128* %stack_var_-3648, align 8, !insn.addr !4789
  call void @__asm_movups(i128 %111, i128 %101), !insn.addr !4789
  %112 = icmp eq i1 %108, false, !insn.addr !4790
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4790
  br i1 %112, label %dec_label_pc_855e, label %dec_label_pc_8cf2, !insn.addr !4790

dec_label_pc_8527:                                ; preds = %dec_label_pc_847f, %dec_label_pc_847f, %dec_label_pc_847f
  %rax.8.reload = load i64, i64* %rax.8.reg2mem
  %113 = zext i32 %.reload to i64, !insn.addr !4791
  %114 = inttoptr i64 %rax.8.reload to i8*, !insn.addr !4792
  %115 = load i8, i8* %114, align 1, !insn.addr !4792
  %116 = and i8 %115, 64, !insn.addr !4792
  %117 = icmp eq i8 %116, 0, !insn.addr !4792
  store i32 %.reload, i32* %.reg2mem62, !insn.addr !4793
  store i64 %113, i64* %rcx.0.reg2mem, !insn.addr !4793
  br i1 %117, label %dec_label_pc_8540, label %dec_label_pc_852c, !insn.addr !4793

dec_label_pc_852c:                                ; preds = %dec_label_pc_8527
  %118 = add i64 %67, 192, !insn.addr !4794
  %119 = inttoptr i64 %118 to i64*, !insn.addr !4794
  %120 = load i64, i64* %119, align 8, !insn.addr !4794
  %121 = icmp eq i64 %120, 0, !insn.addr !4795
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4796
  br i1 %121, label %dec_label_pc_8cf2, label %dec_label_pc_853c, !insn.addr !4796

dec_label_pc_853c:                                ; preds = %dec_label_pc_852c
  %122 = inttoptr i64 %120 to i32*, !insn.addr !4797
  store i32 0, i32* %122, align 4, !insn.addr !4797
  %.pre47 = load i32, i32* %63, align 8
  store i32 %.pre47, i32* %.reg2mem62, !insn.addr !4797
  store i64 %120, i64* %rcx.0.reg2mem, !insn.addr !4797
  br label %dec_label_pc_8540, !insn.addr !4797

dec_label_pc_8540:                                ; preds = %dec_label_pc_853c, %dec_label_pc_8527
  %.reload63 = load i32, i32* %.reg2mem62, !insn.addr !4798
  %123 = icmp eq i32 %.reload63, 3, !insn.addr !4798
  %124 = icmp eq i1 %123, false, !insn.addr !4799
  br i1 %124, label %dec_label_pc_8495, label %dec_label_pc_854b, !insn.addr !4799

dec_label_pc_854b:                                ; preds = %dec_label_pc_8540
  %125 = add i64 %rax.8.reload, 1, !insn.addr !4800
  %126 = inttoptr i64 %125 to i8*, !insn.addr !4800
  %127 = load i8, i8* %126, align 1, !insn.addr !4800
  %128 = icmp ugt i8 %127, -65, !insn.addr !4801
  %129 = icmp eq i1 %128, false, !insn.addr !4802
  br i1 %129, label %dec_label_pc_86d8, label %dec_label_pc_8495, !insn.addr !4802

dec_label_pc_855e:                                ; preds = %dec_label_pc_8495
  %130 = add i64 %arg2, 64, !insn.addr !4803
  %131 = inttoptr i64 %130 to i64*, !insn.addr !4803
  %132 = load i64, i64* %131, align 8, !insn.addr !4803
  %133 = icmp eq i64 %132, 0, !insn.addr !4803
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4804
  br i1 %133, label %dec_label_pc_8cf2, label %dec_label_pc_8569, !insn.addr !4804

dec_label_pc_8569:                                ; preds = %dec_label_pc_855e
  %134 = add i64 %49, 208, !insn.addr !4805
  %135 = call i64 @function_7190(i64 %134, i64 9), !insn.addr !4806
  %136 = trunc i64 %135 to i32, !insn.addr !4807
  %137 = icmp eq i32 %136, 0, !insn.addr !4807
  %138 = icmp eq i1 %137, false, !insn.addr !4808
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4808
  br i1 %138, label %dec_label_pc_8cf2, label %dec_label_pc_8582, !insn.addr !4808

dec_label_pc_8582:                                ; preds = %dec_label_pc_8569
  %139 = ptrtoint i64* %stack_var_-8 to i64, !insn.addr !4809
  %140 = bitcast i128* %stack_var_-2336 to i8*
  call void @__asm_rep_stosd_memset(i8* nonnull %140, i32 %136, i64 570), !insn.addr !4810
  %141 = inttoptr i64 %104 to i128*, !insn.addr !4811
  %142 = load i128, i128* %141, align 8, !insn.addr !4811
  %143 = call i128 @__asm_movups.4(i128 %142), !insn.addr !4811
  store i128 -128, i128* %stack_var_-3648, align 8, !insn.addr !4812
  call void @__asm_movups(i128 %6, i128 %143), !insn.addr !4813
  %144 = add i64 %104, 12, !insn.addr !4814
  %145 = inttoptr i64 %144 to i128*, !insn.addr !4814
  %146 = load i128, i128* %145, align 8, !insn.addr !4814
  %147 = call i128 @__asm_movups.4(i128 %146), !insn.addr !4814
  call void @__asm_movups(i128 %5, i128 %147), !insn.addr !4815
  %148 = bitcast i128* %stack_var_-3648 to i8*, !insn.addr !4816
  %149 = bitcast i64* %stack_var_-2747 to i8*, !insn.addr !4816
  call void @__asm_rep_movsd_memcpy(i8* nonnull %149, i8* nonnull %148, i64 64), !insn.addr !4816
  %150 = add i64 %139, -1908, !insn.addr !4817
  store i32 0, i32* %stack_var_-3704, align 4, !insn.addr !4818
  %151 = add i64 %139, -3688, !insn.addr !4819
  %152 = inttoptr i64 %151 to i64*, !insn.addr !4819
  %153 = load i64, i64* %152, align 8, !insn.addr !4819
  %154 = bitcast i32* %stack_var_-3704 to i64*, !insn.addr !4820
  %155 = call i64 @function_7340(i64 %150, i64 1576, i64* nonnull %154, i64 %153, i64 %49), !insn.addr !4820
  %156 = trunc i64 %155 to i32, !insn.addr !4821
  %157 = icmp eq i32 %156, 0, !insn.addr !4821
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4822
  br i1 %157, label %dec_label_pc_8cf2, label %dec_label_pc_86aa.lr.ph, !insn.addr !4822

dec_label_pc_86aa.lr.ph:                          ; preds = %dec_label_pc_8582
  %158 = add i64 %139, -3680
  %159 = inttoptr i64 %158 to i64*
  store i64 0, i64* %r15.032.reg2mem
  store i64 0, i64* %r13.031.reg2mem
  store i64 1576, i64* %rsi.030.reg2mem
  br label %dec_label_pc_86aa

dec_label_pc_8673:                                ; preds = %dec_label_pc_86c1
  %160 = sub i64 %rsi.030.reload, %167, !insn.addr !4823
  %161 = add i64 %169, %150, !insn.addr !4817
  store i32 0, i32* %stack_var_-3704, align 4, !insn.addr !4818
  %162 = load i64, i64* %159, align 8, !insn.addr !4819
  %163 = call i64 @function_7340(i64 %161, i64 %160, i64* nonnull %154, i64 %162, i64 %49), !insn.addr !4820
  %164 = trunc i64 %163 to i32, !insn.addr !4821
  %165 = icmp eq i32 %164, 0, !insn.addr !4821
  store i64 1, i64* %r15.032.reg2mem, !insn.addr !4822
  store i64 %169, i64* %r13.031.reg2mem, !insn.addr !4822
  store i64 %160, i64* %rsi.030.reg2mem, !insn.addr !4822
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4822
  br i1 %165, label %dec_label_pc_8cf2, label %dec_label_pc_86aa, !insn.addr !4822

dec_label_pc_86aa:                                ; preds = %dec_label_pc_86aa.lr.ph, %dec_label_pc_8673
  %rsi.030.reload = load i64, i64* %rsi.030.reg2mem
  %166 = load i32, i32* %stack_var_-3704, align 4, !insn.addr !4824
  %167 = sext i32 %166 to i64, !insn.addr !4824
  %168 = icmp ult i64 %rsi.030.reload, %167, !insn.addr !4825
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4826
  br i1 %168, label %dec_label_pc_8cf2, label %dec_label_pc_86c1, !insn.addr !4826

dec_label_pc_86c1:                                ; preds = %dec_label_pc_86aa
  %r13.031.reload = load i64, i64* %r13.031.reg2mem
  %r15.032.reload = load i64, i64* %r15.032.reg2mem
  %169 = add i64 %r13.031.reload, %167, !insn.addr !4827
  %170 = icmp eq i64 %r15.032.reload, 0, !insn.addr !4828
  %171 = icmp eq i1 %170, false, !insn.addr !4829
  br i1 %171, label %dec_label_pc_8ae7, label %dec_label_pc_8673, !insn.addr !4829

dec_label_pc_86d8:                                ; preds = %dec_label_pc_854b
  %172 = and i8 %127, -64
  %173 = icmp eq i8 %172, 64, !insn.addr !4830
  %174 = icmp eq i1 %173, false, !insn.addr !4831
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4831
  br i1 %174, label %dec_label_pc_86f2, label %dec_label_pc_8cf2, !insn.addr !4831

dec_label_pc_86f2:                                ; preds = %dec_label_pc_86d8
  %175 = add i64 %arg1, 40, !insn.addr !4832
  %176 = inttoptr i64 %175 to i16*, !insn.addr !4832
  %177 = load i16, i16* %176, align 2, !insn.addr !4832
  %178 = icmp ult i16 %177, 48
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4833
  br i1 %178, label %dec_label_pc_8cf2, label %dec_label_pc_86ff, !insn.addr !4833

dec_label_pc_86ff:                                ; preds = %dec_label_pc_86f2
  %179 = add i64 %arg1, 32, !insn.addr !4834
  %180 = inttoptr i64 %179 to i64*, !insn.addr !4834
  %181 = load i64, i64* %180, align 8, !insn.addr !4834
  %182 = inttoptr i64 %181 to i64*, !insn.addr !4835
  %183 = load i64, i64* %182, align 8, !insn.addr !4835
  %184 = add i64 %181, 8, !insn.addr !4836
  %185 = inttoptr i64 %184 to i64*, !insn.addr !4836
  %186 = load i64, i64* %185, align 8, !insn.addr !4836
  %187 = add i64 %186, -17, !insn.addr !4837
  %188 = icmp ult i64 %187, 16368
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4838
  br i1 %188, label %dec_label_pc_8722, label %dec_label_pc_8cf2, !insn.addr !4838

dec_label_pc_8722:                                ; preds = %dec_label_pc_86ff
  %189 = load i64, i64* %rdi, align 8, !insn.addr !4839
  %190 = add i64 %189, 104, !insn.addr !4839
  %191 = inttoptr i64 %190 to i64*, !insn.addr !4839
  %192 = load i64, i64* %191, align 8, !insn.addr !4839
  %193 = inttoptr i64 %192 to i8*, !insn.addr !4840
  %194 = bitcast i64* %stack_var_0 to i8*
  %195 = icmp ult i8* %194, %193, !insn.addr !4841
  %196 = icmp eq i1 %195, false, !insn.addr !4842
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4842
  br i1 %196, label %dec_label_pc_8cf2, label %dec_label_pc_8750.lr.ph, !insn.addr !4842

dec_label_pc_8750.lr.ph:                          ; preds = %dec_label_pc_8722
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %197 = trunc i64 %189 to i32
  %198 = sub i64 16385, %186
  %199 = inttoptr i64 %198 to i64*
  %200 = ptrtoint i128* %stack_var_-2848 to i64
  %201 = add i64 %181, 16
  store i8* %194, i8** %storemerge840.reg2mem
  store i64 %rcx.0.reload, i64* %rcx.139.reg2mem
  store i128 %10, i128* %xmm0.038.reg2mem
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8750.lr.ph, %dec_label_pc_8763
  %xmm0.038.reload = load i128, i128* %xmm0.038.reg2mem
  %rcx.139.reload = load i64, i64* %rcx.139.reg2mem
  %storemerge840.reload = load i8*, i8** %storemerge840.reg2mem
  %202 = bitcast i8* %storemerge840.reload to i64*
  %203 = load i64, i64* %202, align 8, !insn.addr !4843
  %204 = icmp ult i64 %203, 16777216
  store i128 %xmm0.038.reload, i128* %xmm0.1.reg2mem, !insn.addr !4844
  store i64 %rcx.139.reload, i64* %rcx.2.reg2mem, !insn.addr !4844
  br i1 %204, label %dec_label_pc_8763, label %dec_label_pc_876d, !insn.addr !4844

dec_label_pc_8763:                                ; preds = %dec_label_pc_8843, %dec_label_pc_878e, %dec_label_pc_8750, %dec_label_pc_876d
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %xmm0.1.reload = load i128, i128* %xmm0.1.reg2mem
  %205 = ptrtoint i8* %storemerge840.reload to i64, !insn.addr !4845
  %206 = add i64 %205, 8, !insn.addr !4845
  %207 = inttoptr i64 %206 to i8*, !insn.addr !4845
  %208 = icmp ult i8* %207, %193, !insn.addr !4841
  %209 = icmp eq i1 %208, false, !insn.addr !4842
  store i8* %207, i8** %storemerge840.reg2mem, !insn.addr !4842
  store i64 %rcx.2.reload, i64* %rcx.139.reg2mem, !insn.addr !4842
  store i128 %xmm0.1.reload, i128* %xmm0.038.reg2mem, !insn.addr !4842
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4842
  br i1 %209, label %dec_label_pc_8cf2, label %dec_label_pc_8750, !insn.addr !4842

dec_label_pc_876d:                                ; preds = %dec_label_pc_8750
  %210 = call i64 @.Lhc_find_func.1(i64 %203, i64* %199, i64 %arg2, i64 %rcx.139.reload), !insn.addr !4846
  %211 = trunc i64 %210 to i32, !insn.addr !4847
  %212 = icmp eq i32 %211, 0, !insn.addr !4847
  store i128 %xmm0.038.reload, i128* %xmm0.1.reg2mem, !insn.addr !4848
  store i64 %rcx.139.reload, i64* %rcx.2.reg2mem, !insn.addr !4848
  br i1 %212, label %dec_label_pc_8763, label %dec_label_pc_878e, !insn.addr !4848

dec_label_pc_878e:                                ; preds = %dec_label_pc_876d
  %213 = add i64 %203, %198, !insn.addr !4849
  %214 = icmp ult i64 %203, %213, !insn.addr !4850
  %215 = icmp eq i1 %214, false, !insn.addr !4851
  store i128 %xmm0.038.reload, i128* %xmm0.1.reg2mem, !insn.addr !4851
  store i64 %rcx.139.reload, i64* %rcx.2.reg2mem, !insn.addr !4851
  store i64 %203, i64* %r13.135.reg2mem, !insn.addr !4851
  store i64 %rcx.139.reload, i64* %rcx.334.reg2mem, !insn.addr !4851
  store i128 %xmm0.038.reload, i128* %xmm0.233.reg2mem, !insn.addr !4851
  br i1 %215, label %dec_label_pc_8763, label %dec_label_pc_87b9, !insn.addr !4851

dec_label_pc_87b9:                                ; preds = %dec_label_pc_878e, %dec_label_pc_8843
  %xmm0.233.reload = load i128, i128* %xmm0.233.reg2mem
  %rcx.334.reload = load i64, i64* %rcx.334.reg2mem
  %r13.135.reload = load i64, i64* %r13.135.reg2mem
  %216 = call i128 @__asm_xorps(i128 %xmm0.233.reload, i128 %xmm0.233.reload), !insn.addr !4852
  call void @__asm_movups(i128 0, i128 %216), !insn.addr !4853
  %217 = load i128, i128* %stack_var_-2832, align 8, !insn.addr !4854
  call void @__asm_movups(i128 %217, i128 %216), !insn.addr !4854
  %218 = inttoptr i64 %r13.135.reload to i64*
  %219 = load i64, i64* %218, align 8, !insn.addr !4855
  %220 = icmp eq i64 %219, %183, !insn.addr !4855
  %221 = icmp eq i1 %220, false, !insn.addr !4856
  store i64 %rcx.334.reload, i64* %rcx.5.reg2mem, !insn.addr !4856
  br i1 %221, label %dec_label_pc_8843, label %dec_label_pc_87d7, !insn.addr !4856

dec_label_pc_87d7:                                ; preds = %dec_label_pc_87b9
  %222 = load i64, i64* %48, align 8, !insn.addr !4857
  %223 = inttoptr i64 %r13.135.reload to i128*, !insn.addr !4858
  %224 = call i64 @function_72d0(i128* %223, i64 %186, i64 %200, i64 32, i64 %222, i64 %15), !insn.addr !4858
  %225 = trunc i64 %224 to i32, !insn.addr !4859
  %226 = icmp eq i32 %225, 0, !insn.addr !4859
  store i64 0, i64* %rax.9.reg2mem, !insn.addr !4860
  store i64 32, i64* %rcx.4.reg2mem, !insn.addr !4860
  store i64 32, i64* %rcx.5.reg2mem, !insn.addr !4860
  br i1 %226, label %dec_label_pc_8843, label %dec_label_pc_87f8, !insn.addr !4860

dec_label_pc_87f8:                                ; preds = %dec_label_pc_87d7, %dec_label_pc_880b
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %rax.9.reload = load i64, i64* %rax.9.reg2mem
  %227 = add i64 %201, %rax.9.reload, !insn.addr !4861
  %228 = inttoptr i64 %227 to i8*, !insn.addr !4861
  %229 = load i8, i8* %228, align 1, !insn.addr !4861
  %230 = zext i8 %229 to i64, !insn.addr !4861
  %231 = and i64 %rcx.4.reload, -256, !insn.addr !4861
  %232 = or i64 %231, %230, !insn.addr !4861
  %233 = add i64 %rax.9.reload, %200, !insn.addr !4862
  %234 = inttoptr i64 %233 to i8*, !insn.addr !4862
  %235 = load i8, i8* %234, align 1, !insn.addr !4862
  %236 = sext i8 %235 to i64, !insn.addr !4863
  %237 = icmp eq i64 %232, %236
  store i64 %232, i64* %rcx.5.reg2mem, !insn.addr !4863
  br i1 %237, label %dec_label_pc_880b, label %dec_label_pc_8843, !insn.addr !4863

dec_label_pc_880b:                                ; preds = %dec_label_pc_87f8
  %238 = add nuw nsw i64 %rax.9.reload, 1, !insn.addr !4864
  %239 = icmp eq i64 %rax.9.reload, 31, !insn.addr !4865
  %240 = icmp eq i1 %239, false, !insn.addr !4866
  store i64 %238, i64* %rax.9.reg2mem, !insn.addr !4866
  store i64 %232, i64* %rcx.4.reg2mem, !insn.addr !4866
  br i1 %240, label %dec_label_pc_87f8, label %dec_label_pc_8814, !insn.addr !4866

dec_label_pc_8814:                                ; preds = %dec_label_pc_880b
  %241 = call i128 @__asm_xorps(i128 %216, i128 %216), !insn.addr !4867
  call void @__asm_movups(i128 0, i128 %241), !insn.addr !4868
  %242 = bitcast i128* %stack_var_-2832 to i8*, !insn.addr !4869
  call void @__asm_rep_stosb_memset(i8* nonnull %242, i8 0, i64 41), !insn.addr !4869
  %243 = call i64 @.Lparse_lzma12.0(i64 %200, i64 %arg2), !insn.addr !4870
  %244 = trunc i64 %243 to i32, !insn.addr !4871
  %245 = icmp eq i32 %244, 0, !insn.addr !4871
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4872
  br i1 %245, label %dec_label_pc_8cf2, label %dec_label_pc_884b, !insn.addr !4872

dec_label_pc_8843:                                ; preds = %dec_label_pc_87f8, %dec_label_pc_87d7, %dec_label_pc_87b9
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %246 = add i64 %r13.135.reload, 1, !insn.addr !4873
  %247 = icmp ult i64 %246, %213, !insn.addr !4850
  %248 = icmp eq i1 %247, false, !insn.addr !4851
  store i128 %216, i128* %xmm0.1.reg2mem, !insn.addr !4851
  store i64 %rcx.5.reload, i64* %rcx.2.reg2mem, !insn.addr !4851
  store i64 %246, i64* %r13.135.reg2mem, !insn.addr !4851
  store i64 %rcx.5.reload, i64* %rcx.334.reg2mem, !insn.addr !4851
  store i128 %216, i128* %xmm0.233.reg2mem, !insn.addr !4851
  br i1 %248, label %dec_label_pc_8763, label %dec_label_pc_87b9, !insn.addr !4851

dec_label_pc_884b:                                ; preds = %dec_label_pc_8814
  %249 = add i64 %186, -16, !insn.addr !4874
  %250 = load i64, i64* %48, align 8, !insn.addr !4875
  %251 = add i64 %r13.135.reload, 16, !insn.addr !4876
  %252 = and i64 %249, 4294967295, !insn.addr !4877
  %253 = inttoptr i64 %251 to i64*, !insn.addr !4878
  %254 = call i64 @function_71b0(i64* %253, i64 %252, i64 %200, i64* %218, i64 %251, i64 %250), !insn.addr !4878
  %255 = trunc i64 %254 to i32, !insn.addr !4879
  %256 = icmp eq i32 %255, 0, !insn.addr !4879
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4880
  br i1 %256, label %dec_label_pc_8cf2, label %dec_label_pc_8881, !insn.addr !4880

dec_label_pc_8881:                                ; preds = %dec_label_pc_884b
  %257 = add i64 %arg1, 8, !insn.addr !4881
  %258 = inttoptr i64 %257 to i64*, !insn.addr !4881
  %259 = load i64, i64* %258, align 8, !insn.addr !4881
  %260 = icmp eq i64 %259, 0, !insn.addr !4882
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4883
  br i1 %260, label %dec_label_pc_8cf2, label %dec_label_pc_8893, !insn.addr !4883

dec_label_pc_8893:                                ; preds = %dec_label_pc_8881
  %261 = inttoptr i64 %259 to i8*, !insn.addr !4884
  %262 = load i8, i8* %261, align 1, !insn.addr !4884
  %263 = and i8 %262, 32, !insn.addr !4884
  %264 = icmp eq i8 %263, 0, !insn.addr !4884
  %265 = ptrtoint i32* %stack_var_-3712 to i64, !insn.addr !4885
  store i64 %265, i64* %rdi, align 8, !insn.addr !4885
  br i1 %264, label %dec_label_pc_88e6, label %dec_label_pc_889f, !insn.addr !4886

dec_label_pc_889f:                                ; preds = %dec_label_pc_8893
  %266 = icmp eq i32 %197, 2, !insn.addr !4887
  br i1 %266, label %dec_label_pc_88d0, label %dec_label_pc_88a4, !insn.addr !4888

dec_label_pc_88a4:                                ; preds = %dec_label_pc_889f
  %267 = icmp ult i32 %197, 3
  br i1 %267, label %dec_label_pc_88a6, label %dec_label_pc_88b7, !insn.addr !4889

dec_label_pc_88a6:                                ; preds = %dec_label_pc_88a4
  %268 = icmp eq i32 %197, 0, !insn.addr !4890
  %269 = add i64 %259, 1, !insn.addr !4891
  %270 = inttoptr i64 %269 to i8*, !insn.addr !4891
  %271 = load i8, i8* %270, align 1, !insn.addr !4891
  %272 = zext i8 %271 to i64, !insn.addr !4891
  %273 = icmp eq i1 %268, false, !insn.addr !4892
  br i1 %273, label %dec_label_pc_88ca, label %dec_label_pc_88ae, !insn.addr !4892

dec_label_pc_88ae:                                ; preds = %dec_label_pc_88a6
  %274 = udiv i64 %272, 8, !insn.addr !4893
  %275 = urem i64 %274, 16, !insn.addr !4894
  store i64 %275, i64* %rsi.2.reg2mem, !insn.addr !4895
  br label %dec_label_pc_88db, !insn.addr !4895

dec_label_pc_88b7:                                ; preds = %dec_label_pc_88a4
  %276 = icmp eq i32 %197, 3, !insn.addr !4896
  %277 = icmp eq i1 %276, false, !insn.addr !4897
  store i64 1, i64* %rsi.2.reg2mem, !insn.addr !4897
  br i1 %277, label %dec_label_pc_88db, label %dec_label_pc_88c1, !insn.addr !4897

dec_label_pc_88c1:                                ; preds = %dec_label_pc_88b7
  %278 = add i64 %259, 2, !insn.addr !4898
  %279 = inttoptr i64 %278 to i8*, !insn.addr !4898
  %280 = load i8, i8* %279, align 1, !insn.addr !4898
  %281 = urem i8 %280, 32
  %282 = zext i8 %281 to i64, !insn.addr !4899
  store i64 %282, i64* %rsi.2.reg2mem, !insn.addr !4900
  br label %dec_label_pc_88db, !insn.addr !4900

dec_label_pc_88ca:                                ; preds = %dec_label_pc_88a6
  %283 = udiv i64 %272, 4, !insn.addr !4901
  store i64 %283, i64* %storemerge6.reg2mem, !insn.addr !4902
  br label %dec_label_pc_88d7, !insn.addr !4902

dec_label_pc_88d0:                                ; preds = %dec_label_pc_889f
  %284 = add i64 %259, 1, !insn.addr !4903
  %285 = inttoptr i64 %284 to i8*, !insn.addr !4903
  %286 = load i8, i8* %285, align 1, !insn.addr !4903
  %287 = udiv i8 %286, 2, !insn.addr !4904
  %288 = zext i8 %287 to i64, !insn.addr !4904
  store i64 %288, i64* %storemerge6.reg2mem, !insn.addr !4904
  br label %dec_label_pc_88d7, !insn.addr !4904

dec_label_pc_88d7:                                ; preds = %dec_label_pc_88d0, %dec_label_pc_88ca
  %storemerge6.reload = load i64, i64* %storemerge6.reg2mem
  %289 = urem i64 %storemerge6.reload, 256, !insn.addr !4905
  store i64 %289, i64* %rsi.2.reg2mem, !insn.addr !4905
  br label %dec_label_pc_88db, !insn.addr !4905

dec_label_pc_88db:                                ; preds = %dec_label_pc_88d7, %dec_label_pc_88c1, %dec_label_pc_88b7, %dec_label_pc_88ae
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %290 = load i64, i64* %52, align 8, !insn.addr !4906
  %291 = trunc i64 %rsi.2.reload to i32, !insn.addr !4907
  %292 = call i64 @.Lindex_decode.1(i64 %265, i32 %291, i64 %290), !insn.addr !4907
  store i64 %290, i64* %rdx.0.reg2mem, !insn.addr !4908
  store i64 %292, i64* %storemerge7.reg2mem, !insn.addr !4908
  br label %dec_label_pc_88f8, !insn.addr !4908

dec_label_pc_88e6:                                ; preds = %dec_label_pc_8893
  %293 = call i64 @.Lindex_encode.1(i64 %arg2, i32* nonnull %stack_var_-3712, i64 1, i32 0), !insn.addr !4909
  store i64 1, i64* %rdx.0.reg2mem, !insn.addr !4909
  store i64 %293, i64* %storemerge7.reg2mem, !insn.addr !4909
  br label %dec_label_pc_88f8, !insn.addr !4909

dec_label_pc_88f8:                                ; preds = %dec_label_pc_88e6, %dec_label_pc_88db
  %storemerge7.reload = load i64, i64* %storemerge7.reg2mem
  %294 = trunc i64 %storemerge7.reload to i32, !insn.addr !4910
  %295 = icmp eq i32 %294, 0, !insn.addr !4910
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4911
  br i1 %295, label %dec_label_pc_8cf2, label %dec_label_pc_88fc, !insn.addr !4911

dec_label_pc_88fc:                                ; preds = %dec_label_pc_88f8
  %296 = load i32, i32* %stack_var_-3712, align 4, !insn.addr !4912
  %297 = load i64, i64* %258, align 8, !insn.addr !4913
  %298 = load i64, i64* %52, align 8, !insn.addr !4914
  %299 = icmp slt i32 %296, 0, !insn.addr !4915
  %300 = bitcast i64* %stack_var_-3136 to i8*, !insn.addr !4916
  call void @__asm_rep_stosd_memset(i8* nonnull %300, i32 0, i64 18), !insn.addr !4916
  %301 = icmp eq i64 %297, 0, !insn.addr !4917
  %or.cond = or i1 %299, %301
  %302 = icmp eq i64 %298, 0, !insn.addr !4918
  %or.cond12 = or i1 %or.cond, %302
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4919
  br i1 %or.cond12, label %dec_label_pc_8cf2, label %dec_label_pc_893f, !insn.addr !4919

dec_label_pc_893f:                                ; preds = %dec_label_pc_88fc
  %303 = add i64 %298, ptrtoint (i32** @global_var_18 to i64), !insn.addr !4920
  %304 = inttoptr i64 %303 to i64*, !insn.addr !4920
  %305 = load i64, i64* %304, align 8, !insn.addr !4920
  %306 = icmp eq i64 %305, 0, !insn.addr !4920
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4921
  br i1 %306, label %dec_label_pc_8cf2, label %dec_label_pc_8947, !insn.addr !4921

dec_label_pc_8947:                                ; preds = %dec_label_pc_893f
  %307 = trunc i64 %265 to i32
  %308 = icmp eq i32 %307, 0, !insn.addr !4922
  br i1 %308, label %dec_label_pc_8959, label %dec_label_pc_8976, !insn.addr !4923

dec_label_pc_8959:                                ; preds = %dec_label_pc_8947
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %309 = call i64 @.Lthreads_stop.0(i64* nonnull %stack_var_-3136, i64 %arg2, i64 %rdx.0.reload, i64 0), !insn.addr !4924
  %310 = trunc i64 %309 to i32, !insn.addr !4925
  %311 = icmp eq i32 %310, 0, !insn.addr !4925
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4926
  br i1 %311, label %dec_label_pc_8cf2, label %dec_label_pc_896c, !insn.addr !4926

dec_label_pc_896c:                                ; preds = %dec_label_pc_8959
  %312 = inttoptr i64 %297 to i8*, !insn.addr !4927
  %313 = load i8, i8* %312, align 1, !insn.addr !4927
  %314 = urem i8 %313, 2
  %315 = zext i8 %314 to i32, !insn.addr !4928
  %316 = add i64 %arg2, 80, !insn.addr !4929
  %317 = inttoptr i64 %316 to i32*, !insn.addr !4929
  store i32 %315, i32* %317, align 4, !insn.addr !4929
  br label %dec_label_pc_8976, !insn.addr !4929

dec_label_pc_8976:                                ; preds = %dec_label_pc_8947, %dec_label_pc_896c
  %318 = zext i32 %296 to i64
  %319 = trunc i64 %249 to i16, !insn.addr !4930
  %320 = call i64 @function_7110(i64 %318, i64 %251, i16 %319, i64 %298), !insn.addr !4930
  %321 = icmp slt i64 %320, 0, !insn.addr !4931
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4932
  br i1 %321, label %dec_label_pc_8cf2, label %dec_label_pc_8993, !insn.addr !4932

dec_label_pc_8993:                                ; preds = %dec_label_pc_8976
  br i1 %308, label %dec_label_pc_89d5, label %dec_label_pc_899e

dec_label_pc_899e:                                ; preds = %dec_label_pc_8993, %dec_label_pc_8a1d
  store i64 %318, i64* %rdi, align 8, !insn.addr !4933
  store i128 0, i128* %stack_var_-3392, align 8, !insn.addr !4934
  %322 = call i64 @function_70a0(i64 %318, i128* nonnull %stack_var_-3392, i64 4, i64 %298), !insn.addr !4935
  %323 = icmp slt i64 %322, 0, !insn.addr !4936
  %324 = icmp eq i1 %323, false, !insn.addr !4937
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4937
  br i1 %324, label %dec_label_pc_8a58, label %dec_label_pc_8cf2, !insn.addr !4937

dec_label_pc_89d5:                                ; preds = %dec_label_pc_8993
  %325 = icmp ult i64 %4, 64
  %326 = select i1 %325, i64 %4, i64 64, !insn.addr !4938
  %327 = trunc i64 %326 to i32
  %328 = add nuw nsw i32 %327, 1, !insn.addr !4939
  %329 = call i32 @llvm.bswap.i32(i32 %328), !insn.addr !4940
  %330 = sext i32 %329 to i128, !insn.addr !4941
  store i128 %330, i128* %stack_var_-2848, align 8, !insn.addr !4941
  %331 = call i64 @function_7110(i64 %318, i64 %200, i16 5, i64 %298), !insn.addr !4942
  %332 = icmp slt i64 %331, 0, !insn.addr !4943
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4944
  br i1 %332, label %dec_label_pc_8cf2, label %dec_label_pc_8a1d, !insn.addr !4944

dec_label_pc_8a1d:                                ; preds = %dec_label_pc_89d5
  %333 = load i64, i64* %stack_var_-3136, align 8, !insn.addr !4945
  %334 = trunc i64 %326 to i16, !insn.addr !4946
  %335 = call i64 @function_7110(i64 %318, i64 %333, i16 %334, i64 %298), !insn.addr !4946
  %336 = icmp slt i64 %335, 0, !insn.addr !4947
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4948
  br i1 %336, label %dec_label_pc_8cf2, label %dec_label_pc_899e, !insn.addr !4948

dec_label_pc_8a58:                                ; preds = %dec_label_pc_899e
  %337 = load i128, i128* %stack_var_-3392, align 8, !insn.addr !4949
  %338 = trunc i128 %337 to i32, !insn.addr !4949
  %339 = call i32 @llvm.bswap.i32(i32 %338), !insn.addr !4950
  %340 = sext i32 %339 to i128, !insn.addr !4951
  store i128 %340, i128* %stack_var_-3392, align 8, !insn.addr !4951
  %341 = icmp eq i32 %338, 0, !insn.addr !4952
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !4953
  br i1 %341, label %dec_label_pc_8cf2, label %dec_label_pc_8a6d, !insn.addr !4953

dec_label_pc_8a6d:                                ; preds = %dec_label_pc_8a58
  %342 = add i64 %298, ptrtoint (i32** @global_var_48 to i64), !insn.addr !4954
  %343 = inttoptr i64 %342 to i64*, !insn.addr !4954
  %344 = load i64, i64* %343, align 8, !insn.addr !4954
  %345 = icmp eq i64 %344, 0, !insn.addr !4954
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4955
  br i1 %345, label %dec_label_pc_8cf2, label %dec_label_pc_8a79, !insn.addr !4955

dec_label_pc_8a79:                                ; preds = %dec_label_pc_8a6d
  %346 = add i64 %298, 80, !insn.addr !4956
  %347 = inttoptr i64 %346 to i64*, !insn.addr !4956
  %348 = load i64, i64* %347, align 8, !insn.addr !4956
  %349 = icmp eq i64 %348, 0, !insn.addr !4956
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4957
  br i1 %349, label %dec_label_pc_8cf2, label %dec_label_pc_8aba.preheader, !insn.addr !4957

dec_label_pc_8aba.preheader:                      ; preds = %dec_label_pc_8a79
  %350 = zext i32 %339 to i64, !insn.addr !4958
  %351 = icmp eq i64 %322, 0, !insn.addr !4959
  store i64 %350, i64* %rbx.0.reg2mem
  br label %dec_label_pc_8aba

dec_label_pc_8aba:                                ; preds = %dec_label_pc_8aba.preheader, %dec_label_pc_8ac0
  br i1 %351, label %dec_label_pc_8cf2.loopexit20, label %dec_label_pc_8ac0, !insn.addr !4960

dec_label_pc_8ac0:                                ; preds = %dec_label_pc_8aba
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %352 = sub i64 %rbx.0.reload, %322, !insn.addr !4961
  %353 = icmp eq i64 %352, 0, !insn.addr !4961
  %354 = icmp eq i1 %353, false, !insn.addr !4962
  store i64 %352, i64* %rbx.0.reg2mem, !insn.addr !4962
  br i1 %354, label %dec_label_pc_8aba, label %dec_label_pc_8ac5.loopexit, !insn.addr !4962

dec_label_pc_8ac5.loopexit:                       ; preds = %dec_label_pc_8ac0
  store i64 %318, i64* %rdi, align 8
  store i64 1, i64* %storemerge.reg2mem
  br label %dec_label_pc_8cf2

dec_label_pc_8ae7:                                ; preds = %dec_label_pc_86c1
  %355 = icmp ult i64 %169, 1577
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4963
  br i1 %355, label %dec_label_pc_8af4, label %dec_label_pc_8cf2, !insn.addr !4963

dec_label_pc_8af4:                                ; preds = %dec_label_pc_8ae7
  %356 = trunc i64 %169 to i32
  %357 = add i32 %356, 700, !insn.addr !4964
  %358 = call i32 @llvm.bswap.i32(i32 %357), !insn.addr !4965
  %359 = sext i32 %358 to i128, !insn.addr !4966
  store i128 %359, i128* %stack_var_-2848, align 8, !insn.addr !4966
  call void @__asm_rep_movsd_memcpy(i8* nonnull %140, i8* nonnull %106, i64 105), !insn.addr !4967
  ret i64 0

dec_label_pc_8cf2.loopexit20:                     ; preds = %dec_label_pc_8aba
  store i64 %318, i64* %rdi, align 8
  store i64 0, i64* %storemerge.reg2mem
  br label %dec_label_pc_8cf2

dec_label_pc_8cf2:                                ; preds = %dec_label_pc_8763, %dec_label_pc_8673, %dec_label_pc_86aa, %dec_label_pc_8722, %dec_label_pc_8582, %dec_label_pc_8ac5.loopexit, %dec_label_pc_8a58, %dec_label_pc_8cf2.loopexit20, %dec_label_pc_8495, %dec_label_pc_86ff, %dec_label_pc_8ae7, %dec_label_pc_8a79, %dec_label_pc_8a6d, %dec_label_pc_8a1d, %dec_label_pc_89d5, %dec_label_pc_8976, %dec_label_pc_8959, %dec_label_pc_893f, %dec_label_pc_88f8, %dec_label_pc_8881, %dec_label_pc_884b, %dec_label_pc_8814, %dec_label_pc_86f2, %dec_label_pc_8569, %dec_label_pc_855e, %dec_label_pc_852c, %dec_label_pc_8384, %dec_label_pc_8372, %dec_label_pc_835e, %dec_label_pc_8353, %dec_label_pc_8346, %dec_label_pc_8339, %dec_label_pc_8330, %dec_label_pc_8323, %dec_label_pc_8317, %dec_label_pc_830b, %dec_label_pc_82e6, %dec_label_pc_82d8, %dec_label_pc_8290, %dec_label_pc_88fc, %dec_label_pc_899e, %dec_label_pc_86d8
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload

; uselistorder directives
  uselistorder i64 %318, { 1, 0, 6, 5, 4, 3, 2 }
  uselistorder i64 %298, { 1, 0, 3, 4, 2, 5, 7, 6 }
  uselistorder i64 %259, { 2, 0, 1, 3, 4 }
  uselistorder i64 %251, { 0, 2, 1 }
  uselistorder i64 %rcx.5.reload, { 1, 0 }
  uselistorder i64 %232, { 1, 0, 2 }
  uselistorder i64 %rax.9.reload, { 1, 2, 3, 0 }
  uselistorder i128 %216, { 0, 1, 3, 2, 5, 4 }
  uselistorder i64 %r13.135.reload, { 3, 2, 0, 1 }
  uselistorder i128 %xmm0.233.reload, { 1, 0 }
  uselistorder i64 %213, { 1, 0 }
  uselistorder i64 %203, { 0, 2, 1, 3, 4 }
  uselistorder i64 %rcx.139.reload, { 0, 1, 2, 4, 3 }
  uselistorder i64 %200, { 3, 2, 1, 0, 4 }
  uselistorder i32 %197, { 2, 3, 1, 0 }
  uselistorder i8* %193, { 1, 0 }
  uselistorder i64 %181, { 0, 2, 1 }
  uselistorder i64 %169, { 2, 1, 3, 0 }
  uselistorder i64 %167, { 0, 2, 1 }
  uselistorder i64 %rsi.030.reload, { 1, 0 }
  uselistorder i64* %154, { 1, 0 }
  uselistorder i64 %139, { 0, 2, 1 }
  uselistorder i8 %127, { 1, 0 }
  uselistorder i64 %rax.8.reload, { 1, 0 }
  uselistorder i128 %101, { 3, 2, 1, 0 }
  uselistorder i64 %85, { 1, 3, 2, 5, 0, 4, 6 }
  uselistorder i64 %75, { 0, 2, 1, 3 }
  uselistorder i64 %67, { 1, 0, 2 }
  uselistorder i32 %64, { 4, 3, 2, 1, 0 }
  uselistorder i64* %52, { 1, 0, 2 }
  uselistorder i64 %49, { 1, 0, 2, 3 }
  uselistorder i1 %23, { 1, 0, 2 }
  uselistorder i32 %21, { 4, 3, 5, 2, 1, 0 }
  uselistorder i128 %10, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-3712, { 1, 0, 2, 3 }
  uselistorder i128* %stack_var_-2848, { 2, 1, 0, 3 }
  uselistorder i128* %stack_var_-3392, { 1, 2, 0, 3, 4 }
  uselistorder i64* %stack_var_-3136, { 3, 0, 1, 2 }
  uselistorder i32* %stack_var_-3704, { 3, 2, 1, 0 }
  uselistorder i64* %rdi, { 1, 0, 5, 4, 3, 6, 2 }
  uselistorder i64* %rax.3.reg2mem, { 0, 3, 2, 1 }
  uselistorder i64* %rax.5.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.7.reg2mem, { 0, 2, 1 }
  uselistorder i32* %.reg2mem, { 0, 5, 6, 4, 3, 2, 1 }
  uselistorder i64* %rax.8.reg2mem, { 0, 5, 6, 4, 3, 2, 1 }
  uselistorder i8** %storemerge840.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.139.reg2mem, { 1, 0, 2 }
  uselistorder i128* %xmm0.038.reg2mem, { 1, 0, 2 }
  uselistorder i128* %xmm0.1.reg2mem, { 1, 2, 3, 0, 4 }
  uselistorder i64* %rcx.2.reg2mem, { 1, 2, 3, 0, 4 }
  uselistorder i64* %r13.135.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rcx.334.reg2mem, { 2, 0, 1 }
  uselistorder i128* %xmm0.233.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.9.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rcx.4.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge6.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rsi.2.reg2mem, { 0, 4, 1, 2, 3 }
  uselistorder i64* %rdx.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge7.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbx.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 8, 40, 6, 39, 38, 7, 37, 36, 10, 35, 34, 33, 32, 31, 30, 29, 28, 1, 4, 41, 27, 9, 3, 2, 5, 26, 25, 24, 42, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11 }
  uselistorder i64* %1, { 1, 0 }
  uselistorder i128* %0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 2, 3, 4, 5, 6, 7, 8, 0, 1 }
  uselistorder i64 31, { 1, 0, 2, 3 }
  uselistorder i64 (i64, i64*, i64, i64)* @.Lhc_find_func.1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i64 16385, { 3, 0, 1, 2 }
  uselistorder i8 -64, { 1, 0, 2 }
  uselistorder i64 (i64, i64, i64*, i64, i64)* @function_7340, { 1, 0 }
  uselistorder i64 12, { 3, 1, 2, 4, 5, 0 }
  uselistorder i64 (i64, i64)* @function_7190, { 1, 2, 0 }
  uselistorder i64 %arg2, { 3, 4, 5, 1, 2, 6, 7, 8, 9, 11, 10, 0 }
  uselistorder i64 %arg1, { 7, 6, 5, 8, 4, 2, 1, 0, 3, 9, 10, 11 }
  uselistorder label %dec_label_pc_8cf2, { 7, 10, 5, 11, 12, 6, 13, 14, 40, 15, 16, 17, 39, 18, 19, 20, 21, 0, 3, 9, 22, 41, 2, 1, 4, 23, 24, 25, 8, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38 }
  uselistorder label %dec_label_pc_8aba, { 1, 0 }
  uselistorder label %dec_label_pc_899e, { 1, 0 }
  uselistorder label %dec_label_pc_8976, { 1, 0 }
  uselistorder label %dec_label_pc_87f8, { 1, 0 }
  uselistorder label %dec_label_pc_87b9, { 1, 0 }
  uselistorder label %dec_label_pc_8763, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8750, { 1, 0 }
  uselistorder label %dec_label_pc_86aa, { 1, 0 }
  uselistorder label %dec_label_pc_8495, { 1, 2, 0 }
  uselistorder label %dec_label_pc_847f, { 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_846c, { 1, 0 }
  uselistorder label %dec_label_pc_8467, { 1, 0 }
  uselistorder label %dec_label_pc_845f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8454, { 1, 0 }
  uselistorder label %dec_label_pc_8339, { 1, 0 }
}

define i64 @.Ldecode_buffer.part.0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_8d70:
  %0 = alloca i128
  %storemerge.reg2mem = alloca i64, !insn.addr !4968
  %.reg2mem = alloca i64, !insn.addr !4968
  %storemerge13.reg2mem = alloca i64, !insn.addr !4968
  %.pre-phi6.reg2mem = alloca i32*, !insn.addr !4968
  %rdi = alloca i64, align 8
  %1 = load i128, i128* %0
  %stack_var_-129 = alloca i128, align 8
  %2 = load i128, i128* %0
  %stack_var_-113 = alloca i128, align 8
  %3 = load i128, i128* %0
  %stack_var_-97 = alloca i64, align 8
  %4 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !4969
  call void @__asm_movups(i128 %3, i128 %4), !insn.addr !4970
  %5 = bitcast i64* %stack_var_-97 to i8*, !insn.addr !4971
  call void @__asm_rep_stosb_memset(i8* nonnull %5, i8 0, i64 41), !insn.addr !4971
  %6 = icmp eq i64 %arg1, 0, !insn.addr !4972
  %7 = icmp eq i64 %arg3, 0
  br i1 %6, label %dec_label_pc_8dde, label %dec_label_pc_8da3, !insn.addr !4973

dec_label_pc_8da3:                                ; preds = %dec_label_pc_8d70
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4974
  br i1 %7, label %dec_label_pc_8ea8, label %dec_label_pc_8dac, !insn.addr !4974

dec_label_pc_8dac:                                ; preds = %dec_label_pc_8da3
  %8 = add i64 %arg3, 260
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9, align 4, !insn.addr !4975
  %11 = icmp eq i32 %10, 3, !insn.addr !4976
  %12 = icmp eq i1 %11, false, !insn.addr !4977
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !4977
  br i1 %12, label %dec_label_pc_8dc1, label %dec_label_pc_8ea8, !insn.addr !4977

dec_label_pc_8dc1:                                ; preds = %dec_label_pc_8dac
  %13 = icmp ugt i64 %arg2, 18
  %14 = icmp ult i32 %10, 2
  %or.cond = icmp eq i1 %13, %14
  store i32* %9, i32** %.pre-phi6.reg2mem, !insn.addr !4978
  br i1 %or.cond, label %dec_label_pc_8de9, label %dec_label_pc_8dcf, !insn.addr !4978

dec_label_pc_8dcf:                                ; preds = %dec_label_pc_8dde.dec_label_pc_8dcf_crit_edge, %dec_label_pc_8dc1, %dec_label_pc_8e7d, %dec_label_pc_8e3f, %dec_label_pc_8e32, %dec_label_pc_8e06, %dec_label_pc_8de9
  %.pre-phi6.reload = load i32*, i32** %.pre-phi6.reg2mem
  store i32 -1, i32* %.pre-phi6.reload, align 4, !insn.addr !4979
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4980
  br label %dec_label_pc_8ea8, !insn.addr !4980

dec_label_pc_8dde:                                ; preds = %dec_label_pc_8d70
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4981
  br i1 %7, label %dec_label_pc_8ea8, label %dec_label_pc_8dde.dec_label_pc_8dcf_crit_edge, !insn.addr !4981

dec_label_pc_8dde.dec_label_pc_8dcf_crit_edge:    ; preds = %dec_label_pc_8dde
  %.pre4 = add i64 %arg3, 260, !insn.addr !4979
  %.pre5 = inttoptr i64 %.pre4 to i32*, !insn.addr !4979
  store i32* %.pre5, i32** %.pre-phi6.reg2mem
  br label %dec_label_pc_8dcf

dec_label_pc_8de9:                                ; preds = %dec_label_pc_8dc1
  %15 = bitcast i64* %rdi to i128*
  %16 = load i128, i128* %15, align 8, !insn.addr !4982
  %17 = call i128 @__asm_movups.4(i128 %16), !insn.addr !4982
  %18 = ptrtoint i128* %stack_var_-113 to i64, !insn.addr !4983
  call void @__asm_movups(i128 %2, i128 %17), !insn.addr !4984
  %19 = call i64 @.Lparse_lzma12.0(i64 %18, i64 %arg3), !insn.addr !4985
  %20 = trunc i64 %19 to i32, !insn.addr !4986
  %21 = icmp eq i32 %20, 0, !insn.addr !4986
  store i32* %9, i32** %.pre-phi6.reg2mem, !insn.addr !4987
  br i1 %21, label %dec_label_pc_8dcf, label %dec_label_pc_8e06, !insn.addr !4987

dec_label_pc_8e06:                                ; preds = %dec_label_pc_8de9
  %22 = add i64 %arg1, 16, !insn.addr !4988
  %23 = add i64 %arg2, 4294967280, !insn.addr !4989
  %24 = and i64 %23, 4294967295, !insn.addr !4989
  %25 = add i64 %arg3, 8, !insn.addr !4990
  %26 = inttoptr i64 %25 to i64*, !insn.addr !4990
  %27 = load i64, i64* %26, align 8, !insn.addr !4990
  %28 = inttoptr i64 %22 to i64*, !insn.addr !4991
  %29 = bitcast i128* %stack_var_-129 to i64*, !insn.addr !4991
  %30 = call i64 @function_71b0(i64* %28, i64 %24, i64 %18, i64* nonnull %29, i64 %22, i64 %27), !insn.addr !4991
  %31 = trunc i64 %30 to i32, !insn.addr !4992
  %32 = icmp eq i32 %31, 0, !insn.addr !4992
  store i32* %9, i32** %.pre-phi6.reg2mem, !insn.addr !4993
  br i1 %32, label %dec_label_pc_8dcf, label %dec_label_pc_8e32, !insn.addr !4993

dec_label_pc_8e32:                                ; preds = %dec_label_pc_8e06
  %33 = inttoptr i64 %22 to i16*, !insn.addr !4994
  %34 = load i16, i16* %33, align 2, !insn.addr !4994
  %35 = zext i16 %34 to i64, !insn.addr !4994
  %36 = add i64 %arg2, -18, !insn.addr !4995
  %37 = icmp ult i64 %36, %35, !insn.addr !4996
  store i32* %9, i32** %.pre-phi6.reg2mem, !insn.addr !4997
  br i1 %37, label %dec_label_pc_8dcf, label %dec_label_pc_8e3f, !insn.addr !4997

dec_label_pc_8e3f:                                ; preds = %dec_label_pc_8e32
  %38 = add i64 %arg3, 232, !insn.addr !4998
  %39 = inttoptr i64 %38 to i64*, !insn.addr !4998
  %40 = load i64, i64* %39, align 8, !insn.addr !4998
  %41 = add i64 %arg3, 224, !insn.addr !4999
  %42 = inttoptr i64 %41 to i64*, !insn.addr !4999
  %43 = load i64, i64* %42, align 8, !insn.addr !4999
  %44 = sub i64 %43, %40, !insn.addr !5000
  %45 = icmp ugt i64 %44, %35, !insn.addr !5001
  %46 = icmp eq i1 %45, false, !insn.addr !5002
  store i32* %9, i32** %.pre-phi6.reg2mem, !insn.addr !5002
  br i1 %46, label %dec_label_pc_8dcf, label %dec_label_pc_8e59, !insn.addr !5002

dec_label_pc_8e59:                                ; preds = %dec_label_pc_8e3f
  %47 = add i64 %arg3, 240, !insn.addr !5003
  %48 = inttoptr i64 %47 to i64*, !insn.addr !5003
  %49 = load i64, i64* %48, align 8, !insn.addr !5003
  %50 = icmp eq i16 %34, 0, !insn.addr !5004
  store i64 %40, i64* %.reg2mem, !insn.addr !5005
  br i1 %50, label %dec_label_pc_8e7d, label %dec_label_pc_8e6f.lr.ph, !insn.addr !5005

dec_label_pc_8e6f.lr.ph:                          ; preds = %dec_label_pc_8e59
  %51 = add i64 %49, %40, !insn.addr !5003
  %52 = add i64 %arg1, 18, !insn.addr !5006
  store i64 0, i64* %storemerge13.reg2mem
  br label %dec_label_pc_8e6f

dec_label_pc_8e6f:                                ; preds = %dec_label_pc_8e6f.lr.ph, %dec_label_pc_8e6f
  %storemerge13.reload = load i64, i64* %storemerge13.reg2mem
  %53 = add i64 %52, %storemerge13.reload, !insn.addr !5006
  %54 = inttoptr i64 %53 to i8*, !insn.addr !5006
  %55 = load i8, i8* %54, align 1, !insn.addr !5006
  %56 = add i64 %51, %storemerge13.reload, !insn.addr !5007
  %57 = inttoptr i64 %56 to i8*, !insn.addr !5007
  store i8 %55, i8* %57, align 1, !insn.addr !5007
  %58 = add nuw nsw i64 %storemerge13.reload, 1, !insn.addr !5008
  %59 = icmp eq i64 %58, %35, !insn.addr !5004
  store i64 %58, i64* %storemerge13.reg2mem, !insn.addr !5005
  br i1 %59, label %dec_label_pc_8e6a.dec_label_pc_8e7d_crit_edge, label %dec_label_pc_8e6f, !insn.addr !5005

dec_label_pc_8e6a.dec_label_pc_8e7d_crit_edge:    ; preds = %dec_label_pc_8e6f
  %.pre = load i64, i64* %39, align 8
  store i64 %.pre, i64* %.reg2mem
  br label %dec_label_pc_8e7d

dec_label_pc_8e7d:                                ; preds = %dec_label_pc_8e6a.dec_label_pc_8e7d_crit_edge, %dec_label_pc_8e59
  %.reload = load i64, i64* %.reg2mem, !insn.addr !5009
  %60 = add i64 %.reload, %35, !insn.addr !5009
  store i64 %60, i64* %39, align 8, !insn.addr !5009
  %61 = load i64, i64* %26, align 8, !insn.addr !5010
  %62 = call i64 @function_71b0(i64* %28, i64 %24, i64 %18, i64* nonnull %29, i64 %22, i64 %61), !insn.addr !5011
  %63 = trunc i64 %62 to i32, !insn.addr !5012
  %64 = icmp eq i32 %63, 0, !insn.addr !5012
  %65 = icmp eq i1 %64, false, !insn.addr !5013
  store i32* %9, i32** %.pre-phi6.reg2mem, !insn.addr !5013
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !5013
  br i1 %65, label %dec_label_pc_8ea8, label %dec_label_pc_8dcf, !insn.addr !5013

dec_label_pc_8ea8:                                ; preds = %dec_label_pc_8da3, %dec_label_pc_8dcf, %dec_label_pc_8dde, %dec_label_pc_8dac, %dec_label_pc_8e7d
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5014

; uselistorder directives
  uselistorder i64 %40, { 1, 0, 2 }
  uselistorder i64* %39, { 1, 0, 2 }
  uselistorder i64 %22, { 1, 0, 3, 2 }
  uselistorder i32* %9, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i1 %7, { 1, 0 }
  uselistorder i32** %.pre-phi6.reg2mem, { 5, 4, 3, 2, 1, 7, 0, 6 }
  uselistorder i64* %storemerge13.reg2mem, { 1, 0, 2 }
  uselistorder i64* %.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 5, 3, 2, 4, 1 }
  uselistorder i128* %0, { 2, 1, 0 }
  uselistorder i64 %arg3, { 1, 3, 2, 4, 5, 0, 7, 6 }
  uselistorder i64 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8ea8, { 4, 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_8e6f, { 1, 0 }
  uselistorder label %dec_label_pc_8dcf, { 2, 3, 4, 5, 6, 0, 1 }
}

define i64 @.Lfile_info_decode.0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_8ec0:
  %0 = alloca i128
  %1 = alloca i64
  %merge.reg2mem = alloca i64, !insn.addr !5015
  %rax.3.reg2mem = alloca i64, !insn.addr !5015
  %storemerge.reg2mem = alloca i64, !insn.addr !5015
  %r15.0.reg2mem = alloca i64, !insn.addr !5015
  %.pre-phi14.reg2mem = alloca i64*, !insn.addr !5015
  %rax.211.reg2mem = alloca i64, !insn.addr !5015
  %rax.1.reg2mem = alloca i64, !insn.addr !5015
  %rax.0.reg2mem = alloca i64, !insn.addr !5015
  %2 = load i64, i64* %1
  %3 = load i128, i128* %0
  %stack_var_-170 = alloca i128, align 8
  %stack_var_-154 = alloca i64, align 8
  %stack_var_-305 = alloca i128, align 8
  %4 = load i128, i128* %0
  %stack_var_-289 = alloca i64, align 8
  %stack_var_-224 = alloca i64, align 8
  %stack_var_-320 = alloca i64, align 8
  %stack_var_-248 = alloca i64, align 8
  %stack_var_-344 = alloca i64, align 8
  %5 = load i32, i32* @global_var_cb40, align 4, !insn.addr !5016
  %6 = icmp eq i32 %5, 0, !insn.addr !5017
  br i1 %6, label %dec_label_pc_949e, label %dec_label_pc_8eee, !insn.addr !5018

dec_label_pc_8eee:                                ; preds = %dec_label_pc_8ec0
  %7 = sext i32 %5 to i64, !insn.addr !5016
  %8 = add nsw i64 %7, 16, !insn.addr !5019
  %9 = inttoptr i64 %8 to i64*, !insn.addr !5019
  %10 = load i64, i64* %9, align 8, !insn.addr !5019
  %11 = icmp eq i64 %10, 0, !insn.addr !5020
  br i1 %11, label %dec_label_pc_949e, label %dec_label_pc_8efb, !insn.addr !5021

dec_label_pc_8efb:                                ; preds = %dec_label_pc_8eee
  %12 = add nsw i64 %7, 32, !insn.addr !5022
  %13 = inttoptr i64 %12 to i64*, !insn.addr !5022
  %14 = load i64, i64* %13, align 8, !insn.addr !5022
  %15 = icmp eq i64 %14, 0, !insn.addr !5023
  br i1 %15, label %dec_label_pc_949e, label %dec_label_pc_8f08, !insn.addr !5024

dec_label_pc_8f08:                                ; preds = %dec_label_pc_8efb
  %16 = add nsw i64 %7, 240, !insn.addr !5025
  %17 = inttoptr i64 %16 to i64*, !insn.addr !5025
  %18 = load i64, i64* %17, align 8, !insn.addr !5025
  %19 = icmp eq i64 %18, 0, !insn.addr !5025
  br i1 %19, label %dec_label_pc_949e, label %dec_label_pc_8f16, !insn.addr !5026

dec_label_pc_8f16:                                ; preds = %dec_label_pc_8f08
  %20 = add i64 %14, ptrtoint (i32** @global_var_48 to i64), !insn.addr !5027
  %21 = inttoptr i64 %20 to i64*, !insn.addr !5027
  %22 = load i64, i64* %21, align 8, !insn.addr !5027
  %23 = icmp eq i64 %22, 0, !insn.addr !5028
  store i64 0, i64* %merge.reg2mem, !insn.addr !5029
  br i1 %23, label %dec_label_pc_946f, label %dec_label_pc_8f24, !insn.addr !5029

dec_label_pc_8f24:                                ; preds = %dec_label_pc_8f16
  %24 = add nsw i64 %7, 260, !insn.addr !5030
  %25 = inttoptr i64 %24 to i32*, !insn.addr !5030
  %26 = load i32, i32* %25, align 4, !insn.addr !5030
  %27 = icmp eq i32 %26, 4, !insn.addr !5030
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5031
  br i1 %27, label %dec_label_pc_946f, label %dec_label_pc_8f34, !insn.addr !5031

dec_label_pc_8f34:                                ; preds = %dec_label_pc_8f24
  %28 = call i64 @.Lstream_encoder_mt_init.part.0(i64 %7), !insn.addr !5032
  %29 = trunc i64 %28 to i32, !insn.addr !5033
  %30 = icmp eq i32 %29, 0, !insn.addr !5033
  br i1 %30, label %dec_label_pc_9449, label %dec_label_pc_8f44, !insn.addr !5034

dec_label_pc_8f44:                                ; preds = %dec_label_pc_8f34
  %31 = load i32, i32* %25, align 4, !insn.addr !5035
  switch i32 %31, label %dec_label_pc_8f5b [
    i32 4, label %dec_label_pc_9449
    i32 -1, label %dec_label_pc_9449
  ]

dec_label_pc_8f5b:                                ; preds = %dec_label_pc_8f44
  %32 = bitcast i64* %stack_var_-248 to i8*, !insn.addr !5036
  call void @__asm_rep_stosd_memset(i8* nonnull %32, i32 0, i64 18), !insn.addr !5036
  store i64 0, i64* %stack_var_-320, align 8, !insn.addr !5037
  %33 = ptrtoint i64* %stack_var_-248 to i64, !insn.addr !5038
  %34 = ptrtoint i64* %stack_var_-224 to i64, !insn.addr !5039
  %35 = call i64 @.Lstream_decoder_mt_get_progress.0(i64 %arg3, i64 %7, i64 %33, i64 %34, i64 %2), !insn.addr !5040
  %36 = trunc i64 %35 to i32, !insn.addr !5041
  %37 = icmp eq i32 %36, 0, !insn.addr !5041
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5042
  br i1 %37, label %dec_label_pc_946f, label %dec_label_pc_8f92, !insn.addr !5042

dec_label_pc_8f92:                                ; preds = %dec_label_pc_8f5b
  %38 = load i64, i64* %stack_var_-224, align 8, !insn.addr !5043
  %39 = call i64 @.Lworker_start.0(i64* nonnull %stack_var_-248, i64 %38, i64* nonnull %stack_var_-320, i64 %7), !insn.addr !5044
  %40 = trunc i64 %39 to i32, !insn.addr !5045
  %41 = icmp eq i32 %40, 0, !insn.addr !5045
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5046
  br i1 %41, label %dec_label_pc_946f, label %dec_label_pc_8faf, !insn.addr !5046

dec_label_pc_8faf:                                ; preds = %dec_label_pc_8f92
  %42 = load i64, i64* %stack_var_-320, align 8, !insn.addr !5047
  %43 = load i64, i64* %stack_var_-248, align 8, !insn.addr !5048
  %44 = call i64 @.Ldecode_buffer.part.0(i64 %43, i64 %42, i64 %7), !insn.addr !5049
  %45 = load i32, i32* %25, align 4, !insn.addr !5050
  %46 = icmp eq i32 %45, 3, !insn.addr !5051
  br i1 %46, label %dec_label_pc_8faf.dec_label_pc_9236_crit_edge, label %dec_label_pc_8fd0, !insn.addr !5052

dec_label_pc_8faf.dec_label_pc_9236_crit_edge:    ; preds = %dec_label_pc_8faf
  %.pre = add nsw i64 %7, 248, !insn.addr !5053
  %.pre13 = inttoptr i64 %.pre to i64*, !insn.addr !5053
  store i64* %.pre13, i64** %.pre-phi14.reg2mem
  br label %dec_label_pc_9236

dec_label_pc_8fd0:                                ; preds = %dec_label_pc_8faf
  %47 = icmp sgt i32 %45, 3, !insn.addr !5054
  br i1 %47, label %dec_label_pc_8fe3, label %dec_label_pc_8fd2, !insn.addr !5054

dec_label_pc_8fd2:                                ; preds = %dec_label_pc_8fd0
  switch i32 %45, label %dec_label_pc_9449 [
    i32 0, label %dec_label_pc_8ff1
    i32 1, label %dec_label_pc_9115
  ]

dec_label_pc_8fe3:                                ; preds = %dec_label_pc_8fd0
  %48 = icmp eq i32 %45, 4, !insn.addr !5055
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5056
  br i1 %48, label %dec_label_pc_946f, label %dec_label_pc_9449, !insn.addr !5056

dec_label_pc_8ff1:                                ; preds = %dec_label_pc_8fd2
  %49 = add nsw i64 %7, 232, !insn.addr !5057
  %50 = inttoptr i64 %49 to i64*, !insn.addr !5057
  %51 = load i64, i64* %50, align 8, !insn.addr !5057
  %52 = icmp ult i64 %51, 174
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5058
  br i1 %52, label %dec_label_pc_946f, label %dec_label_pc_9002, !insn.addr !5058

dec_label_pc_9002:                                ; preds = %dec_label_pc_8ff1
  %53 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !5059
  %54 = bitcast i64* %stack_var_-289 to i8*, !insn.addr !5060
  call void @__asm_rep_stosb_memset(i8* nonnull %54, i8 0, i64 41), !insn.addr !5060
  %55 = load i64, i64* %17, align 8, !insn.addr !5061
  call void @__asm_movups(i128 %4, i128 %53), !insn.addr !5062
  %56 = icmp eq i64 %55, 0, !insn.addr !5063
  br i1 %56, label %dec_label_pc_90fd, label %dec_label_pc_9028, !insn.addr !5064

dec_label_pc_9028:                                ; preds = %dec_label_pc_9002
  %57 = add nsw i64 %7, 40, !insn.addr !5065
  %58 = inttoptr i64 %57 to i64*, !insn.addr !5065
  %59 = load i64, i64* %58, align 8, !insn.addr !5065
  %60 = icmp eq i64 %59, 0, !insn.addr !5066
  br i1 %60, label %dec_label_pc_90fd, label %dec_label_pc_9035, !insn.addr !5067

dec_label_pc_9035:                                ; preds = %dec_label_pc_9028
  %61 = add i64 %59, 8, !insn.addr !5068
  %62 = inttoptr i64 %61 to i64*, !insn.addr !5068
  %63 = load i64, i64* %62, align 8, !insn.addr !5068
  %64 = icmp eq i64 %63, 0, !insn.addr !5068
  br i1 %64, label %dec_label_pc_90fd, label %dec_label_pc_9040, !insn.addr !5069

dec_label_pc_9040:                                ; preds = %dec_label_pc_9035
  %65 = add nsw i64 %7, 248, !insn.addr !5070
  %66 = inttoptr i64 %65 to i64*, !insn.addr !5070
  %67 = load i64, i64* %66, align 8, !insn.addr !5070
  %68 = icmp eq i64 %67, 0, !insn.addr !5070
  %69 = icmp eq i1 %68, false, !insn.addr !5071
  br i1 %69, label %dec_label_pc_90fd, label %dec_label_pc_904e, !insn.addr !5071

dec_label_pc_904e:                                ; preds = %dec_label_pc_9040
  %70 = ptrtoint i64* %stack_var_-344 to i64, !insn.addr !5072
  store i64 %55, i64* %66, align 8, !insn.addr !5073
  %71 = load i128, i128* %stack_var_-170, align 8, !insn.addr !5074
  call void @__asm_movups(i128 %71, i128 %53), !insn.addr !5074
  %72 = bitcast i64* %stack_var_-154 to i8*, !insn.addr !5075
  call void @__asm_rep_stosb_memset(i8* nonnull %72, i8 0, i64 74), !insn.addr !5075
  %73 = add i64 %55, 2, !insn.addr !5076
  %74 = add i64 %70, 174, !insn.addr !5077
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !5078
  br label %dec_label_pc_906e, !insn.addr !5078

dec_label_pc_906e:                                ; preds = %dec_label_pc_906e, %dec_label_pc_904e
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %75 = add i64 %73, %rax.0.reload, !insn.addr !5076
  %76 = inttoptr i64 %75 to i8*, !insn.addr !5076
  %77 = load i8, i8* %76, align 1, !insn.addr !5076
  %78 = add i64 %74, %rax.0.reload, !insn.addr !5077
  %79 = inttoptr i64 %78 to i8*, !insn.addr !5077
  store i8 %77, i8* %79, align 1, !insn.addr !5077
  %80 = add nuw nsw i64 %rax.0.reload, 1, !insn.addr !5079
  %exitcond = icmp eq i64 %80, 58
  store i64 %80, i64* %rax.0.reg2mem, !insn.addr !5080
  br i1 %exitcond, label %dec_label_pc_908a, label %dec_label_pc_906e, !insn.addr !5080

dec_label_pc_908a:                                ; preds = %dec_label_pc_906e
  %81 = ptrtoint i128* %stack_var_-305 to i64, !insn.addr !5081
  %82 = call i64 @.Lparse_lzma12.0(i64 %81, i64 %7), !insn.addr !5082
  %83 = trunc i64 %82 to i32, !insn.addr !5083
  %84 = icmp eq i32 %83, 0, !insn.addr !5083
  br i1 %84, label %dec_label_pc_90fd, label %dec_label_pc_909e, !insn.addr !5084

dec_label_pc_909e:                                ; preds = %dec_label_pc_908a
  %85 = load i64, i64* %58, align 8, !insn.addr !5085
  %86 = add nsw i64 %7, 256, !insn.addr !5086
  %87 = inttoptr i64 %86 to i32*, !insn.addr !5086
  %88 = load i32, i32* %87, align 4, !insn.addr !5086
  %89 = zext i32 %88 to i64, !insn.addr !5086
  %90 = load i64, i64* %66, align 8, !insn.addr !5087
  %91 = add i64 %85, 8, !insn.addr !5088
  %92 = inttoptr i64 %91 to i64*, !insn.addr !5088
  %93 = load i64, i64* %92, align 8, !insn.addr !5088
  %94 = add i64 %90, 60, !insn.addr !5089
  %95 = mul i64 %89, 8, !insn.addr !5090
  %96 = add i64 %93, %95, !insn.addr !5090
  %97 = inttoptr i64 %96 to i64*, !insn.addr !5090
  %98 = load i64, i64* %97, align 8, !insn.addr !5090
  %99 = call i64 @function_7650(i64 %98, i128* nonnull %stack_var_-170, i64 58, i64 90, i64 %94, i128* nonnull %stack_var_-305, i64 %7), !insn.addr !5091
  %100 = trunc i64 %99 to i32, !insn.addr !5092
  %101 = icmp eq i32 %100, 0, !insn.addr !5092
  br i1 %101, label %dec_label_pc_90fd, label %dec_label_pc_90da, !insn.addr !5093

dec_label_pc_90da:                                ; preds = %dec_label_pc_909e
  store i32 1, i32* %25, align 4, !insn.addr !5094
  %102 = bitcast i128* %stack_var_-305 to i8*, !insn.addr !5095
  call void @__asm_rep_stosb_memset(i8* nonnull %102, i8 0, i64 57), !insn.addr !5095
  %103 = call i64 @.Lstream_encoder_mt_init.part.0(i64 %7), !insn.addr !5096
  store i64 %103, i64* %storemerge.reg2mem, !insn.addr !5097
  br label %dec_label_pc_9305, !insn.addr !5097

dec_label_pc_90fd:                                ; preds = %dec_label_pc_909e, %dec_label_pc_908a, %dec_label_pc_9040, %dec_label_pc_9035, %dec_label_pc_9028, %dec_label_pc_9002
  store i32 -1, i32* %25, align 4, !insn.addr !5098
  %104 = add nsw i64 %7, 248, !insn.addr !5099
  %105 = inttoptr i64 %104 to i64*, !insn.addr !5099
  store i64 0, i64* %105, align 8, !insn.addr !5099
  br label %dec_label_pc_9449, !insn.addr !5100

dec_label_pc_9115:                                ; preds = %dec_label_pc_8fd2
  %106 = add nsw i64 %7, 248
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107, align 8, !insn.addr !5101
  %109 = icmp eq i64 %108, 0, !insn.addr !5102
  br i1 %109, label %dec_label_pc_9449, label %dec_label_pc_9125, !insn.addr !5103

dec_label_pc_9125:                                ; preds = %dec_label_pc_9115
  %110 = inttoptr i64 %108 to i16*, !insn.addr !5104
  %111 = load i16, i16* %110, align 2, !insn.addr !5104
  %112 = zext i16 %111 to i64, !insn.addr !5104
  %113 = add nsw i64 %7, 232, !insn.addr !5105
  %114 = inttoptr i64 %113 to i64*, !insn.addr !5105
  %115 = load i64, i64* %114, align 8, !insn.addr !5105
  %116 = icmp ugt i64 %115, %112, !insn.addr !5106
  br i1 %116, label %dec_label_pc_9449, label %dec_label_pc_9138, !insn.addr !5107

dec_label_pc_9138:                                ; preds = %dec_label_pc_9125
  %117 = icmp eq i64 %115, %112, !insn.addr !5108
  %118 = icmp eq i1 %117, false, !insn.addr !5109
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5109
  br i1 %118, label %dec_label_pc_946f, label %dec_label_pc_9141, !insn.addr !5109

dec_label_pc_9141:                                ; preds = %dec_label_pc_9138
  %119 = add nsw i64 %7, 224, !insn.addr !5110
  %120 = inttoptr i64 %119 to i64*, !insn.addr !5110
  %121 = load i64, i64* %120, align 8, !insn.addr !5110
  %122 = add nsw i64 %7, 152, !insn.addr !5111
  %123 = inttoptr i64 %122 to i64*, !insn.addr !5111
  %124 = load i64, i64* %123, align 8, !insn.addr !5111
  %125 = icmp ult i64 %121, %124, !insn.addr !5112
  store i64 0, i64* %merge.reg2mem, !insn.addr !5113
  br i1 %125, label %dec_label_pc_946f, label %dec_label_pc_9158, !insn.addr !5113

dec_label_pc_9158:                                ; preds = %dec_label_pc_9141
  %126 = add i64 %115, -114, !insn.addr !5114
  %127 = sub i64 %121, %124, !insn.addr !5115
  %128 = icmp ult i64 %126, %127, !insn.addr !5116
  %129 = icmp eq i1 %128, false, !insn.addr !5117
  store i64 0, i64* %merge.reg2mem, !insn.addr !5117
  br i1 %129, label %dec_label_pc_946f, label %dec_label_pc_916b, !insn.addr !5117

dec_label_pc_916b:                                ; preds = %dec_label_pc_9158
  %130 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !5118
  %131 = load i128, i128* %stack_var_-170, align 8, !insn.addr !5119
  call void @__asm_movups(i128 %131, i128 %130), !insn.addr !5119
  %132 = ptrtoint i128* %stack_var_-170 to i64, !insn.addr !5120
  %133 = bitcast i64* %stack_var_-154 to i8*, !insn.addr !5121
  call void @__asm_rep_stosb_memset(i8* nonnull %133, i8 0, i64 98), !insn.addr !5121
  %134 = load i64, i64* %17, align 8, !insn.addr !5122
  %135 = add i64 %134, %126, !insn.addr !5123
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !5123
  br label %dec_label_pc_919b, !insn.addr !5123

dec_label_pc_919b:                                ; preds = %dec_label_pc_919b, %dec_label_pc_916b
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %136 = add i64 %rax.1.reload, %135, !insn.addr !5124
  %137 = inttoptr i64 %136 to i8*, !insn.addr !5124
  %138 = load i8, i8* %137, align 1, !insn.addr !5124
  %139 = add i64 %rax.1.reload, 1, !insn.addr !5125
  %140 = add i64 %rax.1.reload, %132, !insn.addr !5126
  %141 = inttoptr i64 %140 to i8*, !insn.addr !5126
  store i8 %138, i8* %141, align 1, !insn.addr !5126
  %142 = icmp eq i64 %rax.1.reload, 113, !insn.addr !5127
  %143 = icmp eq i1 %142, false, !insn.addr !5128
  store i64 %139, i64* %rax.1.reg2mem, !insn.addr !5128
  br i1 %143, label %dec_label_pc_919b, label %dec_label_pc_91ad, !insn.addr !5128

dec_label_pc_91ad:                                ; preds = %dec_label_pc_919b
  %144 = icmp ult i64 %121, %126, !insn.addr !5129
  %145 = sub i64 %121, %126, !insn.addr !5130
  %146 = icmp ult i64 %145, %124, !insn.addr !5131
  %or.cond16 = or i1 %144, %146
  store i64 0, i64* %merge.reg2mem, !insn.addr !5132
  br i1 %or.cond16, label %dec_label_pc_946f, label %dec_label_pc_91c4.preheader, !insn.addr !5132

dec_label_pc_91c4.preheader:                      ; preds = %dec_label_pc_91ad
  %147 = icmp eq i64 %124, 0, !insn.addr !5133
  br i1 %147, label %dec_label_pc_91da, label %dec_label_pc_91c9.lr.ph, !insn.addr !5134

dec_label_pc_91c9.lr.ph:                          ; preds = %dec_label_pc_91c4.preheader
  %148 = add nsw i64 %7, 160, !insn.addr !5135
  store i64 0, i64* %rax.211.reg2mem
  br label %dec_label_pc_91c9

dec_label_pc_91c9:                                ; preds = %dec_label_pc_91c9.lr.ph, %dec_label_pc_91c9
  %rax.211.reload = load i64, i64* %rax.211.reg2mem
  %149 = add i64 %148, %rax.211.reload, !insn.addr !5135
  %150 = inttoptr i64 %149 to i8*, !insn.addr !5135
  %151 = load i8, i8* %150, align 1, !insn.addr !5135
  %152 = add i64 %rax.211.reload, %135, !insn.addr !5136
  %153 = inttoptr i64 %152 to i8*, !insn.addr !5136
  store i8 %151, i8* %153, align 1, !insn.addr !5136
  %154 = add nuw i64 %rax.211.reload, 1, !insn.addr !5137
  %155 = icmp eq i64 %124, %154, !insn.addr !5133
  store i64 %154, i64* %rax.211.reg2mem, !insn.addr !5134
  br i1 %155, label %dec_label_pc_91da, label %dec_label_pc_91c9, !insn.addr !5134

dec_label_pc_91da:                                ; preds = %dec_label_pc_91c9, %dec_label_pc_91c4.preheader
  %156 = add nsw i64 %7, 40, !insn.addr !5138
  %157 = inttoptr i64 %156 to i64*, !insn.addr !5138
  %158 = load i64, i64* %157, align 8, !insn.addr !5138
  %159 = add nsw i64 %7, 256, !insn.addr !5139
  %160 = inttoptr i64 %159 to i32*, !insn.addr !5139
  %161 = load i32, i32* %160, align 4, !insn.addr !5139
  %162 = zext i32 %161 to i64, !insn.addr !5139
  %163 = load i64, i64* %107, align 8, !insn.addr !5140
  %164 = load i64, i64* %120, align 8, !insn.addr !5141
  %165 = add i64 %158, 8, !insn.addr !5142
  %166 = inttoptr i64 %165 to i64*, !insn.addr !5142
  %167 = load i64, i64* %166, align 8, !insn.addr !5142
  %168 = load i64, i64* %17, align 8, !insn.addr !5143
  %169 = load i64, i64* %123, align 8, !insn.addr !5144
  %170 = add i64 %169, %126, !insn.addr !5144
  %171 = mul i64 %162, 8, !insn.addr !5145
  %172 = add i64 %167, %171, !insn.addr !5145
  %173 = inttoptr i64 %172 to i64*, !insn.addr !5145
  %174 = load i64, i64* %173, align 8, !insn.addr !5145
  %175 = add i64 %163, 2, !insn.addr !5146
  %176 = inttoptr i64 %168 to i128*, !insn.addr !5147
  %177 = inttoptr i64 %175 to i128*, !insn.addr !5147
  %178 = call i64 @function_7650(i64 %174, i128* %176, i64 %170, i64 %164, i64 %132, i128* %177, i64 %7), !insn.addr !5147
  %179 = trunc i64 %178 to i32, !insn.addr !5148
  %180 = icmp eq i32 %179, 0, !insn.addr !5148
  %181 = icmp eq i1 %180, false, !insn.addr !5149
  br i1 %181, label %dec_label_pc_922c, label %dec_label_pc_921d, !insn.addr !5149

dec_label_pc_921d:                                ; preds = %dec_label_pc_91da
  store i32 -1, i32* %25, align 4, !insn.addr !5150
  store i64 0, i64* %merge.reg2mem, !insn.addr !5151
  br label %dec_label_pc_946f, !insn.addr !5151

dec_label_pc_922c:                                ; preds = %dec_label_pc_91da
  store i32 3, i32* %25, align 4, !insn.addr !5152
  store i64* %107, i64** %.pre-phi14.reg2mem, !insn.addr !5152
  br label %dec_label_pc_9236, !insn.addr !5152

dec_label_pc_9236:                                ; preds = %dec_label_pc_8faf.dec_label_pc_9236_crit_edge, %dec_label_pc_922c
  %.pre-phi14.reload = load i64*, i64** %.pre-phi14.reg2mem
  %182 = load i64, i64* %.pre-phi14.reload, align 8, !insn.addr !5053
  %183 = icmp eq i64 %182, 0, !insn.addr !5153
  br i1 %183, label %dec_label_pc_9449, label %dec_label_pc_9246, !insn.addr !5154

dec_label_pc_9246:                                ; preds = %dec_label_pc_9236
  %184 = inttoptr i64 %182 to i16*, !insn.addr !5155
  %185 = load i16, i16* %184, align 2, !insn.addr !5155
  %186 = zext i16 %185 to i64, !insn.addr !5155
  %187 = add i64 %182, 59, !insn.addr !5156
  %188 = inttoptr i64 %187 to i8*, !insn.addr !5156
  %189 = load i8, i8* %188, align 1, !insn.addr !5156
  %190 = add nsw i64 %186, -288, !insn.addr !5157
  switch i8 %189, label %dec_label_pc_926e [
    i8 2, label %dec_label_pc_9312
    i8 3, label %dec_label_pc_93e4
  ]

dec_label_pc_926e:                                ; preds = %dec_label_pc_9246
  %191 = icmp eq i8 %189, 1, !insn.addr !5158
  %192 = icmp eq i1 %191, false, !insn.addr !5159
  br i1 %192, label %dec_label_pc_9449, label %dec_label_pc_9276, !insn.addr !5159

dec_label_pc_9276:                                ; preds = %dec_label_pc_926e
  %193 = load i64, i64* %13, align 8, !insn.addr !5160
  %194 = add i64 %193, 56, !insn.addr !5161
  %195 = inttoptr i64 %194 to i64*, !insn.addr !5161
  %196 = load i64, i64* %195, align 8, !insn.addr !5161
  %197 = icmp eq i64 %196, 0, !insn.addr !5161
  %198 = icmp ult i64 %190, 2
  %or.cond = or i1 %198, %197
  br i1 %or.cond, label %dec_label_pc_9449, label %dec_label_pc_928f, !insn.addr !5162

dec_label_pc_928f:                                ; preds = %dec_label_pc_9276
  %199 = add i64 %182, 174, !insn.addr !5163
  %200 = inttoptr i64 %199 to i8*, !insn.addr !5163
  %201 = load i8, i8* %200, align 1, !insn.addr !5163
  %202 = add i64 %14, 144, !insn.addr !5164
  %203 = inttoptr i64 %202 to i8*, !insn.addr !5164
  store i8 %201, i8* %203, align 1, !insn.addr !5164
  %204 = add i64 %182, 175, !insn.addr !5165
  %205 = inttoptr i64 %204 to i8*, !insn.addr !5165
  %206 = load i8, i8* %205, align 1, !insn.addr !5165
  %207 = add i64 %14, 145, !insn.addr !5166
  %208 = inttoptr i64 %207 to i8*, !insn.addr !5166
  store i8 %206, i8* %208, align 1, !insn.addr !5166
  %209 = inttoptr i64 %202 to i16*, !insn.addr !5167
  %210 = load i16, i16* %209, align 2, !insn.addr !5167
  %211 = icmp eq i16 %210, 0, !insn.addr !5168
  store i64 0, i64* %r15.0.reg2mem, !insn.addr !5169
  br i1 %211, label %dec_label_pc_92e0, label %dec_label_pc_92bb, !insn.addr !5169

dec_label_pc_92bb:                                ; preds = %dec_label_pc_928f
  %212 = zext i16 %210 to i64, !insn.addr !5167
  %213 = add nsw i64 %186, -290, !insn.addr !5170
  %214 = add i64 %182, 176, !insn.addr !5171
  %215 = icmp ult i64 %213, %212, !insn.addr !5172
  %216 = icmp eq i1 %215, false, !insn.addr !5173
  store i64 %214, i64* %r15.0.reg2mem, !insn.addr !5173
  br i1 %216, label %dec_label_pc_92e0, label %dec_label_pc_92cd, !insn.addr !5173

dec_label_pc_92cd:                                ; preds = %dec_label_pc_92bb
  store i16 0, i16* %209, align 2, !insn.addr !5174
  br label %dec_label_pc_9449, !insn.addr !5175

dec_label_pc_92e0:                                ; preds = %dec_label_pc_928f, %dec_label_pc_92bb
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %217 = add i64 %14, 152, !insn.addr !5176
  %218 = inttoptr i64 %217 to i64*, !insn.addr !5176
  store i64 %r15.0.reload, i64* %218, align 8, !insn.addr !5176
  store i32 4, i32* %25, align 4, !insn.addr !5177
  %219 = call i64 @.Llzma_block_unpadded_size.1(i64 1, i32 0, i32 0, i32 0, i64 %7), !insn.addr !5178
  store i64 %219, i64* %storemerge.reg2mem, !insn.addr !5178
  br label %dec_label_pc_9305, !insn.addr !5178

dec_label_pc_9305:                                ; preds = %dec_label_pc_92e0, %dec_label_pc_90da
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %220 = trunc i64 %storemerge.reload to i32, !insn.addr !5179
  %221 = icmp eq i32 %220, 0, !insn.addr !5179
  %222 = icmp eq i1 %221, false, !insn.addr !5180
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5180
  br i1 %222, label %dec_label_pc_946f, label %dec_label_pc_9449, !insn.addr !5180

dec_label_pc_9312:                                ; preds = %dec_label_pc_9246
  %223 = load i64, i64* %13, align 8, !insn.addr !5181
  %224 = add i64 %223, 120, !insn.addr !5182
  %225 = inttoptr i64 %224 to i64*, !insn.addr !5182
  %226 = load i64, i64* %225, align 8, !insn.addr !5182
  %227 = icmp eq i64 %226, 0, !insn.addr !5182
  %228 = icmp ult i64 %190, 5
  %or.cond7 = or i1 %228, %227
  br i1 %or.cond7, label %dec_label_pc_9449, label %dec_label_pc_932b, !insn.addr !5183

dec_label_pc_932b:                                ; preds = %dec_label_pc_9312
  %229 = add i64 %182, 174, !insn.addr !5184
  %230 = inttoptr i64 %229 to i16*, !insn.addr !5184
  %231 = load i16, i16* %230, align 2, !insn.addr !5184
  %232 = icmp eq i16 %231, 0, !insn.addr !5185
  br i1 %232, label %dec_label_pc_9449, label %dec_label_pc_933c, !insn.addr !5186

dec_label_pc_933c:                                ; preds = %dec_label_pc_932b
  %233 = zext i16 %231 to i64, !insn.addr !5184
  %234 = add nsw i64 %186, -290, !insn.addr !5187
  %235 = icmp ugt i64 %234, %233, !insn.addr !5188
  %236 = icmp eq i1 %235, false, !insn.addr !5189
  br i1 %236, label %dec_label_pc_9449, label %dec_label_pc_934b, !insn.addr !5189

dec_label_pc_934b:                                ; preds = %dec_label_pc_933c
  %237 = sub nsw i64 %234, %233, !insn.addr !5190
  %238 = icmp ult i64 %237, 3
  br i1 %238, label %dec_label_pc_9449, label %dec_label_pc_9358, !insn.addr !5191

dec_label_pc_9358:                                ; preds = %dec_label_pc_934b
  %239 = add i64 %182, 176, !insn.addr !5192
  %240 = add i64 %239, %233, !insn.addr !5192
  %241 = inttoptr i64 %240 to i8*, !insn.addr !5193
  %242 = load i8, i8* %241, align 1, !insn.addr !5193
  %243 = add i64 %14, 132, !insn.addr !5194
  %244 = inttoptr i64 %243 to i8*, !insn.addr !5194
  store i8 %242, i8* %244, align 1, !insn.addr !5194
  %245 = add i64 %240, 1, !insn.addr !5195
  %246 = inttoptr i64 %245 to i8*, !insn.addr !5195
  %247 = load i8, i8* %246, align 1, !insn.addr !5195
  %248 = add i64 %14, 133, !insn.addr !5196
  %249 = inttoptr i64 %248 to i8*, !insn.addr !5196
  store i8 %247, i8* %249, align 1, !insn.addr !5196
  %250 = inttoptr i64 %243 to i16*, !insn.addr !5197
  %251 = load i16, i16* %250, align 2, !insn.addr !5197
  %252 = icmp eq i16 %251, 0, !insn.addr !5198
  br i1 %252, label %dec_label_pc_938a, label %dec_label_pc_9381, !insn.addr !5199

dec_label_pc_9381:                                ; preds = %dec_label_pc_9358
  %253 = zext i16 %251 to i64, !insn.addr !5197
  %254 = add nsw i64 %237, -2, !insn.addr !5200
  %255 = icmp ult i64 %254, %253, !insn.addr !5201
  %256 = icmp eq i1 %255, false, !insn.addr !5202
  br i1 %256, label %dec_label_pc_939a, label %dec_label_pc_938a, !insn.addr !5202

dec_label_pc_938a:                                ; preds = %dec_label_pc_9381, %dec_label_pc_9358
  store i16 0, i16* %250, align 2, !insn.addr !5203
  br label %dec_label_pc_9449, !insn.addr !5204

dec_label_pc_939a:                                ; preds = %dec_label_pc_9381
  %257 = load i64, i64* %13, align 8, !insn.addr !5205
  %258 = add i64 %182, 178, !insn.addr !5206
  %259 = add i64 %258, %233, !insn.addr !5206
  %260 = load i64, i64* %9, align 8, !insn.addr !5207
  %261 = add i64 %14, 136, !insn.addr !5208
  %262 = inttoptr i64 %261 to i64*, !insn.addr !5208
  store i64 %259, i64* %262, align 8, !insn.addr !5208
  %263 = add i64 %257, 32, !insn.addr !5209
  %264 = inttoptr i64 %263 to i64*, !insn.addr !5209
  %265 = load i64, i64* %264, align 8, !insn.addr !5209
  %266 = icmp eq i64 %265, 0, !insn.addr !5210
  br i1 %266, label %dec_label_pc_9449, label %dec_label_pc_93bc, !insn.addr !5211

dec_label_pc_93bc:                                ; preds = %dec_label_pc_939a
  %267 = and i64 %arg2, 4294967295
  %268 = add i64 %257, 120, !insn.addr !5212
  %269 = inttoptr i64 %268 to i64*, !insn.addr !5212
  %270 = load i64, i64* %269, align 8, !insn.addr !5212
  %271 = inttoptr i64 %270 to i64*, !insn.addr !5213
  store i64 %265, i64* %271, align 8, !insn.addr !5213
  %272 = call i64 @function_7110(i64 %267, i64 %239, i16 %231, i64 %260), !insn.addr !5214
  %273 = icmp slt i64 %272, 0, !insn.addr !5215
  %274 = icmp eq i1 %273, false, !insn.addr !5216
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5216
  br i1 %274, label %dec_label_pc_949e, label %dec_label_pc_946f, !insn.addr !5216

dec_label_pc_93e4:                                ; preds = %dec_label_pc_9246
  %275 = add i64 %10, 48, !insn.addr !5217
  %276 = inttoptr i64 %275 to i64*, !insn.addr !5217
  %277 = load i64, i64* %276, align 8, !insn.addr !5217
  %278 = icmp eq i64 %277, 0, !insn.addr !5217
  %279 = icmp ult i64 %190, 9
  %or.cond9 = or i1 %279, %278
  br i1 %or.cond9, label %dec_label_pc_9449, label %dec_label_pc_93f1, !insn.addr !5218

dec_label_pc_93f1:                                ; preds = %dec_label_pc_93e4
  %280 = add i64 %182, -115, !insn.addr !5219
  %281 = add i64 %280, %186, !insn.addr !5219
  %282 = inttoptr i64 %281 to i8*, !insn.addr !5219
  %283 = load i8, i8* %282, align 1, !insn.addr !5219
  %284 = icmp eq i8 %283, 0, !insn.addr !5219
  %285 = icmp eq i1 %284, false, !insn.addr !5220
  br i1 %285, label %dec_label_pc_9449, label %dec_label_pc_93fb, !insn.addr !5220

dec_label_pc_93fb:                                ; preds = %dec_label_pc_93f1
  %286 = add i64 %182, 174, !insn.addr !5221
  %287 = inttoptr i64 %286 to i64*, !insn.addr !5221
  %288 = load i64, i64* %287, align 8, !insn.addr !5221
  %289 = udiv i64 %288, 4294967296, !insn.addr !5222
  %290 = icmp ult i64 %288, 4294967296
  %291 = icmp eq i1 %290, false, !insn.addr !5223
  store i64 %289, i64* %rax.3.reg2mem, !insn.addr !5223
  br i1 %291, label %dec_label_pc_9419, label %dec_label_pc_940f, !insn.addr !5223

dec_label_pc_940f:                                ; preds = %dec_label_pc_9419, %dec_label_pc_93fb
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %292 = trunc i64 %288 to i32, !insn.addr !5224
  %293 = icmp eq i32 %292, 0, !insn.addr !5224
  %294 = icmp eq i1 %293, false, !insn.addr !5225
  %295 = icmp eq i64 %rax.3.reload, 4294967295, !insn.addr !5226
  %or.cond10 = icmp eq i1 %294, %295
  br i1 %or.cond10, label %dec_label_pc_9449, label %dec_label_pc_9433, !insn.addr !5225

dec_label_pc_9419:                                ; preds = %dec_label_pc_93fb
  %296 = trunc i64 %289 to i32, !insn.addr !5227
  %297 = add i32 %296, 1, !insn.addr !5227
  %298 = icmp eq i32 %297, 0, !insn.addr !5227
  %299 = zext i32 %297 to i64, !insn.addr !5227
  %300 = icmp eq i1 %298, false, !insn.addr !5228
  store i64 %299, i64* %rax.3.reg2mem, !insn.addr !5228
  br i1 %300, label %dec_label_pc_940f, label %dec_label_pc_9449, !insn.addr !5228

dec_label_pc_9433:                                ; preds = %dec_label_pc_940f
  store i32 4, i32* %25, align 4, !insn.addr !5229
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5230
  br label %dec_label_pc_946f, !insn.addr !5230

dec_label_pc_9449:                                ; preds = %dec_label_pc_940f, %dec_label_pc_8fd2, %dec_label_pc_8f44, %dec_label_pc_8f44, %dec_label_pc_9419, %dec_label_pc_9305, %dec_label_pc_8fe3, %dec_label_pc_93f1, %dec_label_pc_93e4, %dec_label_pc_939a, %dec_label_pc_938a, %dec_label_pc_934b, %dec_label_pc_933c, %dec_label_pc_932b, %dec_label_pc_9312, %dec_label_pc_92cd, %dec_label_pc_9276, %dec_label_pc_926e, %dec_label_pc_9236, %dec_label_pc_9125, %dec_label_pc_9115, %dec_label_pc_90fd, %dec_label_pc_8f34
  %301 = load i64, i64* %9, align 8, !insn.addr !5231
  %302 = icmp eq i64 %301, 0, !insn.addr !5232
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5233
  br i1 %302, label %dec_label_pc_946f, label %dec_label_pc_9452, !insn.addr !5233

dec_label_pc_9452:                                ; preds = %dec_label_pc_9449
  %303 = add i64 %301, ptrtoint (i32** @global_var_18 to i64), !insn.addr !5234
  %304 = inttoptr i64 %303 to i64*, !insn.addr !5234
  %305 = load i64, i64* %304, align 8, !insn.addr !5234
  %306 = icmp eq i64 %305, 0, !insn.addr !5235
  store i64 %22, i64* %merge.reg2mem, !insn.addr !5236
  br i1 %306, label %dec_label_pc_946f, label %dec_label_pc_945b, !insn.addr !5236

dec_label_pc_945b:                                ; preds = %dec_label_pc_9452
  store i32 -1, i32* %25, align 4, !insn.addr !5237
  store i64 %22, i64* %merge.reg2mem
  br label %dec_label_pc_946f

dec_label_pc_946f:                                ; preds = %dec_label_pc_8f16, %dec_label_pc_9141, %dec_label_pc_9158, %dec_label_pc_91ad, %dec_label_pc_921d, %dec_label_pc_949e, %dec_label_pc_945b, %dec_label_pc_93bc, %dec_label_pc_9452, %dec_label_pc_9449, %dec_label_pc_9433, %dec_label_pc_9305, %dec_label_pc_9138, %dec_label_pc_8ff1, %dec_label_pc_8fe3, %dec_label_pc_8f92, %dec_label_pc_8f5b, %dec_label_pc_8f24
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !5238

dec_label_pc_949e:                                ; preds = %dec_label_pc_93bc, %dec_label_pc_8f08, %dec_label_pc_8efb, %dec_label_pc_8eee, %dec_label_pc_8ec0
  store i64 0, i64* %merge.reg2mem
  br label %dec_label_pc_946f

; uselistorder directives
  uselistorder i64 %289, { 1, 0 }
  uselistorder i64 %288, { 2, 0, 1 }
  uselistorder i16 %251, { 1, 0 }
  uselistorder i64 %240, { 1, 0 }
  uselistorder i64 %239, { 1, 0 }
  uselistorder i64 %234, { 1, 0 }
  uselistorder i64 %233, { 2, 0, 3, 1 }
  uselistorder i16 %231, { 0, 2, 1 }
  uselistorder i16 %210, { 1, 0 }
  uselistorder i64 %190, { 1, 2, 0 }
  uselistorder i8 %189, { 1, 0 }
  uselistorder i64 %186, { 1, 2, 0, 3 }
  uselistorder i64 %182, { 6, 2, 0, 1, 7, 3, 4, 5, 9, 8, 10 }
  uselistorder i64 %rax.211.reload, { 0, 2, 1 }
  uselistorder i64 %rax.1.reload, { 0, 3, 1, 2 }
  uselistorder i64 %132, { 1, 0 }
  uselistorder i64 %126, { 0, 2, 3, 1, 4 }
  uselistorder i64 %124, { 2, 1, 0, 3, 4 }
  uselistorder i64 %rax.0.reload, { 2, 1, 0 }
  uselistorder i32 %45, { 1, 0, 2, 3 }
  uselistorder i32* %25, { 8, 4, 5, 0, 1, 3, 2, 6, 7, 9 }
  uselistorder i64 %22, { 11, 9, 8, 7, 10, 6, 5, 4, 3, 2, 1, 0, 12 }
  uselistorder i64 %14, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i64* %9, { 1, 0, 2 }
  uselistorder i64 %7, { 17, 2, 4, 3, 5, 7, 6, 8, 9, 15, 10, 1, 11, 12, 13, 14, 16, 0, 18, 19, 20, 22, 21, 23, 24, 25 }
  uselistorder i32 %5, { 1, 0 }
  uselistorder i64* %stack_var_-248, { 2, 0, 3, 1 }
  uselistorder i64* %stack_var_-320, { 1, 0, 2 }
  uselistorder i128* %stack_var_-170, { 1, 2, 0, 3 }
  uselistorder i128 %3, { 2, 3, 0, 1 }
  uselistorder i64* %rax.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.1.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.211.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r15.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.3.reg2mem, { 2, 0, 1 }
  uselistorder i64* %merge.reg2mem, { 6, 0, 18, 16, 15, 14, 17, 13, 5, 4, 3, 2, 12, 11, 10, 9, 8, 7, 1 }
  uselistorder i128* %0, { 1, 0 }
  uselistorder i64 (i64, i64, i16, i64)* @function_7110, { 5, 4, 3, 2, 1, 0 }
  uselistorder i64 133, { 1, 0 }
  uselistorder i64 120, { 0, 1, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12 }
  uselistorder i64 160, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i64 152, { 1, 2, 3, 4, 0, 5 }
  uselistorder i64 58, { 2, 0, 1 }
  uselistorder i64 248, { 3, 4, 5, 0, 6, 8, 9, 10, 7, 2, 11, 12, 1 }
  uselistorder i64 (i64, i64, i64, i64, i64)* @.Lstream_decoder_mt_get_progress.0, { 2, 1, 0 }
  uselistorder i64 18, { 2, 8, 1, 3, 0, 4, 5, 6, 7 }
  uselistorder i64 (i64)* @.Lstream_encoder_mt_init.part.0, { 1, 0 }
  uselistorder i32 4, { 7, 8, 4, 1, 5, 3, 2, 0, 6 }
  uselistorder i64 260, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_946f, { 5, 6, 8, 9, 10, 7, 11, 4, 3, 2, 1, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder label %dec_label_pc_9449, { 4, 0, 7, 8, 9, 10, 11, 12, 13, 14, 5, 15, 16, 17, 18, 19, 20, 21, 6, 1, 2, 3, 22 }
  uselistorder label %dec_label_pc_92e0, { 1, 0 }
  uselistorder label %dec_label_pc_9236, { 1, 0 }
  uselistorder label %dec_label_pc_91c9, { 1, 0 }
}

define i64 @.Llzma_index_stream_size.1(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_94c0:
  %0 = alloca i128
  %1 = alloca i64
  %2 = alloca i16
  %3 = alloca i8
  %merge.reg2mem = alloca i64, !insn.addr !5239
  %rbp.0.reg2mem = alloca i64, !insn.addr !5239
  %rbx.5.reg2mem = alloca i64, !insn.addr !5239
  %rax.8.reg2mem = alloca i64, !insn.addr !5239
  %storemerge4.reg2mem = alloca i64, !insn.addr !5239
  %r14.1.reg2mem = alloca i64, !insn.addr !5239
  %rdi.0.reg2mem = alloca i32, !insn.addr !5239
  %rbx.4.reg2mem = alloca i64, !insn.addr !5239
  %storemerge.reg2mem = alloca i64, !insn.addr !5239
  %rdx.5.reg2mem = alloca i64, !insn.addr !5239
  %rax.7.reg2mem = alloca i64, !insn.addr !5239
  %rdx.4.shrunk.reg2mem = alloca i8, !insn.addr !5239
  %rax.6.reg2mem = alloca i64, !insn.addr !5239
  %rax.5.reg2mem = alloca i64, !insn.addr !5239
  %rsi.3.reg2mem = alloca i64, !insn.addr !5239
  %rdx.2.reg2mem = alloca i64, !insn.addr !5239
  %rdx.1.reg2mem = alloca i64, !insn.addr !5239
  %rdx.0.reg2mem = alloca i64, !insn.addr !5239
  %r12.1.reg2mem = alloca i64, !insn.addr !5239
  %rbx.3.reg2mem = alloca i64, !insn.addr !5239
  %.reg2mem = alloca i64, !insn.addr !5239
  %rbx.2.reg2mem = alloca i64, !insn.addr !5239
  %rax.4.reg2mem = alloca i64, !insn.addr !5239
  %rax.3.reg2mem = alloca i64, !insn.addr !5239
  %r11.0.reg2mem = alloca i64, !insn.addr !5239
  %r15.0.reg2mem = alloca i64, !insn.addr !5239
  %r14.0.reg2mem = alloca i64, !insn.addr !5239
  %r12.0.reg2mem = alloca i64, !insn.addr !5239
  %rbx.1.reg2mem = alloca i64, !insn.addr !5239
  %rax.2.reg2mem = alloca i64, !insn.addr !5239
  %storemerge6.reg2mem = alloca i64, !insn.addr !5239
  %storemerge7.reg2mem = alloca i64, !insn.addr !5239
  %rbx.0.reg2mem = alloca i64, !insn.addr !5239
  %rax.1.reg2mem = alloca i64, !insn.addr !5239
  %4 = load i128, i128* %0
  %stack_var_-1432 = alloca i64, align 8
  %stack_var_-1440 = alloca i64, align 8
  %stack_var_-1356 = alloca i64, align 8
  %stack_var_-596 = alloca i64, align 8
  %5 = load i8, i8* %3
  %6 = load i16, i16* %2
  %stack_var_-601 = alloca i32, align 4
  %stack_var_-1408 = alloca i64, align 8
  %stack_var_-1344 = alloca i64, align 8
  %stack_var_-1424 = alloca i128, align 8
  %7 = load i128, i128* %0
  %stack_var_-715 = alloca i64, align 8
  %stack_var_-131 = alloca i128, align 8
  %stack_var_-115 = alloca i64, align 8
  %8 = load i64, i64* %1
  %9 = load i128, i128* %0
  %10 = load i128, i128* %0
  %11 = load i64, i64* %1
  %stack_var_-752 = alloca i64, align 8
  %stack_var_-1528 = alloca i64, align 8
  %12 = ptrtoint i64* %stack_var_-1528 to i64, !insn.addr !5240
  %13 = bitcast i64* %stack_var_-752 to i8*, !insn.addr !5241
  call void @__asm_rep_stosd_memset(i8* nonnull %13, i32 0, i64 174), !insn.addr !5241
  %14 = icmp eq i64 %arg2, 0, !insn.addr !5242
  br i1 %14, label %dec_label_pc_a22f, label %dec_label_pc_94f9, !insn.addr !5243

dec_label_pc_94f9:                                ; preds = %dec_label_pc_94c0
  %15 = add i64 %arg2, ptrtoint (i32** @global_var_18 to i64), !insn.addr !5244
  %16 = inttoptr i64 %15 to i32*, !insn.addr !5244
  %17 = load i32, i32* %16, align 4, !insn.addr !5244
  %18 = icmp eq i32 %17, 0, !insn.addr !5244
  %19 = icmp eq i1 %18, false, !insn.addr !5245
  %20 = icmp eq i64 %arg1, 0, !insn.addr !5246
  %or.cond = or i1 %20, %19
  br i1 %or.cond, label %dec_label_pc_a227, label %dec_label_pc_9512, !insn.addr !5245

dec_label_pc_9512:                                ; preds = %dec_label_pc_94f9
  %21 = add i64 %arg2, 8, !insn.addr !5247
  %22 = inttoptr i64 %21 to i64*, !insn.addr !5247
  %23 = load i64, i64* %22, align 8, !insn.addr !5247
  %24 = icmp eq i64 %23, 0, !insn.addr !5248
  br i1 %24, label %dec_label_pc_a227, label %dec_label_pc_951f, !insn.addr !5249

dec_label_pc_951f:                                ; preds = %dec_label_pc_9512
  %25 = add i64 %23, 96, !insn.addr !5250
  %26 = inttoptr i64 %25 to i64*, !insn.addr !5250
  %27 = load i64, i64* %26, align 8, !insn.addr !5250
  %28 = icmp eq i64 %27, 0, !insn.addr !5251
  br i1 %28, label %dec_label_pc_a227, label %dec_label_pc_952c, !insn.addr !5252

dec_label_pc_952c:                                ; preds = %dec_label_pc_951f
  %29 = add i64 %23, 256, !insn.addr !5253
  %30 = inttoptr i64 %29 to i64*, !insn.addr !5253
  %31 = load i64, i64* %30, align 8, !insn.addr !5253
  %32 = icmp eq i64 %31, 0, !insn.addr !5253
  br i1 %32, label %dec_label_pc_a227, label %dec_label_pc_953a, !insn.addr !5254

dec_label_pc_953a:                                ; preds = %dec_label_pc_952c
  %33 = icmp eq i64* %arg3, null, !insn.addr !5255
  %34 = icmp eq i1 %33, false, !insn.addr !5256
  br i1 %34, label %dec_label_pc_954b, label %dec_label_pc_953f, !insn.addr !5256

dec_label_pc_953f:                                ; preds = %dec_label_pc_953a
  store i32 1, i32* %16, align 4, !insn.addr !5257
  store i64 0, i64* %merge.reg2mem, !insn.addr !5258
  br label %dec_label_pc_a204, !insn.addr !5258

dec_label_pc_954b:                                ; preds = %dec_label_pc_953a
  %35 = bitcast i64* %arg3 to i32*, !insn.addr !5259
  store i32 1, i32* %35, align 4, !insn.addr !5259
  %36 = load i64, i64* %stack_var_-752, align 8, !insn.addr !5260
  %37 = icmp eq i64 %36, 0, !insn.addr !5261
  %38 = icmp eq i64 %11, 0, !insn.addr !5262
  %or.cond10 = or i1 %38, %37
  br i1 %or.cond10, label %dec_label_pc_a132, label %dec_label_pc_9590, !insn.addr !5263

dec_label_pc_9590:                                ; preds = %dec_label_pc_954b
  %39 = load i64, i64* %22, align 8, !insn.addr !5264
  %40 = icmp eq i64 %39, 0, !insn.addr !5265
  br i1 %40, label %dec_label_pc_a132, label %dec_label_pc_959d, !insn.addr !5266

dec_label_pc_959d:                                ; preds = %dec_label_pc_9590
  %41 = add i64 %39, 104, !insn.addr !5267
  %42 = inttoptr i64 %41 to i64*, !insn.addr !5267
  %43 = load i64, i64* %42, align 8, !insn.addr !5267
  %44 = icmp ne i64 %43, 0, !insn.addr !5268
  %45 = trunc i64 %43 to i32, !insn.addr !5269
  %46 = icmp ult i32 %45, 16385
  %or.cond12 = icmp eq i1 %44, %46
  br i1 %or.cond12, label %dec_label_pc_95b7, label %dec_label_pc_a132, !insn.addr !5270

dec_label_pc_95b7:                                ; preds = %dec_label_pc_959d
  %47 = add i64 %43, 7, !insn.addr !5271
  %48 = udiv i64 %47, 8, !insn.addr !5272
  %49 = urem i64 %48, 536870912, !insn.addr !5272
  %50 = trunc i64 %49 to i32
  %51 = add nsw i32 %50, -20, !insn.addr !5273
  %52 = icmp ugt i32 %51, 516
  %53 = trunc i64 %39 to i32, !insn.addr !5274
  %54 = icmp slt i32 %53, 0, !insn.addr !5274
  %or.cond27 = or i1 %54, %52
  br i1 %or.cond27, label %dec_label_pc_a132, label %dec_label_pc_95ed, !insn.addr !5275

dec_label_pc_95ed:                                ; preds = %dec_label_pc_95b7
  %sext = mul i64 %39, 4294967296
  %55 = ashr exact i64 %sext, 32, !insn.addr !5276
  %56 = icmp ult i64 %49, %55, !insn.addr !5277
  br i1 %56, label %dec_label_pc_a132, label %dec_label_pc_95ff, !insn.addr !5278

dec_label_pc_95ff:                                ; preds = %dec_label_pc_95ed
  %57 = icmp ult i64 %55, 17
  br i1 %57, label %dec_label_pc_a13a, label %dec_label_pc_9609, !insn.addr !5279

dec_label_pc_9609:                                ; preds = %dec_label_pc_95ff
  %58 = trunc i128 %10 to i32, !insn.addr !5280
  %59 = icmp eq i32 %58, 0, !insn.addr !5280
  %60 = trunc i128 %9 to i32, !insn.addr !5281
  %61 = icmp eq i32 %60, 0, !insn.addr !5281
  %or.cond14 = or i1 %61, %59
  br i1 %or.cond14, label %dec_label_pc_a13a, label %dec_label_pc_9627, !insn.addr !5282

dec_label_pc_9627:                                ; preds = %dec_label_pc_9609
  %62 = trunc i128 %10 to i64, !insn.addr !5283
  %63 = and i64 %62, 4294967295, !insn.addr !5283
  %64 = trunc i128 %9 to i64, !insn.addr !5284
  %65 = and i64 %64, 4294967295, !insn.addr !5284
  %66 = mul nuw i64 %63, %65, !insn.addr !5285
  %67 = add i64 %66, %8, !insn.addr !5286
  %68 = icmp ult i64 %67, 4
  br i1 %68, label %dec_label_pc_963d, label %dec_label_pc_a13a, !insn.addr !5287

dec_label_pc_963d:                                ; preds = %dec_label_pc_9627
  %69 = add i64 %arg2, 16, !insn.addr !5288
  %70 = inttoptr i64 %69 to i64*, !insn.addr !5288
  %71 = load i64, i64* %70, align 8, !insn.addr !5288
  %72 = icmp eq i64 %71, 0, !insn.addr !5289
  br i1 %72, label %dec_label_pc_a132, label %dec_label_pc_964a, !insn.addr !5290

dec_label_pc_964a:                                ; preds = %dec_label_pc_963d
  %73 = add i64 %71, 16, !insn.addr !5291
  %74 = inttoptr i64 %73 to i64*, !insn.addr !5291
  %75 = load i64, i64* %74, align 8, !insn.addr !5291
  %76 = icmp eq i64 %75, 0, !insn.addr !5291
  br i1 %76, label %dec_label_pc_a132, label %dec_label_pc_9655, !insn.addr !5292

dec_label_pc_9655:                                ; preds = %dec_label_pc_964a
  %77 = add i64 %71, ptrtoint (i32** @global_var_18 to i64), !insn.addr !5293
  %78 = inttoptr i64 %77 to i64*, !insn.addr !5293
  %79 = load i64, i64* %78, align 8, !insn.addr !5293
  %80 = icmp eq i64 %79, 0, !insn.addr !5293
  br i1 %80, label %dec_label_pc_a132, label %dec_label_pc_9660, !insn.addr !5294

dec_label_pc_9660:                                ; preds = %dec_label_pc_9655
  %81 = add i64 %arg2, 48, !insn.addr !5295
  %82 = inttoptr i64 %81 to i64*, !insn.addr !5295
  %83 = load i64, i64* %82, align 8, !insn.addr !5295
  %84 = icmp eq i64 %83, 0, !insn.addr !5295
  br i1 %84, label %dec_label_pc_a132, label %dec_label_pc_966b, !insn.addr !5296

dec_label_pc_966b:                                ; preds = %dec_label_pc_9660
  %85 = add i64 %arg2, 352, !insn.addr !5297
  %86 = inttoptr i64 %85 to i32*, !insn.addr !5297
  %87 = load i32, i32* %86, align 4, !insn.addr !5297
  %88 = icmp eq i32 %87, 456, !insn.addr !5297
  %89 = icmp eq i1 %88, false, !insn.addr !5298
  br i1 %89, label %dec_label_pc_a132, label %dec_label_pc_967c, !insn.addr !5298

dec_label_pc_967c:                                ; preds = %dec_label_pc_966b
  %90 = call i128 @__asm_movups.4(i128 0), !insn.addr !5299
  %91 = ptrtoint i64* %stack_var_-115 to i64, !insn.addr !5300
  %92 = load i128, i128* %stack_var_-131, align 8, !insn.addr !5301
  call void @__asm_movups(i128 %92, i128 %90), !insn.addr !5301
  %93 = call i64 @.Lparse_lzma12.0(i64 %91, i64 %arg2), !insn.addr !5302
  %94 = trunc i64 %93 to i32, !insn.addr !5303
  %95 = icmp eq i32 %94, 0, !insn.addr !5303
  br i1 %95, label %dec_label_pc_a132, label %dec_label_pc_96a7, !insn.addr !5304

dec_label_pc_96a7:                                ; preds = %dec_label_pc_967c
  %96 = load i64, i64* %22, align 8, !insn.addr !5305
  %97 = add nuw nsw i64 %49, 4294967280, !insn.addr !5306
  %98 = and i64 %97, 4294967295, !insn.addr !5306
  %99 = ptrtoint i64* %stack_var_-715 to i64, !insn.addr !5307
  %100 = bitcast i128* %stack_var_-131 to i64*, !insn.addr !5308
  %101 = call i64 @function_71b0(i64* nonnull %stack_var_-715, i64 %98, i64 %91, i64* nonnull %100, i64 %99, i64 %96), !insn.addr !5308
  %102 = trunc i64 %101 to i32, !insn.addr !5309
  %103 = icmp eq i32 %102, 0, !insn.addr !5309
  br i1 %103, label %dec_label_pc_a132, label %dec_label_pc_96d1, !insn.addr !5310

dec_label_pc_96d1:                                ; preds = %dec_label_pc_96a7
  %104 = call i128 @__asm_xorps(i128 %4, i128 %4), !insn.addr !5311
  call void @__asm_movups(i128 %7, i128 %104), !insn.addr !5312
  %105 = bitcast i64* %stack_var_-115 to i8*, !insn.addr !5313
  call void @__asm_rep_stosb_memset(i8* nonnull %105, i8 0, i64 57), !insn.addr !5313
  %106 = load i128, i128* %stack_var_-1424, align 8, !insn.addr !5314
  call void @__asm_movups(i128 %106, i128 %104), !insn.addr !5314
  %107 = bitcast i64* %stack_var_-1344 to i8*, !insn.addr !5315
  call void @__asm_rep_stosd_memset(i8* nonnull %107, i32 0, i64 147), !insn.addr !5315
  %108 = add i64 %arg2, 40, !insn.addr !5316
  %109 = inttoptr i64 %108 to i64*, !insn.addr !5316
  %110 = load i64, i64* %109, align 8, !insn.addr !5316
  %111 = bitcast i64* %stack_var_-1408 to i8*, !insn.addr !5317
  call void @__asm_rep_stosb_memset(i8* nonnull %111, i8 0, i64 41), !insn.addr !5317
  %112 = icmp eq i64 %110, 0, !insn.addr !5318
  br i1 %112, label %dec_label_pc_a132, label %dec_label_pc_971b, !insn.addr !5319

dec_label_pc_971b:                                ; preds = %dec_label_pc_96d1
  %113 = add i64 %110, 8, !insn.addr !5320
  %114 = inttoptr i64 %113 to i64*, !insn.addr !5320
  %115 = load i64, i64* %114, align 8, !insn.addr !5320
  %116 = icmp eq i64 %115, 0, !insn.addr !5320
  br i1 %116, label %dec_label_pc_a132, label %dec_label_pc_9726, !insn.addr !5321

dec_label_pc_9726:                                ; preds = %dec_label_pc_971b
  %117 = load i64, i64* %22, align 8, !insn.addr !5322
  %118 = icmp eq i64 %117, 0, !insn.addr !5322
  %119 = add nsw i64 %49, -16, !insn.addr !5323
  %120 = icmp ult i64 %119, 114
  %or.cond16 = or i1 %120, %118
  %121 = add nsw i64 %49, -130, !insn.addr !5324
  %122 = icmp ult i64 %121, 5
  %or.cond18 = or i1 %122, %or.cond16
  br i1 %or.cond18, label %dec_label_pc_a132, label %dec_label_pc_9760, !insn.addr !5325

dec_label_pc_9760:                                ; preds = %dec_label_pc_9726
  %123 = add nsw i64 %49, -135, !insn.addr !5326
  store i64 %123, i64* %stack_var_-1528, align 8, !insn.addr !5327
  %124 = icmp eq i64 %67, 2, !insn.addr !5328
  %125 = icmp eq i1 %124, false, !insn.addr !5329
  br i1 %125, label %dec_label_pc_9800, label %dec_label_pc_9791, !insn.addr !5329

dec_label_pc_9791:                                ; preds = %dec_label_pc_9760
  %126 = load i32, i32* %stack_var_-601, align 4, !insn.addr !5330
  %127 = trunc i32 %126 to i8, !insn.addr !5331
  %128 = icmp slt i8 %127, 0, !insn.addr !5331
  br i1 %128, label %dec_label_pc_97b3, label %dec_label_pc_97a3, !insn.addr !5332

dec_label_pc_97a3:                                ; preds = %dec_label_pc_9791
  %129 = zext i16 %6 to i64, !insn.addr !5333
  %130 = urem i8 %5, 2, !insn.addr !5334
  %131 = icmp eq i8 %130, 0, !insn.addr !5334
  %132 = add nuw nsw i64 %129, 8
  %spec.select = select i1 %131, i64 %129, i64 %132
  store i64 %spec.select, i64* %rax.1.reg2mem, !insn.addr !5335
  store i64 %spec.select, i64* %rbx.0.reg2mem, !insn.addr !5335
  store i64 0, i64* %storemerge7.reg2mem, !insn.addr !5335
  store i64 135, i64* %storemerge6.reg2mem, !insn.addr !5335
  br label %dec_label_pc_97dc, !insn.addr !5335

dec_label_pc_97b3:                                ; preds = %dec_label_pc_9791
  %133 = icmp eq i16 %6, 0, !insn.addr !5336
  %134 = icmp eq i1 %133, false, !insn.addr !5337
  br i1 %134, label %dec_label_pc_a132, label %dec_label_pc_97bc, !insn.addr !5337

dec_label_pc_97bc:                                ; preds = %dec_label_pc_97b3
  %135 = ptrtoint i64* %stack_var_-596 to i64, !insn.addr !5338
  store i64 57, i64* %rax.1.reg2mem, !insn.addr !5339
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !5339
  store i64 %135, i64* %storemerge7.reg2mem, !insn.addr !5339
  store i64 0, i64* %storemerge6.reg2mem, !insn.addr !5339
  br label %dec_label_pc_97dc, !insn.addr !5339

dec_label_pc_97dc:                                ; preds = %dec_label_pc_97a3, %dec_label_pc_97bc
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %136 = icmp ult i64 %123, %rax.1.reload, !insn.addr !5340
  br i1 %136, label %dec_label_pc_a132, label %dec_label_pc_97e6, !insn.addr !5341

dec_label_pc_97e6:                                ; preds = %dec_label_pc_97dc
  %storemerge6.reload = load i64, i64* %storemerge6.reg2mem
  %storemerge7.reload = load i64, i64* %storemerge7.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %137 = sub nsw i64 %123, %rax.1.reload, !insn.addr !5342
  store i64 %137, i64* %stack_var_-1528, align 8, !insn.addr !5342
  %138 = add nsw i64 %rax.1.reload, 135, !insn.addr !5343
  %139 = add nsw i64 %rax.1.reload, 4, !insn.addr !5344
  store i64 %139, i64* %rax.2.reg2mem, !insn.addr !5345
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !5345
  store i64 %138, i64* %r12.0.reg2mem, !insn.addr !5345
  store i64 %storemerge7.reload, i64* %r14.0.reg2mem, !insn.addr !5345
  store i64 %storemerge6.reload, i64* %r15.0.reg2mem, !insn.addr !5345
  br label %dec_label_pc_985a, !insn.addr !5345

dec_label_pc_9800:                                ; preds = %dec_label_pc_9760
  %140 = trunc i64 %67 to i32, !insn.addr !5346
  %141 = icmp eq i32 %140, 3, !insn.addr !5346
  %142 = icmp eq i1 %141, false, !insn.addr !5347
  store i64 4, i64* %rax.2.reg2mem, !insn.addr !5347
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !5347
  store i64 135, i64* %r12.0.reg2mem, !insn.addr !5347
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !5347
  store i64 0, i64* %r15.0.reg2mem, !insn.addr !5347
  br i1 %142, label %dec_label_pc_985a, label %dec_label_pc_9805, !insn.addr !5347

dec_label_pc_9805:                                ; preds = %dec_label_pc_9800
  %143 = and i8 %5, 64, !insn.addr !5348
  %144 = icmp eq i8 %143, 0, !insn.addr !5348
  %145 = icmp eq i1 %144, false, !insn.addr !5349
  store i64 4, i64* %rax.2.reg2mem, !insn.addr !5349
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !5349
  store i64 135, i64* %r12.0.reg2mem, !insn.addr !5349
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !5349
  store i64 0, i64* %r15.0.reg2mem, !insn.addr !5349
  br i1 %145, label %dec_label_pc_985a, label %dec_label_pc_980f, !insn.addr !5349

dec_label_pc_980f:                                ; preds = %dec_label_pc_9805
  %146 = icmp ult i64 %123, 48
  store i64 52, i64* %rax.2.reg2mem, !insn.addr !5350
  store i64 48, i64* %rbx.1.reg2mem, !insn.addr !5350
  store i64 135, i64* %r12.0.reg2mem, !insn.addr !5350
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !5350
  store i64 135, i64* %r15.0.reg2mem, !insn.addr !5350
  br i1 %146, label %dec_label_pc_a132, label %dec_label_pc_985a, !insn.addr !5350

dec_label_pc_985a:                                ; preds = %dec_label_pc_9800, %dec_label_pc_9805, %dec_label_pc_980f, %dec_label_pc_97e6
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %147 = add nsw i64 %rax.2.reload, 1, !insn.addr !5351
  %148 = and i64 %147, 4294967295, !insn.addr !5351
  %149 = bitcast i32* %stack_var_-601 to i8*, !insn.addr !5352
  %150 = bitcast i64* %stack_var_-1356 to i8*, !insn.addr !5352
  call void @__asm_rep_movsb_memcpy(i8* nonnull %150, i8* nonnull %149, i64 %148), !insn.addr !5352
  store i64 0, i64* %stack_var_-1440, align 8, !insn.addr !5353
  %151 = inttoptr i64 %110 to i64*, !insn.addr !5354
  %152 = load i64, i64* %151, align 8, !insn.addr !5354
  store i64 0, i64* %stack_var_-1432, align 8, !insn.addr !5355
  %153 = icmp eq i64 %152, 0, !insn.addr !5356
  br i1 %153, label %dec_label_pc_a132, label %dec_label_pc_9891, !insn.addr !5357

dec_label_pc_9891:                                ; preds = %dec_label_pc_985a
  %154 = load i64, i64* %114, align 8, !insn.addr !5358
  %155 = icmp eq i64 %154, 0, !insn.addr !5359
  %156 = icmp eq i64 %152, %154, !insn.addr !5360
  %or.cond19 = or i1 %155, %156
  br i1 %or.cond19, label %dec_label_pc_a132, label %dec_label_pc_98a7, !insn.addr !5361

dec_label_pc_98a7:                                ; preds = %dec_label_pc_9891
  %157 = add i64 %110, 24, !insn.addr !5362
  %158 = inttoptr i64 %157 to i32*, !insn.addr !5362
  %159 = load i32, i32* %158, align 4, !insn.addr !5362
  %160 = icmp ult i32 %159, 2
  br i1 %160, label %dec_label_pc_98b1, label %dec_label_pc_a132, !insn.addr !5363

dec_label_pc_98b1:                                ; preds = %dec_label_pc_98a7
  %161 = load i64, i64* %70, align 8, !insn.addr !5364
  %162 = call i64 @function_74d0(i64 %152, i64* nonnull %stack_var_-1440, i64 %161, i64 0), !insn.addr !5365
  %163 = trunc i64 %162 to i32, !insn.addr !5366
  %164 = icmp eq i32 %163, 0, !insn.addr !5366
  br i1 %164, label %dec_label_pc_a132, label %dec_label_pc_98c7, !insn.addr !5367

dec_label_pc_98c7:                                ; preds = %dec_label_pc_98b1
  %165 = load i64, i64* %109, align 8, !insn.addr !5368
  %166 = load i64, i64* %70, align 8, !insn.addr !5369
  %167 = add i64 %165, 8, !insn.addr !5370
  %168 = inttoptr i64 %167 to i64*, !insn.addr !5370
  %169 = load i64, i64* %168, align 8, !insn.addr !5370
  %170 = call i64 @function_74d0(i64 %169, i64* nonnull %stack_var_-1432, i64 %166, i64 0), !insn.addr !5371
  %171 = trunc i64 %170 to i32, !insn.addr !5372
  %172 = icmp eq i32 %171, 0, !insn.addr !5372
  br i1 %172, label %dec_label_pc_a132, label %dec_label_pc_98e5, !insn.addr !5373

dec_label_pc_98e5:                                ; preds = %dec_label_pc_98c7
  %173 = load i64, i64* %stack_var_-1440, align 8, !insn.addr !5374
  %174 = load i64, i64* %stack_var_-1432, align 8, !insn.addr !5375
  %175 = icmp eq i64 %173, %174, !insn.addr !5375
  %176 = icmp eq i1 %175, false, !insn.addr !5376
  br i1 %176, label %dec_label_pc_a132, label %dec_label_pc_98fa, !insn.addr !5376

dec_label_pc_98fa:                                ; preds = %dec_label_pc_98e5
  %177 = ptrtoint i128* %stack_var_-1424 to i64, !insn.addr !5377
  %178 = call i64 @.Lparse_lzma12.0(i64 %177, i64 %arg2), !insn.addr !5378
  %179 = trunc i64 %178 to i32, !insn.addr !5379
  %180 = icmp eq i32 %179, 0, !insn.addr !5379
  br i1 %180, label %dec_label_pc_a132, label %dec_label_pc_9923.preheader, !insn.addr !5380

dec_label_pc_9923.preheader:                      ; preds = %dec_label_pc_98fa
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %181 = add i64 %12, 56, !insn.addr !5381
  %182 = inttoptr i64 %181 to i32*, !insn.addr !5381
  %183 = add i64 %12, 68, !insn.addr !5382
  %184 = inttoptr i64 %183 to i32*
  %185 = add i64 %12, ptrtoint (i32** @global_var_18 to i64)
  %186 = inttoptr i64 %185 to i64*
  %187 = add i64 %12, ptrtoint (i32** @global_var_48 to i64)
  %188 = inttoptr i64 %187 to i64*
  %189 = add i64 %12, 168
  %190 = add i64 %12, -8
  %191 = inttoptr i64 %190 to i64*
  %192 = add i64 %12, -16
  %193 = inttoptr i64 %192 to i64*
  %194 = add i64 %12, 48
  %195 = inttoptr i64 %194 to i64*
  %196 = add i64 %12, 813
  %197 = inttoptr i64 %189 to i128*
  %198 = add i64 %12, 72
  %199 = inttoptr i64 %198 to i64*
  store i64 0, i64* %r11.0.reg2mem
  br label %dec_label_pc_9923

dec_label_pc_9923:                                ; preds = %dec_label_pc_9923.preheader, %dec_label_pc_9935
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %200 = load i32, i32* %182, align 8, !insn.addr !5381
  %201 = trunc i64 %r11.0.reload to i32, !insn.addr !5382
  store i32 %201, i32* %184, align 4, !insn.addr !5382
  %202 = icmp ugt i32 %200, %201, !insn.addr !5383
  %203 = icmp eq i1 %202, false, !insn.addr !5384
  br i1 %203, label %dec_label_pc_a132, label %dec_label_pc_9935, !insn.addr !5384

dec_label_pc_9935:                                ; preds = %dec_label_pc_9923
  %204 = load i64, i64* %186, align 8, !insn.addr !5385
  store i64 %r11.0.reload, i64* %188, align 8, !insn.addr !5386
  %205 = add i64 %204, 4, !insn.addr !5387
  %206 = load i64, i64* %109, align 8, !insn.addr !5388
  %207 = add i64 %206, 8, !insn.addr !5389
  %208 = inttoptr i64 %207 to i64*, !insn.addr !5389
  %209 = load i64, i64* %208, align 8, !insn.addr !5389
  %210 = mul i64 %r11.0.reload, 8, !insn.addr !5390
  %211 = add i64 %209, %210, !insn.addr !5390
  %212 = inttoptr i64 %211 to i64*, !insn.addr !5390
  %213 = load i64, i64* %212, align 8, !insn.addr !5390
  store i64 %209, i64* %191, align 8, !insn.addr !5391
  store i64 %arg2, i64* %193, align 8, !insn.addr !5392
  %214 = load i64, i64* %195, align 8, !insn.addr !5393
  %215 = inttoptr i64 %214 to i128*, !insn.addr !5394
  %216 = call i64 @function_7650(i64 %213, i128* %197, i64 %205, i64 604, i64 %196, i128* %215, i64 ptrtoint (i32* @0 to i64)), !insn.addr !5394
  %217 = load i64, i64* %199, align 8, !insn.addr !5395
  %218 = add i64 %217, 1, !insn.addr !5396
  %219 = trunc i64 %216 to i32, !insn.addr !5397
  %220 = icmp eq i32 %219, 0, !insn.addr !5397
  store i64 %218, i64* %r11.0.reg2mem, !insn.addr !5398
  br i1 %220, label %dec_label_pc_9923, label %dec_label_pc_997f, !insn.addr !5398

dec_label_pc_997f:                                ; preds = %dec_label_pc_9935
  %221 = load i32, i32* %184, align 4, !insn.addr !5399
  %222 = add i64 %arg2, 256, !insn.addr !5400
  %223 = inttoptr i64 %222 to i32*, !insn.addr !5400
  store i32 %221, i32* %223, align 4, !insn.addr !5400
  br i1 %125, label %dec_label_pc_9aae, label %dec_label_pc_9994, !insn.addr !5401

dec_label_pc_9994:                                ; preds = %dec_label_pc_997f
  %224 = add i64 %12, 792, !insn.addr !5402
  %225 = inttoptr i64 %224 to i8*, !insn.addr !5402
  %226 = load i8, i8* %225, align 8, !insn.addr !5402
  %227 = icmp slt i8 %226, 0, !insn.addr !5402
  %228 = icmp eq i1 %227, false, !insn.addr !5403
  br i1 %228, label %dec_label_pc_9aae, label %dec_label_pc_99a2, !insn.addr !5403

dec_label_pc_99a2:                                ; preds = %dec_label_pc_9994
  %229 = icmp eq i64 %r14.0.reload, 0, !insn.addr !5404
  br i1 %229, label %dec_label_pc_a132, label %dec_label_pc_99ab, !insn.addr !5405

dec_label_pc_99ab:                                ; preds = %dec_label_pc_99a2
  %230 = add i64 %12, 793, !insn.addr !5406
  %231 = inttoptr i64 %230 to i8*, !insn.addr !5406
  %232 = load i8, i8* %231, align 1, !insn.addr !5406
  %233 = urem i8 %232, 2, !insn.addr !5406
  %234 = icmp eq i8 %233, 0, !insn.addr !5406
  %.pre = load i64, i64* %stack_var_-1528, align 8
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !5407
  br i1 %234, label %dec_label_pc_99c8, label %dec_label_pc_99b5, !insn.addr !5407

dec_label_pc_99b5:                                ; preds = %dec_label_pc_99ab
  %235 = icmp ult i64 %.pre, 9
  store i64 8, i64* %rax.3.reg2mem, !insn.addr !5408
  br i1 %235, label %dec_label_pc_a132, label %dec_label_pc_99c8, !insn.addr !5408

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99ab, %dec_label_pc_99b5
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %236 = or i64 %rax.3.reload, 2, !insn.addr !5409
  %237 = icmp ult i64 %.pre, %236, !insn.addr !5410
  br i1 %237, label %dec_label_pc_a132, label %dec_label_pc_99d6, !insn.addr !5411

dec_label_pc_99d6:                                ; preds = %dec_label_pc_99c8
  %238 = or i64 %rax.3.reload, 1472, !insn.addr !5412
  %239 = add i64 %r12.0.reload, %12, !insn.addr !5413
  %240 = add i64 %239, -675, !insn.addr !5414
  %241 = add i64 %240, %238, !insn.addr !5414
  %242 = inttoptr i64 %241 to i16*, !insn.addr !5414
  %243 = load i16, i16* %242, align 2, !insn.addr !5414
  %244 = zext i16 %243 to i64, !insn.addr !5414
  %245 = add nuw nsw i64 %236, %244, !insn.addr !5415
  %246 = icmp ugt i64 %.pre, %245, !insn.addr !5416
  %247 = icmp eq i1 %246, false, !insn.addr !5417
  %248 = sub i64 %.pre, %245, !insn.addr !5418
  %249 = icmp ult i64 %248, 114
  %or.cond21 = or i1 %247, %249
  br i1 %or.cond21, label %dec_label_pc_a132, label %dec_label_pc_9a05, !insn.addr !5417

dec_label_pc_9a05:                                ; preds = %dec_label_pc_99d6
  %250 = add i64 %arg2, 224, !insn.addr !5419
  %251 = inttoptr i64 %250 to i64*, !insn.addr !5419
  %252 = load i64, i64* %251, align 8, !insn.addr !5419
  %253 = add i64 %arg2, 232, !insn.addr !5420
  %254 = inttoptr i64 %253 to i64*, !insn.addr !5420
  %255 = load i64, i64* %254, align 8, !insn.addr !5420
  %256 = icmp ult i64 %252, %255, !insn.addr !5421
  br i1 %256, label %dec_label_pc_a132, label %dec_label_pc_9a1c, !insn.addr !5422

dec_label_pc_9a1c:                                ; preds = %dec_label_pc_9a05
  %257 = sub i64 %252, %255, !insn.addr !5423
  %258 = icmp ult i64 %257, 57
  %259 = add i64 %257, -57, !insn.addr !5424
  %260 = icmp ult i64 %259, %245, !insn.addr !5425
  %or.cond23 = or i1 %258, %260
  br i1 %or.cond23, label %dec_label_pc_a132, label %dec_label_pc_9a36, !insn.addr !5426

dec_label_pc_9a36:                                ; preds = %dec_label_pc_9a1c
  %261 = add i64 %12, 797, !insn.addr !5427
  %262 = add i64 %arg2, 240, !insn.addr !5428
  %263 = inttoptr i64 %262 to i64*, !insn.addr !5428
  %264 = load i64, i64* %263, align 8, !insn.addr !5428
  %265 = add i64 %261, %r12.0.reload
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !5429
  br label %dec_label_pc_9a4b, !insn.addr !5429

dec_label_pc_9a4b:                                ; preds = %dec_label_pc_9a4b, %dec_label_pc_9a36
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %266 = add i64 %rax.4.reload, %265, !insn.addr !5430
  %267 = inttoptr i64 %266 to i8*, !insn.addr !5430
  %268 = load i8, i8* %267, align 1, !insn.addr !5430
  %269 = add i64 %rax.4.reload, %264, !insn.addr !5431
  %270 = inttoptr i64 %269 to i8*, !insn.addr !5431
  store i8 %268, i8* %270, align 1, !insn.addr !5431
  %271 = add i64 %rax.4.reload, 1, !insn.addr !5432
  %272 = icmp eq i64 %245, %271, !insn.addr !5433
  %273 = icmp eq i1 %272, false, !insn.addr !5434
  store i64 %271, i64* %rax.4.reg2mem, !insn.addr !5434
  br i1 %273, label %dec_label_pc_9a4b, label %dec_label_pc_9a59, !insn.addr !5434

dec_label_pc_9a59:                                ; preds = %dec_label_pc_9a4b
  %274 = load i64, i64* %109, align 8, !insn.addr !5435
  %275 = load i64, i64* %254, align 8, !insn.addr !5436
  %276 = load i32, i32* %223, align 4, !insn.addr !5437
  %277 = zext i32 %276 to i64, !insn.addr !5437
  %278 = load i64, i64* %251, align 8, !insn.addr !5438
  %279 = add i64 %245, %265, !insn.addr !5439
  %280 = add i64 %274, 8, !insn.addr !5440
  %281 = inttoptr i64 %280 to i64*, !insn.addr !5440
  %282 = load i64, i64* %281, align 8, !insn.addr !5440
  %283 = add i64 %275, %245, !insn.addr !5441
  %284 = load i64, i64* %263, align 8, !insn.addr !5442
  store i64 %283, i64* %254, align 8, !insn.addr !5443
  %285 = mul i64 %277, 8, !insn.addr !5444
  %286 = add i64 %282, %285, !insn.addr !5444
  %287 = inttoptr i64 %286 to i64*, !insn.addr !5444
  %288 = load i64, i64* %287, align 8, !insn.addr !5444
  store i64 %218, i64* %191, align 8, !insn.addr !5445
  store i64 %arg2, i64* %193, align 8, !insn.addr !5446
  %289 = inttoptr i64 %284 to i128*, !insn.addr !5447
  %290 = inttoptr i64 %r14.0.reload to i128*, !insn.addr !5447
  %291 = call i64 @function_7650(i64 %288, i128* %289, i64 %283, i64 %278, i64 %279, i128* %290, i64 ptrtoint (i32* @0 to i64)), !insn.addr !5447
  %292 = trunc i64 %291 to i32, !insn.addr !5448
  %293 = icmp eq i32 %292, 0, !insn.addr !5448
  %294 = icmp eq i1 %293, false, !insn.addr !5449
  store i64 %245, i64* %rbx.2.reg2mem, !insn.addr !5449
  br i1 %294, label %dec_label_pc_9ab7, label %dec_label_pc_a132, !insn.addr !5449

dec_label_pc_9aae:                                ; preds = %dec_label_pc_9994, %dec_label_pc_997f
  %295 = icmp eq i64 %r15.0.reload, 0, !insn.addr !5450
  %296 = icmp eq i1 %295, false, !insn.addr !5451
  store i64 %rbx.1.reload, i64* %rbx.2.reg2mem, !insn.addr !5451
  br i1 %296, label %dec_label_pc_9aae.dec_label_pc_9ac2_crit_edge, label %dec_label_pc_9ab7, !insn.addr !5451

dec_label_pc_9aae.dec_label_pc_9ac2_crit_edge:    ; preds = %dec_label_pc_9aae
  %.pre39 = add i64 %12, 16, !insn.addr !5452
  %.pre40 = inttoptr i64 %.pre39 to i64*, !insn.addr !5452
  %.pre42 = load i64, i64* %.pre40, align 8
  store i64 %.pre42, i64* %.reg2mem
  store i64 %rbx.1.reload, i64* %rbx.3.reg2mem
  store i64 135, i64* %r12.1.reg2mem
  br label %dec_label_pc_9ac2

dec_label_pc_9ab7:                                ; preds = %dec_label_pc_9aae, %dec_label_pc_9a59
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %297 = add i64 %12, 16
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298, align 8, !insn.addr !5453
  %300 = icmp ult i64 %299, %r12.0.reload, !insn.addr !5453
  store i64 %299, i64* %.reg2mem, !insn.addr !5454
  store i64 %rbx.2.reload, i64* %rbx.3.reg2mem, !insn.addr !5454
  store i64 %r12.0.reload, i64* %r12.1.reg2mem, !insn.addr !5454
  br i1 %300, label %dec_label_pc_a1da, label %dec_label_pc_9ac2, !insn.addr !5454

dec_label_pc_9ac2:                                ; preds = %dec_label_pc_9aae.dec_label_pc_9ac2_crit_edge, %dec_label_pc_9ab7
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !5452
  %301 = sub i64 %.reload, %r12.1.reload, !insn.addr !5455
  %302 = icmp ult i64 %301, %rbx.3.reload, !insn.addr !5456
  br i1 %302, label %dec_label_pc_a1da, label %dec_label_pc_9ad3, !insn.addr !5457

dec_label_pc_9ad3:                                ; preds = %dec_label_pc_9ac2
  %303 = add i64 %12, 792, !insn.addr !5458
  %304 = inttoptr i64 %303 to i8*, !insn.addr !5458
  %305 = load i8, i8* %304, align 8, !insn.addr !5458
  %306 = and i8 %305, 4, !insn.addr !5459
  %307 = icmp eq i8 %306, 0, !insn.addr !5459
  br i1 %307, label %dec_label_pc_9b04, label %dec_label_pc_9ade, !insn.addr !5460

dec_label_pc_9ade:                                ; preds = %dec_label_pc_9ad3
  %308 = load i64, i64* %70, align 8, !insn.addr !5461
  %309 = icmp eq i64 %308, 0, !insn.addr !5462
  br i1 %309, label %dec_label_pc_9b04, label %dec_label_pc_9ae7, !insn.addr !5463

dec_label_pc_9ae7:                                ; preds = %dec_label_pc_9ade
  %310 = add i64 %308, 88, !insn.addr !5464
  %311 = inttoptr i64 %310 to i64*, !insn.addr !5464
  %312 = load i64, i64* %311, align 8, !insn.addr !5464
  %313 = icmp eq i64 %312, 0, !insn.addr !5465
  br i1 %313, label %dec_label_pc_9b04, label %dec_label_pc_9af0, !insn.addr !5466

dec_label_pc_9af0:                                ; preds = %dec_label_pc_9ae7
  %314 = load i64, i64* %82, align 8, !insn.addr !5467
  %315 = add i64 %314, 8, !insn.addr !5468
  %316 = inttoptr i64 %315 to i32*, !insn.addr !5468
  store i32 1, i32* %316, align 4, !insn.addr !5468
  store i64 %312, i64* %rdx.0.reg2mem, !insn.addr !5469
  br label %dec_label_pc_9b1a, !insn.addr !5469

dec_label_pc_9b04:                                ; preds = %dec_label_pc_9ae7, %dec_label_pc_9ade, %dec_label_pc_9ad3
  %317 = load i64, i64* %82, align 8, !insn.addr !5470
  %318 = and i8 %305, 5
  %319 = add i64 %317, 8, !insn.addr !5471
  %320 = inttoptr i64 %319 to i32*, !insn.addr !5471
  store i32 0, i32* %320, align 4, !insn.addr !5471
  %321 = icmp eq i8 %318, 5, !insn.addr !5472
  store i64 %317, i64* %rdx.0.reg2mem, !insn.addr !5473
  br i1 %321, label %dec_label_pc_a1da, label %dec_label_pc_9b1a, !insn.addr !5473

dec_label_pc_9b1a:                                ; preds = %dec_label_pc_9b04, %dec_label_pc_9af0
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %322 = load i64, i64* %70, align 8, !insn.addr !5474
  %323 = load i8, i8* %304, align 8, !insn.addr !5475
  %324 = trunc i64 %322 to i32, !insn.addr !5476
  %325 = add i64 %arg2, 144, !insn.addr !5476
  %326 = inttoptr i64 %325 to i32*, !insn.addr !5476
  store i32 %324, i32* %326, align 4, !insn.addr !5476
  %327 = and i8 %323, 16, !insn.addr !5477
  %328 = icmp eq i8 %327, 0, !insn.addr !5477
  br i1 %328, label %dec_label_pc_9b4a, label %dec_label_pc_9b3c, !insn.addr !5478

dec_label_pc_9b3c:                                ; preds = %dec_label_pc_9b1a
  %329 = load i64, i64* %82, align 8, !insn.addr !5479
  %330 = add i64 %329, 4, !insn.addr !5480
  %331 = inttoptr i64 %330 to i32*, !insn.addr !5480
  %332 = load i32, i32* %331, align 4, !insn.addr !5480
  %333 = icmp eq i32 %332, 0, !insn.addr !5480
  br i1 %333, label %dec_label_pc_a1da, label %dec_label_pc_9b4a, !insn.addr !5481

dec_label_pc_9b4a:                                ; preds = %dec_label_pc_9b3c, %dec_label_pc_9b1a
  %334 = zext i8 %323 to i64, !insn.addr !5475
  %335 = and i64 %334, 2
  %336 = icmp eq i64 %335, 0, !insn.addr !5482
  %337 = icmp eq i1 %336, false, !insn.addr !5483
  br i1 %337, label %dec_label_pc_9b57, label %dec_label_pc_9b50, !insn.addr !5483

dec_label_pc_9b50:                                ; preds = %dec_label_pc_9b57, %dec_label_pc_9b4a
  %338 = icmp eq i64 %67, 0, !insn.addr !5484
  br i1 %338, label %dec_label_pc_9b75, label %dec_label_pc_9b82, !insn.addr !5485

dec_label_pc_9b57:                                ; preds = %dec_label_pc_9b4a
  %339 = call i64 @.Llzma_rc_prices.1(i64 %303, i64 %arg2), !insn.addr !5486
  %340 = trunc i64 %339 to i32, !insn.addr !5487
  %341 = icmp eq i32 %340, 0, !insn.addr !5487
  %342 = icmp eq i1 %341, false, !insn.addr !5488
  %or.cond24 = or i1 %328, %342
  br i1 %or.cond24, label %dec_label_pc_9b50, label %dec_label_pc_a1da, !insn.addr !5488

dec_label_pc_9b75:                                ; preds = %dec_label_pc_9b50
  %343 = add i64 %12, 793, !insn.addr !5489
  %344 = inttoptr i64 %343 to i8*, !insn.addr !5489
  %345 = load i8, i8* %344, align 1, !insn.addr !5489
  %346 = icmp slt i8 %345, 0, !insn.addr !5490
  %347 = icmp eq i1 %346, false, !insn.addr !5491
  br i1 %347, label %dec_label_pc_9be7, label %dec_label_pc_9bf9, !insn.addr !5491

dec_label_pc_9b82:                                ; preds = %dec_label_pc_9b50
  %348 = trunc i64 %67 to i32, !insn.addr !5492
  store i64 0, i64* %rax.7.reg2mem
  store i64 %rdx.0.reload, i64* %rdx.5.reg2mem
  switch i32 %348, label %dec_label_pc_9caa [
    i32 1, label %dec_label_pc_9b93
    i32 3, label %dec_label_pc_9b9f
  ]

dec_label_pc_9b93:                                ; preds = %dec_label_pc_9b82
  %349 = add i64 %12, 793, !insn.addr !5493
  %350 = inttoptr i64 %349 to i8*, !insn.addr !5493
  %351 = load i8, i8* %350, align 1, !insn.addr !5493
  %352 = urem i8 %351, 2, !insn.addr !5493
  %353 = icmp eq i8 %352, 0, !insn.addr !5493
  store i64 0, i64* %rax.7.reg2mem, !insn.addr !5494
  store i64 %rdx.0.reload, i64* %rdx.5.reg2mem, !insn.addr !5494
  br i1 %353, label %dec_label_pc_9bd4, label %dec_label_pc_9caa, !insn.addr !5494

dec_label_pc_9b9f:                                ; preds = %dec_label_pc_9b82
  %354 = add i64 %12, 795, !insn.addr !5495
  %355 = inttoptr i64 %354 to i8*, !insn.addr !5495
  %356 = load i8, i8* %355, align 1, !insn.addr !5495
  %357 = icmp slt i8 %356, 0, !insn.addr !5496
  %358 = icmp eq i1 %357, false, !insn.addr !5497
  br i1 %358, label %dec_label_pc_9bc1, label %dec_label_pc_9baa, !insn.addr !5497

dec_label_pc_9baa:                                ; preds = %dec_label_pc_9bc1, %dec_label_pc_9b9f
  %359 = zext i8 %356 to i64, !insn.addr !5495
  %360 = and i64 %rdx.0.reload, -256, !insn.addr !5495
  %361 = or i64 %360, %359, !insn.addr !5495
  %362 = add i64 %12, 794, !insn.addr !5498
  %363 = inttoptr i64 %362 to i8*, !insn.addr !5498
  %364 = load i8, i8* %363, align 2, !insn.addr !5498
  %365 = and i8 %364, 32, !insn.addr !5499
  %366 = icmp eq i8 %365, 0, !insn.addr !5499
  %367 = icmp eq i1 %366, false, !insn.addr !5500
  store i64 4294967295, i64* %rax.7.reg2mem, !insn.addr !5500
  store i64 %361, i64* %rdx.5.reg2mem, !insn.addr !5500
  br i1 %367, label %dec_label_pc_9c4e, label %dec_label_pc_9caa, !insn.addr !5500

dec_label_pc_9bc1:                                ; preds = %dec_label_pc_9b9f
  %368 = add i64 %arg2, 32, !insn.addr !5501
  %369 = inttoptr i64 %368 to i64*, !insn.addr !5501
  %370 = load i64, i64* %369, align 8, !insn.addr !5501
  %371 = add i64 %370, 200, !insn.addr !5502
  %372 = inttoptr i64 %371 to i64*, !insn.addr !5502
  %373 = load i64, i64* %372, align 8, !insn.addr !5502
  %374 = icmp eq i64 %373, 0, !insn.addr !5502
  %375 = icmp eq i1 %374, false, !insn.addr !5503
  br i1 %375, label %dec_label_pc_9baa, label %dec_label_pc_a1da, !insn.addr !5503

dec_label_pc_9bd4:                                ; preds = %dec_label_pc_9b93
  %376 = add i64 %arg2, 32, !insn.addr !5504
  %377 = inttoptr i64 %376 to i64*, !insn.addr !5504
  %378 = load i64, i64* %377, align 8, !insn.addr !5504
  %379 = add i64 %378, 200, !insn.addr !5505
  %380 = inttoptr i64 %379 to i64*, !insn.addr !5505
  %381 = load i64, i64* %380, align 8, !insn.addr !5505
  %382 = icmp eq i64 %381, 0, !insn.addr !5505
  %383 = icmp eq i1 %382, false, !insn.addr !5506
  store i64 0, i64* %rax.7.reg2mem, !insn.addr !5506
  store i64 %rdx.0.reload, i64* %rdx.5.reg2mem, !insn.addr !5506
  br i1 %383, label %dec_label_pc_9caa, label %dec_label_pc_a1da, !insn.addr !5506

dec_label_pc_9be7:                                ; preds = %dec_label_pc_9b75
  %384 = add i64 %arg2, 32, !insn.addr !5507
  %385 = inttoptr i64 %384 to i64*, !insn.addr !5507
  %386 = load i64, i64* %385, align 8, !insn.addr !5507
  %387 = add i64 %386, 200, !insn.addr !5508
  %388 = inttoptr i64 %387 to i64*, !insn.addr !5508
  %389 = load i64, i64* %388, align 8, !insn.addr !5508
  %390 = icmp eq i64 %389, 0, !insn.addr !5508
  br i1 %390, label %dec_label_pc_a1da, label %dec_label_pc_9bf9, !insn.addr !5509

dec_label_pc_9bf9:                                ; preds = %dec_label_pc_9b75, %dec_label_pc_9be7
  %391 = zext i8 %345 to i64, !insn.addr !5489
  %392 = and i64 %391, 2
  %393 = icmp eq i64 %392, 0, !insn.addr !5510
  store i64 255, i64* %rdx.1.reg2mem, !insn.addr !5511
  br i1 %393, label %dec_label_pc_9c11, label %dec_label_pc_9c02, !insn.addr !5511

dec_label_pc_9c02:                                ; preds = %dec_label_pc_9bf9
  %394 = add i64 %12, 794, !insn.addr !5512
  %395 = inttoptr i64 %394 to i16*, !insn.addr !5512
  %396 = load i16, i16* %395, align 2, !insn.addr !5512
  %397 = udiv i16 %396, 64, !insn.addr !5513
  %398 = urem i16 %397, 128
  %399 = zext i16 %398 to i64, !insn.addr !5514
  store i64 %399, i64* %rdx.1.reg2mem, !insn.addr !5514
  br label %dec_label_pc_9c11, !insn.addr !5514

dec_label_pc_9c11:                                ; preds = %dec_label_pc_9c02, %dec_label_pc_9bf9
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %400 = icmp slt i8 %323, 0, !insn.addr !5515
  %401 = icmp eq i1 %400, false, !insn.addr !5516
  store i64 255, i64* %rdx.2.reg2mem, !insn.addr !5516
  br i1 %401, label %dec_label_pc_9c29, label %dec_label_pc_9c1a, !insn.addr !5516

dec_label_pc_9c1a:                                ; preds = %dec_label_pc_9c11
  %402 = inttoptr i64 %303 to i64*, !insn.addr !5517
  %403 = load i64, i64* %402, align 8, !insn.addr !5517
  %404 = udiv i64 %403, 536870912, !insn.addr !5518
  %405 = urem i64 %404, 32, !insn.addr !5519
  store i64 %405, i64* %rdx.2.reg2mem, !insn.addr !5519
  br label %dec_label_pc_9c29, !insn.addr !5519

dec_label_pc_9c29:                                ; preds = %dec_label_pc_9c1a, %dec_label_pc_9c11
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %406 = and i64 %391, 4
  %407 = icmp eq i64 %406, 0, !insn.addr !5520
  %408 = mul i64 %rdx.2.reload, 256, !insn.addr !5521
  %409 = or i64 %408, %rdx.1.reload, !insn.addr !5521
  store i64 %409, i64* %rax.5.reg2mem, !insn.addr !5522
  br i1 %407, label %dec_label_pc_9c76, label %dec_label_pc_9c30, !insn.addr !5522

dec_label_pc_9c30:                                ; preds = %dec_label_pc_9c29
  %410 = add i64 %12, 796, !insn.addr !5523
  %411 = inttoptr i64 %410 to i8*, !insn.addr !5523
  %412 = load i8, i8* %411, align 4, !insn.addr !5523
  %413 = udiv i8 %412, 32, !insn.addr !5524
  %414 = udiv i8 %412, 4, !insn.addr !5525
  %415 = zext i8 %414 to i64, !insn.addr !5526
  %416 = mul i64 %415, 65536, !insn.addr !5526
  %417 = and i64 %416, 458752, !insn.addr !5527
  %418 = or i64 %417, %409, !insn.addr !5528
  store i64 %418, i64* %rax.6.reg2mem, !insn.addr !5529
  store i8 %413, i8* %rdx.4.shrunk.reg2mem, !insn.addr !5529
  br label %dec_label_pc_9c9b, !insn.addr !5529

dec_label_pc_9c4e:                                ; preds = %dec_label_pc_9baa
  %419 = icmp slt i8 %364, 0, !insn.addr !5530
  %420 = icmp eq i1 %419, false, !insn.addr !5531
  store i64 255, i64* %rsi.3.reg2mem, !insn.addr !5531
  br i1 %420, label %dec_label_pc_9c5d, label %dec_label_pc_9c55, !insn.addr !5531

dec_label_pc_9c55:                                ; preds = %dec_label_pc_9c4e
  %421 = add i64 %12, 796, !insn.addr !5532
  %422 = inttoptr i64 %421 to i8*, !insn.addr !5532
  %423 = load i8, i8* %422, align 4, !insn.addr !5532
  %424 = zext i8 %423 to i64, !insn.addr !5532
  store i64 %424, i64* %rsi.3.reg2mem, !insn.addr !5532
  br label %dec_label_pc_9c5d, !insn.addr !5532

dec_label_pc_9c5d:                                ; preds = %dec_label_pc_9c55, %dec_label_pc_9c4e
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %425 = and i8 %364, 64
  %426 = icmp eq i8 %425, 0, !insn.addr !5533
  %427 = and i8 %356, 64, !insn.addr !5534
  %428 = icmp eq i8 %427, 0, !insn.addr !5534
  %429 = mul i64 %359, 256
  %.op = and i64 %429, 16128
  %430 = select i1 %426, i64 65280, i64 %.op, !insn.addr !5535
  %431 = or i64 %rsi.3.reload, %430, !insn.addr !5535
  %432 = icmp eq i1 %428, false, !insn.addr !5536
  store i64 %431, i64* %rax.5.reg2mem, !insn.addr !5536
  br i1 %432, label %dec_label_pc_9c7f, label %dec_label_pc_9c76, !insn.addr !5536

dec_label_pc_9c76:                                ; preds = %dec_label_pc_9c5d, %dec_label_pc_9c29
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %433 = and i64 %rax.5.reload, 4278255615, !insn.addr !5537
  %434 = or i64 %433, 16711680, !insn.addr !5537
  store i64 %434, i64* %rax.6.reg2mem, !insn.addr !5538
  store i8 -1, i8* %rdx.4.shrunk.reg2mem, !insn.addr !5538
  br label %dec_label_pc_9c9b, !insn.addr !5538

dec_label_pc_9c7f:                                ; preds = %dec_label_pc_9c5d
  %435 = add i64 %12, 793, !insn.addr !5539
  %436 = inttoptr i64 %435 to i8*, !insn.addr !5539
  %437 = load i8, i8* %436, align 1, !insn.addr !5539
  %438 = zext i8 %437 to i64, !insn.addr !5540
  %439 = udiv i8 %437, 8, !insn.addr !5541
  %440 = urem i8 %439, 8
  %441 = mul i64 %438, 65536, !insn.addr !5542
  %442 = and i64 %441, 458752, !insn.addr !5543
  %443 = or i64 %442, %431, !insn.addr !5544
  store i64 %443, i64* %rax.6.reg2mem, !insn.addr !5544
  store i8 %440, i8* %rdx.4.shrunk.reg2mem, !insn.addr !5544
  br label %dec_label_pc_9c9b, !insn.addr !5544

dec_label_pc_9c9b:                                ; preds = %dec_label_pc_9c7f, %dec_label_pc_9c76, %dec_label_pc_9c30
  %rdx.4.shrunk.reload = load i8, i8* %rdx.4.shrunk.reg2mem
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %rdx.4 = zext i8 %rdx.4.shrunk.reload to i64
  %444 = mul i64 %rdx.4, 16777216, !insn.addr !5545
  %445 = urem i64 %rax.6.reload, 16777216, !insn.addr !5546
  %446 = or i64 %444, %445, !insn.addr !5547
  store i64 %446, i64* %rax.7.reg2mem, !insn.addr !5548
  store i64 %444, i64* %rdx.5.reg2mem, !insn.addr !5548
  br label %dec_label_pc_9caa, !insn.addr !5548

dec_label_pc_9caa:                                ; preds = %dec_label_pc_9baa, %dec_label_pc_9bd4, %dec_label_pc_9b93, %dec_label_pc_9b82, %dec_label_pc_9c9b
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %rax.7.reload = load i64, i64* %rax.7.reg2mem
  %447 = trunc i64 %rax.7.reload to i32, !insn.addr !5549
  %448 = add i64 %arg2, 84, !insn.addr !5549
  %449 = inttoptr i64 %448 to i32*, !insn.addr !5549
  store i32 %447, i32* %449, align 4, !insn.addr !5549
  %450 = add i64 %12, 797, !insn.addr !5550
  %451 = add i64 %450, %r12.1.reload, !insn.addr !5550
  %452 = icmp eq i32 %324, 0, !insn.addr !5551
  %453 = icmp eq i1 %452, false, !insn.addr !5552
  br i1 %453, label %dec_label_pc_a14c, label %dec_label_pc_9cbf, !insn.addr !5552

dec_label_pc_9cbf:                                ; preds = %dec_label_pc_9caa
  %454 = load i64, i64* %70, align 8, !insn.addr !5553
  %455 = icmp eq i64 %454, 0, !insn.addr !5554
  br i1 %455, label %dec_label_pc_a1da, label %dec_label_pc_9ccc, !insn.addr !5555

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cbf
  %456 = add i64 %454, 32, !insn.addr !5556
  %457 = inttoptr i64 %456 to i64*, !insn.addr !5556
  %458 = load i64, i64* %457, align 8, !insn.addr !5556
  %459 = icmp eq i64 %458, 0, !insn.addr !5557
  br i1 %459, label %dec_label_pc_a1da, label %dec_label_pc_9cda, !insn.addr !5558

dec_label_pc_9cda:                                ; preds = %dec_label_pc_9ccc
  %460 = add i64 %454, 40, !insn.addr !5559
  %461 = inttoptr i64 %460 to i64*, !insn.addr !5559
  %462 = load i64, i64* %461, align 8, !insn.addr !5559
  %463 = icmp eq i64 %462, 0, !insn.addr !5559
  br i1 %463, label %dec_label_pc_a1da, label %dec_label_pc_9ce6, !insn.addr !5560

dec_label_pc_9ce6:                                ; preds = %dec_label_pc_9cda
  %464 = add i64 %454, 48, !insn.addr !5561
  %465 = inttoptr i64 %464 to i64*, !insn.addr !5561
  %466 = load i64, i64* %465, align 8, !insn.addr !5561
  %467 = icmp eq i64 %466, 0, !insn.addr !5561
  br i1 %467, label %dec_label_pc_a1da, label %dec_label_pc_9cf2, !insn.addr !5562

dec_label_pc_9cf2:                                ; preds = %dec_label_pc_9ce6
  %468 = icmp eq i1 %338, false, !insn.addr !5563
  br i1 %468, label %dec_label_pc_9f37, label %dec_label_pc_9cfb, !insn.addr !5563

dec_label_pc_9cfb:                                ; preds = %dec_label_pc_9cf2
  %469 = add i64 %arg2, 32, !insn.addr !5564
  %470 = inttoptr i64 %469 to i64*, !insn.addr !5564
  %471 = load i64, i64* %470, align 8, !insn.addr !5564
  %472 = icmp eq i64 %471, 0, !insn.addr !5565
  br i1 %472, label %dec_label_pc_a1da, label %dec_label_pc_9d08, !insn.addr !5566

dec_label_pc_9d08:                                ; preds = %dec_label_pc_9cfb
  %473 = add i64 %471, 88, !insn.addr !5567
  %474 = inttoptr i64 %473 to i64*, !insn.addr !5567
  %475 = load i64, i64* %474, align 8, !insn.addr !5567
  %476 = icmp eq i64 %475, 0, !insn.addr !5567
  br i1 %476, label %dec_label_pc_a1da, label %dec_label_pc_9d13, !insn.addr !5568

dec_label_pc_9d13:                                ; preds = %dec_label_pc_9d08
  %477 = inttoptr i64 %471 to i32*, !insn.addr !5569
  %478 = load i32, i32* %477, align 4, !insn.addr !5569
  %479 = icmp eq i32 %478, 0, !insn.addr !5569
  br i1 %479, label %dec_label_pc_a1da, label %dec_label_pc_9d1c, !insn.addr !5570

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9d13
  %480 = add i64 %12, 793, !insn.addr !5571
  %481 = inttoptr i64 %480 to i8*, !insn.addr !5571
  %482 = load i8, i8* %481, align 1, !insn.addr !5571
  %483 = icmp slt i8 %482, 0, !insn.addr !5571
  br i1 %483, label %dec_label_pc_9d56, label %dec_label_pc_9d26, !insn.addr !5572

dec_label_pc_9d26:                                ; preds = %dec_label_pc_9d1c
  %484 = add i64 %471, 200, !insn.addr !5573
  %485 = inttoptr i64 %484 to i64*, !insn.addr !5573
  %486 = load i64, i64* %485, align 8, !insn.addr !5573
  %487 = icmp eq i64 %486, 0, !insn.addr !5574
  br i1 %487, label %dec_label_pc_a1da, label %dec_label_pc_9d36, !insn.addr !5575

dec_label_pc_9d36:                                ; preds = %dec_label_pc_9d26
  %488 = inttoptr i64 %486 to i32*, !insn.addr !5576
  %489 = load i32, i32* %488, align 4, !insn.addr !5576
  %490 = icmp sgt i32 %489, 2, !insn.addr !5577
  br i1 %490, label %dec_label_pc_9d4d, label %dec_label_pc_9d3d, !insn.addr !5577

dec_label_pc_9d3d:                                ; preds = %dec_label_pc_9d36
  %491 = icmp slt i32 %489, 0, !insn.addr !5578
  br i1 %491, label %dec_label_pc_a1da, label %dec_label_pc_9d45, !insn.addr !5579

dec_label_pc_9d45:                                ; preds = %dec_label_pc_9d3d
  store i32 3, i32* %488, align 4, !insn.addr !5580
  br label %dec_label_pc_9d56, !insn.addr !5581

dec_label_pc_9d4d:                                ; preds = %dec_label_pc_9d36
  %492 = icmp eq i32 %489, 3, !insn.addr !5582
  %493 = icmp eq i1 %492, false, !insn.addr !5583
  br i1 %493, label %dec_label_pc_a1da, label %dec_label_pc_9d56, !insn.addr !5583

dec_label_pc_9d56:                                ; preds = %dec_label_pc_9d4d, %dec_label_pc_9d45, %dec_label_pc_9d1c
  %494 = and i64 %334, 64
  %495 = icmp eq i64 %494, 0, !insn.addr !5584
  br i1 %495, label %dec_label_pc_9d7b, label %dec_label_pc_9d5c, !insn.addr !5585

dec_label_pc_9d5c:                                ; preds = %dec_label_pc_9d56
  %496 = add i64 %471, 192, !insn.addr !5586
  %497 = inttoptr i64 %496 to i64*, !insn.addr !5586
  %498 = load i64, i64* %497, align 8, !insn.addr !5586
  %499 = icmp eq i64 %498, 0, !insn.addr !5587
  br i1 %499, label %dec_label_pc_a1da, label %dec_label_pc_9d6c, !insn.addr !5588

dec_label_pc_9d6c:                                ; preds = %dec_label_pc_9d5c
  %500 = inttoptr i64 %498 to i32*, !insn.addr !5589
  %501 = load i32, i32* %500, align 4, !insn.addr !5589
  %502 = icmp ult i32 %501, 2
  br i1 %502, label %dec_label_pc_9d75, label %dec_label_pc_a1da, !insn.addr !5590

dec_label_pc_9d75:                                ; preds = %dec_label_pc_9d6c
  store i32 0, i32* %500, align 4, !insn.addr !5591
  br label %dec_label_pc_9d7b, !insn.addr !5591

dec_label_pc_9d7b:                                ; preds = %dec_label_pc_9d75, %dec_label_pc_9d56
  %503 = and i64 %334, 32
  %504 = icmp eq i64 %503, 0, !insn.addr !5592
  %505 = add i64 %12, 88, !insn.addr !5593
  %506 = inttoptr i64 %505 to i32*, !insn.addr !5593
  store i32 -1, i32* %506, align 8, !insn.addr !5593
  br i1 %504, label %dec_label_pc_9da7, label %dec_label_pc_9d8e, !insn.addr !5594

dec_label_pc_9d8e:                                ; preds = %dec_label_pc_9d7b
  %507 = load i8, i8* %481, align 1, !insn.addr !5595
  %508 = udiv i8 %507, 8, !insn.addr !5596
  %509 = urem i8 %508, 16
  %510 = zext i8 %509 to i32, !insn.addr !5597
  %511 = call i64 @.Lindex_decode.1(i64 %505, i32 %510, i64 %454), !insn.addr !5598
  store i64 %511, i64* %storemerge.reg2mem, !insn.addr !5599
  br label %dec_label_pc_9dbc, !insn.addr !5599

dec_label_pc_9da7:                                ; preds = %dec_label_pc_9d7b
  %512 = call i64 @.Lindex_encode.1(i64 %arg2, i32* %506, i64 1, i32 1), !insn.addr !5600
  store i64 %512, i64* %storemerge.reg2mem, !insn.addr !5600
  br label %dec_label_pc_9dbc, !insn.addr !5600

dec_label_pc_9dbc:                                ; preds = %dec_label_pc_9da7, %dec_label_pc_9d8e
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %513 = trunc i64 %storemerge.reload to i32, !insn.addr !5601
  %514 = icmp eq i32 %513, 0, !insn.addr !5601
  br i1 %514, label %dec_label_pc_a1da, label %dec_label_pc_9dc4, !insn.addr !5602

dec_label_pc_9dc4:                                ; preds = %dec_label_pc_9dbc
  %515 = load i32, i32* %506, align 8, !insn.addr !5603
  %516 = call i128 @__asm_xorps(i128 %104, i128 %104), !insn.addr !5604
  %517 = add i64 %12, 87, !insn.addr !5605
  %518 = inttoptr i64 %517 to i8*, !insn.addr !5605
  store i8 0, i8* %518, align 1, !insn.addr !5605
  %519 = add i64 %12, 96, !insn.addr !5606
  %520 = inttoptr i64 %519 to i32*, !insn.addr !5606
  store i32 0, i32* %520, align 8, !insn.addr !5606
  %521 = add i64 %12, 104, !insn.addr !5607
  %522 = inttoptr i64 %521 to i128*, !insn.addr !5607
  %523 = load i128, i128* %522, align 8, !insn.addr !5607
  call void @__asm_movups(i128 %523, i128 %516), !insn.addr !5607
  %524 = icmp slt i32 %515, 0, !insn.addr !5608
  br i1 %524, label %dec_label_pc_a1da, label %dec_label_pc_9de5, !insn.addr !5609

dec_label_pc_9de5:                                ; preds = %dec_label_pc_9dc4
  %525 = load i64, i64* %70, align 8, !insn.addr !5610
  %526 = icmp eq i64 %525, 0, !insn.addr !5611
  br i1 %526, label %dec_label_pc_a1da, label %dec_label_pc_9df2, !insn.addr !5612

dec_label_pc_9df2:                                ; preds = %dec_label_pc_9de5
  %527 = add i64 %525, 64, !insn.addr !5613
  %528 = inttoptr i64 %527 to i64*, !insn.addr !5613
  %529 = load i64, i64* %528, align 8, !insn.addr !5613
  %530 = icmp eq i64 %529, 0, !insn.addr !5613
  br i1 %530, label %dec_label_pc_a1da, label %dec_label_pc_9dfd, !insn.addr !5614

dec_label_pc_9dfd:                                ; preds = %dec_label_pc_9df2
  %531 = add i64 %525, 80, !insn.addr !5615
  %532 = inttoptr i64 %531 to i64*, !insn.addr !5615
  %533 = load i64, i64* %532, align 8, !insn.addr !5615
  %534 = icmp eq i64 %533, 0, !insn.addr !5615
  br i1 %534, label %dec_label_pc_a1da, label %dec_label_pc_9e08, !insn.addr !5616

dec_label_pc_9e08:                                ; preds = %dec_label_pc_9dfd
  %535 = udiv i32 %515, 64
  %536 = urem i32 %515, 64
  %537 = icmp eq i32 %536, 0, !insn.addr !5617
  %538 = zext i32 %536 to i64
  %539 = shl i64 1, %538
  %r12.2 = select i1 %537, i64 1, i64 %539
  %540 = add i64 %12, 112, !insn.addr !5618
  %541 = inttoptr i64 %540 to i64*, !insn.addr !5618
  store i64 500000000, i64* %541, align 8, !insn.addr !5618
  %542 = inttoptr i64 %189 to i8*, !insn.addr !5619
  call void @__asm_rep_stosd_memset(i8* %542, i32 0, i64 32), !insn.addr !5619
  %543 = mul i32 %535, 8
  %544 = zext i32 %543 to i64, !insn.addr !5620
  %545 = add i64 %189, %544, !insn.addr !5620
  %546 = inttoptr i64 %545 to i64*, !insn.addr !5620
  store i64 %r12.2, i64* %546, align 8, !insn.addr !5620
  %547 = inttoptr i64 %521 to i64*, !insn.addr !5621
  store i64 0, i64* %547, align 8, !insn.addr !5621
  br label %dec_label_pc_a1da

dec_label_pc_9f37:                                ; preds = %dec_label_pc_9cf2
  %548 = add i64 %12, 793, !insn.addr !5622
  %549 = inttoptr i64 %548 to i8*, !insn.addr !5622
  %550 = load i8, i8* %549, align 1, !insn.addr !5622
  %551 = zext i8 %550 to i64, !insn.addr !5622
  %552 = trunc i64 %67 to i32, !insn.addr !5623
  %553 = icmp eq i32 %552, 1, !insn.addr !5623
  %554 = icmp eq i1 %553, false, !insn.addr !5624
  br i1 %554, label %dec_label_pc_9f7b, label %dec_label_pc_9f43, !insn.addr !5624

dec_label_pc_9f43:                                ; preds = %dec_label_pc_9f37
  %555 = load i8, i8* %304, align 8, !insn.addr !5625
  %556 = add i64 %12, 795, !insn.addr !5626
  %557 = inttoptr i64 %556 to i8*, !insn.addr !5626
  %558 = load i8, i8* %557, align 1, !insn.addr !5626
  %559 = urem i64 %551, 2, !insn.addr !5627
  %560 = udiv i8 %555, 64, !insn.addr !5628
  %561 = urem i8 %560, 2
  %562 = zext i8 %561 to i32, !insn.addr !5629
  %563 = udiv i8 %550, 2, !insn.addr !5630
  %564 = urem i8 %563, 2
  %565 = zext i8 %564 to i32, !insn.addr !5631
  %566 = zext i8 %558 to i32, !insn.addr !5631
  %567 = call i64 @.Llzma_block_unpadded_size.1(i64 %559, i32 %562, i32 %565, i32 %566, i64 %arg2), !insn.addr !5631
  %568 = trunc i64 %567 to i32, !insn.addr !5632
  %569 = icmp eq i32 %568, 0, !insn.addr !5632
  br i1 %569, label %dec_label_pc_a1da, label %dec_label_pc_a096, !insn.addr !5633

dec_label_pc_9f7b:                                ; preds = %dec_label_pc_9f37
  %570 = icmp eq i32 %552, 2, !insn.addr !5634
  %571 = icmp eq i1 %570, false, !insn.addr !5635
  br i1 %571, label %dec_label_pc_a03a, label %dec_label_pc_9f84, !insn.addr !5635

dec_label_pc_9f84:                                ; preds = %dec_label_pc_9f7b
  %572 = and i64 %322, 4294967295, !insn.addr !5636
  %573 = urem i64 %rbx.3.reload, 65536, !insn.addr !5637
  %574 = urem i64 %551, 2
  %575 = icmp eq i64 %574, 0, !insn.addr !5638
  store i64 %573, i64* %rbx.4.reg2mem, !insn.addr !5639
  store i32 0, i32* %rdi.0.reg2mem, !insn.addr !5639
  store i64 %572, i64* %r14.1.reg2mem, !insn.addr !5639
  store i64 0, i64* %storemerge4.reg2mem, !insn.addr !5639
  br i1 %575, label %dec_label_pc_9fab, label %dec_label_pc_9f8b, !insn.addr !5639

dec_label_pc_9f8b:                                ; preds = %dec_label_pc_9f84
  %576 = icmp ult i64 %573, 9
  br i1 %576, label %dec_label_pc_a1da, label %dec_label_pc_9f95, !insn.addr !5640

dec_label_pc_9f95:                                ; preds = %dec_label_pc_9f8b
  %577 = inttoptr i64 %451 to i32*, !insn.addr !5641
  %578 = load i32, i32* %577, align 4, !insn.addr !5641
  %579 = zext i32 %578 to i64, !insn.addr !5641
  %580 = add i64 %451, 4, !insn.addr !5642
  %581 = inttoptr i64 %580 to i32*, !insn.addr !5642
  %582 = load i32, i32* %581, align 4, !insn.addr !5642
  %583 = add nsw i64 %573, -8, !insn.addr !5643
  store i64 %583, i64* %rbx.4.reg2mem, !insn.addr !5644
  store i32 %582, i32* %rdi.0.reg2mem, !insn.addr !5644
  store i64 %579, i64* %r14.1.reg2mem, !insn.addr !5644
  store i64 8, i64* %storemerge4.reg2mem, !insn.addr !5644
  br label %dec_label_pc_9fab, !insn.addr !5644

dec_label_pc_9fab:                                ; preds = %dec_label_pc_9f84, %dec_label_pc_9f95
  %storemerge4.reload = load i64, i64* %storemerge4.reg2mem
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %rdi.0.reload = load i32, i32* %rdi.0.reg2mem
  %rbx.4.reload = load i64, i64* %rbx.4.reg2mem
  %584 = icmp slt i8 %323, 0, !insn.addr !5645
  %585 = icmp eq i1 %584, false, !insn.addr !5646
  br i1 %585, label %dec_label_pc_9fd1, label %dec_label_pc_9fb0, !insn.addr !5646

dec_label_pc_9fb0:                                ; preds = %dec_label_pc_9fab
  %586 = icmp ult i64 %rbx.4.reload, 3
  br i1 %586, label %dec_label_pc_a1da, label %dec_label_pc_9fba, !insn.addr !5647

dec_label_pc_9fba:                                ; preds = %dec_label_pc_9fb0
  %587 = add i64 %storemerge4.reload, %451, !insn.addr !5648
  %588 = inttoptr i64 %587 to i16*, !insn.addr !5648
  %589 = load i16, i16* %588, align 2, !insn.addr !5648
  %590 = zext i16 %589 to i64, !insn.addr !5648
  %591 = add nsw i64 %rbx.4.reload, -2, !insn.addr !5649
  %592 = or i64 %storemerge4.reload, 2, !insn.addr !5650
  %593 = icmp ugt i64 %591, %590, !insn.addr !5651
  %594 = icmp eq i1 %593, false, !insn.addr !5652
  store i64 %590, i64* %rax.8.reg2mem, !insn.addr !5652
  store i64 %591, i64* %rbx.5.reg2mem, !insn.addr !5652
  store i64 %592, i64* %rbp.0.reg2mem, !insn.addr !5652
  br i1 %594, label %dec_label_pc_9fd9, label %dec_label_pc_a1da, !insn.addr !5652

dec_label_pc_9fd1:                                ; preds = %dec_label_pc_9fab
  %595 = add i64 %12, 795, !insn.addr !5653
  %596 = inttoptr i64 %595 to i16*, !insn.addr !5653
  %597 = load i16, i16* %596, align 2, !insn.addr !5653
  %598 = zext i16 %597 to i64, !insn.addr !5653
  store i64 %598, i64* %rax.8.reg2mem, !insn.addr !5653
  store i64 %rbx.4.reload, i64* %rbx.5.reg2mem, !insn.addr !5653
  store i64 %storemerge4.reload, i64* %rbp.0.reg2mem, !insn.addr !5653
  br label %dec_label_pc_9fd9, !insn.addr !5653

dec_label_pc_9fd9:                                ; preds = %dec_label_pc_9fd1, %dec_label_pc_9fba
  %rbx.5.reload = load i64, i64* %rbx.5.reg2mem
  %rax.8.reload = load i64, i64* %rax.8.reg2mem
  %599 = icmp ult i64 %rbx.5.reload, %rax.8.reload, !insn.addr !5654
  br i1 %599, label %dec_label_pc_a1da, label %dec_label_pc_9fe2, !insn.addr !5655

dec_label_pc_9fe2:                                ; preds = %dec_label_pc_9fd9
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %600 = icmp eq i32 %rdi.0.reload, 0, !insn.addr !5656
  %601 = icmp eq i1 %600, false, !insn.addr !5657
  br i1 %601, label %dec_label_pc_9fed, label %dec_label_pc_9fe6, !insn.addr !5657

dec_label_pc_9fe6:                                ; preds = %dec_label_pc_9fed, %dec_label_pc_9fe2
  %602 = icmp eq i64 %r14.1.reload, 0, !insn.addr !5658
  %603 = icmp eq i1 %602, false, !insn.addr !5659
  br i1 %603, label %dec_label_pc_a004, label %dec_label_pc_a024, !insn.addr !5659

dec_label_pc_9fed:                                ; preds = %dec_label_pc_9fe2
  store i64 %451, i64* %stack_var_-1528, align 8, !insn.addr !5660
  br label %dec_label_pc_9fe6

dec_label_pc_a004:                                ; preds = %dec_label_pc_9fe6
  %604 = load i64, i64* %70, align 8, !insn.addr !5661
  store i64 %451, i64* %stack_var_-1528, align 8, !insn.addr !5662
  %605 = trunc i64 %604 to i32, !insn.addr !5663
  %606 = icmp eq i32 %605, -1, !insn.addr !5663
  br i1 %606, label %dec_label_pc_a1da, label %dec_label_pc_a024, !insn.addr !5664

dec_label_pc_a024:                                ; preds = %dec_label_pc_9fe6, %dec_label_pc_a004
  %607 = add i64 %rbp.0.reload, %451, !insn.addr !5665
  %608 = inttoptr i64 %607 to i8*, !insn.addr !5666
  %609 = load i8, i8* %608, align 1, !insn.addr !5666
  %610 = icmp eq i8 %609, 0, !insn.addr !5666
  br i1 %610, label %dec_label_pc_a1da, label %dec_label_pc_a096, !insn.addr !5667

dec_label_pc_a03a:                                ; preds = %dec_label_pc_9f7b
  %611 = icmp ugt i8 %550, -65, !insn.addr !5668
  %612 = icmp eq i1 %611, false, !insn.addr !5669
  br i1 %612, label %dec_label_pc_a1da, label %dec_label_pc_a045, !insn.addr !5669

dec_label_pc_a045:                                ; preds = %dec_label_pc_a03a
  %613 = add i64 %454, ptrtoint (i32** @global_var_18 to i64), !insn.addr !5670
  %614 = inttoptr i64 %613 to i64*, !insn.addr !5670
  %615 = load i64, i64* %614, align 8, !insn.addr !5670
  %616 = icmp eq i64 %615, 0, !insn.addr !5670
  br i1 %616, label %dec_label_pc_a1da, label %dec_label_pc_a051, !insn.addr !5671

dec_label_pc_a051:                                ; preds = %dec_label_pc_a045
  %617 = add i64 %454, 64, !insn.addr !5672
  %618 = inttoptr i64 %617 to i64*, !insn.addr !5672
  %619 = load i64, i64* %618, align 8, !insn.addr !5672
  %620 = icmp eq i64 %619, 0, !insn.addr !5673
  br i1 %620, label %dec_label_pc_a1da, label %dec_label_pc_a05f, !insn.addr !5674

dec_label_pc_a05f:                                ; preds = %dec_label_pc_a051
  %621 = add i64 %12, 176, !insn.addr !5675
  %622 = inttoptr i64 %621 to i64*, !insn.addr !5675
  store i64 0, i64* %622, align 8, !insn.addr !5675
  %623 = inttoptr i64 %189 to i64*, !insn.addr !5676
  store i64 5, i64* %623, align 8, !insn.addr !5676
  br label %dec_label_pc_a1da, !insn.addr !5677

dec_label_pc_a096:                                ; preds = %dec_label_pc_a024, %dec_label_pc_9f43
  %624 = call i128 @__asm_xorps(i128 %104, i128 %104), !insn.addr !5678
  %625 = add i64 %12, 184, !insn.addr !5679
  %626 = add i64 %12, 104, !insn.addr !5680
  %627 = inttoptr i64 %626 to i8*, !insn.addr !5680
  store i8 1, i8* %627, align 8, !insn.addr !5680
  %628 = load i128, i128* %197, align 8, !insn.addr !5681
  call void @__asm_movups(i128 %628, i128 %624), !insn.addr !5681
  %629 = inttoptr i64 %625 to i8*, !insn.addr !5682
  call void @__asm_rep_stosd_memset(i8* %629, i32 0, i64 60), !insn.addr !5682
  %630 = load i64, i64* %22, align 8, !insn.addr !5683
  %631 = inttoptr i64 %189 to i8*, !insn.addr !5684
  store i8 -128, i8* %631, align 8, !insn.addr !5684
  %632 = add i64 %12, 414, !insn.addr !5685
  %633 = inttoptr i64 %632 to i8*, !insn.addr !5685
  store i8 8, i8* %633, align 2, !insn.addr !5685
  %634 = add i64 %12, 423, !insn.addr !5686
  %635 = inttoptr i64 %634 to i8*, !insn.addr !5686
  store i8 1, i8* %635, align 1, !insn.addr !5686
  %636 = icmp eq i64 %630, 0, !insn.addr !5687
  br i1 %636, label %dec_label_pc_a1da, label %dec_label_pc_a0f1, !insn.addr !5688

dec_label_pc_a0f1:                                ; preds = %dec_label_pc_a096
  %637 = load i64, i64* %22, align 8, !insn.addr !5689
  %638 = icmp eq i64 %637, 0, !insn.addr !5690
  br i1 %638, label %dec_label_pc_a1da, label %dec_label_pc_a116, !insn.addr !5691

dec_label_pc_a116:                                ; preds = %dec_label_pc_a0f1
  %639 = trunc i64 %637 to i32, !insn.addr !5692
  %640 = icmp eq i32 %639, 1, !insn.addr !5692
  %641 = icmp eq i1 %640, false, !insn.addr !5693
  br i1 %641, label %dec_label_pc_a1da, label %dec_label_pc_a132, !insn.addr !5693

dec_label_pc_a132:                                ; preds = %dec_label_pc_9923, %dec_label_pc_95b7, %dec_label_pc_959d, %dec_label_pc_9a59, %dec_label_pc_99b5, %dec_label_pc_98a7, %dec_label_pc_a116, %dec_label_pc_9a1c, %dec_label_pc_9a05, %dec_label_pc_99d6, %dec_label_pc_99c8, %dec_label_pc_99a2, %dec_label_pc_98fa, %dec_label_pc_98e5, %dec_label_pc_98c7, %dec_label_pc_98b1, %dec_label_pc_9891, %dec_label_pc_985a, %dec_label_pc_980f, %dec_label_pc_97dc, %dec_label_pc_97b3, %dec_label_pc_9726, %dec_label_pc_971b, %dec_label_pc_96d1, %dec_label_pc_96a7, %dec_label_pc_967c, %dec_label_pc_966b, %dec_label_pc_9660, %dec_label_pc_9655, %dec_label_pc_964a, %dec_label_pc_963d, %dec_label_pc_95ed, %dec_label_pc_9590, %dec_label_pc_954b
  store i32 1, i32* %16, align 4, !insn.addr !5694
  br label %dec_label_pc_a13a, !insn.addr !5694

dec_label_pc_a13a:                                ; preds = %dec_label_pc_9627, %dec_label_pc_a22f, %dec_label_pc_a1da, %dec_label_pc_a132, %dec_label_pc_9609, %dec_label_pc_95ff
  %642 = add i64 %12, 8, !insn.addr !5695
  %643 = inttoptr i64 %642 to i64*, !insn.addr !5695
  %644 = load i64, i64* %643, align 8, !insn.addr !5695
  %645 = inttoptr i64 %644 to i32*, !insn.addr !5696
  store i32 1, i32* %645, align 4, !insn.addr !5696
  store i64 0, i64* %merge.reg2mem, !insn.addr !5696
  br label %dec_label_pc_a204, !insn.addr !5696

dec_label_pc_a14c:                                ; preds = %dec_label_pc_9caa
  %646 = add i64 %12, 40, !insn.addr !5697
  %647 = inttoptr i64 %646 to i64*, !insn.addr !5697
  %648 = load i64, i64* %647, align 8, !insn.addr !5697
  %649 = inttoptr i64 %648 to i8*, !insn.addr !5698
  call void @__asm_rep_stosd_memset(i8* %649, i32 0, i64 11), !insn.addr !5698
  %650 = trunc i64 %67 to i32, !insn.addr !5699
  %651 = inttoptr i64 %189 to i32*, !insn.addr !5699
  store i32 %650, i32* %651, align 8, !insn.addr !5699
  %652 = add i64 %12, 176, !insn.addr !5700
  %653 = inttoptr i64 %652 to i64*, !insn.addr !5700
  store i64 %303, i64* %653, align 8, !insn.addr !5700
  %654 = add i64 %12, 776, !insn.addr !5701
  %655 = inttoptr i64 %654 to i64*, !insn.addr !5701
  %656 = load i64, i64* %655, align 8, !insn.addr !5701
  %657 = add i64 %12, 200, !insn.addr !5702
  %658 = inttoptr i64 %657 to i64*, !insn.addr !5702
  store i64 %451, i64* %658, align 8, !insn.addr !5702
  %659 = add i64 %12, 184, !insn.addr !5703
  %660 = inttoptr i64 %659 to i64*, !insn.addr !5703
  store i64 %656, i64* %660, align 8, !insn.addr !5703
  %661 = add i64 %12, 784, !insn.addr !5704
  %662 = inttoptr i64 %661 to i64*, !insn.addr !5704
  %663 = load i64, i64* %662, align 8, !insn.addr !5704
  %664 = trunc i64 %rbx.3.reload to i16, !insn.addr !5705
  %665 = add i64 %12, 208, !insn.addr !5705
  %666 = inttoptr i64 %665 to i16*, !insn.addr !5705
  store i16 %664, i16* %666, align 8, !insn.addr !5705
  %667 = add i64 %12, 192, !insn.addr !5706
  %668 = inttoptr i64 %667 to i64*, !insn.addr !5706
  store i64 %663, i64* %668, align 8, !insn.addr !5706
  %669 = add i64 %12, 32, !insn.addr !5707
  %670 = inttoptr i64 %669 to i64*, !insn.addr !5707
  %671 = load i64, i64* %670, align 8, !insn.addr !5707
  %672 = add i64 %12, 216, !insn.addr !5708
  %673 = inttoptr i64 %672 to i64*, !insn.addr !5708
  store i64 %671, i64* %673, align 8, !insn.addr !5708
  %674 = call i64 @.Llzip_decoder_memconfig.part.0(i64 %189, i64 %arg2, i64 %rdx.5.reload), !insn.addr !5709
  %675 = trunc i64 %674 to i32, !insn.addr !5710
  %676 = icmp eq i32 %675, 0, !insn.addr !5710
  br i1 %676, label %dec_label_pc_a1da, label %dec_label_pc_a1c2, !insn.addr !5711

dec_label_pc_a1c2:                                ; preds = %dec_label_pc_a14c
  %677 = add i64 %12, 8, !insn.addr !5712
  %678 = inttoptr i64 %677 to i64*, !insn.addr !5712
  %679 = load i64, i64* %678, align 8, !insn.addr !5712
  store i32 1, i32* %16, align 4, !insn.addr !5713
  %680 = inttoptr i64 %679 to i32*, !insn.addr !5714
  store i32 0, i32* %680, align 4, !insn.addr !5714
  store i64 1, i64* %merge.reg2mem, !insn.addr !5715
  br label %dec_label_pc_a204, !insn.addr !5715

dec_label_pc_a1da:                                ; preds = %dec_label_pc_9b57, %dec_label_pc_9e08, %dec_label_pc_9fba, %dec_label_pc_9bd4, %dec_label_pc_9bc1, %dec_label_pc_9d6c, %dec_label_pc_a14c, %dec_label_pc_a116, %dec_label_pc_a0f1, %dec_label_pc_a096, %dec_label_pc_a05f, %dec_label_pc_a051, %dec_label_pc_a045, %dec_label_pc_a03a, %dec_label_pc_a024, %dec_label_pc_a004, %dec_label_pc_9fd9, %dec_label_pc_9fb0, %dec_label_pc_9f8b, %dec_label_pc_9f43, %dec_label_pc_9dfd, %dec_label_pc_9df2, %dec_label_pc_9de5, %dec_label_pc_9dc4, %dec_label_pc_9dbc, %dec_label_pc_9d5c, %dec_label_pc_9d4d, %dec_label_pc_9d3d, %dec_label_pc_9d26, %dec_label_pc_9d13, %dec_label_pc_9d08, %dec_label_pc_9cfb, %dec_label_pc_9ce6, %dec_label_pc_9cda, %dec_label_pc_9ccc, %dec_label_pc_9cbf, %dec_label_pc_9be7, %dec_label_pc_9b3c, %dec_label_pc_9b04, %dec_label_pc_9ac2, %dec_label_pc_9ab7
  %681 = add i64 %12, 1413, !insn.addr !5716
  store i32 1, i32* %16, align 4, !insn.addr !5717
  %682 = inttoptr i64 %681 to i8*, !insn.addr !5718
  call void @__asm_rep_stosb_memset(i8* nonnull %682, i8 0, i64 57), !insn.addr !5718
  %683 = add i64 %12, 792, !insn.addr !5719
  %684 = inttoptr i64 %683 to i8*, !insn.addr !5719
  %685 = load i8, i8* %684, align 8, !insn.addr !5719
  %686 = urem i8 %685, 2, !insn.addr !5719
  %687 = icmp eq i8 %686, 0, !insn.addr !5719
  store i64 0, i64* %merge.reg2mem, !insn.addr !5720
  br i1 %687, label %dec_label_pc_a13a, label %dec_label_pc_a204, !insn.addr !5720

dec_label_pc_a204:                                ; preds = %dec_label_pc_a1c2, %dec_label_pc_a13a, %dec_label_pc_953f, %dec_label_pc_a22f, %dec_label_pc_a1da
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload

dec_label_pc_a227:                                ; preds = %dec_label_pc_952c, %dec_label_pc_951f, %dec_label_pc_9512, %dec_label_pc_94f9
  store i32 1, i32* %16, align 4, !insn.addr !5721
  br label %dec_label_pc_a22f, !insn.addr !5721

dec_label_pc_a22f:                                ; preds = %dec_label_pc_a227, %dec_label_pc_94c0
  %688 = icmp eq i64* %arg3, null, !insn.addr !5722
  %689 = icmp eq i1 %688, false, !insn.addr !5723
  store i64 0, i64* %merge.reg2mem, !insn.addr !5723
  br i1 %689, label %dec_label_pc_a13a, label %dec_label_pc_a204, !insn.addr !5723

; uselistorder directives
  uselistorder i64 %rbx.4.reload, { 0, 2, 1 }
  uselistorder i64 %573, { 2, 1, 0 }
  uselistorder i8 %550, { 1, 0, 2 }
  uselistorder i32 %515, { 1, 0, 2 }
  uselistorder i64 %454, { 2, 1, 0, 4, 3, 5, 6 }
  uselistorder i64 %451, { 6, 0, 2, 5, 1, 4, 3 }
  uselistorder i64 %431, { 1, 0 }
  uselistorder i64 %409, { 1, 0 }
  uselistorder i8 %356, { 0, 2, 1 }
  uselistorder i8 %345, { 1, 0 }
  uselistorder i8 %323, { 1, 0, 3, 2 }
  uselistorder i64 %rdx.0.reload, { 0, 3, 1, 2 }
  uselistorder i64 %rbx.3.reload, { 1, 2, 0 }
  uselistorder i64 %r12.1.reload, { 1, 0 }
  uselistorder i64 %283, { 1, 0 }
  uselistorder i64 %rax.4.reload, { 0, 2, 1 }
  uselistorder i64 %245, { 0, 1, 2, 6, 3, 4, 5 }
  uselistorder i64 %rax.3.reload, { 1, 0 }
  uselistorder i64 %218, { 1, 0 }
  uselistorder i64 %209, { 1, 0 }
  uselistorder i64 %r11.0.reload, { 2, 1, 0 }
  uselistorder i64 %189, { 4, 5, 2, 3, 0, 1, 6 }
  uselistorder i64 %r12.0.reload, { 0, 1, 3, 2 }
  uselistorder i64 %r14.0.reload, { 1, 0 }
  uselistorder i64 %152, { 1, 0, 2 }
  uselistorder i64 %rax.1.reload, { 2, 1, 0, 3 }
  uselistorder i64 %123, { 2, 1, 0, 3 }
  uselistorder i128 %104, { 3, 2, 1, 0, 5, 4 }
  uselistorder i64* %82, { 1, 2, 0, 3 }
  uselistorder i64* %70, { 2, 1, 3, 4, 0, 5, 6, 7 }
  uselistorder i64 %67, { 1, 0, 3, 2, 5, 4, 6 }
  uselistorder i64 %49, { 2, 5, 4, 1, 3, 0 }
  uselistorder i64 %43, { 1, 0, 2 }
  uselistorder i32* %16, { 4, 1, 2, 3, 0, 5 }
  uselistorder i64 %12, { 4, 3, 18, 16, 17, 15, 13, 14, 12, 10, 11, 9, 8, 2, 25, 24, 22, 23, 20, 21, 26, 19, 32, 31, 30, 29, 28, 27, 7, 38, 39, 33, 34, 37, 36, 35, 6, 5, 40, 1, 53, 0, 51, 52, 46, 47, 48, 49, 50, 45, 43, 44, 41, 42 }
  uselistorder i64* %stack_var_-1528, { 2, 1, 0, 3, 4, 5 }
  uselistorder i64* %stack_var_-752, { 1, 0 }
  uselistorder i128 %10, { 1, 0 }
  uselistorder i64* %stack_var_-1440, { 1, 0, 2 }
  uselistorder i64* %stack_var_-1432, { 1, 0, 2 }
  uselistorder i64* %rax.1.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbx.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge7.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge6.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.2.reg2mem, { 0, 3, 2, 1, 4 }
  uselistorder i64* %rbx.1.reg2mem, { 0, 3, 2, 1, 4 }
  uselistorder i64* %r12.0.reg2mem, { 0, 3, 2, 1, 4 }
  uselistorder i64* %r14.0.reg2mem, { 0, 3, 2, 1, 4 }
  uselistorder i64* %r15.0.reg2mem, { 0, 3, 2, 1, 4 }
  uselistorder i64* %r11.0.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.3.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.4.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.2.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rdx.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.6.reg2mem, { 0, 1, 3, 2 }
  uselistorder i8* %rdx.4.shrunk.reg2mem, { 0, 1, 3, 2 }
  uselistorder i64* %rax.7.reg2mem, { 0, 5, 2, 1, 3, 4 }
  uselistorder i64* %rdx.5.reg2mem, { 0, 5, 2, 1, 3, 4 }
  uselistorder i64* %storemerge.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbx.4.reg2mem, { 0, 2, 1 }
  uselistorder i32* %rdi.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %r14.1.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge4.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rax.8.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbx.5.reg2mem, { 0, 2, 1 }
  uselistorder i64* %rbp.0.reg2mem, { 0, 2, 1 }
  uselistorder i64* %merge.reg2mem, { 1, 0, 5, 4, 3, 2 }
  uselistorder i64* %1, { 1, 0 }
  uselistorder i128* %0, { 3, 2, 1, 0 }
  uselistorder i64 776, { 1, 0 }
  uselistorder i64 11, { 2, 0, 3, 1 }
  uselistorder i8 -128, { 1, 0 }
  uselistorder i64 184, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i64 176, { 1, 2, 0, 3, 4, 5, 6 }
  uselistorder i8 -65, { 1, 2, 0 }
  uselistorder i64 -2, { 1, 2, 0 }
  uselistorder i64 (i64, i32, i32, i32, i64)* @.Llzma_block_unpadded_size.1, { 1, 0 }
  uselistorder i64 112, { 0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 2, 9, 14, 15, 16 }
  uselistorder i64 (i64, i32*, i64, i32)* @.Lindex_encode.1, { 1, 0 }
  uselistorder i64 (i64, i32, i64)* @.Lindex_decode.1, { 2, 1, 0 }
  uselistorder i32 -1, { 3, 7, 8, 9, 10, 1, 11, 6, 4, 12, 0, 5, 2 }
  uselistorder i64 16777216, { 1, 0, 5, 6, 7, 8, 9, 10, 4, 11, 12, 13, 3, 2 }
  uselistorder i8 8, { 21, 2, 4, 3, 22, 14, 0, 15, 18, 17, 16, 1, 19, 23, 5, 24, 25, 7, 8, 6, 10, 11, 9, 26, 27, 28, 29, 13, 12, 30, 31, 32, 20, 33 }
  uselistorder i64 458752, { 1, 0 }
  uselistorder i64 65536, { 3, 0, 1, 2, 4 }
  uselistorder i16 64, { 0, 2, 3, 1 }
  uselistorder i8 32, { 0, 5, 1, 6, 7, 8, 9, 10, 11, 2, 12, 3, 13, 14, 15, 4 }
  uselistorder i64 -256, { 0, 1, 2, 3, 4, 5, 6, 8, 9, 7, 10, 11 }
  uselistorder i8 16, { 0, 4, 5, 6, 9, 2, 11, 7, 8, 10, 12, 13, 14, 15, 3, 1 }
  uselistorder i8 4, { 0, 3, 4, 2, 5, 1, 6, 7 }
  uselistorder i64 240, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i64 9, { 2, 3, 1, 4, 5, 0 }
  uselistorder i64 (i64, i128*, i64, i64, i64, i128*, i64)* @function_7650, { 3, 2, 1, 0 }
  uselistorder i64 -8, { 3, 4, 7, 8, 0, 6, 9, 5, 10, 11, 12, 2, 1 }
  uselistorder i64 168, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i64 56, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 7, 17, 18, 19, 20, 21, 22, 23, 1, 0, 2, 3, 24, 25, 26, 4, 27, 28, 5, 29, 6, 30, 31, 32 }
  uselistorder i64 (i64, i64*, i64, i64)* @function_74d0, { 1, 0 }
  uselistorder i32 3, { 5, 14, 0, 4, 15, 3, 6, 7, 9, 2, 8, 1, 16, 10, 11, 17, 12, 13, 18 }
  uselistorder i64 135, { 0, 1, 4, 3, 2, 6, 5 }
  uselistorder i8 2, { 2, 4, 3, 5, 6, 7, 8, 32, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 1, 21, 22, 23, 24, 36, 25, 37, 26, 27, 28, 29, 34, 38, 39, 30, 35, 33, 40, 31 }
  uselistorder i64 5, { 11, 3, 5, 13, 6, 12, 0, 7, 8, 1, 2, 9, 10, 4, 14 }
  uselistorder i64 -16, { 1, 0, 2 }
  uselistorder i64 41, { 1, 2, 3, 4, 0 }
  uselistorder void (i8*, i8, i64)* @__asm_rep_stosb_memset, { 0, 1, 2, 5, 6, 7, 8, 9, 10, 4, 3 }
  uselistorder i64 57, { 2, 1, 0, 3, 4, 5 }
  uselistorder i64 (i64*, i64, i64, i64*, i64, i64)* @function_71b0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i64 (i64, i64)* @.Lparse_lzma12.0, { 4, 3, 2, 1, 0 }
  uselistorder i128 0, { 0, 3, 1, 2 }
  uselistorder i64 17, { 1, 4, 2, 5, 0, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i64 104, { 1, 2, 3, 5, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 6, 17, 18, 19 }
  uselistorder i64 96, { 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 6, 13, 14, 15 }
  uselistorder i64 174, { 3, 4, 5, 6, 7, 0, 1, 2, 8 }
  uselistorder i64 %arg2, { 9, 8, 6, 7, 10, 11, 5, 4, 12, 13, 0, 1, 3, 2, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24 }
  uselistorder label %dec_label_pc_a204, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_a1da, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 2, 17, 18, 19, 1, 20, 21, 22, 23, 24, 5, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 3, 4, 0, 37, 38, 39, 40 }
  uselistorder label %dec_label_pc_a13a, { 1, 2, 3, 0, 4, 5 }
  uselistorder label %dec_label_pc_a132, { 6, 3, 7, 8, 9, 10, 4, 11, 0, 12, 13, 14, 15, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2, 32, 33 }
  uselistorder label %dec_label_pc_a024, { 1, 0 }
  uselistorder label %dec_label_pc_9fab, { 1, 0 }
  uselistorder label %dec_label_pc_9caa, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9bf9, { 1, 0 }
  uselistorder label %dec_label_pc_9ac2, { 1, 0 }
  uselistorder label %dec_label_pc_99c8, { 1, 0 }
  uselistorder label %dec_label_pc_9923, { 1, 0 }
  uselistorder label %dec_label_pc_985a, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_97dc, { 1, 0 }
}

define i64 @.Llzma_index_prealloc.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_a260:
  %rax.0.reg2mem = alloca i64, !insn.addr !5724
  %merge.reg2mem = alloca i64, !insn.addr !5724
  %stack_var_-44 = alloca i32, align 4
  %0 = load i32, i32* @global_var_cb40, align 4, !insn.addr !5725
  %1 = icmp eq i32 %0, 0, !insn.addr !5726
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !5727
  br i1 %1, label %dec_label_pc_a2e1, label %dec_label_pc_a27e, !insn.addr !5727

dec_label_pc_a27e:                                ; preds = %dec_label_pc_a260
  %2 = sext i32 %0 to i64, !insn.addr !5725
  %3 = add nsw i64 %2, 8, !insn.addr !5728
  %4 = inttoptr i64 %3 to i64*, !insn.addr !5728
  %5 = load i64, i64* %4, align 8, !insn.addr !5728
  %6 = icmp eq i64 %5, 0, !insn.addr !5729
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !5730
  br i1 %6, label %dec_label_pc_a2e1, label %dec_label_pc_a287, !insn.addr !5730

dec_label_pc_a287:                                ; preds = %dec_label_pc_a27e
  %7 = inttoptr i64 %5 to i64*, !insn.addr !5731
  %8 = load i64, i64* %7, align 8, !insn.addr !5731
  %9 = icmp eq i64 %8, 0, !insn.addr !5732
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !5733
  br i1 %9, label %dec_label_pc_a2e1, label %dec_label_pc_a28f, !insn.addr !5733

dec_label_pc_a28f:                                ; preds = %dec_label_pc_a287
  %10 = icmp eq i64 %arg4, 0, !insn.addr !5734
  store i64 %8, i64* %merge.reg2mem, !insn.addr !5735
  br i1 %10, label %dec_label_pc_a2c7, label %dec_label_pc_a299, !insn.addr !5735

dec_label_pc_a299:                                ; preds = %dec_label_pc_a28f
  store i32 1, i32* %stack_var_-44, align 4, !insn.addr !5736
  %11 = bitcast i32* %stack_var_-44 to i64*, !insn.addr !5737
  %12 = call i64 @.Llzma_index_stream_size.1(i64 %arg4, i64 %2, i64* nonnull %11), !insn.addr !5737
  %13 = load i32, i32* %stack_var_-44, align 4, !insn.addr !5738
  %14 = icmp eq i32 %13, 0, !insn.addr !5738
  store i64 %8, i64* %merge.reg2mem, !insn.addr !5739
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !5739
  br i1 %14, label %dec_label_pc_a2e1, label %dec_label_pc_a2c7, !insn.addr !5739

dec_label_pc_a2c7:                                ; preds = %dec_label_pc_a2e1, %dec_label_pc_a299, %dec_label_pc_a28f
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !5740

dec_label_pc_a2e1:                                ; preds = %dec_label_pc_a260, %dec_label_pc_a27e, %dec_label_pc_a287, %dec_label_pc_a299
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  store i64 %rax.0.reload, i64* %merge.reg2mem
  br label %dec_label_pc_a2c7

; uselistorder directives
  uselistorder i64 %8, { 1, 0, 2 }
  uselistorder i32 %0, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 0 }
  uselistorder i64* %merge.reg2mem, { 1, 0, 3, 2 }
  uselistorder i64* %rax.0.reg2mem, { 0, 4, 3, 2, 1 }
  uselistorder i64 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_a2e1, { 3, 2, 1, 0 }
}

define i64 @.Llzma_index_memusage.part.0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_a2f0:
  %merge.reg2mem = alloca i64, !insn.addr !5741
  %stack_var_-28 = alloca i64, align 8
  %0 = load i32, i32* @global_var_cb40, align 4, !insn.addr !5742
  %1 = icmp eq i32 %0, 0, !insn.addr !5743
  store i64 0, i64* %merge.reg2mem, !insn.addr !5744
  br i1 %1, label %dec_label_pc_a332, label %dec_label_pc_a30b, !insn.addr !5744

dec_label_pc_a30b:                                ; preds = %dec_label_pc_a2f0
  %2 = sext i32 %0 to i64, !insn.addr !5742
  %3 = add nsw i64 %2, 8, !insn.addr !5745
  %4 = inttoptr i64 %3 to i64*, !insn.addr !5745
  %5 = load i64, i64* %4, align 8, !insn.addr !5745
  %6 = icmp eq i64 %5, 0, !insn.addr !5746
  store i64 0, i64* %merge.reg2mem, !insn.addr !5747
  br i1 %6, label %dec_label_pc_a332, label %dec_label_pc_a314, !insn.addr !5747

dec_label_pc_a314:                                ; preds = %dec_label_pc_a30b
  %7 = add i64 %5, 8, !insn.addr !5748
  %8 = inttoptr i64 %7 to i64*, !insn.addr !5748
  %9 = load i64, i64* %8, align 8, !insn.addr !5748
  %10 = icmp eq i64 %9, 0, !insn.addr !5749
  store i64 0, i64* %merge.reg2mem, !insn.addr !5750
  br i1 %10, label %dec_label_pc_a332, label %dec_label_pc_a31d, !insn.addr !5750

dec_label_pc_a31d:                                ; preds = %dec_label_pc_a314
  %11 = icmp eq i64 %arg2, 0, !insn.addr !5751
  store i64 %9, i64* %merge.reg2mem, !insn.addr !5752
  br i1 %11, label %dec_label_pc_a332, label %dec_label_pc_a325, !insn.addr !5752

dec_label_pc_a325:                                ; preds = %dec_label_pc_a31d
  %12 = call i64 @.Llzma_index_stream_size.1(i64 %arg2, i64 %2, i64* nonnull %stack_var_-28), !insn.addr !5753
  store i64 %9, i64* %merge.reg2mem, !insn.addr !5753
  br label %dec_label_pc_a332, !insn.addr !5753

dec_label_pc_a332:                                ; preds = %dec_label_pc_a2f0, %dec_label_pc_a30b, %dec_label_pc_a314, %dec_label_pc_a325, %dec_label_pc_a31d
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !5754

; uselistorder directives
  uselistorder i64 %9, { 1, 0, 2 }
  uselistorder i32 %0, { 1, 0 }
  uselistorder i64* %merge.reg2mem, { 0, 5, 4, 3, 2, 1 }
  uselistorder i64 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_a332, { 3, 4, 2, 1, 0 }
}

define i64 @.Llzma_index_init.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_a350:
  %merge.reg2mem = alloca i64, !insn.addr !5755
  %stack_var_-28 = alloca i64, align 8
  %0 = load i32, i32* @global_var_cb40, align 4, !insn.addr !5756
  %1 = icmp eq i32 %0, 0, !insn.addr !5757
  br i1 %1, label %dec_label_pc_a3a2, label %dec_label_pc_a36c, !insn.addr !5758

dec_label_pc_a36c:                                ; preds = %dec_label_pc_a350
  %2 = sext i32 %0 to i64, !insn.addr !5756
  %3 = add nsw i64 %2, 8, !insn.addr !5759
  %4 = inttoptr i64 %3 to i64*, !insn.addr !5759
  %5 = load i64, i64* %4, align 8, !insn.addr !5759
  %6 = icmp eq i64 %5, 0, !insn.addr !5760
  store i64 0, i64* %merge.reg2mem, !insn.addr !5761
  br i1 %6, label %dec_label_pc_a3a2, label %dec_label_pc_a375, !insn.addr !5761

dec_label_pc_a375:                                ; preds = %dec_label_pc_a36c
  %7 = add i64 %5, 16, !insn.addr !5762
  %8 = inttoptr i64 %7 to i64*, !insn.addr !5762
  %9 = load i64, i64* %8, align 8, !insn.addr !5762
  %10 = icmp eq i64 %9, 0, !insn.addr !5763
  store i64 %5, i64* %merge.reg2mem, !insn.addr !5764
  br i1 %10, label %dec_label_pc_a3a2, label %dec_label_pc_a37e, !insn.addr !5764

dec_label_pc_a37e:                                ; preds = %dec_label_pc_a375
  %11 = icmp eq i64 %arg1, 0, !insn.addr !5765
  store i64 %9, i64* %merge.reg2mem, !insn.addr !5766
  br i1 %11, label %dec_label_pc_a3a2, label %dec_label_pc_a386, !insn.addr !5766

dec_label_pc_a386:                                ; preds = %dec_label_pc_a37e
  %12 = call i64 @.Llzma_index_stream_size.1(i64 %arg1, i64 %2, i64* nonnull %stack_var_-28), !insn.addr !5767
  store i64 %9, i64* %merge.reg2mem, !insn.addr !5768
  br label %dec_label_pc_a3a2, !insn.addr !5768

dec_label_pc_a3a2:                                ; preds = %dec_label_pc_a350, %dec_label_pc_a36c, %dec_label_pc_a375, %dec_label_pc_a386, %dec_label_pc_a37e
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !5769

; uselistorder directives
  uselistorder i64 %9, { 1, 0, 2 }
  uselistorder i32 %0, { 1, 0 }
  uselistorder i64* %merge.reg2mem, { 0, 4, 3, 1, 2 }
  uselistorder i64 (i64, i64, i64*)* @.Llzma_index_stream_size.1, { 2, 1, 0 }
  uselistorder i64 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a3a2, { 3, 4, 2, 1, 0 }
}

define i64 @.Llzma12_mode_map.part.1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_a3c0:
  %0 = alloca i128
  %1 = alloca i64
  %rax.8.reg2mem = alloca i64, !insn.addr !5770
  %rax.7.reg2mem = alloca i64, !insn.addr !5770
  %rax.6.reg2mem = alloca i64, !insn.addr !5770
  %rax.5.reg2mem = alloca i64, !insn.addr !5770
  %rax.4.reg2mem = alloca i64, !insn.addr !5770
  %rax.3.reg2mem = alloca i64, !insn.addr !5770
  %rax.2.reg2mem = alloca i64, !insn.addr !5770
  %r15.1.reg2mem = alloca i64, !insn.addr !5770
  %r14.1.reg2mem = alloca i64, !insn.addr !5770
  %r8.1.reg2mem = alloca i64, !insn.addr !5770
  %rax.1.reg2mem = alloca i64, !insn.addr !5770
  %r15.0.reg2mem = alloca i64, !insn.addr !5770
  %r14.0.reg2mem = alloca i64, !insn.addr !5770
  %r8.0.reg2mem = alloca i64, !insn.addr !5770
  %rbp.1.reg2mem = alloca i64, !insn.addr !5770
  %rbp.019.reg2mem = alloca i64, !insn.addr !5770
  %2 = load i64, i64* %1
  %3 = load i128, i128* %0
  %stack_var_-520 = alloca i64, align 8
  %stack_var_-532 = alloca i64, align 8
  %stack_var_-547 = alloca i64, align 8
  %stack_var_-568 = alloca i128, align 8
  %4 = load i128, i128* %0
  %stack_var_-552 = alloca i64, align 8
  %stack_var_-824 = alloca i128, align 8
  %5 = load i128, i128* %0
  %stack_var_-808 = alloca i64, align 8
  %stack_var_-1080 = alloca i128, align 8
  %6 = load i128, i128* %0
  %stack_var_-1064 = alloca i64, align 8
  %7 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !5771
  %8 = load i32, i32* @global_var_cb40, align 4, !insn.addr !5772
  %9 = sext i32 %8 to i64, !insn.addr !5772
  %10 = add nsw i64 %9, 48, !insn.addr !5773
  %11 = inttoptr i64 %10 to i64*, !insn.addr !5773
  %12 = load i64, i64* %11, align 8, !insn.addr !5773
  %13 = add nsw i64 %9, 16, !insn.addr !5774
  %14 = inttoptr i64 %13 to i64*, !insn.addr !5774
  %15 = load i64, i64* %14, align 8, !insn.addr !5774
  call void @__asm_movups(i128 %6, i128 %7), !insn.addr !5775
  %16 = bitcast i64* %stack_var_-1064 to i8*, !insn.addr !5776
  call void @__asm_rep_stosd_memset(i8* nonnull %16, i32 0, i64 60), !insn.addr !5776
  call void @__asm_movups(i128 %5, i128 %7), !insn.addr !5777
  %17 = bitcast i64* %stack_var_-808 to i8*, !insn.addr !5778
  call void @__asm_rep_stosd_memset(i8* nonnull %17, i32 0, i64 60), !insn.addr !5778
  call void @__asm_movups(i128 %4, i128 %7), !insn.addr !5779
  %18 = bitcast i64* %stack_var_-552 to i8*, !insn.addr !5780
  call void @__asm_rep_stosd_memset(i8* nonnull %18, i32 0, i64 124), !insn.addr !5780
  %19 = icmp eq i64 %arg3, 0, !insn.addr !5781
  %.pre = inttoptr i64 %12 to i32*
  store i64 0, i64* %rax.7.reg2mem, !insn.addr !5782
  br i1 %19, label %dec_label_pc_a6fa, label %dec_label_pc_a437, !insn.addr !5782

dec_label_pc_a437:                                ; preds = %dec_label_pc_a3c0
  %20 = load i32, i32* %.pre, align 4, !insn.addr !5783
  %21 = icmp eq i32 %20, 1, !insn.addr !5783
  store i64 0, i64* %rax.8.reg2mem, !insn.addr !5784
  br i1 %21, label %dec_label_pc_a700, label %dec_label_pc_a440, !insn.addr !5784

dec_label_pc_a440:                                ; preds = %dec_label_pc_a437
  %22 = add nsw i64 %9, 144, !insn.addr !5785
  %23 = inttoptr i64 %22 to i32*, !insn.addr !5785
  %24 = load i32, i32* %23, align 4, !insn.addr !5785
  %25 = icmp eq i32 %24, 0, !insn.addr !5785
  %26 = icmp eq i1 %25, false, !insn.addr !5786
  store i64 0, i64* %rax.8.reg2mem, !insn.addr !5786
  br i1 %26, label %dec_label_pc_a700, label %dec_label_pc_a44d, !insn.addr !5786

dec_label_pc_a44d:                                ; preds = %dec_label_pc_a440
  %27 = add i64 %12, ptrtoint (i32** @global_var_48 to i64), !insn.addr !5787
  %28 = inttoptr i64 %27 to i64*, !insn.addr !5787
  %29 = load i64, i64* %28, align 8, !insn.addr !5787
  %30 = icmp eq i64 %29, 0, !insn.addr !5787
  br i1 %30, label %dec_label_pc_a45f, label %dec_label_pc_a454, !insn.addr !5788

dec_label_pc_a454:                                ; preds = %dec_label_pc_a44d
  %31 = add i64 %12, 80, !insn.addr !5789
  %32 = inttoptr i64 %31 to i64*, !insn.addr !5789
  %33 = load i64, i64* %32, align 8, !insn.addr !5789
  %34 = icmp eq i64 %33, 0, !insn.addr !5789
  store i64 0, i64* %rax.8.reg2mem, !insn.addr !5790
  br i1 %34, label %dec_label_pc_a700, label %dec_label_pc_a45f, !insn.addr !5790

dec_label_pc_a45f:                                ; preds = %dec_label_pc_a454, %dec_label_pc_a44d
  %35 = call i64 @function_7050(i64 %arg3), !insn.addr !5791
  %36 = add i64 %35, %arg3, !insn.addr !5792
  %37 = icmp ugt i64 %36, %arg3, !insn.addr !5793
  %38 = icmp eq i1 %37, false, !insn.addr !5794
  store i64 %35, i64* %rax.8.reg2mem, !insn.addr !5794
  br i1 %38, label %dec_label_pc_a700, label %dec_label_pc_a475.lr.ph, !insn.addr !5794

dec_label_pc_a475.lr.ph:                          ; preds = %dec_label_pc_a45f
  %39 = and i64 %arg1, 4294967295, !insn.addr !5795
  %40 = trunc i64 %36 to i32
  store i64 %arg3, i64* %rbp.019.reg2mem
  br label %dec_label_pc_a475

dec_label_pc_a475:                                ; preds = %dec_label_pc_a475.lr.ph, %dec_label_pc_a6f2
  %rbp.019.reload = load i64, i64* %rbp.019.reg2mem
  %41 = call i64 @.Lsimple_coder_update.0(i64 %rbp.019.reload, i32 %40, i64 %9, i64 0), !insn.addr !5796
  %42 = trunc i64 %41 to i32
  %43 = icmp eq i32 %42, 1936, !insn.addr !5797
  %44 = icmp eq i1 %43, false, !insn.addr !5798
  br i1 %44, label %dec_label_pc_a4f0, label %dec_label_pc_a487, !insn.addr !5798

dec_label_pc_a487:                                ; preds = %dec_label_pc_a475
  %45 = add i64 %12, 16, !insn.addr !5799
  %46 = inttoptr i64 %45 to i64*, !insn.addr !5799
  %47 = load i64, i64* %46, align 8, !insn.addr !5799
  %48 = add i64 %12, 8, !insn.addr !5800
  %49 = inttoptr i64 %48 to i32*, !insn.addr !5800
  %50 = inttoptr i64 %47 to i8*, !insn.addr !5801
  %51 = load i8, i8* %50, align 1, !insn.addr !5801
  %52 = sext i8 %51 to i128, !insn.addr !5802
  store i128 %52, i128* %stack_var_-568, align 8, !insn.addr !5802
  store i32 1, i32* %.pre, align 4, !insn.addr !5803
  %53 = call i64 @function_7420(i64 %12, i64 %39, i128* nonnull %stack_var_-568, i64 %rbp.019.reload, i64 %arg5, i64 %2), !insn.addr !5804
  %54 = load i32, i32* %49, align 4, !insn.addr !5805
  %55 = icmp eq i32 %54, 0, !insn.addr !5805
  store i64 %53, i64* %rax.6.reg2mem, !insn.addr !5806
  store i64 %53, i64* %rax.8.reg2mem, !insn.addr !5806
  br i1 %55, label %dec_label_pc_a700, label %dec_label_pc_a6de, !insn.addr !5806

dec_label_pc_a4f0:                                ; preds = %dec_label_pc_a475
  %56 = icmp ne i32 %42, 2160, !insn.addr !5807
  %57 = icmp eq i32 %42, 416, !insn.addr !5808
  %58 = icmp eq i1 %57, false, !insn.addr !5809
  %or.cond5 = icmp eq i1 %56, %58
  br i1 %or.cond5, label %dec_label_pc_a6f2, label %dec_label_pc_a502, !insn.addr !5810

dec_label_pc_a502:                                ; preds = %dec_label_pc_a4f0
  %59 = icmp eq i32 %42, 2160, !insn.addr !5811
  %60 = icmp eq i1 %59, false, !insn.addr !5812
  %spec.select.v = select i1 %60, i64 23, i64 22
  %spec.select = add i64 %spec.select.v, %rbp.019.reload
  %61 = bitcast i128* %stack_var_-1080 to i8*
  %62 = ptrtoint i128* %stack_var_-824 to i64
  %63 = inttoptr i64 %spec.select to i8*
  %64 = bitcast i128* %stack_var_-824 to i8*
  store i64 %rbp.019.reload, i64* %rbp.1.reg2mem, !insn.addr !5813
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !5813
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !5813
  store i64 0, i64* %r15.0.reg2mem, !insn.addr !5813
  br label %dec_label_pc_a524, !insn.addr !5813

dec_label_pc_a524:                                ; preds = %dec_label_pc_a5a2, %dec_label_pc_a502
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rbp.1.reload = load i64, i64* %rbp.1.reg2mem
  %65 = call i64 @.Lsimple_coder_update.0(i64 %rbp.1.reload, i32 %40, i64 %9, i64 0), !insn.addr !5814
  %66 = trunc i64 %65 to i32, !insn.addr !5815
  %67 = icmp eq i32 %66, 1656, !insn.addr !5815
  br i1 %67, label %dec_label_pc_a57d, label %dec_label_pc_a54a, !insn.addr !5816

dec_label_pc_a54a:                                ; preds = %dec_label_pc_a524
  %68 = icmp eq i32 %66, 2064, !insn.addr !5817
  %69 = icmp eq i1 %68, false, !insn.addr !5818
  store i64 %65, i64* %rax.1.reg2mem, !insn.addr !5818
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !5818
  store i64 %r14.0.reload, i64* %r14.1.reg2mem, !insn.addr !5818
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !5818
  br i1 %69, label %dec_label_pc_a5a2, label %dec_label_pc_a551, !insn.addr !5818

dec_label_pc_a551:                                ; preds = %dec_label_pc_a54a
  %70 = sub i64 %rbp.1.reload, %spec.select, !insn.addr !5819
  %71 = icmp ult i64 %70, 256
  store i64 %65, i64* %rax.7.reg2mem, !insn.addr !5820
  br i1 %71, label %dec_label_pc_a564, label %dec_label_pc_a6fa, !insn.addr !5820

dec_label_pc_a564:                                ; preds = %dec_label_pc_a551
  %72 = add i64 %rbp.1.reload, 6, !insn.addr !5821
  call void @__asm_rep_movsb_memcpy(i8* nonnull %64, i8* %63, i64 %70), !insn.addr !5822
  store i64 %62, i64* %rax.1.reg2mem, !insn.addr !5823
  store i64 %72, i64* %r8.1.reg2mem, !insn.addr !5823
  store i64 %r14.0.reload, i64* %r14.1.reg2mem, !insn.addr !5823
  store i64 %70, i64* %r15.1.reg2mem, !insn.addr !5823
  br label %dec_label_pc_a5a2, !insn.addr !5823

dec_label_pc_a57d:                                ; preds = %dec_label_pc_a524
  %73 = icmp eq i64 %r8.0.reload, 0, !insn.addr !5824
  store i64 %65, i64* %rax.1.reg2mem, !insn.addr !5825
  store i64 0, i64* %r8.1.reg2mem, !insn.addr !5825
  store i64 %r14.0.reload, i64* %r14.1.reg2mem, !insn.addr !5825
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !5825
  br i1 %73, label %dec_label_pc_a5a2, label %dec_label_pc_a582, !insn.addr !5825

dec_label_pc_a582:                                ; preds = %dec_label_pc_a57d
  %74 = sub i64 %rbp.1.reload, %r8.0.reload, !insn.addr !5826
  %75 = icmp ult i64 %74, 256
  store i64 %65, i64* %rax.7.reg2mem, !insn.addr !5827
  br i1 %75, label %dec_label_pc_a595, label %dec_label_pc_a6fa, !insn.addr !5827

dec_label_pc_a595:                                ; preds = %dec_label_pc_a582
  %76 = inttoptr i64 %r8.0.reload to i8*, !insn.addr !5828
  call void @__asm_rep_movsb_memcpy(i8* nonnull %61, i8* %76, i64 %74), !insn.addr !5828
  store i64 %65, i64* %rax.1.reg2mem, !insn.addr !5828
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !5828
  store i64 %74, i64* %r14.1.reg2mem, !insn.addr !5828
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !5828
  br label %dec_label_pc_a5a2, !insn.addr !5828

dec_label_pc_a5a2:                                ; preds = %dec_label_pc_a595, %dec_label_pc_a57d, %dec_label_pc_a564, %dec_label_pc_a54a
  %r15.1.reload = load i64, i64* %r15.1.reg2mem
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %77 = add i64 %rbp.1.reload, 1, !insn.addr !5829
  %78 = icmp ult i64 %77, %36, !insn.addr !5830
  store i64 %77, i64* %rbp.1.reg2mem, !insn.addr !5831
  store i64 %r8.1.reload, i64* %r8.0.reg2mem, !insn.addr !5831
  store i64 %r14.1.reload, i64* %r14.0.reg2mem, !insn.addr !5831
  store i64 %r15.1.reload, i64* %r15.0.reg2mem, !insn.addr !5831
  br i1 %78, label %dec_label_pc_a524, label %dec_label_pc_a5ae, !insn.addr !5831

dec_label_pc_a5ae:                                ; preds = %dec_label_pc_a5a2
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %79 = icmp eq i64 %r15.1.reload, 0, !insn.addr !5832
  %80 = icmp eq i64 %r14.1.reload, 0, !insn.addr !5833
  %or.cond = or i1 %80, %79
  store i64 %rax.1.reload, i64* %rax.7.reg2mem, !insn.addr !5834
  br i1 %or.cond, label %dec_label_pc_a6fa, label %dec_label_pc_a5c0, !insn.addr !5834

dec_label_pc_a5c0:                                ; preds = %dec_label_pc_a5ae
  %81 = add i64 %12, 24, !insn.addr !5835
  %82 = inttoptr i64 %81 to i64*, !insn.addr !5835
  %83 = load i64, i64* %82, align 8, !insn.addr !5835
  %84 = ptrtoint i128* %stack_var_-568 to i64, !insn.addr !5836
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !5836
  br label %dec_label_pc_a5ce, !insn.addr !5836

dec_label_pc_a5ce:                                ; preds = %dec_label_pc_a5ce, %dec_label_pc_a5c0
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %85 = add i64 %rax.2.reload, %83, !insn.addr !5837
  %86 = inttoptr i64 %85 to i8*, !insn.addr !5837
  %87 = load i8, i8* %86, align 1, !insn.addr !5837
  %88 = add nuw nsw i64 %rax.2.reload, 1, !insn.addr !5838
  %89 = add i64 %rax.2.reload, %84, !insn.addr !5839
  %90 = inttoptr i64 %89 to i8*, !insn.addr !5839
  store i8 %87, i8* %90, align 1, !insn.addr !5839
  %exitcond32 = icmp eq i64 %88, 21
  store i64 %88, i64* %rax.2.reg2mem, !insn.addr !5840
  br i1 %exitcond32, label %dec_label_pc_a5df, label %dec_label_pc_a5ce, !insn.addr !5840

dec_label_pc_a5df:                                ; preds = %dec_label_pc_a5ce
  %91 = add i64 %12, 40, !insn.addr !5841
  %92 = inttoptr i64 %91 to i64*, !insn.addr !5841
  %93 = load i64, i64* %92, align 8, !insn.addr !5841
  %94 = ptrtoint i64* %stack_var_-547 to i64, !insn.addr !5842
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !5842
  br label %dec_label_pc_a5ed, !insn.addr !5842

dec_label_pc_a5ed:                                ; preds = %dec_label_pc_a5ed, %dec_label_pc_a5df
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %95 = add i64 %rax.3.reload, %93, !insn.addr !5843
  %96 = inttoptr i64 %95 to i8*, !insn.addr !5843
  %97 = load i8, i8* %96, align 1, !insn.addr !5843
  %98 = add i64 %rax.3.reload, %94, !insn.addr !5844
  %99 = inttoptr i64 %98 to i8*, !insn.addr !5844
  store i8 %97, i8* %99, align 1, !insn.addr !5844
  %100 = add nuw nsw i64 %rax.3.reload, 1, !insn.addr !5845
  %exitcond31 = icmp eq i64 %100, 14
  store i64 %100, i64* %rax.3.reg2mem, !insn.addr !5846
  br i1 %exitcond31, label %dec_label_pc_a5fc, label %dec_label_pc_a5ed, !insn.addr !5846

dec_label_pc_a5fc:                                ; preds = %dec_label_pc_a5ed
  %101 = add i64 %12, 48, !insn.addr !5847
  %102 = inttoptr i64 %101 to i64*, !insn.addr !5847
  %103 = load i64, i64* %102, align 8, !insn.addr !5847
  %104 = ptrtoint i64* %stack_var_-532 to i64, !insn.addr !5848
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !5848
  br label %dec_label_pc_a612, !insn.addr !5848

dec_label_pc_a612:                                ; preds = %dec_label_pc_a612, %dec_label_pc_a5fc
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %105 = add i64 %rax.4.reload, %103, !insn.addr !5849
  %106 = inttoptr i64 %105 to i8*, !insn.addr !5849
  %107 = load i8, i8* %106, align 1, !insn.addr !5849
  %108 = add nuw nsw i64 %rax.4.reload, %104, !insn.addr !5850
  %109 = inttoptr i64 %108 to i8*, !insn.addr !5850
  store i8 %107, i8* %109, align 1, !insn.addr !5850
  %110 = add nuw nsw i64 %rax.4.reload, 1, !insn.addr !5851
  %exitcond30 = icmp eq i64 %110, 4
  store i64 %110, i64* %rax.4.reg2mem, !insn.addr !5852
  br i1 %exitcond30, label %dec_label_pc_a621, label %dec_label_pc_a612, !insn.addr !5852

dec_label_pc_a621:                                ; preds = %dec_label_pc_a612
  %111 = ptrtoint i64* %stack_var_-520 to i64, !insn.addr !5853
  %112 = add i64 %12, 32, !insn.addr !5854
  %113 = inttoptr i64 %112 to i64*, !insn.addr !5854
  %114 = load i64, i64* %113, align 8, !insn.addr !5854
  store i64 0, i64* %rax.5.reg2mem, !insn.addr !5855
  br label %dec_label_pc_a677, !insn.addr !5855

dec_label_pc_a677:                                ; preds = %dec_label_pc_a677, %dec_label_pc_a621
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %115 = add i64 %rax.5.reload, %114, !insn.addr !5856
  %116 = inttoptr i64 %115 to i8*, !insn.addr !5856
  %117 = load i8, i8* %116, align 1, !insn.addr !5856
  %118 = add nuw nsw i64 %rax.5.reload, %111, !insn.addr !5857
  %119 = inttoptr i64 %118 to i8*, !insn.addr !5857
  store i8 %117, i8* %119, align 1, !insn.addr !5857
  %120 = add nuw nsw i64 %rax.5.reload, 1, !insn.addr !5858
  %exitcond = icmp eq i64 %120, 7
  store i64 %120, i64* %rax.5.reg2mem, !insn.addr !5859
  br i1 %exitcond, label %dec_label_pc_a686, label %dec_label_pc_a677, !insn.addr !5859

dec_label_pc_a686:                                ; preds = %dec_label_pc_a677
  %121 = add i64 %12, 8, !insn.addr !5860
  %122 = inttoptr i64 %121 to i32*, !insn.addr !5860
  store i32 1, i32* %.pre, align 4, !insn.addr !5861
  %123 = ptrtoint i128* %stack_var_-1080 to i64, !insn.addr !5862
  %124 = call i64 @function_7420(i64 %12, i64 3, i128* nonnull %stack_var_-568, i64 %62, i64 %123, i64 %spec.select), !insn.addr !5863
  %125 = load i32, i32* %122, align 4, !insn.addr !5864
  %126 = icmp eq i32 %125, 0, !insn.addr !5864
  store i64 %124, i64* %rax.6.reg2mem, !insn.addr !5865
  store i64 %124, i64* %rax.8.reg2mem, !insn.addr !5865
  br i1 %126, label %dec_label_pc_a700, label %dec_label_pc_a6de, !insn.addr !5865

dec_label_pc_a6de:                                ; preds = %dec_label_pc_a686, %dec_label_pc_a487
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %storemerge.in.in.in.in = icmp eq i64 %15, 0
  %storemerge.in.in.in = icmp eq i1 %storemerge.in.in.in.in, false
  %storemerge = icmp eq i1 %storemerge.in.in.in, false
  store i64 %rax.6.reload, i64* %rax.8.reg2mem, !insn.addr !5866
  br i1 %storemerge, label %dec_label_pc_a700, label %dec_label_pc_a6e0, !insn.addr !5866

dec_label_pc_a6e0:                                ; preds = %dec_label_pc_a6de
  %127 = add i64 %15, 88, !insn.addr !5867
  %128 = inttoptr i64 %127 to i64*, !insn.addr !5867
  %129 = load i64, i64* %128, align 8, !insn.addr !5867
  store i64 %129, i64* %rax.8.reg2mem
  br label %dec_label_pc_a700

dec_label_pc_a6f2:                                ; preds = %dec_label_pc_a4f0
  %130 = add i64 %rbp.019.reload, 1, !insn.addr !5868
  %131 = icmp ult i64 %130, %36, !insn.addr !5793
  %132 = icmp eq i1 %131, false, !insn.addr !5794
  store i64 %130, i64* %rbp.019.reg2mem, !insn.addr !5794
  store i64 %41, i64* %rax.8.reg2mem, !insn.addr !5794
  br i1 %132, label %dec_label_pc_a700, label %dec_label_pc_a475, !insn.addr !5794

dec_label_pc_a6fa:                                ; preds = %dec_label_pc_a582, %dec_label_pc_a551, %dec_label_pc_a3c0, %dec_label_pc_a5ae
  %rax.7.reload = load i64, i64* %rax.7.reg2mem
  store i32 1, i32* %.pre, align 4, !insn.addr !5869
  store i64 %rax.7.reload, i64* %rax.8.reg2mem, !insn.addr !5869
  br label %dec_label_pc_a700, !insn.addr !5869

dec_label_pc_a700:                                ; preds = %dec_label_pc_a6f2, %dec_label_pc_a45f, %dec_label_pc_a6e0, %dec_label_pc_a6fa, %dec_label_pc_a6de, %dec_label_pc_a686, %dec_label_pc_a487, %dec_label_pc_a454, %dec_label_pc_a440, %dec_label_pc_a437
  %rax.8.reload = load i64, i64* %rax.8.reg2mem
  ret i64 %rax.8.reload, !insn.addr !5870

; uselistorder directives
  uselistorder i64 %rax.5.reload, { 0, 2, 1 }
  uselistorder i64 %rax.4.reload, { 0, 2, 1 }
  uselistorder i64 %rax.3.reload, { 0, 2, 1 }
  uselistorder i64 %rax.2.reload, { 2, 0, 1 }
  uselistorder i64 %65, { 3, 0, 4, 1, 2, 5 }
  uselistorder i64 %rbp.1.reload, { 1, 2, 4, 3, 0 }
  uselistorder i64 %r8.0.reload, { 1, 4, 2, 3, 0 }
  uselistorder i64 %r14.0.reload, { 2, 0, 1 }
  uselistorder i64 %r15.0.reload, { 1, 2, 0 }
  uselistorder i64 %62, { 1, 0 }
  uselistorder i64 %rbp.019.reload, { 1, 0, 4, 3, 2 }
  uselistorder i64 %36, { 2, 1, 3, 0 }
  uselistorder i32* %.pre, { 0, 2, 3, 1 }
  uselistorder i64 %15, { 1, 0 }
  uselistorder i64 %12, { 4, 5, 6, 7, 8, 9, 1, 2, 3, 11, 10, 0 }
  uselistorder i128 %7, { 2, 1, 0 }
  uselistorder i128* %stack_var_-1080, { 1, 0 }
  uselistorder i128* %stack_var_-568, { 0, 2, 1, 3 }
  uselistorder i64* %rbp.019.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbp.1.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r8.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r14.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r15.0.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.1.reg2mem, { 0, 3, 4, 1, 2 }
  uselistorder i64* %r8.1.reg2mem, { 0, 3, 4, 1, 2 }
  uselistorder i64* %r14.1.reg2mem, { 0, 3, 4, 1, 2 }
  uselistorder i64* %r15.1.reg2mem, { 0, 3, 4, 1, 2 }
  uselistorder i64* %rax.2.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.3.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.4.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.5.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.7.reg2mem, { 0, 4, 1, 2, 3 }
  uselistorder i64* %rax.8.reg2mem, { 0, 10, 1, 5, 6, 7, 4, 2, 3, 8, 9 }
  uselistorder i128* %0, { 3, 2, 1, 0 }
  uselistorder i64 88, { 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 6, 13, 17, 0, 18 }
  uselistorder i64 3, { 10, 7, 8, 13, 0, 11, 6, 1, 12, 14, 15, 2, 5, 4, 16, 3, 9 }
  uselistorder i64 7, { 0, 4, 3, 5, 6, 7, 8, 9, 1, 10, 2, 11 }
  uselistorder i64 24, { 5, 6, 7, 0, 8, 9, 10, 11, 12, 1, 2, 3, 4 }
  uselistorder i64 6, { 13, 3, 4, 5, 7, 6, 8, 0, 9, 1, 10, 11, 14, 15, 16, 12, 2, 17 }
  uselistorder i64 256, { 8, 9, 0, 1, 11, 12, 13, 14, 5, 15, 16, 17, 18, 19, 10, 2, 3, 6, 7, 4 }
  uselistorder i64 (i64, i64, i128*, i64, i64, i64)* @function_7420, { 1, 0 }
  uselistorder i64 (i64, i32, i64, i64)* @.Lsimple_coder_update.0, { 10, 9, 8, 7, 6, 5, 4, 11, 3, 2, 1, 0 }
  uselistorder i64 80, { 1, 2, 4, 5, 6, 7, 8, 9, 3, 11, 12, 13, 14, 15, 16, 17, 0, 18, 19, 20, 21, 10, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32** @global_var_48, { 1, 2, 0 }
  uselistorder i64 ptrtoint (i32** @global_var_48 to i64), { 32, 31, 30, 29, 28, 27, 26, 0, 25, 1, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i64 60, { 0, 1, 2, 5, 3, 4 }
  uselistorder void (i128, i128)* @__asm_movups, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 10, 11, 8, 9 }
  uselistorder i128 (i128, i128)* @__asm_xorps, { 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 6, 7, 4, 5 }
  uselistorder i64 %arg3, { 0, 2, 1, 3, 4 }
  uselistorder label %dec_label_pc_a700, { 3, 0, 2, 4, 5, 6, 1, 7, 8, 9 }
  uselistorder label %dec_label_pc_a6fa, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_a475, { 1, 0 }
}

define i64 @_cpuid(i64 %arg1, i64* %arg2, i64* %arg3, i64* %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_a720:
  %0 = trunc i64 %arg1 to i32, !insn.addr !5871
  %1 = call %4 @__asm_cpuid.5(i32 %0), !insn.addr !5872
  %2 = extractvalue %4 %1, 0, !insn.addr !5872
  %3 = zext i32 %2 to i64, !insn.addr !5872
  %4 = extractvalue %4 %1, 1, !insn.addr !5872
  %5 = extractvalue %4 %1, 2, !insn.addr !5872
  %6 = extractvalue %4 %1, 3, !insn.addr !5872
  %7 = bitcast i64* %arg2 to i32*, !insn.addr !5873
  store i32 %2, i32* %7, align 4, !insn.addr !5873
  %8 = bitcast i64* %arg3 to i32*, !insn.addr !5874
  store i32 %4, i32* %8, align 4, !insn.addr !5874
  %9 = bitcast i64* %arg4 to i32*, !insn.addr !5875
  store i32 %5, i32* %9, align 4, !insn.addr !5875
  %10 = inttoptr i64 %arg5 to i32*, !insn.addr !5876
  store i32 %6, i32* %10, align 4, !insn.addr !5876
  ret i64 %3, !insn.addr !5877
}

define i64 @function_a740(i32 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_a740:
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-80 = alloca i64, align 8
  %stack_var_-76 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %0 = load i32, i32* @global_var_cb40, align 4, !insn.addr !5878
  %1 = icmp eq i32 %0, 1, !insn.addr !5878
  %2 = icmp eq i1 %1, false, !insn.addr !5879
  br i1 %2, label %dec_label_pc_a791, label %dec_label_pc_a75b, !insn.addr !5879

dec_label_pc_a75b:                                ; preds = %dec_label_pc_a740
  store i64 1, i64* %stack_var_-72, align 8, !insn.addr !5880
  %3 = call i64 @.Llzma_block_param_encoder.0(i64* nonnull %stack_var_-72), !insn.addr !5881
  br label %dec_label_pc_a791, !insn.addr !5882

dec_label_pc_a791:                                ; preds = %dec_label_pc_a75b, %dec_label_pc_a740
  %4 = zext i32 %arg1 to i64, !insn.addr !5883
  %5 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !5884
  store i32 ptrtoint (i64* @global_var_cb41 to i32), i32* @global_var_cb40, align 4, !insn.addr !5885
  %6 = bitcast i32* %stack_var_-84 to i64*, !insn.addr !5886
  %7 = call i64 @_cpuid(i64 %4, i64* nonnull %6, i64* nonnull %stack_var_-80, i64* nonnull %stack_var_-76, i64 %5), !insn.addr !5886
  %8 = load i32, i32* %stack_var_-84, align 4, !insn.addr !5887
  %9 = zext i32 %8 to i64, !insn.addr !5887
  ret i64 %9, !insn.addr !5888

; uselistorder directives
  uselistorder i64* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* @global_var_cb40, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
}

define i64 @.Llzma_block_param_encoder.0(i64* %arg1) local_unnamed_addr {
dec_label_pc_a7b4:
  %rax.0.reg2mem = alloca i64, !insn.addr !5889
  %0 = ptrtoint i64* %arg1 to i64
  %1 = add i64 %0, 32, !insn.addr !5890
  %2 = inttoptr i64 %1 to i64*, !insn.addr !5890
  store i64 %0, i64* %2, align 8, !insn.addr !5890
  %3 = call i64 @.Llzma_delta_props_decoder(i64 %0), !insn.addr !5891
  %4 = load i64, i64* inttoptr (i64 42968 to i64*), align 8, !insn.addr !5892
  %5 = add i64 %0, 16, !insn.addr !5893
  %6 = inttoptr i64 %5 to i64*, !insn.addr !5893
  %7 = load i64, i64* %6, align 8, !insn.addr !5893
  %8 = add i64 %0, 40, !insn.addr !5894
  %9 = inttoptr i64 %8 to i64*, !insn.addr !5894
  store i64 %7, i64* %9, align 8, !insn.addr !5894
  %10 = load i64, i64* %2, align 8, !insn.addr !5895
  %11 = sub i64 %0, %10, !insn.addr !5895
  %12 = add i64 %0, 8, !insn.addr !5896
  %13 = inttoptr i64 %12 to i64*, !insn.addr !5896
  store i64 %11, i64* %13, align 8, !insn.addr !5896
  %14 = add i64 %4, 8, !insn.addr !5897
  %15 = inttoptr i64 %14 to i64*, !insn.addr !5897
  %16 = load i64, i64* %15, align 8, !insn.addr !5897
  %17 = add i64 %16, %11, !insn.addr !5897
  %18 = icmp eq i64 %17, 0, !insn.addr !5897
  store i64 %17, i64* %6, align 8, !insn.addr !5898
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !5899
  br i1 %18, label %dec_label_pc_a815, label %dec_label_pc_a7f8, !insn.addr !5899

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a7b4
  %19 = inttoptr i64 %17 to i64*, !insn.addr !5900
  %20 = load i64, i64* %19, align 8, !insn.addr !5900
  %21 = add i64 %4, 16, !insn.addr !5901
  %22 = inttoptr i64 %21 to i64*, !insn.addr !5901
  %23 = load i64, i64* %22, align 8, !insn.addr !5901
  %24 = add i64 %23, %11, !insn.addr !5901
  store i64 %24, i64* %19, align 8, !insn.addr !5902
  %25 = call i64 @unknown_22894c0824548b48(), !insn.addr !5903
  store i64 %20, i64* %19, align 8, !insn.addr !5904
  store i64 %25, i64* %rax.0.reg2mem, !insn.addr !5904
  br label %dec_label_pc_a815, !insn.addr !5904

dec_label_pc_a815:                                ; preds = %dec_label_pc_a7f8, %dec_label_pc_a7b4
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !5905

; uselistorder directives
  uselistorder i64 %11, { 1, 0, 2, 3 }
  uselistorder i64 %0, { 3, 0, 2, 1, 6, 4, 5 }
}

define i64 @_get_cpuid(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_a820:
  %storemerge.reg2mem = alloca i64, !insn.addr !5906
  %0 = trunc i64 %arg1 to i32, !insn.addr !5907
  %1 = and i32 %0, -2147483648, !insn.addr !5907
  %2 = call i64 @function_a740(i32 %1, i64 %arg6, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6), !insn.addr !5908
  %3 = trunc i64 %2 to i32, !insn.addr !5909
  %4 = icmp eq i32 %3, 0, !insn.addr !5909
  %5 = icmp ult i32 %3, %0, !insn.addr !5910
  %or.cond = or i1 %4, %5
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5911
  br i1 %or.cond, label %dec_label_pc_a879, label %dec_label_pc_a854, !insn.addr !5911

dec_label_pc_a854:                                ; preds = %dec_label_pc_a820
  %6 = and i64 %arg1, 4294967295, !insn.addr !5912
  %7 = inttoptr i64 %arg2 to i64*, !insn.addr !5913
  %8 = inttoptr i64 %arg3 to i64*, !insn.addr !5913
  %9 = inttoptr i64 %arg4 to i64*, !insn.addr !5913
  %10 = call i64 @_cpuid(i64 %6, i64* %7, i64* %8, i64* %9, i64 %arg5), !insn.addr !5913
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !5914
  br label %dec_label_pc_a879, !insn.addr !5914

dec_label_pc_a879:                                ; preds = %dec_label_pc_a820, %dec_label_pc_a854
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5915

; uselistorder directives
  uselistorder i64* %storemerge.reg2mem, { 0, 2, 1 }
  uselistorder i64 %arg6, { 1, 0 }
  uselistorder label %dec_label_pc_a879, { 1, 0 }
}

define i64 @.Llz_stream_decode() local_unnamed_addr {
dec_label_pc_a880:
  %0 = alloca i64
  %rax.0.lcssa.reg2mem = alloca i64, !insn.addr !5916
  %rax.01.reg2mem = alloca i64, !insn.addr !5916
  %rdi.02.reg2mem = alloca i64, !insn.addr !5916
  %1 = load i64, i64* %0
  %2 = icmp eq i64 %1, 0, !insn.addr !5917
  store i64 0, i64* %rax.01.reg2mem, !insn.addr !5918
  store i64 0, i64* %rax.0.lcssa.reg2mem, !insn.addr !5918
  br i1 %2, label %dec_label_pc_a896, label %dec_label_pc_a88b, !insn.addr !5918

dec_label_pc_a88b:                                ; preds = %dec_label_pc_a880, %dec_label_pc_a88b
  %rax.01.reload = load i64, i64* %rax.01.reg2mem
  %rdi.02.reload = load i64, i64* %rdi.02.reg2mem
  %3 = add i64 %rdi.02.reload, -1, !insn.addr !5919
  %4 = add nuw nsw i64 %rax.01.reload, 1, !insn.addr !5920
  %5 = and i64 %4, 4294967295, !insn.addr !5920
  %6 = and i64 %3, %rdi.02.reload, !insn.addr !5921
  %7 = icmp eq i64 %6, 0, !insn.addr !5917
  store i64 %6, i64* %rdi.02.reg2mem, !insn.addr !5918
  store i64 %5, i64* %rax.01.reg2mem, !insn.addr !5918
  store i64 %5, i64* %rax.0.lcssa.reg2mem, !insn.addr !5918
  br i1 %7, label %dec_label_pc_a896, label %dec_label_pc_a88b, !insn.addr !5918

dec_label_pc_a896:                                ; preds = %dec_label_pc_a88b, %dec_label_pc_a880
  %rax.0.lcssa.reload = load i64, i64* %rax.0.lcssa.reg2mem
  ret i64 %rax.0.lcssa.reload, !insn.addr !5922

; uselistorder directives
  uselistorder i64 %rdi.02.reload, { 1, 0 }
  uselistorder i64* %rdi.02.reg2mem, { 1, 0 }
  uselistorder i64* %rax.01.reg2mem, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a88b, { 1, 0 }
}

define i64 @.Lsimple_coder_update.0(i64 %arg1, i32 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_a8a0:
  %0 = alloca i64
  %rax.4.reg2mem = alloca i64, !insn.addr !5923
  %rax.2.lcssa.reg2mem = alloca i64, !insn.addr !5923
  %rax.23.reg2mem = alloca i64, !insn.addr !5923
  %r10.14.reg2mem = alloca i64, !insn.addr !5923
  %r10.0.reg2mem = alloca i64, !insn.addr !5923
  %rcx.1.reg2mem = alloca i64, !insn.addr !5923
  %rax.1.reg2mem = alloca i64, !insn.addr !5923
  %rdx.06.reg2mem = alloca i64, !insn.addr !5923
  %rbx.07.reg2mem = alloca i64, !insn.addr !5923
  %r9.08.reg2mem = alloca i64, !insn.addr !5923
  %storemerge9.reg2mem = alloca i64, !insn.addr !5923
  %1 = load i64, i64* %0
  %2 = call i64 @.Llzma2_decoder_end.1(i32 0, i64 10, i64 8, i64 1, i64 %1, i64 %arg4), !insn.addr !5924
  %3 = trunc i64 %2 to i32, !insn.addr !5925
  %4 = icmp eq i32 %3, 0, !insn.addr !5925
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !5926
  br i1 %4, label %dec_label_pc_a9a1, label %dec_label_pc_a8cf, !insn.addr !5926

dec_label_pc_a8cf:                                ; preds = %dec_label_pc_a8a0
  %5 = sext i32 %arg2 to i64
  %6 = add i64 %arg1, 44, !insn.addr !5927
  %7 = icmp eq i32 %arg2, 0, !insn.addr !5928
  %8 = icmp ugt i64 %6, %5
  %9 = select i1 %8, i64 %5, i64 %6
  %r8.0 = select i1 %7, i64 %6, i64 %9
  %10 = icmp ult i64 %r8.0, %arg1, !insn.addr !5929
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !5930
  br i1 %10, label %dec_label_pc_a9a1, label %dec_label_pc_a904.lr.ph, !insn.addr !5930

dec_label_pc_a904.lr.ph:                          ; preds = %dec_label_pc_a8cf
  %11 = load i64, i64* inttoptr (i64 43252 to i64*), align 8, !insn.addr !5931
  %12 = add i64 %11, 1888, !insn.addr !5932
  %13 = load i64, i64* inttoptr (i64 43238 to i64*), align 8, !insn.addr !5933
  %14 = add i64 %13, 5096, !insn.addr !5934
  %15 = and i64 %2, 4294967295, !insn.addr !5935
  store i64 %12, i64* %storemerge9.reg2mem
  store i64 %14, i64* %r9.08.reg2mem
  store i64 %arg1, i64* %rbx.07.reg2mem
  store i64 %15, i64* %rdx.06.reg2mem
  br label %dec_label_pc_a904

dec_label_pc_a904:                                ; preds = %dec_label_pc_a904.lr.ph, %dec_label_pc_a968
  %rbx.07.reload = load i64, i64* %rbx.07.reg2mem
  %16 = inttoptr i64 %rbx.07.reload to i8*, !insn.addr !5936
  %17 = load i8, i8* %16, align 1, !insn.addr !5936
  %18 = icmp slt i8 %17, 0, !insn.addr !5937
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !5938
  br i1 %18, label %dec_label_pc_a9a1, label %dec_label_pc_a90e, !insn.addr !5938

dec_label_pc_a90e:                                ; preds = %dec_label_pc_a904
  %rdx.06.reload = load i64, i64* %rdx.06.reg2mem
  %r9.08.reload = load i64, i64* %r9.08.reg2mem
  %storemerge9.reload = load i64, i64* %storemerge9.reg2mem
  %19 = zext i8 %17 to i64, !insn.addr !5936
  %20 = icmp ult i8 %17, 64
  br i1 %20, label %dec_label_pc_a913, label %dec_label_pc_a927, !insn.addr !5939

dec_label_pc_a913:                                ; preds = %dec_label_pc_a90e
  %21 = inttoptr i64 %storemerge9.reload to i64*, !insn.addr !5940
  %22 = load i64, i64* %21, align 8, !insn.addr !5940
  %23 = urem i64 %19, 64, !insn.addr !5941
  %24 = shl i64 1, %23
  %25 = and i64 %22, %24
  %26 = icmp eq i64 %25, 0, !insn.addr !5942
  %27 = icmp eq i1 %26, false, !insn.addr !5943
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !5943
  store i64 %19, i64* %rcx.1.reg2mem, !insn.addr !5943
  store i64 %22, i64* %r10.0.reg2mem, !insn.addr !5943
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !5943
  br i1 %27, label %dec_label_pc_a940, label %dec_label_pc_a9a1, !insn.addr !5943

dec_label_pc_a927:                                ; preds = %dec_label_pc_a90e
  %28 = add i64 %storemerge9.reload, 8, !insn.addr !5944
  %29 = inttoptr i64 %28 to i64*, !insn.addr !5944
  %30 = load i64, i64* %29, align 8, !insn.addr !5944
  %31 = urem i8 %17, 64
  %32 = zext i8 %31 to i64, !insn.addr !5945
  %33 = shl i64 1, %32
  %34 = and i64 %30, %33
  %35 = icmp eq i64 %34, 0, !insn.addr !5946
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !5947
  br i1 %35, label %dec_label_pc_a9a1, label %dec_label_pc_a938, !insn.addr !5947

dec_label_pc_a938:                                ; preds = %dec_label_pc_a927
  %36 = add nuw nsw i64 %19, 4294967232, !insn.addr !5948
  %37 = and i64 %36, 4294967295, !insn.addr !5948
  %38 = call i64 @.Llz_stream_decode(), !insn.addr !5949
  store i64 %38, i64* %rax.1.reg2mem, !insn.addr !5949
  store i64 %37, i64* %rcx.1.reg2mem, !insn.addr !5949
  store i64 %30, i64* %r10.0.reg2mem, !insn.addr !5949
  br label %dec_label_pc_a940, !insn.addr !5949

dec_label_pc_a940:                                ; preds = %dec_label_pc_a938, %dec_label_pc_a913
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %39 = call i64 @llvm.cttz.i64(i64 %r10.0.reload, i1 true), !range !5950, !insn.addr !5951
  %40 = icmp eq i64 %r10.0.reload, 0, !insn.addr !5951
  %41 = select i1 %40, i64 %rdx.06.reload, i64 %39, !insn.addr !5951
  %42 = trunc i64 %41 to i32, !insn.addr !5952
  %43 = trunc i64 %rcx.1.reload to i32
  %44 = urem i32 %43, 256, !insn.addr !5952
  %45 = icmp eq i32 %44, %42, !insn.addr !5952
  store i64 %r10.0.reload, i64* %r10.14.reg2mem, !insn.addr !5953
  store i64 %rax.1.reload, i64* %rax.23.reg2mem, !insn.addr !5953
  store i64 %rax.1.reload, i64* %rax.2.lcssa.reg2mem, !insn.addr !5953
  br i1 %45, label %dec_label_pc_a956, label %dec_label_pc_a94b, !insn.addr !5953

dec_label_pc_a94b:                                ; preds = %dec_label_pc_a940, %dec_label_pc_a94b
  %rax.23.reload = load i64, i64* %rax.23.reg2mem
  %r10.14.reload = load i64, i64* %r10.14.reg2mem
  %46 = add i64 %r10.14.reload, -1, !insn.addr !5954
  %47 = add i64 %rax.23.reload, 1, !insn.addr !5955
  %48 = and i64 %47, 4294967295, !insn.addr !5955
  %49 = and i64 %46, %r10.14.reload, !insn.addr !5956
  %50 = call i64 @llvm.cttz.i64(i64 %49, i1 true), !range !5950, !insn.addr !5951
  %51 = icmp eq i64 %49, 0, !insn.addr !5951
  %52 = select i1 %51, i64 %46, i64 %50, !insn.addr !5951
  %53 = trunc i64 %52 to i32, !insn.addr !5952
  %54 = icmp eq i32 %44, %53, !insn.addr !5952
  store i64 %49, i64* %r10.14.reg2mem, !insn.addr !5953
  store i64 %48, i64* %rax.23.reg2mem, !insn.addr !5953
  store i64 %48, i64* %rax.2.lcssa.reg2mem, !insn.addr !5953
  br i1 %54, label %dec_label_pc_a956, label %dec_label_pc_a94b, !insn.addr !5953

dec_label_pc_a956:                                ; preds = %dec_label_pc_a94b, %dec_label_pc_a940
  %rax.2.lcssa.reload = load i64, i64* %rax.2.lcssa.reg2mem
  %55 = mul i64 %rax.2.lcssa.reload, 4, !insn.addr !5957
  %56 = and i64 %55, 17179869180, !insn.addr !5958
  %57 = add i64 %56, %r9.08.reload, !insn.addr !5958
  %58 = inttoptr i64 %57 to i16*, !insn.addr !5959
  %59 = load i16, i16* %58, align 2, !insn.addr !5959
  %60 = add i64 %57, 2, !insn.addr !5960
  %61 = inttoptr i64 %60 to i16*, !insn.addr !5960
  %62 = load i16, i16* %61, align 2, !insn.addr !5960
  %63 = sext i16 %62 to i64, !insn.addr !5960
  %64 = and i16 %59, 4
  %65 = icmp eq i16 %64, 0, !insn.addr !5961
  %66 = icmp eq i1 %65, false, !insn.addr !5962
  store i64 %63, i64* %rax.4.reg2mem, !insn.addr !5962
  br i1 %66, label %dec_label_pc_a9a1, label %dec_label_pc_a968, !insn.addr !5962

dec_label_pc_a968:                                ; preds = %dec_label_pc_a956
  %67 = zext i16 %59 to i64, !insn.addr !5959
  %68 = and i64 %67, 2
  %69 = icmp eq i64 %68, 0, !insn.addr !5963
  %70 = sub nsw i64 0, %63
  %71 = and i64 %67, 65533
  %rax.3 = select i1 %69, i64 %70, i64 %63
  %rcx.2 = select i1 %69, i64 %67, i64 %71
  %72 = sub nsw i64 0, %rcx.2, !insn.addr !5964
  %73 = and i64 %rcx.2, 65534, !insn.addr !5965
  %74 = urem i64 %rcx.2, 2
  %75 = icmp eq i64 %74, 0, !insn.addr !5966
  %76 = select i1 %75, i64 %72, i64 %73, !insn.addr !5967
  %77 = add i64 %rbx.07.reload, 1, !insn.addr !5968
  %78 = mul i64 %rax.3, 281474976710656, !insn.addr !5969
  %sext = add i64 %78, -1125899906842624
  %79 = ashr exact i64 %sext, 48, !insn.addr !5970
  %80 = add i64 %79, %r9.08.reload, !insn.addr !5971
  %81 = mul i64 %76, 281474976710656, !insn.addr !5972
  %sext1 = add i64 %81, -4503599627370496
  %82 = ashr exact i64 %sext1, 48, !insn.addr !5973
  %83 = add i64 %82, %storemerge9.reload, !insn.addr !5974
  %84 = icmp ult i64 %r8.0, %77, !insn.addr !5929
  store i64 %83, i64* %storemerge9.reg2mem, !insn.addr !5930
  store i64 %80, i64* %r9.08.reg2mem, !insn.addr !5930
  store i64 %77, i64* %rbx.07.reg2mem, !insn.addr !5930
  store i64 %82, i64* %rdx.06.reg2mem, !insn.addr !5930
  store i64 0, i64* %rax.4.reg2mem, !insn.addr !5930
  br i1 %84, label %dec_label_pc_a9a1, label %dec_label_pc_a904, !insn.addr !5930

dec_label_pc_a9a1:                                ; preds = %dec_label_pc_a956, %dec_label_pc_a913, %dec_label_pc_a927, %dec_label_pc_a904, %dec_label_pc_a968, %dec_label_pc_a8cf, %dec_label_pc_a8a0
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  ret i64 %rax.4.reload, !insn.addr !5975

; uselistorder directives
  uselistorder i64 %63, { 1, 2, 0 }
  uselistorder i16 %59, { 1, 0 }
  uselistorder i64 %57, { 1, 0 }
  uselistorder i64 %46, { 1, 0 }
  uselistorder i64 %r10.14.reload, { 1, 0 }
  uselistorder i64 %r10.0.reload, { 0, 2, 1 }
  uselistorder i64 %19, { 2, 0, 1 }
  uselistorder i64 %storemerge9.reload, { 2, 1, 0 }
  uselistorder i64 %r9.08.reload, { 1, 0 }
  uselistorder i8 %17, { 0, 1, 3, 2 }
  uselistorder i64 %r8.0, { 1, 0 }
  uselistorder i64 %6, { 0, 2, 1 }
  uselistorder i64 %2, { 1, 0 }
  uselistorder i64* %storemerge9.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r9.08.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rbx.07.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rdx.06.reg2mem, { 1, 0, 2 }
  uselistorder i64* %r10.14.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.23.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rax.4.reg2mem, { 0, 5, 1, 3, 2, 4, 6, 7 }
  uselistorder i64 48, { 1, 2, 7, 8, 9, 4, 0, 3, 10, 12, 13, 6, 14, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 5 }
  uselistorder i16 4, { 1, 0 }
  uselistorder i64 17179869180, { 1, 0 }
  uselistorder i64 4, { 8, 21, 59, 26, 60, 61, 1, 0, 62, 27, 33, 19, 66, 67, 68, 2, 69, 28, 63, 64, 65, 3, 34, 4, 35, 70, 71, 9, 72, 73, 75, 36, 37, 76, 38, 10, 11, 12, 13, 74, 22, 39, 77, 78, 79, 80, 40, 41, 18, 42, 24, 43, 44, 81, 45, 46, 25, 47, 82, 48, 20, 49, 14, 51, 50, 15, 16, 17, 83, 52, 53, 54, 55, 56, 84, 57, 58, 29, 85, 86, 23, 32, 87, 31, 5, 88, 6, 30, 7 }
  uselistorder i64 -1, { 19, 18, 2, 11, 0, 1, 6, 12, 13, 16, 17, 7, 10, 9, 8, 14, 3, 4, 5, 15 }
  uselistorder i32 256, { 3, 7, 8, 9, 10, 4, 5, 6, 0, 1, 2 }
  uselistorder i64 (i64, i1)* @llvm.cttz.i64, { 1, 0 }
  uselistorder i1 true, { 5, 4, 0, 1, 2, 3 }
  uselistorder i8 64, { 2, 10, 3, 13, 9, 14, 11, 15, 16, 17, 18, 19, 4, 0, 1, 5, 12, 6, 20, 21, 8, 7 }
  uselistorder i64 1888, { 1, 0 }
  uselistorder i64 44, { 2, 1, 0 }
  uselistorder i64 (i32, i64, i64, i64, i64, i64)* @.Llzma2_decoder_end.1, { 2, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i64 10, { 6, 7, 4, 3, 2, 1, 0, 5, 8 }
  uselistorder label %dec_label_pc_a9a1, { 4, 0, 2, 1, 3, 5, 6 }
  uselistorder label %dec_label_pc_a94b, { 1, 0 }
  uselistorder label %dec_label_pc_a904, { 1, 0 }
}

define i64 @.Llzma_lzma_encoder_init.0(i64* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_a9b0:
  %0 = alloca i64
  %1 = load i64, i64* %0
  %2 = trunc i64 %1 to i32
  %3 = icmp ult i32 %2, 456
  br i1 %3, label %dec_label_pc_a9c0, label %dec_label_pc_aa19, !insn.addr !5976

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a9b0
  %4 = ptrtoint i64* %arg1 to i64
  %5 = add i64 %4, 40, !insn.addr !5977
  %6 = inttoptr i64 %5 to i32*, !insn.addr !5977
  %7 = load i32, i32* %6, align 4, !insn.addr !5977
  switch i32 %7, label %dec_label_pc_a9d6 [
    i32 265, label %dec_label_pc_aa17
    i32 187, label %dec_label_pc_aa17
  ]

dec_label_pc_a9d6:                                ; preds = %dec_label_pc_a9c0
  %8 = add i32 %7, -131, !insn.addr !5978
  %9 = icmp ult i32 %8, 47
  br i1 %9, label %dec_label_pc_a9e1, label %dec_label_pc_a9f4, !insn.addr !5979

dec_label_pc_a9e1:                                ; preds = %dec_label_pc_a9d6
  %10 = add i32 %7, 61
  %11 = urem i32 %10, 64
  %12 = icmp ne i32 %11, 0, !insn.addr !5980
  %13 = zext i32 %11 to i64
  %14 = lshr i64 71472550772993, %13
  %.op = urem i64 %14, 2
  %15 = icmp eq i64 %.op, 0
  %16 = icmp eq i1 %12, %15, !insn.addr !5981
  %17 = icmp eq i1 %16, false, !insn.addr !5982
  br i1 %17, label %dec_label_pc_aa17, label %dec_label_pc_a9f4, !insn.addr !5982

dec_label_pc_a9f4:                                ; preds = %dec_label_pc_a9d6, %dec_label_pc_a9e1
  %18 = load i64, i64* inttoptr (i64 43515 to i64*), align 8, !insn.addr !5983
  %19 = urem i32 %2, 8, !insn.addr !5984
  %20 = udiv i64 %1, 8
  %21 = urem i64 %20, 536870912, !insn.addr !5985
  %22 = inttoptr i64 %18 to i64*, !insn.addr !5986
  %23 = load i64, i64* %22, align 8, !insn.addr !5986
  %24 = shl i32 1, %19
  %25 = add nuw nsw i64 %21, 264, !insn.addr !5987
  %26 = add i64 %25, %23, !insn.addr !5987
  %27 = inttoptr i64 %26 to i8*, !insn.addr !5987
  %28 = load i8, i8* %27, align 1, !insn.addr !5987
  %29 = trunc i32 %24 to i8, !insn.addr !5987
  %30 = or i8 %28, %29, !insn.addr !5987
  store i8 %30, i8* %27, align 1, !insn.addr !5987
  br label %dec_label_pc_aa17, !insn.addr !5987

dec_label_pc_aa17:                                ; preds = %dec_label_pc_a9c0, %dec_label_pc_a9c0, %dec_label_pc_a9f4, %dec_label_pc_a9e1
  %31 = add i32 %2, 1
  store i32 %31, i32* %arg2, align 4, !insn.addr !5988
  br label %dec_label_pc_aa19, !insn.addr !5988

dec_label_pc_aa19:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aa17
  ret i64 1, !insn.addr !5989

; uselistorder directives
  uselistorder i32 %7, { 2, 1, 0 }
  uselistorder i32 %2, { 2, 0, 1 }
  uselistorder i64 %1, { 1, 0 }
  uselistorder i64 264, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder i32 8, { 14, 0, 1, 22, 23, 2, 3, 4, 5, 13, 15, 20, 21, 28, 24, 6, 29, 25, 37, 7, 30, 8, 26, 9, 10, 31, 11, 32, 33, 27, 34, 35, 12, 16, 17, 36, 18, 19 }
  uselistorder i32 64, { 0, 2, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_aa19, { 1, 0 }
  uselistorder label %dec_label_pc_aa17, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a9f4, { 1, 0 }
}

define i64 @.Llzma_memlimit_get.1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_aa20:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !5990
  %.pre-phi.reg2mem = alloca i32, !insn.addr !5990
  %.pre-phi9.reg2mem = alloca i32, !insn.addr !5990
  %r12.0.lcssa.reg2mem = alloca i32, !insn.addr !5990
  %r12.05.reg2mem = alloca i64, !insn.addr !5990
  %r9.0.reg2mem = alloca i64, !insn.addr !5990
  %1 = load i64, i64* %0
  %stack_var_-156 = alloca i64, align 8
  %stack_var_-144 = alloca i64, align 8
  %2 = trunc i64 %arg5 to i32, !insn.addr !5991
  %3 = icmp eq i32 %2, 0, !insn.addr !5991
  %4 = bitcast i64* %stack_var_-144 to i8*, !insn.addr !5992
  call void @__asm_rep_stosd_memset(i8* nonnull %4, i32 0, i64 22), !insn.addr !5992
  %sext = mul i64 %arg3, 4294967296
  %5 = ashr exact i64 %sext, 32, !insn.addr !5993
  store i64 %5, i64* %stack_var_-156, align 8, !insn.addr !5993
  store i64 %arg1, i64* %r9.0.reg2mem, !insn.addr !5994
  br i1 %3, label %dec_label_pc_aa76, label %dec_label_pc_aa57, !insn.addr !5994

dec_label_pc_aa57:                                ; preds = %dec_label_pc_aa20
  %6 = ptrtoint i64* %stack_var_-144 to i64, !insn.addr !5995
  %7 = call i64 @.Llzma_optimum_normal.0(i64 %arg1, i64 %arg2, i64 0, i64 %6), !insn.addr !5996
  %8 = trunc i64 %7 to i32, !insn.addr !5997
  %9 = icmp eq i32 %8, 0, !insn.addr !5997
  %10 = icmp eq i1 %9, false, !insn.addr !5998
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5998
  br i1 %10, label %dec_label_pc_aa6c, label %dec_label_pc_aac7, !insn.addr !5998

dec_label_pc_aa6c:                                ; preds = %dec_label_pc_aa57
  %11 = load i64, i64* %stack_var_-144, align 8, !insn.addr !5999
  %12 = add i64 %11, %1, !insn.addr !5999
  store i64 %12, i64* %r9.0.reg2mem, !insn.addr !5999
  br label %dec_label_pc_aa76, !insn.addr !5999

dec_label_pc_aa76:                                ; preds = %dec_label_pc_aa6c, %dec_label_pc_aa20
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %13 = call i64 @.Llzma_block_total_size.0(i64 %r9.0.reload, i64 %arg2, i64* nonnull %stack_var_-144), !insn.addr !6000
  %14 = trunc i64 %13 to i32, !insn.addr !6001
  %15 = icmp eq i32 %14, 0, !insn.addr !6001
  store i32 0, i32* %r12.0.lcssa.reg2mem, !insn.addr !6002
  br i1 %15, label %dec_label_pc_aaa0.loopexit, label %dec_label_pc_aa97.lr.ph, !insn.addr !6002

dec_label_pc_aa97.lr.ph:                          ; preds = %dec_label_pc_aa76
  %16 = and i64 %arg4, 4294967295, !insn.addr !6003
  %17 = bitcast i64* %stack_var_-156 to i32*
  store i64 0, i64* %r12.05.reg2mem
  br label %dec_label_pc_aa97

dec_label_pc_aa97:                                ; preds = %dec_label_pc_aa97.lr.ph, %dec_label_pc_aabb
  %r12.05.reload = load i64, i64* %r12.05.reg2mem
  %18 = icmp eq i64 %r12.05.reload, %16, !insn.addr !6004
  %19 = icmp eq i1 %18, false, !insn.addr !6005
  br i1 %19, label %dec_label_pc_aaa9, label %dec_label_pc_aa9c, !insn.addr !6005

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa97
  %20 = trunc i64 %arg4 to i32
  %21 = trunc i64 %r12.05.reload to i32
  %22 = icmp ult i32 %20, %21, !insn.addr !6006
  store i32 %21, i32* %.pre-phi9.reg2mem, !insn.addr !6007
  store i32 %20, i32* %.pre-phi.reg2mem, !insn.addr !6007
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6007
  br i1 %22, label %dec_label_pc_aac7, label %dec_label_pc_aaa0, !insn.addr !6007

dec_label_pc_aa81.dec_label_pc_aaa0.loopexit_crit_edge: ; preds = %dec_label_pc_aabb
  %phitmp = trunc i64 %28 to i32
  store i32 %phitmp, i32* %r12.0.lcssa.reg2mem
  br label %dec_label_pc_aaa0.loopexit

dec_label_pc_aaa0.loopexit:                       ; preds = %dec_label_pc_aa81.dec_label_pc_aaa0.loopexit_crit_edge, %dec_label_pc_aa76
  %r12.0.lcssa.reload = load i32, i32* %r12.0.lcssa.reg2mem
  %.pre = trunc i64 %arg4 to i32, !insn.addr !6008
  store i32 %r12.0.lcssa.reload, i32* %.pre-phi9.reg2mem
  store i32 %.pre, i32* %.pre-phi.reg2mem
  br label %dec_label_pc_aaa0

dec_label_pc_aaa0:                                ; preds = %dec_label_pc_aaa0.loopexit, %dec_label_pc_aa9c
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %.pre-phi9.reload = load i32, i32* %.pre-phi9.reg2mem
  %23 = icmp eq i32 %.pre-phi.reload, %.pre-phi9.reload, !insn.addr !6008
  %24 = zext i1 %23 to i64, !insn.addr !6009
  store i64 %24, i64* %storemerge.reg2mem, !insn.addr !6010
  br label %dec_label_pc_aac7, !insn.addr !6010

dec_label_pc_aaa9:                                ; preds = %dec_label_pc_aa97
  %25 = call i64 @.Llzma_lzma_encoder_init.0(i64* nonnull %stack_var_-144, i32* nonnull %17), !insn.addr !6011
  %26 = trunc i64 %25 to i32, !insn.addr !6012
  %27 = icmp eq i32 %26, 0, !insn.addr !6012
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6013
  br i1 %27, label %dec_label_pc_aac7, label %dec_label_pc_aabb, !insn.addr !6013

dec_label_pc_aabb:                                ; preds = %dec_label_pc_aaa9
  %28 = add i64 %r12.05.reload, 1, !insn.addr !6014
  %29 = load i64, i64* %stack_var_-144, align 8, !insn.addr !6015
  %30 = add i64 %29, %1, !insn.addr !6015
  %31 = call i64 @.Llzma_block_total_size.0(i64 %30, i64 %arg2, i64* nonnull %stack_var_-144), !insn.addr !6000
  %32 = trunc i64 %31 to i32, !insn.addr !6001
  %33 = icmp eq i32 %32, 0, !insn.addr !6001
  store i64 %28, i64* %r12.05.reg2mem, !insn.addr !6002
  br i1 %33, label %dec_label_pc_aa81.dec_label_pc_aaa0.loopexit_crit_edge, label %dec_label_pc_aa97, !insn.addr !6002

dec_label_pc_aac7:                                ; preds = %dec_label_pc_aaa9, %dec_label_pc_aa57, %dec_label_pc_aa9c, %dec_label_pc_aaa0
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !6016

; uselistorder directives
  uselistorder i64 %r12.05.reload, { 1, 2, 0 }
  uselistorder i64* %stack_var_-144, { 2, 4, 1, 0, 5, 6, 3 }
  uselistorder i64* %stack_var_-156, { 1, 0 }
  uselistorder i64 %1, { 1, 0 }
  uselistorder i64* %r12.05.reg2mem, { 1, 0, 2 }
  uselistorder i32* %r12.0.lcssa.reg2mem, { 0, 2, 1 }
  uselistorder i32* %.pre-phi9.reg2mem, { 0, 2, 1 }
  uselistorder i32* %.pre-phi.reg2mem, { 0, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 1, 4, 3, 2 }
  uselistorder i64 (i64, i64, i64*)* @.Llzma_block_total_size.0, { 1, 0 }
  uselistorder i64 32, { 22, 46, 47, 48, 38, 23, 49, 50, 10, 51, 52, 53, 24, 56, 57, 0, 1, 39, 58, 59, 60, 61, 62, 63, 64, 25, 26, 14, 54, 55, 27, 65, 73, 2, 40, 3, 41, 4, 42, 5, 43, 74, 30, 31, 13, 28, 29, 6, 16, 32, 33, 75, 76, 77, 78, 79, 80, 81, 82, 34, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 7, 97, 15, 98, 17, 44, 35, 96, 66, 67, 68, 69, 70, 71, 8, 9, 45, 72, 99, 100, 18, 19, 20, 101, 36, 102, 37, 21, 11, 12, 103 }
  uselistorder i64 4294967296, { 0, 1, 14, 15, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13 }
  uselistorder void (i8*, i32, i64)* @__asm_rep_stosd_memset, { 63, 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 9, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 8, 51, 52, 53, 37, 38, 48, 22, 23, 24, 39, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67 }
  uselistorder i64 22, { 3, 2, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33 }
  uselistorder i64 %arg2, { 2, 0, 1 }
  uselistorder i64 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_aac7, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_aa97, { 1, 0 }
}

define i64 @.Lrc_read_init.part.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_aae0:
  %storemerge.reg2mem = alloca i64, !insn.addr !6017
  %stack_var_-48 = alloca i64, align 8
  %0 = load i64, i64* inttoptr (i64 43767 to i64*), align 8, !insn.addr !6018
  store i64 0, i64* %stack_var_-48, align 8, !insn.addr !6019
  %1 = inttoptr i64 %0 to i64*, !insn.addr !6020
  %2 = load i64, i64* %1, align 8, !insn.addr !6020
  %3 = icmp eq i64 %2, 0, !insn.addr !6021
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !6022
  br i1 %3, label %dec_label_pc_ab85, label %dec_label_pc_ab05, !insn.addr !6022

dec_label_pc_ab05:                                ; preds = %dec_label_pc_aae0
  %4 = and i64 %arg5, 4294967295, !insn.addr !6023
  %5 = add nuw nsw i64 %4, 321, !insn.addr !6024
  %6 = add i64 %5, %2, !insn.addr !6024
  %7 = inttoptr i64 %6 to i8*, !insn.addr !6024
  %8 = load i8, i8* %7, align 1, !insn.addr !6024
  %9 = icmp eq i8 %8, 0, !insn.addr !6024
  %10 = icmp eq i1 %9, false, !insn.addr !6025
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !6025
  br i1 %10, label %dec_label_pc_ab85, label %dec_label_pc_ab13, !insn.addr !6025

dec_label_pc_ab13:                                ; preds = %dec_label_pc_ab05
  store i8 1, i8* %7, align 1, !insn.addr !6026
  %11 = add i64 %2, 128, !insn.addr !6027
  %12 = inttoptr i64 %11 to i64*, !insn.addr !6027
  %13 = load i64, i64* %12, align 8, !insn.addr !6027
  %14 = add i64 %2, 136, !insn.addr !6028
  %15 = inttoptr i64 %14 to i64*, !insn.addr !6028
  %16 = load i64, i64* %15, align 8, !insn.addr !6028
  %17 = ptrtoint i64* %stack_var_-48 to i64, !insn.addr !6029
  %18 = trunc i64 %17 to i32, !insn.addr !6030
  %19 = call i64 @.Llzma2_encoder_init.1(i64 %arg2, i32 %18, i64* null, i64 %13, i64 %16, i32 1), !insn.addr !6030
  %20 = trunc i64 %19 to i32, !insn.addr !6031
  %21 = icmp eq i32 %20, 0, !insn.addr !6031
  %22 = icmp eq i1 %21, false, !insn.addr !6032
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6032
  br i1 %22, label %dec_label_pc_ab4e, label %dec_label_pc_ab85, !insn.addr !6032

dec_label_pc_ab4e:                                ; preds = %dec_label_pc_ab13
  %23 = and i64 %arg4, 4294967295, !insn.addr !6033
  %24 = and i64 %arg3, 4294967295, !insn.addr !6034
  %25 = load i64, i64* %1, align 8, !insn.addr !6035
  %26 = icmp eq i64 %arg1, 0, !insn.addr !6036
  %27 = load i64, i64* %stack_var_-48, align 8, !insn.addr !6037
  %28 = add i64 %25, 136, !insn.addr !6038
  %29 = inttoptr i64 %28 to i64*, !insn.addr !6038
  %30 = load i64, i64* %29, align 8, !insn.addr !6038
  %31 = zext i1 %26 to i64, !insn.addr !6039
  %32 = call i64 @.Llzma_memlimit_get.1(i64 %27, i64 %30, i64 %24, i64 %23, i64 %31), !insn.addr !6040
  %33 = trunc i64 %32 to i32, !insn.addr !6041
  %34 = icmp eq i32 %33, 0, !insn.addr !6041
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6042
  br i1 %34, label %dec_label_pc_ab85, label %dec_label_pc_ab76, !insn.addr !6042

dec_label_pc_ab76:                                ; preds = %dec_label_pc_ab4e
  %35 = load i64, i64* %1, align 8, !insn.addr !6043
  %36 = add i64 %35, 352, !insn.addr !6044
  %37 = inttoptr i64 %36 to i32*, !insn.addr !6044
  %38 = load i32, i32* %37, align 4, !insn.addr !6044
  %39 = trunc i64 %arg4 to i32, !insn.addr !6044
  %40 = add i32 %38, %39, !insn.addr !6044
  store i32 %40, i32* %37, align 4, !insn.addr !6044
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !6044
  br label %dec_label_pc_ab85, !insn.addr !6044

dec_label_pc_ab85:                                ; preds = %dec_label_pc_aae0, %dec_label_pc_ab05, %dec_label_pc_ab76, %dec_label_pc_ab13, %dec_label_pc_ab4e
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !6045

; uselistorder directives
  uselistorder i64 %2, { 2, 1, 0, 3 }
  uselistorder i64* %storemerge.reg2mem, { 0, 3, 5, 4, 2, 1 }
  uselistorder i64 352, { 1, 0 }
  uselistorder i64 136, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i64 128, { 8, 0, 3, 4, 5, 6, 7, 2, 1 }
  uselistorder i8 1, { 10, 8, 9, 5, 1, 2, 0, 3, 7, 4, 11, 12, 13, 6 }
  uselistorder label %dec_label_pc_ab85, { 2, 4, 3, 1, 0 }
}

define i64 @.Llzma_check_init.part.0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_ab90:
  %0 = trunc i64 %arg4 to i32, !insn.addr !6046
  %1 = icmp eq i32 %0, 0, !insn.addr !6046
  br i1 %1, label %dec_label_pc_abac, label %dec_label_pc_ab9d, !insn.addr !6047

dec_label_pc_ab9d:                                ; preds = %dec_label_pc_ab90
  %2 = and i64 %arg1, 4294967295, !insn.addr !6048
  %3 = and i64 %arg2, 4294967295, !insn.addr !6049
  %4 = and i64 %arg3, 4294967295, !insn.addr !6050
  %5 = call i64 @.Lrc_read_init.part.0(i64 %arg5, i64 %arg5, i64 %2, i64 %4, i64 %3), !insn.addr !6051
  ret i64 %5, !insn.addr !6051

dec_label_pc_abac:                                ; preds = %dec_label_pc_ab90
  ret i64 0, !insn.addr !6052
}

define i64 @.Llzma2_decoder_end.1(i32 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_abb0:
  %0 = sext i32 %arg1 to i64
  %1 = and i64 %arg4, 4294967295, !insn.addr !6053
  %2 = icmp ult i32 %arg1, 2
  %spec.select = select i1 %2, i64 %arg6, i64 %0
  %3 = and i64 %arg3, 4294967295, !insn.addr !6054
  %4 = and i64 %arg2, 4294967295, !insn.addr !6055
  %5 = call i64 @.Lrc_read_init.part.0(i64 %0, i64 %spec.select, i64 %4, i64 %3, i64 %1), !insn.addr !6056
  %6 = trunc i64 %5 to i32, !insn.addr !6057
  %7 = icmp eq i32 %6, 0, !insn.addr !6057
  %8 = icmp slt i32 %6, 0, !insn.addr !6057
  %9 = icmp eq i1 %8, false, !insn.addr !6058
  %10 = icmp eq i1 %7, false, !insn.addr !6058
  %11 = icmp eq i1 %9, %10, !insn.addr !6058
  %12 = zext i1 %11 to i64, !insn.addr !6059
  ret i64 %12, !insn.addr !6060

; uselistorder directives
  uselistorder i32 %6, { 1, 0 }
  uselistorder i64 %0, { 1, 0 }
  uselistorder i32 2, { 11, 12, 13, 22, 14, 8, 15, 9, 23, 16, 24, 17, 10, 18, 25, 19, 0, 1, 20, 2, 3, 4, 5, 6, 21, 7 }
}

define i64 @.Llzma_index_iter_rewind.cold(i64 %arg1, i64 %arg2, i64 %arg3, i32 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_abe0:
  %0 = and i64 %arg2, 4294967295, !insn.addr !6061
  %1 = and i64 %arg3, 4294967295, !insn.addr !6062
  %2 = and i64 %arg1, 4294967295, !insn.addr !6063
  %3 = call i64 @.Lrc_read_init.part.0(i64 0, i64 %arg5, i64 %2, i64 %0, i64 %1), !insn.addr !6064
  %4 = trunc i64 %3 to i32, !insn.addr !6065
  %5 = or i32 %4, %arg4, !insn.addr !6065
  %6 = zext i32 %5 to i64, !insn.addr !6065
  ret i64 %6, !insn.addr !6066

; uselistorder directives
  uselistorder i64 (i64, i64, i64, i64, i64)* @.Lrc_read_init.part.0, { 1, 0, 2 }
}

define i64 @.Llzma_index_memusage.0(i64* %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_ac00:
  %rax.0.reg2mem = alloca i64, !insn.addr !6067
  %r14.03.reg2mem = alloca i64, !insn.addr !6067
  %rbp.0.ph4.reg2mem = alloca i64, !insn.addr !6067
  %r14.0.ph5.reg2mem = alloca i64, !insn.addr !6067
  %0 = ptrtoint i64* %arg1 to i64
  %1 = icmp ne i64 %arg2, 0, !insn.addr !6068
  %2 = icmp eq i1 %1, false, !insn.addr !6069
  store i64 0, i64* %r14.0.ph5.reg2mem, !insn.addr !6069
  store i64 0, i64* %rbp.0.ph4.reg2mem, !insn.addr !6069
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !6069
  br i1 %2, label %dec_label_pc_ac56, label %dec_label_pc_ac22.lr.ph, !insn.addr !6069

dec_label_pc_ac22.lr.ph:                          ; preds = %dec_label_pc_ac00, %dec_label_pc_ac48
  %rbp.0.ph4.reload = load i64, i64* %rbp.0.ph4.reg2mem
  %r14.0.ph5.reload = load i64, i64* %r14.0.ph5.reg2mem
  %3 = trunc i64 %rbp.0.ph4.reload to i32
  store i64 %r14.0.ph5.reload, i64* %r14.03.reg2mem
  br label %dec_label_pc_ac22

dec_label_pc_ac22:                                ; preds = %dec_label_pc_ac22.lr.ph, %dec_label_pc_ac4c
  %r14.03.reload = load i64, i64* %r14.03.reg2mem
  %4 = mul i64 %r14.03.reload, ptrtoint (i32** @global_var_18 to i64), !insn.addr !6070
  %5 = add nuw nsw i64 %r14.03.reload, 1, !insn.addr !6071
  %6 = and i64 %5, 4294967295, !insn.addr !6071
  %7 = add i64 %4, %0, !insn.addr !6072
  %8 = add i64 %7, 20, !insn.addr !6073
  %9 = inttoptr i64 %8 to i32*, !insn.addr !6073
  %10 = load i32, i32* %9, align 4, !insn.addr !6073
  %11 = icmp eq i32 %10, 0, !insn.addr !6073
  br i1 %11, label %dec_label_pc_ac4c, label %dec_label_pc_ac3e, !insn.addr !6074

dec_label_pc_ac3e:                                ; preds = %dec_label_pc_ac22
  %12 = trunc i64 %7 to i32, !insn.addr !6075
  %13 = icmp eq i32 %12, 0, !insn.addr !6075
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !6076
  br i1 %13, label %dec_label_pc_ac56, label %dec_label_pc_ac48, !insn.addr !6076

dec_label_pc_ac48:                                ; preds = %dec_label_pc_ac3e
  %14 = add nuw nsw i64 %rbp.0.ph4.reload, 1, !insn.addr !6077
  %15 = and i64 %14, 4294967295, !insn.addr !6077
  %16 = icmp ult i64 %6, %arg2, !insn.addr !6068
  %17 = icmp eq i1 %16, false, !insn.addr !6069
  store i64 %6, i64* %r14.0.ph5.reg2mem, !insn.addr !6069
  store i64 %15, i64* %rbp.0.ph4.reg2mem, !insn.addr !6069
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !6069
  br i1 %17, label %dec_label_pc_ac56, label %dec_label_pc_ac22.lr.ph, !insn.addr !6069

dec_label_pc_ac4c:                                ; preds = %dec_label_pc_ac22
  store i32 %3, i32* %9, align 4, !insn.addr !6078
  %18 = icmp ult i64 %6, %arg2, !insn.addr !6068
  %19 = icmp eq i1 %18, false, !insn.addr !6069
  store i64 %6, i64* %r14.03.reg2mem, !insn.addr !6069
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !6069
  br i1 %19, label %dec_label_pc_ac56, label %dec_label_pc_ac22, !insn.addr !6069

dec_label_pc_ac56:                                ; preds = %dec_label_pc_ac3e, %dec_label_pc_ac48, %dec_label_pc_ac4c, %dec_label_pc_ac00
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !6079

; uselistorder directives
  uselistorder i64 %6, { 0, 3, 1, 2 }
  uselistorder i64 %r14.03.reload, { 1, 0 }
  uselistorder i64 %rbp.0.ph4.reload, { 1, 0 }
  uselistorder i64* %r14.0.ph5.reg2mem, { 2, 0, 1 }
  uselistorder i64* %rbp.0.ph4.reg2mem, { 2, 0, 1 }
  uselistorder i64* %r14.03.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rax.0.reg2mem, { 0, 3, 1, 2, 4 }
  uselistorder i64 20, { 6, 0, 2, 3, 4, 5, 1, 7 }
  uselistorder i64 4294967295, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 0, 29, 30, 31, 32, 4, 5, 33, 34, 35, 36, 37, 38, 1, 39, 40, 41, 42, 43, 44, 45, 46, 6, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 2, 59, 60, 61, 62, 63, 64, 65, 66, 3, 67, 69, 68 }
  uselistorder i32** @global_var_18, { 0, 2, 1 }
  uselistorder i64 ptrtoint (i32** @global_var_18 to i64), { 6, 45, 44, 43, 42, 41, 40, 39, 38, 37, 3, 36, 35, 0, 49, 34, 48, 8, 7, 33, 47, 32, 31, 30, 29, 28, 27, 26, 1, 25, 2, 4, 24, 23, 22, 21, 9, 20, 19, 5, 18, 17, 16, 15, 10, 46, 14, 13, 12, 11 }
  uselistorder i64 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ac56, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_ac22, { 1, 0 }
  uselistorder label %dec_label_pc_ac22.lr.ph, { 1, 0 }
}

define i64 @.Llzma_block_total_size.0(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_ac60:
  %0 = alloca i64
  %storemerge.reg2mem = alloca i64, !insn.addr !6080
  %rcx.2.reg2mem = alloca i64, !insn.addr !6080
  %rcx.1.reg2mem = alloca i64, !insn.addr !6080
  %rdi.01.reg2mem = alloca i64, !insn.addr !6080
  %rcx.02.reg2mem = alloca i64, !insn.addr !6080
  %1 = load i64, i64* %0
  %2 = load i64, i64* %0
  %3 = icmp eq i64* %arg3, null, !insn.addr !6081
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6082
  br i1 %3, label %dec_label_pc_acde, label %dec_label_pc_ac7d.preheader, !insn.addr !6082

dec_label_pc_ac7d.preheader:                      ; preds = %dec_label_pc_ac60
  %4 = icmp ult i64 %arg1, %arg2, !insn.addr !6083
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6084
  br i1 %4, label %dec_label_pc_ac86.lr.ph, label %dec_label_pc_acde, !insn.addr !6084

dec_label_pc_ac86.lr.ph:                          ; preds = %dec_label_pc_ac7d.preheader
  %5 = ptrtoint i64* %arg3 to i64
  %6 = add i64 %5, 29
  %7 = inttoptr i64 %6 to i8*
  %8 = add i64 %5, 40
  %9 = inttoptr i64 %8 to i32*
  %10 = add i64 %5, 16
  %11 = inttoptr i64 %10 to i16*
  %12 = add i64 %5, 27
  %13 = inttoptr i64 %12 to i8*
  %14 = add i64 %5, 8
  %15 = inttoptr i64 %14 to i64*
  store i64 %arg1, i64* %rdi.01.reg2mem
  br label %dec_label_pc_ac86

dec_label_pc_ac86:                                ; preds = %dec_label_pc_ac86.lr.ph, %dec_label_pc_acd0
  %rdi.01.reload = load i64, i64* %rdi.01.reg2mem
  %rcx.02.reload = load i64, i64* %rcx.02.reg2mem
  %16 = call i64 @.Lx86_code.part.0(i64* nonnull %arg3, i64 %rdi.01.reload, i64 %arg2, i64 %rcx.02.reload, i64 %2, i64 %1), !insn.addr !6085
  %17 = trunc i64 %16 to i32, !insn.addr !6086
  %18 = icmp eq i32 %17, 0, !insn.addr !6086
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6087
  br i1 %18, label %dec_label_pc_acde, label %dec_label_pc_ac98, !insn.addr !6087

dec_label_pc_ac98:                                ; preds = %dec_label_pc_ac86
  %19 = load i32, i32* %9, align 4, !insn.addr !6088
  %20 = zext i32 %19 to i64, !insn.addr !6088
  %21 = and i32 %19, -3, !insn.addr !6089
  %22 = icmp eq i32 %21, 265, !insn.addr !6090
  store i64 %20, i64* %rcx.1.reg2mem, !insn.addr !6091
  br i1 %22, label %dec_label_pc_acbc, label %dec_label_pc_aca7, !insn.addr !6091

dec_label_pc_aca7:                                ; preds = %dec_label_pc_ac98
  %23 = add i32 %19, -129, !insn.addr !6092
  %24 = zext i32 %23 to i64, !insn.addr !6092
  %25 = icmp ult i32 %23, 59
  store i64 %24, i64* %rcx.2.reg2mem, !insn.addr !6093
  br i1 %25, label %dec_label_pc_acb2, label %dec_label_pc_acd0, !insn.addr !6093

dec_label_pc_acb2:                                ; preds = %dec_label_pc_aca7
  %26 = urem i64 %24, 64, !insn.addr !6094
  %27 = lshr i64 361700864106169605, %26
  %28 = urem i64 %27, 2
  %29 = icmp eq i64 %28, 0, !insn.addr !6095
  store i64 %24, i64* %rcx.1.reg2mem, !insn.addr !6096
  store i64 %24, i64* %rcx.2.reg2mem, !insn.addr !6096
  br i1 %29, label %dec_label_pc_acd0, label %dec_label_pc_acbc, !insn.addr !6096

dec_label_pc_acbc:                                ; preds = %dec_label_pc_acb2, %dec_label_pc_ac98
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %30 = load i16, i16* %11, align 2, !insn.addr !6097
  %31 = and i16 %30, 3968, !insn.addr !6097
  %32 = icmp eq i16 %31, 0, !insn.addr !6097
  %33 = icmp eq i1 %32, false, !insn.addr !6098
  store i64 %rcx.1.reload, i64* %rcx.2.reg2mem, !insn.addr !6098
  br i1 %33, label %dec_label_pc_acd0, label %dec_label_pc_acc4, !insn.addr !6098

dec_label_pc_acc4:                                ; preds = %dec_label_pc_acbc
  %34 = load i8, i8* %13, align 1, !insn.addr !6099
  %35 = and i8 %34, 5, !insn.addr !6099
  %36 = icmp eq i8 %35, 0, !insn.addr !6099
  %37 = icmp eq i1 %36, false, !insn.addr !6100
  store i64 %rcx.1.reload, i64* %rcx.2.reg2mem, !insn.addr !6100
  br i1 %37, label %dec_label_pc_acd0, label %dec_label_pc_acca, !insn.addr !6100

dec_label_pc_acca:                                ; preds = %dec_label_pc_acc4
  %38 = load i8, i8* %7, align 1, !insn.addr !6101
  %39 = icmp eq i8 %38, 3, !insn.addr !6101
  store i64 %rcx.1.reload, i64* %rcx.2.reg2mem, !insn.addr !6102
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !6102
  br i1 %39, label %dec_label_pc_acde, label %dec_label_pc_acd0, !insn.addr !6102

dec_label_pc_acd0:                                ; preds = %dec_label_pc_aca7, %dec_label_pc_acca, %dec_label_pc_acc4, %dec_label_pc_acbc, %dec_label_pc_acb2
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %40 = load i64, i64* %15, align 8, !insn.addr !6103
  %41 = add i64 %40, %arg2, !insn.addr !6104
  %42 = icmp ult i64 %41, %arg2, !insn.addr !6083
  store i64 %rcx.2.reload, i64* %rcx.02.reg2mem, !insn.addr !6084
  store i64 %41, i64* %rdi.01.reg2mem, !insn.addr !6084
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6084
  br i1 %42, label %dec_label_pc_ac86, label %dec_label_pc_acde, !insn.addr !6084

dec_label_pc_acde:                                ; preds = %dec_label_pc_ac86, %dec_label_pc_acd0, %dec_label_pc_acca, %dec_label_pc_ac7d.preheader, %dec_label_pc_ac60
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !6105

; uselistorder directives
  uselistorder i64 %24, { 1, 2, 3, 0 }
  uselistorder i32 %23, { 1, 0 }
  uselistorder i64 %5, { 0, 2, 1, 4, 3 }
  uselistorder i64* %rcx.02.reg2mem, { 1, 0 }
  uselistorder i64* %rdi.01.reg2mem, { 1, 0, 2 }
  uselistorder i64* %rcx.2.reg2mem, { 0, 3, 4, 5, 2, 1 }
  uselistorder i64* %storemerge.reg2mem, { 0, 2, 3, 1, 4, 5 }
  uselistorder i64* %0, { 1, 0 }
  uselistorder i64 1, { 0, 2, 1, 103, 104, 3, 6, 5, 4, 231, 86, 219, 105, 95, 93, 121, 106, 7, 151, 153, 154, 155, 156, 157, 158, 8, 94, 122, 123, 159, 160, 107, 162, 124, 163, 164, 165, 10, 166, 9, 11, 12, 13, 125, 169, 14, 170, 171, 172, 15, 173, 174, 175, 176, 87, 16, 17, 179, 180, 181, 18, 19, 21, 20, 88, 22, 108, 23, 109, 110, 24, 182, 25, 161, 26, 111, 27, 168, 28, 177, 178, 152, 183, 187, 33, 188, 126, 189, 112, 29, 30, 31, 127, 32, 128, 129, 190, 191, 192, 193, 130, 34, 131, 35, 196, 36, 132, 133, 37, 38, 134, 135, 136, 90, 197, 137, 138, 39, 199, 198, 139, 140, 40, 141, 142, 113, 41, 201, 202, 203, 204, 42, 43, 143, 205, 44, 96, 206, 207, 208, 45, 114, 46, 194, 115, 209, 200, 145, 144, 184, 185, 186, 47, 146, 48, 49, 50, 51, 195, 147, 52, 53, 54, 55, 56, 210, 211, 212, 57, 213, 214, 215, 216, 217, 218, 167, 101, 148, 102, 149, 116, 58, 59, 117, 118, 220, 221, 85, 222, 60, 223, 61, 62, 91, 92, 63, 224, 65, 64, 89, 225, 66, 67, 226, 68, 69, 227, 70, 228, 71, 229, 73, 72, 230, 74, 75, 77, 97, 76, 79, 78, 81, 80, 232, 233, 99, 234, 235, 120, 236, 98, 237, 238, 119, 82, 100, 83, 84, 239, 240, 150, 241, 242, 243, 244, 245 }
  uselistorder i8 3, { 1, 0, 2, 3, 4, 6, 7, 5 }
  uselistorder i8 0, { 110, 111, 105, 37, 24, 38, 39, 40, 41, 42, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 25, 26, 56, 29, 27, 17, 28, 30, 59, 32, 60, 31, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 33, 34, 57, 58, 64, 35, 36, 74, 18, 75, 76, 77, 78, 1, 0, 79, 19, 83, 7, 2, 85, 86, 10, 8, 9, 84, 20, 88, 87, 89, 90, 91, 92, 93, 94, 98, 97, 99, 3, 4, 5, 12, 21, 13, 80, 81, 82, 11, 95, 96, 73, 6, 14, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 15, 118, 119, 120, 121, 122, 123, 22, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 23, 134, 135, 136 }
  uselistorder i8 5, { 3, 0, 1, 2, 4 }
  uselistorder i1 false, { 461, 462, 268, 6, 5, 479, 73, 477, 478, 467, 468, 463, 415, 416, 79, 84, 3, 2, 81, 82, 45, 83, 7, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 150, 151, 152, 155, 153, 154, 9, 156, 8, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 46, 172, 47, 0, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 74, 185, 186, 187, 48, 188, 189, 190, 191, 192, 49, 193, 194, 195, 196, 197, 50, 198, 199, 52, 10, 200, 201, 51, 202, 203, 204, 122, 123, 124, 147, 148, 41, 169, 170, 173, 174, 80, 205, 234, 12, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 53, 11, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 13, 265, 266, 267, 286, 287, 288, 289, 290, 291, 292, 297, 298, 293, 294, 295, 296, 14, 318, 299, 300, 301, 303, 304, 305, 306, 308, 311, 312, 317, 302, 307, 309, 310, 313, 314, 315, 316, 15, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 333, 334, 16, 336, 337, 338, 18, 339, 54, 341, 340, 17, 342, 343, 344, 345, 356, 357, 358, 359, 364, 360, 361, 362, 363, 365, 366, 367, 368, 369, 372, 370, 371, 19, 55, 374, 373, 71, 72, 271, 274, 269, 270, 272, 273, 275, 276, 277, 278, 279, 375, 346, 347, 348, 56, 349, 350, 351, 352, 353, 354, 355, 206, 207, 208, 209, 210, 211, 212, 214, 213, 20, 215, 216, 217, 218, 219, 220, 221, 224, 57, 222, 223, 21, 225, 226, 58, 42, 227, 228, 229, 59, 75, 60, 44, 61, 76, 77, 78, 230, 231, 232, 233, 376, 283, 23, 280, 281, 62, 282, 22, 284, 285, 377, 63, 378, 379, 380, 64, 65, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 398, 394, 395, 396, 397, 24, 399, 400, 401, 25, 402, 403, 404, 410, 405, 407, 406, 4, 408, 27, 409, 26, 414, 66, 411, 413, 412, 28, 143, 144, 145, 146, 417, 419, 418, 30, 420, 421, 423, 422, 29, 424, 425, 67, 426, 427, 428, 429, 430, 1, 434, 431, 432, 433, 31, 441, 435, 438, 436, 43, 68, 437, 439, 440, 32, 444, 442, 443, 33, 445, 448, 446, 447, 34, 449, 453, 450, 451, 452, 35, 454, 455, 36, 456, 458, 457, 69, 37, 460, 459, 38, 465, 464, 39, 466, 472, 471, 473, 474, 475, 476, 469, 470, 70, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 552, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 40 }
  uselistorder i16 0, { 31, 11, 15, 16, 17, 18, 19, 20, 2, 21, 22, 12, 23, 24, 0, 13, 27, 1, 14, 25, 10, 26, 8, 3, 4, 5, 28, 29, 9, 30, 6, 7 }
  uselistorder i64 2, { 8, 9, 10, 30, 52, 21, 11, 12, 31, 32, 22, 33, 29, 41, 42, 43, 44, 0, 36, 3, 1, 45, 46, 47, 48, 49, 50, 13, 4, 51, 23, 24, 37, 6, 25, 7, 14, 38, 5, 53, 26, 15, 28, 27, 54, 16, 34, 2, 55, 35, 17, 18, 19, 20, 39, 40 }
  uselistorder i64 64, { 0, 1, 13, 14, 6, 7, 8, 12, 16, 17, 18, 19, 20, 9, 15, 22, 23, 24, 25, 10, 26, 27, 28, 29, 11, 30, 31, 21, 32, 33, 34, 35, 36, 37, 38, 2, 3, 4, 5 }
  uselistorder i32 265, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 -3, { 4, 0, 1, 3, 2 }
  uselistorder i32 0, { 458, 343, 344, 474, 475, 296, 472, 473, 462, 461, 0, 13, 463, 40, 464, 27, 28, 424, 41, 214, 215, 216, 217, 42, 43, 44, 45, 46, 218, 47, 49, 219, 50, 51, 220, 1, 221, 52, 29, 222, 53, 223, 54, 224, 225, 226, 227, 228, 48, 229, 230, 231, 232, 233, 55, 234, 235, 20, 236, 18, 237, 56, 240, 241, 242, 57, 58, 59, 243, 244, 245, 21, 246, 247, 60, 248, 61, 249, 250, 251, 64, 252, 253, 65, 254, 255, 63, 256, 257, 258, 259, 260, 261, 66, 14, 15, 262, 62, 67, 68, 69, 70, 22, 263, 23, 264, 265, 71, 267, 268, 72, 73, 74, 5, 75, 76, 269, 270, 271, 272, 273, 77, 274, 275, 276, 277, 278, 279, 280, 282, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 78, 238, 239, 266, 294, 79, 295, 80, 81, 88, 89, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 84, 321, 322, 85, 86, 87, 323, 324, 90, 325, 91, 92, 326, 93, 19, 327, 328, 83, 329, 94, 95, 330, 331, 82, 30, 31, 32, 33, 333, 334, 332, 96, 97, 98, 99, 335, 336, 337, 100, 101, 102, 338, 103, 104, 105, 106, 107, 108, 339, 109, 110, 111, 112, 113, 340, 114, 115, 341, 342, 116, 117, 2, 348, 349, 350, 118, 351, 352, 119, 120, 121, 122, 353, 354, 123, 355, 124, 356, 357, 358, 359, 125, 126, 360, 127, 361, 128, 363, 9, 35, 129, 365, 362, 364, 34, 130, 366, 131, 367, 369, 370, 132, 368, 36, 8, 133, 371, 134, 372, 373, 374, 375, 376, 377, 378, 135, 379, 380, 381, 382, 136, 137, 138, 139, 383, 384, 385, 140, 386, 141, 142, 143, 145, 390, 144, 392, 393, 146, 391, 147, 148, 394, 149, 150, 151, 152, 153, 395, 154, 396, 156, 397, 157, 398, 155, 11, 400, 401, 399, 158, 159, 345, 160, 346, 24, 161, 162, 402, 163, 387, 388, 389, 6, 164, 165, 166, 298, 297, 167, 16, 168, 300, 299, 169, 301, 302, 170, 303, 304, 171, 305, 306, 172, 173, 174, 307, 175, 176, 177, 178, 213, 179, 180, 347, 181, 182, 183, 403, 404, 405, 406, 407, 408, 409, 410, 412, 411, 413, 184, 414, 415, 416, 185, 417, 186, 418, 419, 187, 7, 420, 188, 421, 422, 37, 25, 38, 39, 423, 189, 190, 425, 426, 427, 428, 3, 429, 191, 430, 431, 432, 433, 12, 434, 435, 192, 436, 437, 438, 439, 440, 4, 17, 441, 442, 443, 193, 444, 445, 446, 195, 194, 447, 448, 196, 449, 197, 450, 198, 451, 199, 452, 200, 453, 201, 454, 202, 455, 26, 203, 457, 456, 204, 459, 205, 460, 206, 469, 468, 470, 471, 207, 465, 10, 466, 467, 209, 208, 476, 477, 478, 479, 480, 481, 482, 210, 483, 211, 212 }
  uselistorder i64 (i64*, i64, i64, i64, i64, i64)* @.Lx86_code.part.0, { 2, 15, 11, 10, 14, 13, 9, 17, 16, 12, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i64 8, { 186, 22, 175, 45, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 0, 68, 69, 2, 70, 1, 3, 71, 72, 73, 74, 23, 75, 4, 78, 5, 79, 80, 81, 24, 82, 83, 84, 85, 86, 87, 88, 89, 36, 31, 90, 37, 33, 76, 77, 6, 25, 65, 7, 91, 99, 100, 101, 102, 38, 8, 39, 9, 103, 104, 105, 46, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 10, 116, 119, 11, 120, 121, 122, 123, 124, 125, 126, 127, 34, 35, 128, 47, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 138, 141, 142, 143, 144, 145, 146, 32, 147, 148, 149, 150, 151, 152, 153, 154, 155, 12, 13, 14, 15, 156, 159, 160, 161, 162, 157, 16, 158, 163, 17, 18, 19, 20, 164, 92, 93, 94, 95, 96, 40, 97, 98, 52, 53, 54, 55, 56, 165, 117, 118, 166, 167, 168, 169, 170, 48, 171, 172, 49, 21, 173, 174, 50, 176, 51, 177, 30, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 42, 41, 189, 43, 190, 44, 191, 26, 192, 27, 193, 28, 29 }
  uselistorder i64 27, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i64 16, { 119, 25, 26, 27, 28, 29, 30, 10, 31, 32, 34, 35, 4, 36, 37, 38, 39, 40, 41, 42, 14, 43, 44, 45, 33, 46, 0, 1, 16, 17, 2, 18, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 19, 67, 68, 20, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 82, 84, 85, 86, 87, 88, 89, 90, 91, 11, 12, 13, 92, 93, 15, 21, 94, 95, 96, 97, 98, 99, 47, 48, 49, 50, 3, 51, 22, 52, 23, 24, 100, 65, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 5, 113, 114, 115, 116, 117, 118, 6, 8, 9, 7, 120 }
  uselistorder i64 40, { 42, 43, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 12, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 0, 48, 49, 50, 51, 52 }
  uselistorder i64 29, { 1, 0, 2 }
  uselistorder i64 0, { 1, 693, 0, 2, 3, 4, 5, 571, 694, 543, 7, 1235, 6, 1236, 695, 8, 10, 11, 9, 696, 569, 15, 563, 699, 698, 700, 1207, 573, 13, 697, 12, 18, 701, 14, 16, 17, 1206, 19, 20, 574, 21, 861, 564, 26, 27, 28, 29, 676, 862, 30, 863, 615, 31, 32, 33, 628, 22, 864, 865, 23, 24, 25, 866, 867, 868, 34, 869, 870, 37, 871, 36, 872, 35, 873, 40, 874, 39, 875, 38, 41, 44, 43, 879, 880, 704, 881, 882, 616, 45, 705, 706, 883, 884, 885, 707, 886, 708, 887, 888, 889, 890, 891, 892, 893, 702, 703, 894, 46, 895, 896, 47, 48, 897, 709, 898, 899, 900, 49, 50, 901, 51, 629, 630, 902, 903, 710, 711, 56, 53, 55, 58, 52, 54, 57, 59, 61, 60, 904, 905, 906, 907, 908, 909, 910, 911, 912, 677, 913, 42, 914, 915, 916, 678, 917, 67, 926, 927, 928, 929, 930, 931, 68, 932, 933, 66, 69, 575, 65, 70, 64, 63, 934, 712, 71, 935, 936, 937, 938, 713, 62, 939, 940, 941, 942, 75, 74, 73, 72, 943, 944, 81, 544, 113, 952, 953, 112, 954, 111, 955, 110, 956, 109, 957, 83, 958, 108, 959, 107, 631, 106, 960, 105, 679, 680, 104, 103, 961, 102, 101, 116, 76, 79, 114, 100, 82, 962, 78, 77, 117, 118, 80, 99, 98, 963, 97, 964, 115, 965, 119, 966, 96, 95, 94, 967, 93, 968, 92, 969, 91, 970, 90, 971, 89, 590, 88, 972, 87, 973, 86, 974, 85, 975, 84, 976, 122, 121, 978, 120, 591, 979, 980, 545, 592, 981, 714, 126, 982, 125, 983, 124, 128, 984, 127, 985, 123, 135, 134, 136, 133, 137, 138, 139, 132, 131, 681, 129, 144, 145, 140, 146, 141, 987, 142, 988, 130, 682, 143, 148, 989, 147, 990, 157, 991, 156, 992, 155, 993, 715, 149, 994, 570, 154, 153, 995, 152, 996, 151, 997, 150, 593, 998, 999, 1000, 1001, 1002, 546, 1003, 1004, 1005, 594, 160, 1006, 159, 1007, 158, 1008, 161, 1009, 1010, 716, 163, 162, 595, 1011, 164, 173, 165, 172, 171, 170, 169, 168, 167, 1012, 166, 596, 175, 176, 177, 174, 597, 598, 599, 1013, 178, 179, 180, 547, 182, 918, 181, 919, 920, 921, 922, 923, 924, 600, 601, 925, 548, 876, 185, 184, 877, 183, 683, 878, 189, 188, 187, 948, 717, 186, 949, 190, 602, 950, 549, 550, 551, 603, 604, 977, 191, 192, 951, 193, 986, 194, 195, 632, 197, 196, 718, 719, 720, 721, 552, 1043, 737, 1044, 738, 1045, 739, 198, 1046, 1047, 1048, 1049, 740, 1050, 741, 1051, 726, 727, 213, 220, 224, 1052, 212, 219, 223, 728, 1053, 729, 730, 1054, 1055, 1056, 734, 735, 733, 736, 605, 1057, 215, 226, 685, 1058, 201, 202, 203, 211, 216, 218, 222, 214, 217, 221, 225, 742, 206, 207, 731, 205, 732, 204, 617, 684, 1059, 208, 209, 210, 199, 743, 200, 1060, 1061, 1062, 744, 745, 1063, 231, 232, 1064, 1065, 746, 233, 1066, 1067, 1068, 227, 230, 1073, 576, 1071, 725, 1069, 1070, 747, 579, 748, 1072, 749, 234, 228, 577, 578, 229, 1074, 1075, 750, 1076, 1077, 722, 723, 724, 751, 752, 753, 1078, 754, 755, 756, 757, 1079, 758, 606, 1080, 759, 761, 760, 1081, 618, 1082, 1083, 1084, 1085, 235, 1086, 1087, 1088, 236, 1089, 633, 245, 1090, 762, 246, 1091, 763, 1092, 1093, 1094, 764, 607, 765, 766, 1095, 767, 1096, 634, 635, 237, 238, 619, 636, 637, 247, 248, 1097, 768, 770, 769, 771, 772, 773, 774, 775, 240, 239, 1098, 242, 249, 243, 638, 241, 244, 776, 257, 259, 256, 1106, 258, 255, 1107, 639, 640, 1108, 254, 1109, 777, 253, 1110, 642, 641, 252, 1111, 643, 1112, 848, 778, 779, 780, 781, 782, 251, 250, 783, 261, 263, 1113, 262, 1114, 1115, 1116, 784, 1117, 1118, 644, 260, 785, 786, 269, 787, 686, 264, 265, 268, 266, 1119, 645, 1120, 849, 267, 273, 1121, 272, 276, 278, 277, 274, 275, 789, 561, 270, 279, 280, 565, 566, 562, 788, 620, 1122, 646, 1123, 850, 271, 281, 282, 1124, 317, 316, 1125, 315, 314, 313, 312, 1126, 790, 311, 298, 299, 1127, 318, 310, 309, 308, 300, 1128, 307, 1129, 306, 1130, 305, 1131, 304, 1132, 303, 301, 1133, 1134, 1135, 1136, 1137, 1138, 296, 1139, 295, 1140, 294, 1141, 293, 292, 1142, 291, 1143, 290, 289, 288, 287, 1144, 1149, 1145, 283, 286, 1146, 285, 1147, 284, 1148, 320, 319, 580, 302, 1150, 297, 1151, 1152, 1153, 326, 647, 1154, 1155, 648, 327, 791, 325, 1156, 792, 328, 1157, 1158, 324, 1159, 323, 1160, 793, 322, 1161, 794, 321, 1162, 795, 1163, 1164, 333, 332, 1165, 334, 331, 1166, 649, 330, 1167, 1168, 1169, 1170, 329, 553, 796, 797, 335, 554, 798, 340, 1171, 339, 341, 342, 343, 344, 345, 1172, 346, 338, 1173, 799, 800, 337, 1174, 801, 336, 555, 1175, 349, 348, 1181, 347, 556, 1176, 354, 355, 353, 1177, 802, 352, 1178, 359, 1179, 351, 1180, 350, 358, 357, 356, 360, 608, 803, 361, 687, 362, 1182, 363, 1183, 364, 1184, 365, 368, 369, 366, 370, 371, 804, 372, 373, 367, 1185, 805, 376, 375, 688, 567, 378, 382, 380, 381, 379, 374, 377, 1099, 806, 1186, 383, 1187, 650, 384, 581, 582, 583, 385, 387, 388, 389, 390, 568, 386, 807, 391, 1014, 1015, 1016, 808, 1017, 1018, 587, 588, 1019, 1020, 392, 1023, 651, 1021, 1022, 393, 584, 585, 586, 1024, 851, 809, 810, 811, 395, 394, 812, 1025, 396, 397, 1026, 813, 403, 814, 815, 402, 401, 1027, 400, 1028, 399, 398, 609, 1029, 406, 1030, 405, 652, 1031, 404, 1032, 653, 407, 689, 859, 860, 690, 409, 1033, 1034, 1035, 408, 410, 1188, 1189, 816, 411, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1100, 1101, 414, 415, 1102, 852, 413, 1103, 1104, 412, 1105, 817, 858, 421, 610, 418, 1190, 417, 1191, 416, 1192, 420, 1193, 419, 422, 818, 611, 1194, 820, 425, 819, 423, 691, 1195, 426, 427, 428, 429, 424, 1196, 430, 654, 431, 435, 1197, 434, 433, 1198, 655, 821, 432, 439, 822, 440, 441, 442, 443, 436, 438, 1199, 656, 1200, 823, 437, 824, 445, 1201, 444, 557, 558, 446, 448, 447, 454, 453, 621, 450, 622, 623, 449, 825, 455, 452, 1202, 451, 459, 458, 1203, 457, 456, 460, 945, 946, 947, 559, 612, 1204, 1205, 572, 466, 465, 463, 1208, 464, 461, 462, 470, 467, 469, 468, 488, 1209, 487, 1210, 486, 1211, 485, 1212, 1213, 1214, 484, 692, 1215, 483, 1216, 826, 1217, 478, 1218, 479, 1219, 480, 1220, 474, 1221, 475, 491, 492, 493, 489, 490, 560, 471, 472, 482, 481, 473, 494, 476, 477, 613, 1222, 497, 542, 827, 498, 495, 496, 589, 499, 657, 1223, 500, 501, 658, 1224, 1225, 502, 503, 614, 504, 659, 1226, 505, 506, 828, 507, 660, 1227, 508, 509, 510, 661, 1228, 511, 512, 662, 1229, 513, 514, 663, 1230, 1231, 515, 516, 830, 829, 518, 831, 519, 1234, 517, 832, 1232, 520, 833, 521, 853, 1233, 522, 539, 538, 842, 840, 841, 846, 843, 537, 627, 844, 845, 839, 626, 527, 536, 625, 535, 624, 847, 534, 533, 1237, 837, 836, 532, 838, 531, 834, 1238, 835, 1239, 540, 541, 530, 529, 526, 525, 524, 523, 1240, 528, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 854, 855, 856, 857 }
  uselistorder i64* null, { 6, 7, 0, 1, 2, 8, 9, 3, 10, 11, 12, 13, 4, 5 }
  uselistorder i32 1, { 88, 87, 86, 85, 84, 57, 92, 91, 90, 89, 725, 764, 93, 765, 755, 99, 98, 97, 96, 95, 94, 56, 721, 726, 55, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 54, 113, 112, 111, 53, 114, 115, 727, 768, 767, 766, 756, 903, 904, 905, 728, 777, 776, 775, 774, 773, 772, 771, 770, 769, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 52, 8, 778, 132, 779, 133, 729, 757, 135, 134, 906, 907, 908, 909, 910, 722, 730, 731, 717, 911, 912, 913, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 83, 72, 51, 7, 914, 915, 718, 800, 799, 798, 797, 796, 795, 794, 793, 177, 176, 175, 174, 173, 172, 171, 170, 50, 6, 803, 802, 801, 752, 181, 180, 179, 178, 5, 734, 719, 732, 720, 733, 815, 814, 813, 812, 758, 811, 810, 809, 808, 807, 806, 759, 805, 804, 753, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 49, 4, 819, 818, 817, 816, 211, 820, 213, 212, 214, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 735, 227, 226, 225, 916, 230, 229, 228, 736, 231, 737, 235, 234, 233, 232, 821, 240, 239, 238, 237, 236, 248, 247, 246, 245, 244, 243, 242, 241, 48, 253, 252, 251, 250, 249, 255, 254, 738, 824, 823, 822, 260, 259, 258, 257, 256, 3, 825, 2, 263, 262, 261, 826, 47, 1, 723, 266, 265, 264, 268, 267, 270, 269, 272, 271, 739, 830, 829, 828, 827, 274, 273, 46, 917, 918, 741, 919, 920, 921, 922, 923, 924, 925, 740, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 742, 848, 847, 763, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 45, 943, 743, 944, 945, 946, 854, 853, 852, 760, 851, 850, 849, 366, 365, 364, 363, 362, 361, 360, 947, 948, 949, 950, 951, 372, 371, 370, 369, 368, 367, 44, 716, 952, 953, 857, 856, 855, 381, 380, 379, 378, 377, 376, 375, 374, 373, 82, 69, 43, 954, 724, 744, 955, 956, 858, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 81, 68, 42, 745, 859, 410, 41, 860, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 40, 957, 958, 754, 428, 39, 959, 960, 961, 863, 862, 861, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 80, 67, 38, 962, 963, 964, 965, 966, 967, 968, 447, 446, 445, 444, 443, 442, 441, 440, 439, 37, 864, 449, 448, 969, 970, 869, 868, 867, 866, 865, 456, 455, 454, 453, 452, 451, 450, 36, 457, 35, 870, 0, 872, 871, 464, 463, 462, 461, 460, 459, 458, 34, 468, 467, 466, 465, 469, 470, 873, 471, 33, 876, 875, 874, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 79, 71, 66, 32, 878, 877, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 78, 70, 65, 31, 761, 507, 506, 879, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 77, 64, 30, 882, 881, 880, 762, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 76, 63, 29, 883, 549, 548, 547, 75, 62, 28, 885, 884, 552, 551, 550, 61, 27, 553, 902, 557, 556, 555, 554, 558, 559, 560, 561, 940, 941, 942, 887, 886, 567, 566, 565, 564, 563, 562, 74, 60, 26, 888, 569, 568, 570, 746, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 889, 585, 584, 583, 582, 581, 25, 747, 890, 593, 592, 591, 590, 589, 588, 587, 586, 24, 748, 597, 596, 595, 594, 23, 600, 599, 598, 22, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 620, 619, 618, 617, 616, 622, 621, 21, 971, 627, 626, 625, 624, 623, 20, 972, 749, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 750, 654, 653, 652, 651, 650, 649, 648, 19, 891, 656, 655, 18, 892, 658, 657, 17, 893, 894, 660, 659, 16, 895, 662, 661, 73, 59, 15, 896, 665, 664, 663, 14, 897, 668, 667, 666, 13, 898, 672, 671, 670, 669, 12, 899, 676, 675, 674, 673, 900, 677, 58, 11, 678, 10, 751, 973, 974, 975, 901, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 9 }
  uselistorder i64* %arg3, { 0, 2, 1 }
  uselistorder i64 %arg2, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_acde, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_acd0, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_ac86, { 1, 0 }
}

declare i64 @lzma_check_init(i64*) local_unnamed_addr

declare i64 @__tls_get_addr(i64) local_unnamed_addr

declare i64 @lzma_free(i64, i64, i64) local_unnamed_addr

declare i64 @lzma_alloc(i64, i64, i64, i64) local_unnamed_addr

declare i64 @unknown_22894c0824548b48() local_unnamed_addr

declare void @__asm_rep_stosd_memset(i8*, i32, i64) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1) #0

declare %0 @__asm_cpuid(i32) local_unnamed_addr

declare %1 @__asm_cpuid.1(i32) local_unnamed_addr

declare %2 @__asm_cpuid.2(i32) local_unnamed_addr

declare %3 @__asm_cpuid.3(i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #0

declare i128 @__asm_xorps(i128, i128) local_unnamed_addr

declare void @__asm_movups(i128, i128) local_unnamed_addr

declare i128 @__asm_movups.4(i128) local_unnamed_addr

declare void @__asm_rep_movsd_memcpy(i8*, i8*, i64) local_unnamed_addr

declare void @__asm_rep_stosb_memset(i8*, i8, i64) local_unnamed_addr

declare void @__asm_rep_movsb_memcpy(i8*, i8*, i64) local_unnamed_addr

declare i64 @__asm_movaps(i128) local_unnamed_addr

declare %4 @__asm_cpuid.5(i32) local_unnamed_addr

attributes #0 = { nounwind readnone speculatable }

!0 = !{i64 0}
!1 = !{i64 38}
!2 = !{i64 43}
!3 = !{i64 45}
!4 = !{i64 64}
!5 = !{i64 69}
!6 = !{i64 34}
!7 = !{i64 75}
!8 = !{i64 80}
!9 = !{i64 84}
!10 = !{i64 86}
!11 = !{i64 88}
!12 = !{i64 94}
!13 = !{i64 96}
!14 = !{i64 117}
!15 = !{i64 121}
!16 = !{i64 123}
!17 = !{i64 125}
!18 = !{i64 131}
!19 = !{i64 133}
!20 = !{i64 141}
!21 = !{i64 143}
!22 = !{i64 145}
!23 = !{i64 153}
!24 = !{i64 169}
!25 = !{i64 175}
!26 = !{i64 178}
!27 = !{i64 180}
!28 = !{i64 189}
!29 = !{i64 192}
!30 = !{i64 194}
!31 = !{i64 197}
!32 = !{i64 199}
!33 = !{i64 202}
!34 = !{i64 204}
!35 = !{i64 213}
!36 = !{i64 216}
!37 = !{i64 218}
!38 = !{i64 221}
!39 = !{i64 223}
!40 = !{i64 226}
!41 = !{i64 228}
!42 = !{i64 230}
!43 = !{i64 234}
!44 = !{i64 240}
!45 = !{i64 246}
!46 = !{i64 252}
!47 = !{i64 256}
!48 = !{i64 258}
!49 = !{i64 261}
!50 = !{i64 266}
!51 = !{i64 269}
!52 = !{i64 271}
!53 = !{i64 280}
!54 = !{i64 283}
!55 = !{i64 285}
!56 = !{i64 296}
!57 = !{i64 303}
!58 = !{i64 306}
!59 = !{i64 308}
!60 = !{i64 311}
!61 = !{i64 314}
!62 = !{i64 320}
!63 = !{i64 323}
!64 = !{i64 326}
!65 = !{i64 329}
!66 = !{i64 333}
!67 = !{i64 336}
!68 = !{i64 340}
!69 = !{i64 343}
!70 = !{i64 353}
!71 = !{i64 355}
!72 = !{i64 357}
!73 = !{i64 361}
!74 = !{i64 363}
!75 = !{i64 366}
!76 = !{i64 369}
!77 = !{i64 372}
!78 = !{i64 379}
!79 = !{i64 383}
!80 = !{i64 386}
!81 = !{i64 390}
!82 = !{i64 393}
!83 = !{i64 397}
!84 = !{i64 400}
!85 = !{i64 403}
!86 = !{i64 409}
!87 = !{i64 412}
!88 = !{i64 415}
!89 = !{i64 419}
!90 = !{i64 421}
!91 = !{i64 425}
!92 = !{i64 428}
!93 = !{i64 439}
!94 = !{i64 443}
!95 = !{i64 449}
!96 = !{i64 458}
!97 = !{i64 462}
!98 = !{i64 464}
!99 = !{i64 467}
!100 = !{i64 470}
!101 = !{i64 474}
!102 = !{i64 476}
!103 = !{i64 480}
!104 = !{i64 486}
!105 = !{i64 497}
!106 = !{i64 499}
!107 = !{i64 502}
!108 = !{i64 504}
!109 = !{i64 514}
!110 = !{i64 532}
!111 = !{i64 536}
!112 = !{i64 540}
!113 = !{i64 545}
!114 = !{i64 549}
!115 = !{i64 570}
!116 = !{i64 573}
!117 = !{i64 586}
!118 = !{i64 596}
!119 = !{i64 635}
!120 = !{i64 639}
!121 = !{i64 642}
!122 = !{i64 645}
!123 = !{i64 654}
!124 = !{i64 663}
!125 = !{i64 668}
!126 = !{i64 673}
!127 = !{i64 675}
!128 = !{i64 682}
!129 = !{i64 704}
!130 = !{i64 720}
!131 = !{i64 723}
!132 = !{i64 725}
!133 = !{i64 736}
!134 = !{i64 740}
!135 = !{i64 752}
!136 = !{i64 755}
!137 = !{i64 764}
!138 = !{i64 768}
!139 = !{i64 780}
!140 = !{i64 783}
!141 = !{i64 786}
!142 = !{i64 793}
!143 = !{i64 797}
!144 = !{i64 804}
!145 = !{i64 808}
!146 = !{i64 819}
!147 = !{i64 827}
!148 = !{i64 829}
!149 = !{i64 833}
!150 = !{i64 848}
!151 = !{i64 850}
!152 = !{i64 854}
!153 = !{i64 862}
!154 = !{i64 865}
!155 = !{i64 867}
!156 = !{i64 874}
!157 = !{i64 879}
!158 = !{i64 883}
!159 = !{i64 889}
!160 = !{i64 893}
!161 = !{i64 899}
!162 = !{i64 902}
!163 = !{i64 907}
!164 = !{i64 913}
!165 = !{i64 916}
!166 = !{i64 924}
!167 = !{i64 927}
!168 = !{i64 931}
!169 = !{i64 938}
!170 = !{i64 943}
!171 = !{i64 946}
!172 = !{i64 949}
!173 = !{i64 952}
!174 = !{i64 955}
!175 = !{i64 957}
!176 = !{i64 960}
!177 = !{i64 968}
!178 = !{i64 971}
!179 = !{i64 973}
!180 = !{i64 977}
!181 = !{i64 983}
!182 = !{i64 986}
!183 = !{i64 989}
!184 = !{i64 1010}
!185 = !{i64 1017}
!186 = !{i64 1026}
!187 = !{i64 1023}
!188 = !{i64 1028}
!189 = !{i64 1032}
!190 = !{i64 1038}
!191 = !{i64 1044}
!192 = !{i64 1042}
!193 = !{i64 1059}
!194 = !{i64 1062}
!195 = !{i64 1066}
!196 = !{i64 1083}
!197 = !{i64 1089}
!198 = !{i64 1091}
!199 = !{i64 1095}
!200 = !{i64 1099}
!201 = !{i64 1101}
!202 = !{i64 1104}
!203 = !{i64 1108}
!204 = !{i64 1114}
!205 = !{i64 1117}
!206 = !{i64 1129}
!207 = !{i64 1132}
!208 = !{i64 1136}
!209 = !{i64 1141}
!210 = !{i64 1145}
!211 = !{i64 1159}
!212 = !{i64 1163}
!213 = !{i64 1179}
!214 = !{i64 1182}
!215 = !{i64 1185}
!216 = !{i64 1190}
!217 = !{i64 1194}
!218 = !{i64 1200}
!219 = !{i64 1204}
!220 = !{i64 1210}
!221 = !{i64 1213}
!222 = !{i64 1217}
!223 = !{i64 1221}
!224 = !{i64 1224}
!225 = !{i64 1233}
!226 = !{i64 1230}
!227 = !{i64 1241}
!228 = !{i64 1246}
!229 = !{i64 1249}
!230 = !{i64 1252}
!231 = !{i64 1255}
!232 = !{i64 1258}
!233 = !{i64 1260}
!234 = !{i64 1265}
!235 = !{i64 1280}
!236 = !{i64 1287}
!237 = !{i64 1294}
!238 = !{i64 1308}
!239 = !{i64 1311}
!240 = !{i64 1314}
!241 = !{i64 1318}
!242 = !{i64 1321}
!243 = !{i64 1333}
!244 = !{i64 1344}
!245 = !{i64 1347}
!246 = !{i64 1352}
!247 = !{i64 1355}
!248 = !{i64 1358}
!249 = !{i64 1369}
!250 = !{i64 1373}
!251 = !{i64 1377}
!252 = !{i64 1379}
!253 = !{i64 1384}
!254 = !{i64 1389}
!255 = !{i64 1394}
!256 = !{i64 1399}
!257 = !{i64 1402}
!258 = !{i64 1414}
!259 = !{i64 1420}
!260 = !{i64 1423}
!261 = !{i64 1427}
!262 = !{i64 1431}
!263 = !{i64 1434}
!264 = !{i64 1437}
!265 = !{i64 1442}
!266 = !{i64 1445}
!267 = !{i64 1448}
!268 = !{i64 1455}
!269 = !{i64 1466}
!270 = !{i64 1470}
!271 = !{i64 1473}
!272 = !{i64 1477}
!273 = !{i64 1479}
!274 = !{i64 1483}
!275 = !{i64 1485}
!276 = !{i64 1488}
!277 = !{i64 1490}
!278 = !{i64 1493}
!279 = !{i64 1497}
!280 = !{i64 1499}
!281 = !{i64 1502}
!282 = !{i64 1504}
!283 = !{i64 1508}
!284 = !{i64 1517}
!285 = !{i64 1520}
!286 = !{i64 1532}
!287 = !{i64 1536}
!288 = !{i64 1541}
!289 = !{i64 1544}
!290 = !{i64 1547}
!291 = !{i64 1554}
!292 = !{i64 1559}
!293 = !{i64 1562}
!294 = !{i64 1564}
!295 = !{i64 1568}
!296 = !{i64 1576}
!297 = !{i64 1581}
!298 = !{i64 1585}
!299 = !{i64 1587}
!300 = !{i64 1594}
!301 = !{i64 1599}
!302 = !{i64 1602}
!303 = !{i64 1609}
!304 = !{i64 1613}
!305 = !{i64 1629}
!306 = !{i64 1632}
!307 = !{i64 1635}
!308 = !{i64 1641}
!309 = !{i64 1645}
!310 = !{i64 1648}
!311 = !{i64 1652}
!312 = !{i64 1654}
!313 = !{i64 1657}
!314 = !{i64 1661}
!315 = !{i64 1665}
!316 = !{i64 1668}
!317 = !{i64 1672}
!318 = !{i64 1675}
!319 = !{i64 1679}
!320 = !{i64 1694}
!321 = !{i64 1712}
!322 = !{i64 1715}
!323 = !{i64 1717}
!324 = !{i64 1721}
!325 = !{i64 1723}
!326 = !{i64 1731}
!327 = !{i64 1733}
!328 = !{i64 1737}
!329 = !{i64 1739}
!330 = !{i64 1698}
!331 = !{i64 1747}
!332 = !{i64 1750}
!333 = !{i64 1759}
!334 = !{i64 1756}
!335 = !{i64 1763}
!336 = !{i64 1767}
!337 = !{i64 1770}
!338 = !{i64 1774}
!339 = !{i64 1780}
!340 = !{i64 1787}
!341 = !{i64 1791}
!342 = !{i64 1799}
!343 = !{i64 1802}
!344 = !{i64 2456}
!345 = !{i64 1807}
!346 = !{i64 1810}
!347 = !{i64 1816}
!348 = !{i64 1820}
!349 = !{i64 1823}
!350 = !{i64 1829}
!351 = !{i64 1836}
!352 = !{i64 1839}
!353 = !{i64 1855}
!354 = !{i64 1859}
!355 = !{i64 1862}
!356 = !{i64 1872}
!357 = !{i64 1882}
!358 = !{i64 1885}
!359 = !{i64 1868}
!360 = !{i64 1876}
!361 = !{i64 1845}
!362 = !{i64 1849}
!363 = !{i64 1833}
!364 = !{i64 1891}
!365 = !{i64 1895}
!366 = !{i64 1852}
!367 = !{i64 1879}
!368 = !{i64 1898}
!369 = !{i64 1900}
!370 = !{i64 1903}
!371 = !{i64 1905}
!372 = !{i64 1909}
!373 = !{i64 1912}
!374 = !{i64 1918}
!375 = !{i64 1922}
!376 = !{i64 1925}
!377 = !{i64 1931}
!378 = !{i64 1935}
!379 = !{i64 1938}
!380 = !{i64 1944}
!381 = !{i64 1948}
!382 = !{i64 1951}
!383 = !{i64 1957}
!384 = !{i64 1961}
!385 = !{i64 1964}
!386 = !{i64 1970}
!387 = !{i64 1973}
!388 = !{i64 1979}
!389 = !{i64 1985}
!390 = !{i64 1988}
!391 = !{i64 1992}
!392 = !{i64 1995}
!393 = !{i64 2001}
!394 = !{i64 2004}
!395 = !{i64 2009}
!396 = !{i64 2013}
!397 = !{i64 2016}
!398 = !{i64 2026}
!399 = !{i64 2037}
!400 = !{i64 2040}
!401 = !{i64 2022}
!402 = !{i64 2030}
!403 = !{i64 2034}
!404 = !{i64 2046}
!405 = !{i64 2050}
!406 = !{i64 2054}
!407 = !{i64 2057}
!408 = !{i64 2061}
!409 = !{i64 2063}
!410 = !{i64 2067}
!411 = !{i64 2069}
!412 = !{i64 2071}
!413 = !{i64 2075}
!414 = !{i64 2078}
!415 = !{i64 2095}
!416 = !{i64 2099}
!417 = !{i64 2102}
!418 = !{i64 2119}
!419 = !{i64 2123}
!420 = !{i64 2126}
!421 = !{i64 2136}
!422 = !{i64 2147}
!423 = !{i64 2150}
!424 = !{i64 2132}
!425 = !{i64 2140}
!426 = !{i64 2108}
!427 = !{i64 2112}
!428 = !{i64 2084}
!429 = !{i64 2088}
!430 = !{i64 2156}
!431 = !{i64 2160}
!432 = !{i64 2092}
!433 = !{i64 2116}
!434 = !{i64 2144}
!435 = !{i64 2164}
!436 = !{i64 2167}
!437 = !{i64 2171}
!438 = !{i64 2178}
!439 = !{i64 2185}
!440 = !{i64 2190}
!441 = !{i64 2193}
!442 = !{i64 2195}
!443 = !{i64 2199}
!444 = !{i64 2204}
!445 = !{i64 2208}
!446 = !{i64 2213}
!447 = !{i64 2216}
!448 = !{i64 2219}
!449 = !{i64 2225}
!450 = !{i64 2231}
!451 = !{i64 2234}
!452 = !{i64 2237}
!453 = !{i64 2239}
!454 = !{i64 2242}
!455 = !{i64 2245}
!456 = !{i64 2248}
!457 = !{i64 2257}
!458 = !{i64 2260}
!459 = !{i64 2266}
!460 = !{i64 2270}
!461 = !{i64 2272}
!462 = !{i64 2274}
!463 = !{i64 2282}
!464 = !{i64 2287}
!465 = !{i64 2291}
!466 = !{i64 2295}
!467 = !{i64 2297}
!468 = !{i64 2300}
!469 = !{i64 2306}
!470 = !{i64 2308}
!471 = !{i64 2312}
!472 = !{i64 2316}
!473 = !{i64 2318}
!474 = !{i64 2322}
!475 = !{i64 2336}
!476 = !{i64 2334}
!477 = !{i64 2342}
!478 = !{i64 2346}
!479 = !{i64 2350}
!480 = !{i64 2354}
!481 = !{i64 2356}
!482 = !{i64 2360}
!483 = !{i64 2363}
!484 = !{i64 2370}
!485 = !{i64 2373}
!486 = !{i64 2376}
!487 = !{i64 2378}
!488 = !{i64 2381}
!489 = !{i64 2387}
!490 = !{i64 2390}
!491 = !{i64 2395}
!492 = !{i64 2398}
!493 = !{i64 2401}
!494 = !{i64 2404}
!495 = !{i64 2407}
!496 = !{i64 2417}
!497 = !{i64 2420}
!498 = !{i64 2426}
!499 = !{i64 2429}
!500 = !{i64 2432}
!501 = !{i64 2434}
!502 = !{i64 2437}
!503 = !{i64 2440}
!504 = !{i64 2442}
!505 = !{i64 2446}
!506 = !{i64 2448}
!507 = !{i64 2450}
!508 = !{i64 2452}
!509 = !{i64 2459}
!510 = !{i64 2462}
!511 = !{i64 2468}
!512 = !{i64 2472}
!513 = !{i64 2474}
!514 = !{i64 2477}
!515 = !{i64 2479}
!516 = !{i64 2483}
!517 = !{i64 2488}
!518 = !{i64 2491}
!519 = !{i64 2498}
!520 = !{i64 2503}
!521 = !{i64 2506}
!522 = !{i64 2509}
!523 = !{i64 2515}
!524 = !{i64 2519}
!525 = !{i64 2523}
!526 = !{i64 2527}
!527 = !{i64 2533}
!528 = !{i64 2536}
!529 = !{i64 2542}
!530 = !{i64 2547}
!531 = !{i64 2551}
!532 = !{i64 2554}
!533 = !{i64 2574}
!534 = !{i64 2578}
!535 = !{i64 2581}
!536 = !{i64 2589}
!537 = !{i64 2593}
!538 = !{i64 2596}
!539 = !{i64 2603}
!540 = !{i64 2608}
!541 = !{i64 2612}
!542 = !{i64 2615}
!543 = !{i64 2617}
!544 = !{i64 2627}
!545 = !{i64 2631}
!546 = !{i64 2634}
!547 = !{i64 2636}
!548 = !{i64 2624}
!549 = !{i64 2640}
!550 = !{i64 2643}
!551 = !{i64 2646}
!552 = !{i64 2649}
!553 = !{i64 2651}
!554 = !{i64 2654}
!555 = !{i64 2656}
!556 = !{i64 2659}
!557 = !{i64 2661}
!558 = !{i64 2664}
!559 = !{i64 2667}
!560 = !{i64 2671}
!561 = !{i64 2676}
!562 = !{i64 2678}
!563 = !{i64 2684}
!564 = !{i64 2688}
!565 = !{i64 2703}
!566 = !{i64 2705}
!567 = !{i64 2718}
!568 = !{i64 2720}
!569 = !{i64 2724}
!570 = !{i64 2751}
!571 = !{i64 2768}
!572 = !{i64 2782}
!573 = !{i64 2784}
!574 = !{i64 2789}
!575 = !{i64 2794}
!576 = !{i64 2800}
!577 = !{i64 2812}
!578 = !{i64 2814}
!579 = !{i64 2821}
!580 = !{i64 2826}
!581 = !{i64 2828}
!582 = !{i64 2830}
!583 = !{i64 2833}
!584 = !{i64 2835}
!585 = !{i64 2866}
!586 = !{i64 2873}
!587 = !{i64 2878}
!588 = !{i64 2882}
!589 = !{i64 2890}
!590 = !{i64 2880}
!591 = !{i64 2897}
!592 = !{i64 2902}
!593 = !{i64 2904}
!594 = !{i64 2906}
!595 = !{i64 2909}
!596 = !{i64 2918}
!597 = !{i64 2922}
!598 = !{i64 2932}
!599 = !{i64 2944}
!600 = !{i64 2973}
!601 = !{i64 2993}
!602 = !{i64 2996}
!603 = !{i64 2988}
!604 = !{i64 3007}
!605 = !{i64 3010}
!606 = !{i64 3017}
!607 = !{i64 3020}
!608 = !{i64 3039}
!609 = !{i64 3044}
!610 = !{i64 3048}
!611 = !{i64 3046}
!612 = !{i64 3053}
!613 = !{i64 3056}
!614 = !{i64 3070}
!615 = !{i64 3075}
!616 = !{i64 3077}
!617 = !{i64 3083}
!618 = !{i64 3089}
!619 = !{i64 3093}
!620 = !{i64 3096}
!621 = !{i64 3117}
!622 = !{i64 3122}
!623 = !{i64 3124}
!624 = !{i64 3129}
!625 = !{i64 3132}
!626 = !{i64 3134}
!627 = !{i64 3137}
!628 = !{i64 3151}
!629 = !{i64 3156}
!630 = !{i64 3158}
!631 = !{i64 3160}
!632 = !{i64 3163}
!633 = !{i64 3167}
!634 = !{i64 3183}
!635 = !{i64 3184}
!636 = !{i64 3227}
!637 = !{i64 3232}
!638 = !{i64 3234}
!639 = !{i64 3255}
!640 = !{i64 3266}
!641 = !{i64 3269}
!642 = !{i64 3252}
!643 = !{i64 3257}
!644 = !{i64 3262}
!645 = !{i64 3280}
!646 = !{i64 3285}
!647 = !{i64 3287}
!648 = !{i64 3289}
!649 = !{i64 3296}
!650 = !{i64 3301}
!651 = !{i64 3303}
!652 = !{i64 3307}
!653 = !{i64 3311}
!654 = !{i64 3314}
!655 = !{i64 3317}
!656 = !{i64 3319}
!657 = !{i64 3323}
!658 = !{i64 3325}
!659 = !{i64 3328}
!660 = !{i64 3345}
!661 = !{i64 3360}
!662 = !{i64 3406}
!663 = !{i64 3417}
!664 = !{i64 3420}
!665 = !{i64 3398}
!666 = !{i64 3408}
!667 = !{i64 3413}
!668 = !{i64 3431}
!669 = !{i64 3436}
!670 = !{i64 3438}
!671 = !{i64 3440}
!672 = !{i64 3443}
!673 = !{i64 3448}
!674 = !{i64 3453}
!675 = !{i64 3455}
!676 = !{i64 3458}
!677 = !{i64 3461}
!678 = !{i64 3469}
!679 = !{i64 3472}
!680 = !{i64 3479}
!681 = !{i64 3482}
!682 = !{i64 3487}
!683 = !{i64 3506}
!684 = !{i64 3508}
!685 = !{i64 3512}
!686 = !{i64 3514}
!687 = !{i64 3517}
!688 = !{i64 3540}
!689 = !{i64 3552}
!690 = !{i64 3598}
!691 = !{i64 3609}
!692 = !{i64 3612}
!693 = !{i64 3590}
!694 = !{i64 3600}
!695 = !{i64 3605}
!696 = !{i64 3623}
!697 = !{i64 3628}
!698 = !{i64 3630}
!699 = !{i64 3632}
!700 = !{i64 3635}
!701 = !{i64 3640}
!702 = !{i64 3645}
!703 = !{i64 3647}
!704 = !{i64 3650}
!705 = !{i64 3653}
!706 = !{i64 3661}
!707 = !{i64 3664}
!708 = !{i64 3671}
!709 = !{i64 3691}
!710 = !{i64 3693}
!711 = !{i64 3697}
!712 = !{i64 3699}
!713 = !{i64 3702}
!714 = !{i64 3725}
!715 = !{i64 3728}
!716 = !{i64 3770}
!717 = !{i64 3775}
!718 = !{i64 3777}
!719 = !{i64 3798}
!720 = !{i64 3808}
!721 = !{i64 3811}
!722 = !{i64 3805}
!723 = !{i64 3822}
!724 = !{i64 3827}
!725 = !{i64 3829}
!726 = !{i64 3867}
!727 = !{i64 3889}
!728 = !{i64 3904}
!729 = !{i64 3944}
!730 = !{i64 3949}
!731 = !{i64 3951}
!732 = !{i64 3972}
!733 = !{i64 3983}
!734 = !{i64 3986}
!735 = !{i64 3969}
!736 = !{i64 3979}
!737 = !{i64 3997}
!738 = !{i64 4002}
!739 = !{i64 4004}
!740 = !{i64 4006}
!741 = !{i64 4013}
!742 = !{i64 4015}
!743 = !{i64 4018}
!744 = !{i64 4021}
!745 = !{i64 4023}
!746 = !{i64 4025}
!747 = !{i64 4028}
!748 = !{i64 4033}
!749 = !{i64 4038}
!750 = !{i64 4043}
!751 = !{i64 4045}
!752 = !{i64 4049}
!753 = !{i64 4052}
!754 = !{i64 4056}
!755 = !{i64 4059}
!756 = !{i64 4061}
!757 = !{i64 4081}
!758 = !{i64 4119}
!759 = !{i64 4135}
!760 = !{i64 4144}
!761 = !{i64 4157}
!762 = !{i64 4160}
!763 = !{i64 4208}
!764 = !{i64 4213}
!765 = !{i64 4215}
!766 = !{i64 4236}
!767 = !{i64 4247}
!768 = !{i64 4250}
!769 = !{i64 4233}
!770 = !{i64 4238}
!771 = !{i64 4243}
!772 = !{i64 4261}
!773 = !{i64 4266}
!774 = !{i64 4268}
!775 = !{i64 4270}
!776 = !{i64 4274}
!777 = !{i64 4276}
!778 = !{i64 4279}
!779 = !{i64 4284}
!780 = !{i64 4289}
!781 = !{i64 4294}
!782 = !{i64 4296}
!783 = !{i64 4300}
!784 = !{i64 4302}
!785 = !{i64 4306}
!786 = !{i64 4309}
!787 = !{i64 4313}
!788 = !{i64 4316}
!789 = !{i64 4318}
!790 = !{i64 4340}
!791 = !{i64 4379}
!792 = !{i64 4393}
!793 = !{i64 4405}
!794 = !{i64 4416}
!795 = !{i64 4430}
!796 = !{i64 4432}
!797 = !{i64 4473}
!798 = !{i64 4484}
!799 = !{i64 4487}
!800 = !{i64 4465}
!801 = !{i64 4475}
!802 = !{i64 4480}
!803 = !{i64 4498}
!804 = !{i64 4503}
!805 = !{i64 4505}
!806 = !{i64 4507}
!807 = !{i64 4514}
!808 = !{i64 4516}
!809 = !{i64 4519}
!810 = !{i64 4524}
!811 = !{i64 4529}
!812 = !{i64 4534}
!813 = !{i64 4536}
!814 = !{i64 4540}
!815 = !{i64 4542}
!816 = !{i64 4546}
!817 = !{i64 4549}
!818 = !{i64 4553}
!819 = !{i64 4556}
!820 = !{i64 4558}
!821 = !{i64 4582}
!822 = !{i64 4635}
!823 = !{i64 4640}
!824 = !{i64 4667}
!825 = !{i64 4670}
!826 = !{i64 4642}
!827 = !{i64 4663}
!828 = !{i64 4682}
!829 = !{i64 4686}
!830 = !{i64 4695}
!831 = !{i64 4689}
!832 = !{i64 4708}
!833 = !{i64 4715}
!834 = !{i64 4718}
!835 = !{i64 4728}
!836 = !{i64 4724}
!837 = !{i64 4732}
!838 = !{i64 4735}
!839 = !{i64 4741}
!840 = !{i64 4744}
!841 = !{i64 4747}
!842 = !{i64 4750}
!843 = !{i64 4756}
!844 = !{i64 4763}
!845 = !{i64 4767}
!846 = !{i64 4771}
!847 = !{i64 4774}
!848 = !{i64 4781}
!849 = !{i64 4803}
!850 = !{i64 4810}
!851 = !{i64 4813}
!852 = !{i64 4822}
!853 = !{i64 4820}
!854 = !{i64 4840}
!855 = !{i64 4846}
!856 = !{i64 4849}
!857 = !{i64 4806}
!858 = !{i64 4862}
!859 = !{i64 4865}
!860 = !{i64 4875}
!861 = !{i64 4877}
!862 = !{i64 4895}
!863 = !{i64 4901}
!864 = !{i64 4915}
!865 = !{i64 4925}
!866 = !{i64 4927}
!867 = !{i64 4934}
!868 = !{i64 4944}
!869 = !{i64 4947}
!870 = !{i64 4952}
!871 = !{i64 4954}
!872 = !{i64 4957}
!873 = !{i64 4960}
!874 = !{i64 4962}
!875 = !{i64 4990}
!876 = !{i64 4999}
!877 = !{i64 5024}
!878 = !{i64 5028}
!879 = !{i64 5033}
!880 = !{i64 5036}
!881 = !{i64 5040}
!882 = !{i64 5044}
!883 = !{i64 5069}
!884 = !{i64 5047}
!885 = !{i64 5078}
!886 = !{i64 5102}
!887 = !{i64 5104}
!888 = !{i64 5111}
!889 = !{i64 5116}
!890 = !{i64 5122}
!891 = !{i64 5125}
!892 = !{i64 5130}
!893 = !{i64 5137}
!894 = !{i64 5140}
!895 = !{i64 5142}
!896 = !{i64 5145}
!897 = !{i64 5148}
!898 = !{i64 5150}
!899 = !{i64 5157}
!900 = !{i64 5161}
!901 = !{i64 5163}
!902 = !{i64 5166}
!903 = !{i64 5168}
!904 = !{i64 5171}
!905 = !{i64 5178}
!906 = !{i64 5183}
!907 = !{i64 5185}
!908 = !{i64 5187}
!909 = !{i64 5191}
!910 = !{i64 5197}
!911 = !{i64 5201}
!912 = !{i64 5205}
!913 = !{i64 5209}
!914 = !{i64 5216}
!915 = !{i64 5220}
!916 = !{i64 5223}
!917 = !{i64 5229}
!918 = !{i64 5239}
!919 = !{i64 5233}
!920 = !{i64 5248}
!921 = !{i64 5255}
!922 = !{i64 5262}
!923 = !{i64 5265}
!924 = !{i64 5273}
!925 = !{i64 5277}
!926 = !{i64 5284}
!927 = !{i64 5294}
!928 = !{i64 5298}
!929 = !{i64 5305}
!930 = !{i64 5310}
!931 = !{i64 5312}
!932 = !{i64 5425}
!933 = !{i64 5429}
!934 = !{i64 5435}
!935 = !{i64 5439}
!936 = !{i64 5442}
!937 = !{i64 5314}
!938 = !{i64 5357}
!939 = !{i64 5359}
!940 = !{i64 5366}
!941 = !{i64 5372}
!942 = !{i64 5385}
!943 = !{i64 5394}
!944 = !{i64 5407}
!945 = !{i64 5409}
!946 = !{i64 5419}
!947 = !{i64 5421}
!948 = !{i64 5444}
!949 = !{i64 5447}
!950 = !{i64 5469}
!951 = !{i64 5482}
!952 = !{i64 5489}
!953 = !{i64 5491}
!954 = !{i64 5494}
!955 = !{i64 5496}
!956 = !{i64 5503}
!957 = !{i64 5505}
!958 = !{i64 5508}
!959 = !{i64 5515}
!960 = !{i64 5519}
!961 = !{i64 5543}
!962 = !{i64 5550}
!963 = !{i64 5556}
!964 = !{i64 5559}
!965 = !{i64 5563}
!966 = !{i64 5655}
!967 = !{i64 5663}
!968 = !{i64 5667}
!969 = !{i64 5677}
!970 = !{i64 5680}
!971 = !{i64 5686}
!972 = !{i64 5693}
!973 = !{i64 5698}
!974 = !{i64 5702}
!975 = !{i64 5705}
!976 = !{i64 5740}
!977 = !{i64 5744}
!978 = !{i64 5747}
!979 = !{i64 5786}
!980 = !{i64 5793}
!981 = !{i64 5796}
!982 = !{i64 5828}
!983 = !{i64 5833}
!984 = !{i64 5835}
!985 = !{i64 5837}
!986 = !{i64 5841}
!987 = !{i64 5845}
!988 = !{i64 5847}
!989 = !{i64 5854}
!990 = !{i64 5858}
!991 = !{i64 5861}
!992 = !{i64 5867}
!993 = !{i64 5871}
!994 = !{i64 5880}
!995 = !{i64 5874}
!996 = !{i64 5889}
!997 = !{i64 5892}
!998 = !{i64 5894}
!999 = !{i64 5897}
!1000 = !{i64 5900}
!1001 = !{i64 5904}
!1002 = !{i64 5947}
!1003 = !{i64 5951}
!1004 = !{i64 5954}
!1005 = !{i64 5956}
!1006 = !{i64 5959}
!1007 = !{i64 5963}
!1008 = !{i64 5966}
!1009 = !{i64 5970}
!1010 = !{i64 5975}
!1011 = !{i64 5978}
!1012 = !{i64 5973}
!1013 = !{i64 5980}
!1014 = !{i64 5983}
!1015 = !{i64 5987}
!1016 = !{i64 5991}
!1017 = !{i64 5994}
!1018 = !{i64 6010}
!1019 = !{i64 6015}
!1020 = !{i64 6017}
!1021 = !{i64 6023}
!1022 = !{i64 6027}
!1023 = !{i64 6030}
!1024 = !{i64 6043}
!1025 = !{i64 6048}
!1026 = !{i64 6050}
!1027 = !{i64 6056}
!1028 = !{i64 6063}
!1029 = !{i64 6066}
!1030 = !{i64 6079}
!1031 = !{i64 6084}
!1032 = !{i64 6086}
!1033 = !{i64 6092}
!1034 = !{i64 6096}
!1035 = !{i64 6099}
!1036 = !{i64 6101}
!1037 = !{i64 6114}
!1038 = !{i64 6119}
!1039 = !{i64 6121}
!1040 = !{i64 6127}
!1041 = !{i64 6130}
!1042 = !{i64 6136}
!1043 = !{i64 6140}
!1044 = !{i64 6144}
!1045 = !{i64 6147}
!1046 = !{i64 6149}
!1047 = !{i64 6155}
!1048 = !{i64 6159}
!1049 = !{i64 6163}
!1050 = !{i64 6170}
!1051 = !{i64 6174}
!1052 = !{i64 6176}
!1053 = !{i64 6179}
!1054 = !{i64 6185}
!1055 = !{i64 6192}
!1056 = !{i64 6196}
!1057 = !{i64 6203}
!1058 = !{i64 6240}
!1059 = !{i64 6285}
!1060 = !{i64 6290}
!1061 = !{i64 6292}
!1062 = !{i64 6302}
!1063 = !{i64 6307}
!1064 = !{i64 6309}
!1065 = !{i64 6315}
!1066 = !{i64 6318}
!1067 = !{i64 6320}
!1068 = !{i64 6325}
!1069 = !{i64 6332}
!1070 = !{i64 6334}
!1071 = !{i64 6341}
!1072 = !{i64 6352}
!1073 = !{i64 6364}
!1074 = !{i64 6369}
!1075 = !{i64 6371}
!1076 = !{i64 6373}
!1077 = !{i64 6377}
!1078 = !{i64 6392}
!1079 = !{i64 6409}
!1080 = !{i64 6414}
!1081 = !{i64 6416}
!1082 = !{i64 6436}
!1083 = !{i64 6447}
!1084 = !{i64 6454}
!1085 = !{i64 6461}
!1086 = !{i64 6466}
!1087 = !{i64 6468}
!1088 = !{i64 6474}
!1089 = !{i64 6480}
!1090 = !{i64 6482}
!1091 = !{i64 6493}
!1092 = !{i64 6497}
!1093 = !{i64 6499}
!1094 = !{i64 6507}
!1095 = !{i64 6514}
!1096 = !{i64 6516}
!1097 = !{i64 6520}
!1098 = !{i64 6543}
!1099 = !{i64 6548}
!1100 = !{i64 6550}
!1101 = !{i64 6561}
!1102 = !{i64 6570}
!1103 = !{i64 6572}
!1104 = !{i64 6579}
!1105 = !{i64 6585}
!1106 = !{i64 6588}
!1107 = !{i64 6608}
!1108 = !{i64 6613}
!1109 = !{i64 6615}
!1110 = !{i64 6621}
!1111 = !{i64 6627}
!1112 = !{i64 6632}
!1113 = !{i64 6635}
!1114 = !{i64 6637}
!1115 = !{i64 6643}
!1116 = !{i64 6678}
!1117 = !{i64 6682}
!1118 = !{i64 6661}
!1119 = !{i64 6704}
!1120 = !{i64 6709}
!1121 = !{i64 6711}
!1122 = !{i64 6717}
!1123 = !{i64 6723}
!1124 = !{i64 6734}
!1125 = !{i64 6739}
!1126 = !{i64 6741}
!1127 = !{i64 6745}
!1128 = !{i64 6747}
!1129 = !{i64 6753}
!1130 = !{i64 6757}
!1131 = !{i64 6674}
!1132 = !{i64 6762}
!1133 = !{i64 6779}
!1134 = !{i64 6785}
!1135 = !{i64 6790}
!1136 = !{i64 6792}
!1137 = !{i64 6798}
!1138 = !{i64 6801}
!1139 = !{i64 6824}
!1140 = !{i64 6829}
!1141 = !{i64 6831}
!1142 = !{i64 6842}
!1143 = !{i64 6847}
!1144 = !{i64 6851}
!1145 = !{i64 6869}
!1146 = !{i64 6890}
!1147 = !{i64 6895}
!1148 = !{i64 6898}
!1149 = !{i64 6900}
!1150 = !{i64 6904}
!1151 = !{i64 6907}
!1152 = !{i64 6909}
!1153 = !{i64 6927}
!1154 = !{i64 6928}
!1155 = !{i64 6931}
!1156 = !{i64 6934}
!1157 = !{i64 6936}
!1158 = !{i64 6940}
!1159 = !{i64 6943}
!1160 = !{i64 6949}
!1161 = !{i64 6952}
!1162 = !{i64 6954}
!1163 = !{i64 6958}
!1164 = !{i64 6965}
!1165 = !{i64 6969}
!1166 = !{i64 6971}
!1167 = !{i64 6977}
!1168 = !{i64 6980}
!1169 = !{i64 6982}
!1170 = !{i64 6986}
!1171 = !{i64 6990}
!1172 = !{i64 6994}
!1173 = !{i64 6997}
!1174 = !{i64 7012}
!1175 = !{i64 7014}
!1176 = !{i64 7024}
!1177 = !{i64 7028}
!1178 = !{i64 7035}
!1179 = !{i64 7041}
!1180 = !{i64 7047}
!1181 = !{i64 7049}
!1182 = !{i64 7065}
!1183 = !{i64 7084}
!1184 = !{i64 7087}
!1185 = !{i64 7081}
!1186 = !{i64 7093}
!1187 = !{i64 7089}
!1188 = !{i64 7097}
!1189 = !{i64 7101}
!1190 = !{i64 7103}
!1191 = !{i64 7110}
!1192 = !{i64 7112}
!1193 = !{i64 7115}
!1194 = !{i64 7117}
!1195 = !{i64 7120}
!1196 = !{i64 7122}
!1197 = !{i64 7125}
!1198 = !{i64 7131}
!1199 = !{i64 7133}
!1200 = !{i64 7138}
!1201 = !{i64 7141}
!1202 = !{i64 7136}
!1203 = !{i64 7143}
!1204 = !{i64 7151}
!1205 = !{i64 7153}
!1206 = !{i64 7163}
!1207 = !{i64 7165}
!1208 = !{i64 7168}
!1209 = !{i64 7174}
!1210 = !{i64 7184}
!1211 = !{i64 7209}
!1212 = !{i64 7216}
!1213 = !{i64 7222}
!1214 = !{i64 7231}
!1215 = !{i64 7240}
!1216 = !{i64 7234}
!1217 = !{i64 7256}
!1218 = !{i64 7285}
!1219 = !{i64 7288}
!1220 = !{i64 7264}
!1221 = !{i64 7294}
!1222 = !{i64 7305}
!1223 = !{i64 7309}
!1224 = !{i64 7313}
!1225 = !{i64 7420}
!1226 = !{i64 7301}
!1227 = !{i64 7315}
!1228 = !{i64 7342}
!1229 = !{i64 7347}
!1230 = !{i64 7349}
!1231 = !{i64 7360}
!1232 = !{i64 7369}
!1233 = !{i64 7374}
!1234 = !{i64 7376}
!1235 = !{i64 7379}
!1236 = !{i64 7385}
!1237 = !{i64 7390}
!1238 = !{i64 7395}
!1239 = !{i64 7388}
!1240 = !{i64 7401}
!1241 = !{i64 7405}
!1242 = !{i64 7407}
!1243 = !{i64 7411}
!1244 = !{i64 7413}
!1245 = !{i64 7457}
!1246 = !{i64 7462}
!1247 = !{i64 7464}
!1248 = !{i64 7466}
!1249 = !{i64 7486}
!1250 = !{i64 7489}
!1251 = !{i64 7494}
!1252 = !{i64 7496}
!1253 = !{i64 7499}
!1254 = !{i64 7506}
!1255 = !{i64 7504}
!1256 = !{i64 7515}
!1257 = !{i64 7522}
!1258 = !{i64 7533}
!1259 = !{i64 7535}
!1260 = !{i64 7547}
!1261 = !{i64 7549}
!1262 = !{i64 7552}
!1263 = !{i64 7572}
!1264 = !{i64 7584}
!1265 = !{i64 7633}
!1266 = !{i64 7640}
!1267 = !{i64 7666}
!1268 = !{i64 7642}
!1269 = !{i64 7590}
!1270 = !{i64 7648}
!1271 = !{i64 7652}
!1272 = !{i64 7654}
!1273 = !{i64 7657}
!1274 = !{i64 7659}
!1275 = !{i64 7662}
!1276 = !{i64 7669}
!1277 = !{i64 7673}
!1278 = !{i64 7681}
!1279 = !{i64 7685}
!1280 = !{i64 7690}
!1281 = !{i64 7692}
!1282 = !{i64 7696}
!1283 = !{i64 7705}
!1284 = !{i64 7715}
!1285 = !{i64 7718}
!1286 = !{i64 7720}
!1287 = !{i64 7724}
!1288 = !{i64 7740}
!1289 = !{i64 7751}
!1290 = !{i64 7758}
!1291 = !{i64 7760}
!1292 = !{i64 7763}
!1293 = !{i64 7765}
!1294 = !{i64 7748}
!1295 = !{i64 7767}
!1296 = !{i64 7776}
!1297 = !{i64 7783}
!1298 = !{i64 7799}
!1299 = !{i64 7806}
!1300 = !{i64 7808}
!1301 = !{i64 7814}
!1302 = !{i64 7816}
!1303 = !{i64 7796}
!1304 = !{i64 7818}
!1305 = !{i64 7827}
!1306 = !{i64 7834}
!1307 = !{i64 7840}
!1308 = !{i64 7871}
!1309 = !{i64 7880}
!1310 = !{i64 7882}
!1311 = !{i64 7884}
!1312 = !{i64 7894}
!1313 = !{i64 7897}
!1314 = !{i64 7899}
!1315 = !{i64 7919}
!1316 = !{i64 7921}
!1317 = !{i64 7927}
!1318 = !{i64 7907}
!1319 = !{i64 7914}
!1320 = !{i64 7916}
!1321 = !{i64 7923}
!1322 = !{i64 7931}
!1323 = !{i64 7934}
!1324 = !{i64 7936}
!1325 = !{i64 7940}
!1326 = !{i64 7945}
!1327 = !{i64 7949}
!1328 = !{i64 7953}
!1329 = !{i64 7957}
!1330 = !{i64 7960}
!1331 = !{i64 7966}
!1332 = !{i64 7988}
!1333 = !{i64 7991}
!1334 = !{i64 7998}
!1335 = !{i64 8005}
!1336 = !{i64 8013}
!1337 = !{i64 8016}
!1338 = !{i64 8052}
!1339 = !{i64 8057}
!1340 = !{i64 8059}
!1341 = !{i64 8068}
!1342 = !{i64 8080}
!1343 = !{i64 8085}
!1344 = !{i64 8088}
!1345 = !{i64 8090}
!1346 = !{i64 8097}
!1347 = !{i64 8101}
!1348 = !{i64 8114}
!1349 = !{i64 8122}
!1350 = !{i64 8125}
!1351 = !{i64 8127}
!1352 = !{i64 8147}
!1353 = !{i64 8150}
!1354 = !{i64 8132}
!1355 = !{i64 8156}
!1356 = !{i64 8152}
!1357 = !{i64 8160}
!1358 = !{i64 8163}
!1359 = !{i64 8165}
!1360 = !{i64 8168}
!1361 = !{i64 8171}
!1362 = !{i64 8174}
!1363 = !{i64 8176}
!1364 = !{i64 8183}
!1365 = !{i64 8187}
!1366 = !{i64 8194}
!1367 = !{i64 8227}
!1368 = !{i64 8230}
!1369 = !{i64 8191}
!1370 = !{i64 8204}
!1371 = !{i64 8232}
!1372 = !{i64 8235}
!1373 = !{i64 8249}
!1374 = !{i64 8252}
!1375 = !{i64 8254}
!1376 = !{i64 8257}
!1377 = !{i64 8268}
!1378 = !{i64 8273}
!1379 = !{i64 8276}
!1380 = !{i64 8282}
!1381 = !{i64 8289}
!1382 = !{i64 8296}
!1383 = !{i64 8309}
!1384 = !{i64 8320}
!1385 = !{i64 8361}
!1386 = !{i64 8366}
!1387 = !{i64 8368}
!1388 = !{i64 8384}
!1389 = !{i64 8389}
!1390 = !{i64 8397}
!1391 = !{i64 8400}
!1392 = !{i64 8402}
!1393 = !{i64 8411}
!1394 = !{i64 8413}
!1395 = !{i64 8416}
!1396 = !{i64 8419}
!1397 = !{i64 8421}
!1398 = !{i64 8424}
!1399 = !{i64 8426}
!1400 = !{i64 8429}
!1401 = !{i64 8433}
!1402 = !{i64 8453}
!1403 = !{i64 8456}
!1404 = !{i64 8441}
!1405 = !{i64 8446}
!1406 = !{i64 8448}
!1407 = !{i64 8450}
!1408 = !{i64 8466}
!1409 = !{i64 8468}
!1410 = !{i64 8470}
!1411 = !{i64 8474}
!1412 = !{i64 8492}
!1413 = !{i64 8496}
!1414 = !{i64 8505}
!1415 = !{i64 8515}
!1416 = !{i64 8518}
!1417 = !{i64 8530}
!1418 = !{i64 8610}
!1419 = !{i64 8613}
!1420 = !{i64 8503}
!1421 = !{i64 8595}
!1422 = !{i64 8547}
!1423 = !{i64 8549}
!1424 = !{i64 8551}
!1425 = !{i64 8558}
!1426 = !{i64 8561}
!1427 = !{i64 8562}
!1428 = !{i64 8569}
!1429 = !{i64 8572}
!1430 = !{i64 8575}
!1431 = !{i64 8578}
!1432 = !{i64 8879}
!1433 = !{i64 8591}
!1434 = !{i64 8599}
!1435 = !{i64 8602}
!1436 = !{i64 8604}
!1437 = !{i64 8620}
!1438 = !{i64 8624}
!1439 = !{i64 8628}
!1440 = !{i64 8632}
!1441 = !{i64 8634}
!1442 = !{i64 8638}
!1443 = !{i64 8642}
!1444 = !{i64 8654}
!1445 = !{i64 8658}
!1446 = !{i64 8665}
!1447 = !{i64 8668}
!1448 = !{i64 8675}
!1449 = !{i64 8698}
!1450 = !{i64 8701}
!1451 = !{i64 8703}
!1452 = !{i64 8721}
!1453 = !{i64 8723}
!1454 = !{i64 8727}
!1455 = !{i64 8730}
!1456 = !{i64 8749}
!1457 = !{i64 8752}
!1458 = !{i64 8754}
!1459 = !{i64 8759}
!1460 = !{i64 8767}
!1461 = !{i64 8771}
!1462 = !{i64 8775}
!1463 = !{i64 8779}
!1464 = !{i64 8782}
!1465 = !{i64 8792}
!1466 = !{i64 8818}
!1467 = !{i64 8821}
!1468 = !{i64 8828}
!1469 = !{i64 8831}
!1470 = !{i64 8838}
!1471 = !{i64 8845}
!1472 = !{i64 8847}
!1473 = !{i64 8849}
!1474 = !{i64 8852}
!1475 = !{i64 8854}
!1476 = !{i64 8857}
!1477 = !{i64 8878}
!1478 = !{i64 8880}
!1479 = !{i64 8910}
!1480 = !{i64 8915}
!1481 = !{i64 8917}
!1482 = !{i64 8924}
!1483 = !{i64 8927}
!1484 = !{i64 8929}
!1485 = !{i64 8934}
!1486 = !{i64 8936}
!1487 = !{i64 8944}
!1488 = !{i64 8948}
!1489 = !{i64 8952}
!1490 = !{i64 8955}
!1491 = !{i64 8962}
!1492 = !{i64 8984}
!1493 = !{i64 8987}
!1494 = !{i64 8991}
!1495 = !{i64 8998}
!1496 = !{i64 9001}
!1497 = !{i64 8994}
!1498 = !{i64 9003}
!1499 = !{i64 9006}
!1500 = !{i64 9014}
!1501 = !{i64 9017}
!1502 = !{i64 9022}
!1503 = !{i64 9025}
!1504 = !{i64 9036}
!1505 = !{i64 9040}
!1506 = !{i64 9044}
!1507 = !{i64 9047}
!1508 = !{i64 9082}
!1509 = !{i64 9086}
!1510 = !{i64 9093}
!1511 = !{i64 9096}
!1512 = !{i64 9107}
!1513 = !{i64 9110}
!1514 = !{i64 9115}
!1515 = !{i64 9120}
!1516 = !{i64 9123}
!1517 = !{i64 9125}
!1518 = !{i64 9130}
!1519 = !{i64 9132}
!1520 = !{i64 9136}
!1521 = !{i64 9139}
!1522 = !{i64 9169}
!1523 = !{i64 9171}
!1524 = !{i64 9181}
!1525 = !{i64 9186}
!1526 = !{i64 9189}
!1527 = !{i64 9184}
!1528 = !{i64 9193}
!1529 = !{i64 9195}
!1530 = !{i64 9197}
!1531 = !{i64 9204}
!1532 = !{i64 9207}
!1533 = !{i64 9232}
!1534 = !{i64 9271}
!1535 = !{i64 9277}
!1536 = !{i64 9292}
!1537 = !{i64 9315}
!1538 = !{i64 9322}
!1539 = !{i64 9348}
!1540 = !{i64 9409}
!1541 = !{i64 9444}
!1542 = !{i64 9505}
!1543 = !{i64 9520}
!1544 = !{i64 9557}
!1545 = !{i64 9562}
!1546 = !{i64 9575}
!1547 = !{i64 9583}
!1548 = !{i64 9588}
!1549 = !{i64 9591}
!1550 = !{i64 9593}
!1551 = !{i64 9613}
!1552 = !{i64 9618}
!1553 = !{i64 9622}
!1554 = !{i64 9625}
!1555 = !{i64 9627}
!1556 = !{i64 9642}
!1557 = !{i64 9652}
!1558 = !{i64 9655}
!1559 = !{i64 9657}
!1560 = !{i64 9665}
!1561 = !{i64 9610}
!1562 = !{i64 9681}
!1563 = !{i64 9685}
!1564 = !{i64 9688}
!1565 = !{i64 9690}
!1566 = !{i64 9733}
!1567 = !{i64 9743}
!1568 = !{i64 9758}
!1569 = !{i64 9766}
!1570 = !{i64 9768}
!1571 = !{i64 9775}
!1572 = !{i64 9782}
!1573 = !{i64 9715}
!1574 = !{i64 9725}
!1575 = !{i64 9797}
!1576 = !{i64 9800}
!1577 = !{i64 9748}
!1578 = !{i64 9824}
!1579 = !{i64 9834}
!1580 = !{i64 9836}
!1581 = !{i64 9856}
!1582 = !{i64 9867}
!1583 = !{i64 9886}
!1584 = !{i64 9894}
!1585 = !{i64 9899}
!1586 = !{i64 9902}
!1587 = !{i64 9904}
!1588 = !{i64 9907}
!1589 = !{i64 9911}
!1590 = !{i64 9913}
!1591 = !{i64 9916}
!1592 = !{i64 9950}
!1593 = !{i64 9955}
!1594 = !{i64 9958}
!1595 = !{i64 9963}
!1596 = !{i64 9975}
!1597 = !{i64 9980}
!1598 = !{i64 9983}
!1599 = !{i64 9985}
!1600 = !{i64 9992}
!1601 = !{i64 9996}
!1602 = !{i64 10003}
!1603 = !{i64 10005}
!1604 = !{i64 10013}
!1605 = !{i64 10026}
!1606 = !{i64 10029}
!1607 = !{i64 10050}
!1608 = !{i64 10064}
!1609 = !{i64 10067}
!1610 = !{i64 10069}
!1611 = !{i64 10073}
!1612 = !{i64 10076}
!1613 = !{i64 10078}
!1614 = !{i64 10081}
!1615 = !{i64 10083}
!1616 = !{i64 10090}
!1617 = !{i64 10093}
!1618 = !{i64 10095}
!1619 = !{i64 10098}
!1620 = !{i64 10102}
!1621 = !{i64 10105}
!1622 = !{i64 10107}
!1623 = !{i64 10110}
!1624 = !{i64 10112}
!1625 = !{i64 10116}
!1626 = !{i64 10119}
!1627 = !{i64 10121}
!1628 = !{i64 10126}
!1629 = !{i64 10128}
!1630 = !{i64 10132}
!1631 = !{i64 10135}
!1632 = !{i64 10139}
!1633 = !{i64 10141}
!1634 = !{i64 10145}
!1635 = !{i64 10148}
!1636 = !{i64 10152}
!1637 = !{i64 10155}
!1638 = !{i64 10160}
!1639 = !{i64 10169}
!1640 = !{i64 10172}
!1641 = !{i64 10181}
!1642 = !{i64 10187}
!1643 = !{i64 10192}
!1644 = !{i64 10201}
!1645 = !{i64 10209}
!1646 = !{i64 10213}
!1647 = !{i64 10220}
!1648 = !{i64 10224}
!1649 = !{i64 10231}
!1650 = !{i64 10235}
!1651 = !{i64 10242}
!1652 = !{i64 10246}
!1653 = !{i64 10253}
!1654 = !{i64 10257}
!1655 = !{i64 10264}
!1656 = !{i64 10268}
!1657 = !{i64 10273}
!1658 = !{i64 10288}
!1659 = !{i64 10297}
!1660 = !{i64 10300}
!1661 = !{i64 10302}
!1662 = !{i64 10309}
!1663 = !{i64 10312}
!1664 = !{i64 10319}
!1665 = !{i64 10323}
!1666 = !{i64 10330}
!1667 = !{i64 10334}
!1668 = !{i64 10352}
!1669 = !{i64 10359}
!1670 = !{i64 10361}
!1671 = !{i64 10371}
!1672 = !{i64 10373}
!1673 = !{i64 10378}
!1674 = !{i64 10380}
!1675 = !{i64 10385}
!1676 = !{i64 10394}
!1677 = !{i64 10405}
!1678 = !{i64 10411}
!1679 = !{i64 10416}
!1680 = !{i64 10428}
!1681 = !{i64 10439}
!1682 = !{i64 10456}
!1683 = !{i64 10474}
!1684 = !{i64 10493}
!1685 = !{i64 10496}
!1686 = !{i64 10505}
!1687 = !{i64 10508}
!1688 = !{i64 10516}
!1689 = !{i64 10519}
!1690 = !{i64 10448}
!1691 = !{i64 10462}
!1692 = !{i64 10482}
!1693 = !{i64 10485}
!1694 = !{i64 10489}
!1695 = !{i64 10530}
!1696 = !{i64 10535}
!1697 = !{i64 10539}
!1698 = !{i64 10544}
!1699 = !{i64 10546}
!1700 = !{i64 10551}
!1701 = !{i64 10560}
!1702 = !{i64 10566}
!1703 = !{i64 10570}
!1704 = !{i64 10578}
!1705 = !{i64 10590}
!1706 = !{i64 10593}
!1707 = !{i64 10584}
!1708 = !{i64 10599}
!1709 = !{i64 10603}
!1710 = !{i64 10608}
!1711 = !{i64 10612}
!1712 = !{i64 10617}
!1713 = !{i64 10622}
!1714 = !{i64 10615}
!1715 = !{i64 10624}
!1716 = !{i64 10633}
!1717 = !{i64 10635}
!1718 = !{i64 10639}
!1719 = !{i64 10647}
!1720 = !{i64 10655}
!1721 = !{i64 10658}
!1722 = !{i64 10653}
!1723 = !{i64 10660}
!1724 = !{i64 10664}
!1725 = !{i64 10668}
!1726 = !{i64 10671}
!1727 = !{i64 10682}
!1728 = !{i64 10686}
!1729 = !{i64 10691}
!1730 = !{i64 10693}
!1731 = !{i64 10698}
!1732 = !{i64 10707}
!1733 = !{i64 10709}
!1734 = !{i64 10713}
!1735 = !{i64 10721}
!1736 = !{i64 10729}
!1737 = !{i64 10732}
!1738 = !{i64 10727}
!1739 = !{i64 10734}
!1740 = !{i64 10741}
!1741 = !{i64 10750}
!1742 = !{i64 10755}
!1743 = !{i64 10760}
!1744 = !{i64 10772}
!1745 = !{i64 10785}
!1746 = !{i64 10800}
!1747 = !{i64 10805}
!1748 = !{i64 10809}
!1749 = !{i64 10812}
!1750 = !{i64 10816}
!1751 = !{i64 10819}
!1752 = !{i64 10847}
!1753 = !{i64 10850}
!1754 = !{i64 10854}
!1755 = !{i64 10862}
!1756 = !{i64 10867}
!1757 = !{i64 10871}
!1758 = !{i64 10874}
!1759 = !{i64 10897}
!1760 = !{i64 10902}
!1761 = !{i64 10904}
!1762 = !{i64 10923}
!1763 = !{i64 10928}
!1764 = !{i64 10932}
!1765 = !{i64 10935}
!1766 = !{i64 10949}
!1767 = !{i64 10952}
!1768 = !{i64 10966}
!1769 = !{i64 10971}
!1770 = !{i64 10973}
!1771 = !{i64 10976}
!1772 = !{i64 10984}
!1773 = !{i64 10992}
!1774 = !{i64 11010}
!1775 = !{i64 11028}
!1776 = !{i64 11033}
!1777 = !{i64 11061}
!1778 = !{i64 11056}
!1779 = !{i64 11079}
!1780 = !{i64 11082}
!1781 = !{i64 11097}
!1782 = !{i64 11099}
!1783 = !{i64 11106}
!1784 = !{i64 11109}
!1785 = !{i64 11111}
!1786 = !{i64 11118}
!1787 = !{i64 11121}
!1788 = !{i64 11123}
!1789 = !{i64 11138}
!1790 = !{i64 11143}
!1791 = !{i64 11145}
!1792 = !{i64 11147}
!1793 = !{i64 11165}
!1794 = !{i64 11168}
!1795 = !{i64 11173}
!1796 = !{i64 11177}
!1797 = !{i64 11185}
!1798 = !{i64 11175}
!1799 = !{i64 11202}
!1800 = !{i64 11214}
!1801 = !{i64 11219}
!1802 = !{i64 11232}
!1803 = !{i64 11237}
!1804 = !{i64 11258}
!1805 = !{i64 11263}
!1806 = !{i64 11265}
!1807 = !{i64 11287}
!1808 = !{i64 11292}
!1809 = !{i64 11294}
!1810 = !{i64 11297}
!1811 = !{i64 11313}
!1812 = !{i64 11328}
!1813 = !{i64 11330}
!1814 = !{i64 11337}
!1815 = !{i64 11363}
!1816 = !{i64 11365}
!1817 = !{i64 11369}
!1818 = !{i64 11373}
!1819 = !{i64 11376}
!1820 = !{i64 11382}
!1821 = !{i64 11398}
!1822 = !{i64 11401}
!1823 = !{i64 11394}
!1824 = !{i64 11411}
!1825 = !{i64 11420}
!1826 = !{i64 11425}
!1827 = !{i64 11427}
!1828 = !{i64 11438}
!1829 = !{i64 11445}
!1830 = !{i64 11450}
!1831 = !{i64 11487}
!1832 = !{i64 11492}
!1833 = !{i64 11495}
!1834 = !{i64 11490}
!1835 = !{i64 11497}
!1836 = !{i64 11502}
!1837 = !{i64 11504}
!1838 = !{i64 11507}
!1839 = !{i64 11522}
!1840 = !{i64 11536}
!1841 = !{i64 11563}
!1842 = !{i64 11568}
!1843 = !{i64 11570}
!1844 = !{i64 11573}
!1845 = !{i64 11577}
!1846 = !{i64 11582}
!1847 = !{i64 11598}
!1848 = !{i64 11610}
!1849 = !{i64 11615}
!1850 = !{i64 11620}
!1851 = !{i64 11628}
!1852 = !{i64 11631}
!1853 = !{i64 11641}
!1854 = !{i64 11647}
!1855 = !{i64 11656}
!1856 = !{i64 11662}
!1857 = !{i64 11667}
!1858 = !{i64 11689}
!1859 = !{i64 11693}
!1860 = !{i64 11701}
!1861 = !{i64 11704}
!1862 = !{i64 11709}
!1863 = !{i64 11715}
!1864 = !{i64 11717}
!1865 = !{i64 11721}
!1866 = !{i64 11726}
!1867 = !{i64 11737}
!1868 = !{i64 11742}
!1869 = !{i64 11745}
!1870 = !{i64 11747}
!1871 = !{i64 11752}
!1872 = !{i64 11756}
!1873 = !{i64 11763}
!1874 = !{i64 11765}
!1875 = !{i64 11772}
!1876 = !{i64 11776}
!1877 = !{i64 11783}
!1878 = !{i64 11786}
!1879 = !{i64 11790}
!1880 = !{i64 11793}
!1881 = !{i64 11795}
!1882 = !{i64 11798}
!1883 = !{i64 11800}
!1884 = !{i64 11804}
!1885 = !{i64 11808}
!1886 = !{i64 11811}
!1887 = !{i64 11813}
!1888 = !{i64 11817}
!1889 = !{i64 11819}
!1890 = !{i64 11822}
!1891 = !{i64 11824}
!1892 = !{i64 11827}
!1893 = !{i64 11830}
!1894 = !{i64 11832}
!1895 = !{i64 11836}
!1896 = !{i64 11839}
!1897 = !{i64 11844}
!1898 = !{i64 11847}
!1899 = !{i64 12075}
!1900 = !{i64 12084}
!1901 = !{i64 12089}
!1902 = !{i64 12092}
!1903 = !{i64 11864}
!1904 = !{i64 11867}
!1905 = !{i64 11872}
!1906 = !{i64 11874}
!1907 = !{i64 11876}
!1908 = !{i64 11900}
!1909 = !{i64 11910}
!1910 = !{i64 11915}
!1911 = !{i64 11918}
!1912 = !{i64 11926}
!1913 = !{i64 11934}
!1914 = !{i64 11968}
!1915 = !{i64 11971}
!1916 = !{i64 11973}
!1917 = !{i64 11976}
!1918 = !{i64 11991}
!1919 = !{i64 11985}
!1920 = !{i64 12003}
!1921 = !{i64 12007}
!1922 = !{i64 12010}
!1923 = !{i64 12012}
!1924 = !{i64 12015}
!1925 = !{i64 12017}
!1926 = !{i64 12021}
!1927 = !{i64 12025}
!1928 = !{i64 12028}
!1929 = !{i64 12030}
!1930 = !{i64 12034}
!1931 = !{i64 12036}
!1932 = !{i64 12039}
!1933 = !{i64 12041}
!1934 = !{i64 12044}
!1935 = !{i64 12047}
!1936 = !{i64 12049}
!1937 = !{i64 12053}
!1938 = !{i64 12056}
!1939 = !{i64 12097}
!1940 = !{i64 12101}
!1941 = !{i64 12104}
!1942 = !{i64 12106}
!1943 = !{i64 12109}
!1944 = !{i64 12111}
!1945 = !{i64 12115}
!1946 = !{i64 12118}
!1947 = !{i64 12121}
!1948 = !{i64 12123}
!1949 = !{i64 12127}
!1950 = !{i64 12129}
!1951 = !{i64 12132}
!1952 = !{i64 12134}
!1953 = !{i64 12137}
!1954 = !{i64 12140}
!1955 = !{i64 12142}
!1956 = !{i64 12146}
!1957 = !{i64 12149}
!1958 = !{i64 12158}
!1959 = !{i64 12162}
!1960 = !{i64 12164}
!1961 = !{i64 12168}
!1962 = !{i64 12171}
!1963 = !{i64 12173}
!1964 = !{i64 12177}
!1965 = !{i64 12180}
!1966 = !{i64 12182}
!1967 = !{i64 12187}
!1968 = !{i64 12190}
!1969 = !{i64 12153}
!1970 = !{i64 12156}
!1971 = !{i64 12194}
!1972 = !{i64 12199}
!1973 = !{i64 12202}
!1974 = !{i64 12205}
!1975 = !{i64 12207}
!1976 = !{i64 12212}
!1977 = !{i64 12230}
!1978 = !{i64 12240}
!1979 = !{i64 12258}
!1980 = !{i64 12276}
!1981 = !{i64 12279}
!1982 = !{i64 12306}
!1983 = !{i64 12313}
!1984 = !{i64 12341}
!1985 = !{i64 12346}
!1986 = !{i64 12348}
!1987 = !{i64 12358}
!1988 = !{i64 12415}
!1989 = !{i64 12423}
!1990 = !{i64 12432}
!1991 = !{i64 12449}
!1992 = !{i64 12468}
!1993 = !{i64 12471}
!1994 = !{i64 12479}
!1995 = !{i64 12483}
!1996 = !{i64 12497}
!1997 = !{i64 12500}
!1998 = !{i64 12486}
!1999 = !{i64 12506}
!2000 = !{i64 12510}
!2001 = !{i64 12520}
!2002 = !{i64 12526}
!2003 = !{i64 12555}
!2004 = !{i64 12570}
!2005 = !{i64 12581}
!2006 = !{i64 12596}
!2007 = !{i64 12606}
!2008 = !{i64 12624}
!2009 = !{i64 12628}
!2010 = !{i64 12630}
!2011 = !{i64 12637}
!2012 = !{i64 12649}
!2013 = !{i64 12657}
!2014 = !{i64 12660}
!2015 = !{i64 12669}
!2016 = !{i64 12673}
!2017 = !{i64 12690}
!2018 = !{i64 12692}
!2019 = !{i64 12699}
!2020 = !{i64 12719}
!2021 = !{i64 12736}
!2022 = !{i64 12741}
!2023 = !{i64 12745}
!2024 = !{i64 12751}
!2025 = !{i64 12768}
!2026 = !{i64 12806}
!2027 = !{i64 12808}
!2028 = !{i64 12811}
!2029 = !{i64 12823}
!2030 = !{i64 12836}
!2031 = !{i64 12838}
!2032 = !{i64 12841}
!2033 = !{i64 12843}
!2034 = !{i64 12846}
!2035 = !{i64 12848}
!2036 = !{i64 12850}
!2037 = !{i64 12855}
!2038 = !{i64 12860}
!2039 = !{i64 12863}
!2040 = !{i64 12866}
!2041 = !{i64 12868}
!2042 = !{i64 12873}
!2043 = !{i64 12880}
!2044 = !{i64 12883}
!2045 = !{i64 12891}
!2046 = !{i64 12913}
!2047 = !{i64 12920}
!2048 = !{i64 12925}
!2049 = !{i64 12927}
!2050 = !{i64 12929}
!2051 = !{i64 12949}
!2052 = !{i64 12960}
!2053 = !{i64 12998}
!2054 = !{i64 13007}
!2055 = !{i64 13012}
!2056 = !{i64 13014}
!2057 = !{i64 13023}
!2058 = !{i64 13029}
!2059 = !{i64 13037}
!2060 = !{i64 13040}
!2061 = !{i64 13061}
!2062 = !{i64 13051}
!2063 = !{i64 13056}
!2064 = !{i64 13059}
!2065 = !{i64 13082}
!2066 = !{i64 13088}
!2067 = !{i64 13138}
!2068 = !{i64 13148}
!2069 = !{i64 13151}
!2070 = !{i64 13159}
!2071 = !{i64 13172}
!2072 = !{i64 13238}
!2073 = !{i64 13192}
!2074 = !{i64 13197}
!2075 = !{i64 13199}
!2076 = !{i64 13220}
!2077 = !{i64 13231}
!2078 = !{i64 13233}
!2079 = !{i64 13241}
!2080 = !{i64 13273}
!2081 = !{i64 13277}
!2082 = !{i64 13283}
!2083 = !{i64 13285}
!2084 = !{i64 13296}
!2085 = !{i64 13308}
!2086 = !{i64 13311}
!2087 = !{i64 13318}
!2088 = !{i64 13322}
!2089 = !{i64 13324}
!2090 = !{i64 13331}
!2091 = !{i64 13344}
!2092 = !{i64 13347}
!2093 = !{i64 13358}
!2094 = !{i64 13371}
!2095 = !{i64 13373}
!2096 = !{i64 13376}
!2097 = !{i64 13407}
!2098 = !{i64 13417}
!2099 = !{i64 13427}
!2100 = !{i64 13430}
!2101 = !{i64 13467}
!2102 = !{i64 13472}
!2103 = !{i64 13474}
!2104 = !{i64 13506}
!2105 = !{i64 13529}
!2106 = !{i64 13547}
!2107 = !{i64 13559}
!2108 = !{i64 13571}
!2109 = !{i64 13594}
!2110 = !{i64 13619}
!2111 = !{i64 13622}
!2112 = !{i64 13624}
!2113 = !{i64 13627}
!2114 = !{i64 13665}
!2115 = !{i64 13669}
!2116 = !{i64 13676}
!2117 = !{i64 13684}
!2118 = !{i64 13689}
!2119 = !{i64 13693}
!2120 = !{i64 13687}
!2121 = !{i64 13710}
!2122 = !{i64 13716}
!2123 = !{i64 13724}
!2124 = !{i64 13436}
!2125 = !{i64 13736}
!2126 = !{i64 13743}
!2127 = !{i64 13817}
!2128 = !{i64 13821}
!2129 = !{i64 13826}
!2130 = !{i64 13813}
!2131 = !{i64 13841}
!2132 = !{i64 13835}
!2133 = !{i64 13863}
!2134 = !{i64 13857}
!2135 = !{i64 13879}
!2136 = !{i64 13887}
!2137 = !{i64 13891}
!2138 = !{i64 13912}
!2139 = !{i64 13920}
!2140 = !{i64 13942}
!2141 = !{i64 13945}
!2142 = !{i64 13964}
!2143 = !{i64 13967}
!2144 = !{i64 13935}
!2145 = !{i64 14003}
!2146 = !{i64 14015}
!2147 = !{i64 14022}
!2148 = !{i64 14032}
!2149 = !{i64 14035}
!2150 = !{i64 14062}
!2151 = !{i64 14067}
!2152 = !{i64 14069}
!2153 = !{i64 14093}
!2154 = !{i64 14098}
!2155 = !{i64 14105}
!2156 = !{i64 14115}
!2157 = !{i64 14117}
!2158 = !{i64 14126}
!2159 = !{i64 14134}
!2160 = !{i64 14143}
!2161 = !{i64 14159}
!2162 = !{i64 14168}
!2163 = !{i64 14178}
!2164 = !{i64 14181}
!2165 = !{i64 14184}
!2166 = !{i64 14187}
!2167 = !{i64 14194}
!2168 = !{i64 14199}
!2169 = !{i64 14247}
!2170 = !{i64 14257}
!2171 = !{i64 14260}
!2172 = !{i64 14250}
!2173 = !{i64 14266}
!2174 = !{i64 14262}
!2175 = !{i64 14270}
!2176 = !{i64 14278}
!2177 = !{i64 14280}
!2178 = !{i64 14293}
!2179 = !{i64 14298}
!2180 = !{i64 14303}
!2181 = !{i64 14311}
!2182 = !{i64 14319}
!2183 = !{i64 14321}
!2184 = !{i64 14323}
!2185 = !{i64 14327}
!2186 = !{i64 14329}
!2187 = !{i64 14335}
!2188 = !{i64 14339}
!2189 = !{i64 14342}
!2190 = !{i64 14344}
!2191 = !{i64 14348}
!2192 = !{i64 14352}
!2193 = !{i64 14355}
!2194 = !{i64 14357}
!2195 = !{i64 14366}
!2196 = !{i64 14368}
!2197 = !{i64 14371}
!2198 = !{i64 14373}
!2199 = !{i64 14375}
!2200 = !{i64 14378}
!2201 = !{i64 14380}
!2202 = !{i64 14382}
!2203 = !{i64 14405}
!2204 = !{i64 14416}
!2205 = !{i64 14434}
!2206 = !{i64 14438}
!2207 = !{i64 14441}
!2208 = !{i64 14443}
!2209 = !{i64 14464}
!2210 = !{i64 14482}
!2211 = !{i64 14484}
!2212 = !{i64 14489}
!2213 = !{i64 14495}
!2214 = !{i64 14499}
!2215 = !{i64 14507}
!2216 = !{i64 14512}
!2217 = !{i64 14514}
!2218 = !{i64 14523}
!2219 = !{i64 14534}
!2220 = !{i64 14539}
!2221 = !{i64 14541}
!2222 = !{i64 14543}
!2223 = !{i64 14546}
!2224 = !{i64 14548}
!2225 = !{i64 14566}
!2226 = !{i64 14576}
!2227 = !{i64 14591}
!2228 = !{i64 14595}
!2229 = !{i64 14598}
!2230 = !{i64 14600}
!2231 = !{i64 14621}
!2232 = !{i64 14626}
!2233 = !{i64 14636}
!2234 = !{i64 14638}
!2235 = !{i64 14644}
!2236 = !{i64 14649}
!2237 = !{i64 14659}
!2238 = !{i64 14662}
!2239 = !{i64 14668}
!2240 = !{i64 14673}
!2241 = !{i64 14676}
!2242 = !{i64 14691}
!2243 = !{i64 14704}
!2244 = !{i64 14711}
!2245 = !{i64 14715}
!2246 = !{i64 14718}
!2247 = !{i64 14721}
!2248 = !{i64 14727}
!2249 = !{i64 14732}
!2250 = !{i64 14734}
!2251 = !{i64 14740}
!2252 = !{i64 14746}
!2253 = !{i64 14752}
!2254 = !{i64 14759}
!2255 = !{i64 14763}
!2256 = !{i64 14765}
!2257 = !{i64 14777}
!2258 = !{i64 14782}
!2259 = !{i64 14772}
!2260 = !{i64 14784}
!2261 = !{i64 14789}
!2262 = !{i64 14791}
!2263 = !{i64 14798}
!2264 = !{i64 14805}
!2265 = !{i64 14812}
!2266 = !{i64 14819}
!2267 = !{i64 14826}
!2268 = !{i64 14796}
!2269 = !{i64 14833}
!2270 = !{i64 14841}
!2271 = !{i64 14848}
!2272 = !{i64 14849}
!2273 = !{i64 14869}
!2274 = !{i64 14884}
!2275 = !{i64 14902}
!2276 = !{i64 14872}
!2277 = !{i64 14917}
!2278 = !{i64 14921}
!2279 = !{i64 14942}
!2280 = !{i64 14924}
!2281 = !{i64 14959}
!2282 = !{i64 14970}
!2283 = !{i64 14975}
!2284 = !{i64 14981}
!2285 = !{i64 14984}
!2286 = !{i64 14988}
!2287 = !{i64 14994}
!2288 = !{i64 15015}
!2289 = !{i64 14997}
!2290 = !{i64 15030}
!2291 = !{i64 15033}
!2292 = !{i64 15038}
!2293 = !{i64 15041}
!2294 = !{i64 15048}
!2295 = !{i64 15061}
!2296 = !{i64 15063}
!2297 = !{i64 15068}
!2298 = !{i64 15072}
!2299 = !{i64 15076}
!2300 = !{i64 15079}
!2301 = !{i64 15081}
!2302 = !{i64 15089}
!2303 = !{i64 15084}
!2304 = !{i64 15114}
!2305 = !{i64 15122}
!2306 = !{i64 15127}
!2307 = !{i64 15130}
!2308 = !{i64 15118}
!2309 = !{i64 15132}
!2310 = !{i64 15136}
!2311 = !{i64 15144}
!2312 = !{i64 15142}
!2313 = !{i64 15149}
!2314 = !{i64 15155}
!2315 = !{i64 15160}
!2316 = !{i64 15162}
!2317 = !{i64 15164}
!2318 = !{i64 15168}
!2319 = !{i64 15173}
!2320 = !{i64 15198}
!2321 = !{i64 15202}
!2322 = !{i64 15243}
!2323 = !{i64 15245}
!2324 = !{i64 15552}
!2325 = !{i64 15566}
!2326 = !{i64 15574}
!2327 = !{i64 15579}
!2328 = !{i64 15581}
!2329 = !{i64 15600}
!2330 = !{i64 15604}
!2331 = !{i64 15609}
!2332 = !{i64 15612}
!2333 = !{i64 15617}
!2334 = !{i64 15621}
!2335 = !{i64 15625}
!2336 = !{i64 15628}
!2337 = !{i64 15632}
!2338 = !{i64 15637}
!2339 = !{i64 15639}
!2340 = !{i64 15641}
!2341 = !{i64 15645}
!2342 = !{i64 15649}
!2343 = !{i64 15652}
!2344 = !{i64 15661}
!2345 = !{i64 15668}
!2346 = !{i64 15671}
!2347 = !{i64 15694}
!2348 = !{i64 15713}
!2349 = !{i64 15727}
!2350 = !{i64 15732}
!2351 = !{i64 15737}
!2352 = !{i64 15739}
!2353 = !{i64 15750}
!2354 = !{i64 15753}
!2355 = !{i64 15760}
!2356 = !{i64 15806}
!2357 = !{i64 15811}
!2358 = !{i64 15813}
!2359 = !{i64 15822}
!2360 = !{i64 15829}
!2361 = !{i64 15834}
!2362 = !{i64 15842}
!2363 = !{i64 15856}
!2364 = !{i64 15861}
!2365 = !{i64 15869}
!2366 = !{i64 15872}
!2367 = !{i64 15799}
!2368 = !{i64 15874}
!2369 = !{i64 15891}
!2370 = !{i64 15896}
!2371 = !{i64 15901}
!2372 = !{i64 15904}
!2373 = !{i64 15918}
!2374 = !{i64 15985}
!2375 = !{i64 15987}
!2376 = !{i64 15991}
!2377 = !{i64 15995}
!2378 = !{i64 15998}
!2379 = !{i64 16002}
!2380 = !{i64 16005}
!2381 = !{i64 16007}
!2382 = !{i64 16011}
!2383 = !{i64 16018}
!2384 = !{i64 16031}
!2385 = !{i64 16036}
!2386 = !{i64 16041}
!2387 = !{i64 16048}
!2388 = !{i64 16057}
!2389 = !{i64 16065}
!2390 = !{i64 16067}
!2391 = !{i64 16069}
!2392 = !{i64 16078}
!2393 = !{i64 16074}
!2394 = !{i64 16080}
!2395 = !{i64 16082}
!2396 = !{i64 16085}
!2397 = !{i64 16090}
!2398 = !{i64 16076}
!2399 = !{i64 16094}
!2400 = !{i64 16098}
!2401 = !{i64 16100}
!2402 = !{i64 16103}
!2403 = !{i64 16110}
!2404 = !{i64 16118}
!2405 = !{i64 16121}
!2406 = !{i64 16123}
!2407 = !{i64 16129}
!2408 = !{i64 16136}
!2409 = !{i64 16138}
!2410 = !{i64 16141}
!2411 = !{i64 16147}
!2412 = !{i64 16152}
!2413 = !{i64 16155}
!2414 = !{i64 16161}
!2415 = !{i64 16166}
!2416 = !{i64 16187}
!2417 = !{i64 16196}
!2418 = !{i64 16203}
!2419 = !{i64 16207}
!2420 = !{i64 16211}
!2421 = !{i64 16228}
!2422 = !{i64 16235}
!2423 = !{i64 16239}
!2424 = !{i64 16243}
!2425 = !{i64 16267}
!2426 = !{i64 16270}
!2427 = !{i64 16275}
!2428 = !{i64 16282}
!2429 = !{i64 16286}
!2430 = !{i64 16290}
!2431 = !{i64 16293}
!2432 = !{i64 16297}
!2433 = !{i64 16301}
!2434 = !{i64 16307}
!2435 = !{i64 16311}
!2436 = !{i64 16320}
!2437 = !{i64 16324}
!2438 = !{i64 16327}
!2439 = !{i64 16361}
!2440 = !{i64 16347}
!2441 = !{i64 16351}
!2442 = !{i64 16353}
!2443 = !{i64 16357}
!2444 = !{i64 16363}
!2445 = !{i64 16365}
!2446 = !{i64 16372}
!2447 = !{i64 16379}
!2448 = !{i64 16382}
!2449 = !{i64 16386}
!2450 = !{i64 16411}
!2451 = !{i64 16414}
!2452 = !{i64 16418}
!2453 = !{i64 16422}
!2454 = !{i64 16426}
!2455 = !{i64 16431}
!2456 = !{i64 16438}
!2457 = !{i64 16442}
!2458 = !{i64 16457}
!2459 = !{i64 16462}
!2460 = !{i64 16466}
!2461 = !{i64 16480}
!2462 = !{i64 16530}
!2463 = !{i64 16535}
!2464 = !{i64 16537}
!2465 = !{i64 16552}
!2466 = !{i64 16559}
!2467 = !{i64 16563}
!2468 = !{i64 16578}
!2469 = !{i64 16588}
!2470 = !{i64 16595}
!2471 = !{i64 16599}
!2472 = !{i64 16604}
!2473 = !{i64 16608}
!2474 = !{i64 16611}
!2475 = !{i64 16613}
!2476 = !{i64 16625}
!2477 = !{i64 16630}
!2478 = !{i64 16634}
!2479 = !{i64 16637}
!2480 = !{i64 16639}
!2481 = !{i64 16651}
!2482 = !{i64 16656}
!2483 = !{i64 16660}
!2484 = !{i64 16663}
!2485 = !{i64 16665}
!2486 = !{i64 16672}
!2487 = !{i64 16687}
!2488 = !{i64 16697}
!2489 = !{i64 16701}
!2490 = !{i64 16705}
!2491 = !{i64 16711}
!2492 = !{i64 16719}
!2493 = !{i64 16722}
!2494 = !{i64 16734}
!2495 = !{i64 16739}
!2496 = !{i64 16743}
!2497 = !{i64 16746}
!2498 = !{i64 16748}
!2499 = !{i64 16755}
!2500 = !{i64 16760}
!2501 = !{i64 16769}
!2502 = !{i64 16773}
!2503 = !{i64 16777}
!2504 = !{i64 16788}
!2505 = !{i64 16793}
!2506 = !{i64 16800}
!2507 = !{i64 16802}
!2508 = !{i64 16825}
!2509 = !{i64 16830}
!2510 = !{i64 16834}
!2511 = !{i64 16804}
!2512 = !{i64 16813}
!2513 = !{i64 16838}
!2514 = !{i64 16842}
!2515 = !{i64 16844}
!2516 = !{i64 16848}
!2517 = !{i64 16851}
!2518 = !{i64 16855}
!2519 = !{i64 16859}
!2520 = !{i64 16863}
!2521 = !{i64 16869}
!2522 = !{i64 16879}
!2523 = !{i64 16883}
!2524 = !{i64 16922}
!2525 = !{i64 16925}
!2526 = !{i64 16889}
!2527 = !{i64 16892}
!2528 = !{i64 16895}
!2529 = !{i64 16903}
!2530 = !{i64 16907}
!2531 = !{i64 16910}
!2532 = !{i64 16914}
!2533 = !{i64 16918}
!2534 = !{i64 16927}
!2535 = !{i64 16931}
!2536 = !{i64 16942}
!2537 = !{i64 16961}
!2538 = !{i64 16968}
!2539 = !{i64 16983}
!2540 = !{i64 16986}
!2541 = !{i64 16990}
!2542 = !{i64 16992}
!2543 = !{i64 16998}
!2544 = !{i64 17002}
!2545 = !{i64 17011}
!2546 = !{i64 17014}
!2547 = !{i64 17030}
!2548 = !{i64 17032}
!2549 = !{i64 17049}
!2550 = !{i64 17056}
!2551 = !{i64 17060}
!2552 = !{i64 17065}
!2553 = !{i64 17067}
!2554 = !{i64 17081}
!2555 = !{i64 17088}
!2556 = !{i64 17095}
!2557 = !{i64 17098}
!2558 = !{i64 17103}
!2559 = !{i64 17105}
!2560 = !{i64 17111}
!2561 = !{i64 17126}
!2562 = !{i64 17133}
!2563 = !{i64 17137}
!2564 = !{i64 17142}
!2565 = !{i64 17146}
!2566 = !{i64 17149}
!2567 = !{i64 17151}
!2568 = !{i64 17163}
!2569 = !{i64 17168}
!2570 = !{i64 17172}
!2571 = !{i64 17175}
!2572 = !{i64 17177}
!2573 = !{i64 17179}
!2574 = !{i64 17189}
!2575 = !{i64 17193}
!2576 = !{i64 17202}
!2577 = !{i64 17205}
!2578 = !{i64 17223}
!2579 = !{i64 17232}
!2580 = !{i64 17270}
!2581 = !{i64 17280}
!2582 = !{i64 17285}
!2583 = !{i64 17290}
!2584 = !{i64 17293}
!2585 = !{i64 17305}
!2586 = !{i64 17313}
!2587 = !{i64 17321}
!2588 = !{i64 17326}
!2589 = !{i64 17334}
!2590 = !{i64 17350}
!2591 = !{i64 17367}
!2592 = !{i64 17375}
!2593 = !{i64 17378}
!2594 = !{i64 17384}
!2595 = !{i64 17394}
!2596 = !{i64 17397}
!2597 = !{i64 17405}
!2598 = !{i64 17408}
!2599 = !{i64 17414}
!2600 = !{i64 17417}
!2601 = !{i64 17419}
!2602 = !{i64 17423}
!2603 = !{i64 17426}
!2604 = !{i64 17432}
!2605 = !{i64 17457}
!2606 = !{i64 17463}
!2607 = !{i64 17479}
!2608 = !{i64 17488}
!2609 = !{i64 17498}
!2610 = !{i64 17508}
!2611 = !{i64 17518}
!2612 = !{i64 17525}
!2613 = !{i64 17538}
!2614 = !{i64 17540}
!2615 = !{i64 17549}
!2616 = !{i64 17552}
!2617 = !{i64 17448}
!2618 = !{i64 17472}
!2619 = !{i64 17533}
!2620 = !{i64 17582}
!2621 = !{i64 17585}
!2622 = !{i64 17595}
!2623 = !{i64 17597}
!2624 = !{i64 17599}
!2625 = !{i64 17609}
!2626 = !{i64 17654}
!2627 = !{i64 17658}
!2628 = !{i64 17652}
!2629 = !{i64 17660}
!2630 = !{i64 17664}
!2631 = !{i64 17669}
!2632 = !{i64 17681}
!2633 = !{i64 17691}
!2634 = !{i64 17694}
!2635 = !{i64 17706}
!2636 = !{i64 17715}
!2637 = !{i64 17723}
!2638 = !{i64 17741}
!2639 = !{i64 17744}
!2640 = !{i64 17749}
!2641 = !{i64 17751}
!2642 = !{i64 17761}
!2643 = !{i64 17766}
!2644 = !{i64 17770}
!2645 = !{i64 17773}
!2646 = !{i64 17775}
!2647 = !{i64 17781}
!2648 = !{i64 17785}
!2649 = !{i64 17787}
!2650 = !{i64 17792}
!2651 = !{i64 17794}
!2652 = !{i64 17804}
!2653 = !{i64 17813}
!2654 = !{i64 17815}
!2655 = !{i64 17824}
!2656 = !{i64 17829}
!2657 = !{i64 17850}
!2658 = !{i64 17856}
!2659 = !{i64 17882}
!2660 = !{i64 17896}
!2661 = !{i64 17901}
!2662 = !{i64 17903}
!2663 = !{i64 17905}
!2664 = !{i64 17917}
!2665 = !{i64 17922}
!2666 = !{i64 17926}
!2667 = !{i64 17929}
!2668 = !{i64 17931}
!2669 = !{i64 17941}
!2670 = !{i64 17946}
!2671 = !{i64 17950}
!2672 = !{i64 17953}
!2673 = !{i64 17955}
!2674 = !{i64 17959}
!2675 = !{i64 17962}
!2676 = !{i64 17973}
!2677 = !{i64 17984}
!2678 = !{i64 17988}
!2679 = !{i64 17991}
!2680 = !{i64 18018}
!2681 = !{i64 18027}
!2682 = !{i64 18031}
!2683 = !{i64 18039}
!2684 = !{i64 18042}
!2685 = !{i64 18111}
!2686 = !{i64 18117}
!2687 = !{i64 18051}
!2688 = !{i64 18056}
!2689 = !{i64 18058}
!2690 = !{i64 18063}
!2691 = !{i64 18066}
!2692 = !{i64 18068}
!2693 = !{i64 18074}
!2694 = !{i64 18076}
!2695 = !{i64 18079}
!2696 = !{i64 18096}
!2697 = !{i64 18101}
!2698 = !{i64 18105}
!2699 = !{i64 18133}
!2700 = !{i64 18136}
!2701 = !{i64 18138}
!2702 = !{i64 18127}
!2703 = !{i64 18129}
!2704 = !{i64 18131}
!2705 = !{i64 18144}
!2706 = !{i64 18152}
!2707 = !{i64 18157}
!2708 = !{i64 18163}
!2709 = !{i64 18185}
!2710 = !{i64 18190}
!2711 = !{i64 18192}
!2712 = !{i64 18197}
!2713 = !{i64 18199}
!2714 = !{i64 18204}
!2715 = !{i64 18210}
!2716 = !{i64 18214}
!2717 = !{i64 18218}
!2718 = !{i64 18222}
!2719 = !{i64 18225}
!2720 = !{i64 18228}
!2721 = !{i64 18237}
!2722 = !{i64 18240}
!2723 = !{i64 18244}
!2724 = !{i64 18250}
!2725 = !{i64 18254}
!2726 = !{i64 18259}
!2727 = !{i64 18265}
!2728 = !{i64 18269}
!2729 = !{i64 18274}
!2730 = !{i64 18279}
!2731 = !{i64 18285}
!2732 = !{i64 18289}
!2733 = !{i64 18294}
!2734 = !{i64 18299}
!2735 = !{i64 18305}
!2736 = !{i64 18316}
!2737 = !{i64 18319}
!2738 = !{i64 18325}
!2739 = !{i64 18331}
!2740 = !{i64 18340}
!2741 = !{i64 18346}
!2742 = !{i64 18352}
!2743 = !{i64 18356}
!2744 = !{i64 18361}
!2745 = !{i64 18366}
!2746 = !{i64 18372}
!2747 = !{i64 18376}
!2748 = !{i64 18381}
!2749 = !{i64 18386}
!2750 = !{i64 18392}
!2751 = !{i64 18396}
!2752 = !{i64 18401}
!2753 = !{i64 18406}
!2754 = !{i64 18412}
!2755 = !{i64 18417}
!2756 = !{i64 18423}
!2757 = !{i64 18428}
!2758 = !{i64 18434}
!2759 = !{i64 18439}
!2760 = !{i64 18445}
!2761 = !{i64 18450}
!2762 = !{i64 18456}
!2763 = !{i64 18460}
!2764 = !{i64 18464}
!2765 = !{i64 18468}
!2766 = !{i64 18472}
!2767 = !{i64 18481}
!2768 = !{i64 18484}
!2769 = !{i64 18498}
!2770 = !{i64 18504}
!2771 = !{i64 18509}
!2772 = !{i64 18515}
!2773 = !{i64 18520}
!2774 = !{i64 18526}
!2775 = !{i64 18531}
!2776 = !{i64 18537}
!2777 = !{i64 18542}
!2778 = !{i64 18548}
!2779 = !{i64 18553}
!2780 = !{i64 18566}
!2781 = !{i64 18571}
!2782 = !{i64 18573}
!2783 = !{i64 18579}
!2784 = !{i64 18585}
!2785 = !{i64 18591}
!2786 = !{i64 18600}
!2787 = !{i64 18614}
!2788 = !{i64 18619}
!2789 = !{i64 18628}
!2790 = !{i64 18638}
!2791 = !{i64 18643}
!2792 = !{i64 18652}
!2793 = !{i64 18654}
!2794 = !{i64 18661}
!2795 = !{i64 18675}
!2796 = !{i64 18680}
!2797 = !{i64 18690}
!2798 = !{i64 18692}
!2799 = !{i64 18696}
!2800 = !{i64 18703}
!2801 = !{i64 18707}
!2802 = !{i64 18710}
!2803 = !{i64 18717}
!2804 = !{i64 18724}
!2805 = !{i64 18731}
!2806 = !{i64 18734}
!2807 = !{i64 18739}
!2808 = !{i64 18741}
!2809 = !{i64 18747}
!2810 = !{i64 18753}
!2811 = !{i64 18757}
!2812 = !{i64 18762}
!2813 = !{i64 18769}
!2814 = !{i64 18773}
!2815 = !{i64 18776}
!2816 = !{i64 18782}
!2817 = !{i64 18788}
!2818 = !{i64 18793}
!2819 = !{i64 18795}
!2820 = !{i64 18801}
!2821 = !{i64 18809}
!2822 = !{i64 18828}
!2823 = !{i64 18833}
!2824 = !{i64 18845}
!2825 = !{i64 18851}
!2826 = !{i64 18855}
!2827 = !{i64 18862}
!2828 = !{i64 18866}
!2829 = !{i64 18873}
!2830 = !{i64 18877}
!2831 = !{i64 18884}
!2832 = !{i64 18888}
!2833 = !{i64 18891}
!2834 = !{i64 18897}
!2835 = !{i64 18900}
!2836 = !{i64 18905}
!2837 = !{i64 18907}
!2838 = !{i64 18913}
!2839 = !{i64 18917}
!2840 = !{i64 18921}
!2841 = !{i64 18928}
!2842 = !{i64 18932}
!2843 = !{i64 18937}
!2844 = !{i64 18939}
!2845 = !{i64 18942}
!2846 = !{i64 18958}
!2847 = !{i64 18976}
!2848 = !{i64 18998}
!2849 = !{i64 19002}
!2850 = !{i64 19006}
!2851 = !{i64 19013}
!2852 = !{i64 19016}
!2853 = !{i64 19018}
!2854 = !{i64 19022}
!2855 = !{i64 19026}
!2856 = !{i64 19030}
!2857 = !{i64 19035}
!2858 = !{i64 19038}
!2859 = !{i64 19043}
!2860 = !{i64 19057}
!2861 = !{i64 19098}
!2862 = !{i64 19107}
!2863 = !{i64 19114}
!2864 = !{i64 19116}
!2865 = !{i64 19126}
!2866 = !{i64 19136}
!2867 = !{i64 19176}
!2868 = !{i64 19181}
!2869 = !{i64 19183}
!2870 = !{i64 19205}
!2871 = !{i64 19212}
!2872 = !{i64 19225}
!2873 = !{i64 19233}
!2874 = !{i64 19237}
!2875 = !{i64 19241}
!2876 = !{i64 19246}
!2877 = !{i64 19250}
!2878 = !{i64 19253}
!2879 = !{i64 19270}
!2880 = !{i64 19272}
!2881 = !{i64 19283}
!2882 = !{i64 19290}
!2883 = !{i64 19305}
!2884 = !{i64 19315}
!2885 = !{i64 19319}
!2886 = !{i64 19323}
!2887 = !{i64 19328}
!2888 = !{i64 19332}
!2889 = !{i64 19335}
!2890 = !{i64 19337}
!2891 = !{i64 19346}
!2892 = !{i64 19350}
!2893 = !{i64 19353}
!2894 = !{i64 19377}
!2895 = !{i64 19382}
!2896 = !{i64 19384}
!2897 = !{i64 19367}
!2898 = !{i64 19390}
!2899 = !{i64 19400}
!2900 = !{i64 19403}
!2901 = !{i64 19417}
!2902 = !{i64 19468}
!2903 = !{i64 19471}
!2904 = !{i64 19486}
!2905 = !{i64 19492}
!2906 = !{i64 19522}
!2907 = !{i64 19622}
!2908 = !{i64 19626}
!2909 = !{i64 19629}
!2910 = !{i64 19635}
!2911 = !{i64 19639}
!2912 = !{i64 19642}
!2913 = !{i64 19644}
!2914 = !{i64 19647}
!2915 = !{i64 19653}
!2916 = !{i64 19662}
!2917 = !{i64 19667}
!2918 = !{i64 19671}
!2919 = !{i64 19691}
!2920 = !{i64 19697}
!2921 = !{i64 19701}
!2922 = !{i64 19717}
!2923 = !{i64 19721}
!2924 = !{i64 19751}
!2925 = !{i64 19753}
!2926 = !{i64 19756}
!2927 = !{i64 19758}
!2928 = !{i64 19768}
!2929 = !{i64 19796}
!2930 = !{i64 19798}
!2931 = !{i64 19801}
!2932 = !{i64 19803}
!2933 = !{i64 19811}
!2934 = !{i64 19833}
!2935 = !{i64 19836}
!2936 = !{i64 19838}
!2937 = !{i64 19849}
!2938 = !{i64 19840}
!2939 = !{i64 19844}
!2940 = !{i64 19847}
!2941 = !{i64 19851}
!2942 = !{i64 19857}
!2943 = !{i64 19861}
!2944 = !{i64 19864}
!2945 = !{i64 19885}
!2946 = !{i64 19888}
!2947 = !{i64 19893}
!2948 = !{i64 19897}
!2949 = !{i64 19912}
!2950 = !{i64 19919}
!2951 = !{i64 20007}
!2952 = !{i64 20010}
!2953 = !{i64 20024}
!2954 = !{i64 20026}
!2955 = !{i64 20031}
!2956 = !{i64 20033}
!2957 = !{i64 20035}
!2958 = !{i64 20043}
!2959 = !{i64 20012}
!2960 = !{i64 20049}
!2961 = !{i64 20053}
!2962 = !{i64 20057}
!2963 = !{i64 20065}
!2964 = !{i64 20069}
!2965 = !{i64 20072}
!2966 = !{i64 20075}
!2967 = !{i64 20078}
!2968 = !{i64 20087}
!2969 = !{i64 20097}
!2970 = !{i64 20105}
!2971 = !{i64 20109}
!2972 = !{i64 20113}
!2973 = !{i64 20117}
!2974 = !{i64 20124}
!2975 = !{i64 20129}
!2976 = !{i64 20138}
!2977 = !{i64 20158}
!2978 = !{i64 20160}
!2979 = !{i64 20212}
!2980 = !{i64 20217}
!2981 = !{i64 20219}
!2982 = !{i64 20237}
!2983 = !{i64 20244}
!2984 = !{i64 20261}
!2985 = !{i64 20283}
!2986 = !{i64 20287}
!2987 = !{i64 20291}
!2988 = !{i64 20295}
!2989 = !{i64 20305}
!2990 = !{i64 20309}
!2991 = !{i64 20322}
!2992 = !{i64 20324}
!2993 = !{i64 20328}
!2994 = !{i64 20336}
!2995 = !{i64 20375}
!2996 = !{i64 20380}
!2997 = !{i64 20384}
!2998 = !{i64 20387}
!2999 = !{i64 20389}
!3000 = !{i64 20393}
!3001 = !{i64 20367}
!3002 = !{i64 20413}
!3003 = !{i64 20416}
!3004 = !{i64 20406}
!3005 = !{i64 20408}
!3006 = !{i64 20429}
!3007 = !{i64 20434}
!3008 = !{i64 20436}
!3009 = !{i64 20667}
!3010 = !{i64 20670}
!3011 = !{i64 20676}
!3012 = !{i64 20697}
!3013 = !{i64 20738}
!3014 = !{i64 20744}
!3015 = !{i64 20749}
!3016 = !{i64 20775}
!3017 = !{i64 20799}
!3018 = !{i64 20818}
!3019 = !{i64 20823}
!3020 = !{i64 20844}
!3021 = !{i64 20871}
!3022 = !{i64 20876}
!3023 = !{i64 20878}
!3024 = !{i64 20917}
!3025 = !{i64 20928}
!3026 = !{i64 20968}
!3027 = !{i64 20973}
!3028 = !{i64 20975}
!3029 = !{i64 20986}
!3030 = !{i64 21001}
!3031 = !{i64 21005}
!3032 = !{i64 21009}
!3033 = !{i64 21013}
!3034 = !{i64 21018}
!3035 = !{i64 21022}
!3036 = !{i64 21026}
!3037 = !{i64 21030}
!3038 = !{i64 21428}
!3039 = !{i64 21443}
!3040 = !{i64 21036}
!3041 = !{i64 21039}
!3042 = !{i64 21041}
!3043 = !{i64 21045}
!3044 = !{i64 21049}
!3045 = !{i64 21052}
!3046 = !{i64 21058}
!3047 = !{i64 21070}
!3048 = !{i64 21075}
!3049 = !{i64 21082}
!3050 = !{i64 21085}
!3051 = !{i64 21087}
!3052 = !{i64 21093}
!3053 = !{i64 21104}
!3054 = !{i64 21108}
!3055 = !{i64 21126}
!3056 = !{i64 21136}
!3057 = !{i64 21139}
!3058 = !{i64 21143}
!3059 = !{i64 21145}
!3060 = !{i64 21151}
!3061 = !{i64 21155}
!3062 = !{i64 21158}
!3063 = !{i64 21160}
!3064 = !{i64 21164}
!3065 = !{i64 21168}
!3066 = !{i64 21171}
!3067 = !{i64 21177}
!3068 = !{i64 21181}
!3069 = !{i64 21192}
!3070 = !{i64 21197}
!3071 = !{i64 21200}
!3072 = !{i64 21206}
!3073 = !{i64 21210}
!3074 = !{i64 21219}
!3075 = !{i64 21223}
!3076 = !{i64 21227}
!3077 = !{i64 21230}
!3078 = !{i64 21238}
!3079 = !{i64 21246}
!3080 = !{i64 21251}
!3081 = !{i64 21253}
!3082 = !{i64 21271}
!3083 = !{i64 21276}
!3084 = !{i64 21278}
!3085 = !{i64 21292}
!3086 = !{i64 21297}
!3087 = !{i64 21304}
!3088 = !{i64 21307}
!3089 = !{i64 21309}
!3090 = !{i64 21315}
!3091 = !{i64 21325}
!3092 = !{i64 21329}
!3093 = !{i64 21333}
!3094 = !{i64 21338}
!3095 = !{i64 21340}
!3096 = !{i64 21354}
!3097 = !{i64 21359}
!3098 = !{i64 21361}
!3099 = !{i64 21373}
!3100 = !{i64 21375}
!3101 = !{i64 21383}
!3102 = !{i64 21389}
!3103 = !{i64 21391}
!3104 = !{i64 21393}
!3105 = !{i64 21402}
!3106 = !{i64 21405}
!3107 = !{i64 21409}
!3108 = !{i64 21411}
!3109 = !{i64 21414}
!3110 = !{i64 21418}
!3111 = !{i64 21421}
!3112 = !{i64 21424}
!3113 = !{i64 21438}
!3114 = !{i64 21450}
!3115 = !{i64 21455}
!3116 = !{i64 21465}
!3117 = !{i64 21485}
!3118 = !{i64 21488}
!3119 = !{i64 21540}
!3120 = !{i64 21545}
!3121 = !{i64 21547}
!3122 = !{i64 21553}
!3123 = !{i64 21590}
!3124 = !{i64 21667}
!3125 = !{i64 21743}
!3126 = !{i64 21748}
!3127 = !{i64 21750}
!3128 = !{i64 21768}
!3129 = !{i64 21775}
!3130 = !{i64 21780}
!3131 = !{i64 21785}
!3132 = !{i64 21790}
!3133 = !{i64 21795}
!3134 = !{i64 21800}
!3135 = !{i64 21805}
!3136 = !{i64 21815}
!3137 = !{i64 21827}
!3138 = !{i64 21832}
!3139 = !{i64 21839}
!3140 = !{i64 21842}
!3141 = !{i64 21844}
!3142 = !{i64 21859}
!3143 = !{i64 21869}
!3144 = !{i64 21872}
!3145 = !{i64 21878}
!3146 = !{i64 21898}
!3147 = !{i64 21916}
!3148 = !{i64 21921}
!3149 = !{i64 21924}
!3150 = !{i64 21941}
!3151 = !{i64 21949}
!3152 = !{i64 21952}
!3153 = !{i64 21958}
!3154 = !{i64 21968}
!3155 = !{i64 21971}
!3156 = !{i64 21934}
!3157 = !{i64 21973}
!3158 = !{i64 21977}
!3159 = !{i64 21981}
!3160 = !{i64 21987}
!3161 = !{i64 22004}
!3162 = !{i64 22009}
!3163 = !{i64 22016}
!3164 = !{i64 22019}
!3165 = !{i64 22021}
!3166 = !{i64 22042}
!3167 = !{i64 22047}
!3168 = !{i64 22049}
!3169 = !{i64 22055}
!3170 = !{i64 22075}
!3171 = !{i64 22080}
!3172 = !{i64 22087}
!3173 = !{i64 22095}
!3174 = !{i64 22105}
!3175 = !{i64 22107}
!3176 = !{i64 22113}
!3177 = !{i64 22117}
!3178 = !{i64 22138}
!3179 = !{i64 22143}
!3180 = !{i64 22145}
!3181 = !{i64 22152}
!3182 = !{i64 22179}
!3183 = !{i64 22184}
!3184 = !{i64 22197}
!3185 = !{i64 22213}
!3186 = !{i64 22231}
!3187 = !{i64 22249}
!3188 = !{i64 22254}
!3189 = !{i64 22263}
!3190 = !{i64 22266}
!3191 = !{i64 22268}
!3192 = !{i64 22274}
!3193 = !{i64 22277}
!3194 = !{i64 22282}
!3195 = !{i64 22304}
!3196 = !{i64 22309}
!3197 = !{i64 22316}
!3198 = !{i64 22319}
!3199 = !{i64 22325}
!3200 = !{i64 22335}
!3201 = !{i64 22348}
!3202 = !{i64 22360}
!3203 = !{i64 22363}
!3204 = !{i64 22382}
!3205 = !{i64 22387}
!3206 = !{i64 22409}
!3207 = !{i64 22414}
!3208 = !{i64 22419}
!3209 = !{i64 22422}
!3210 = !{i64 22430}
!3211 = !{i64 22435}
!3212 = !{i64 22437}
!3213 = !{i64 22440}
!3214 = !{i64 22442}
!3215 = !{i64 22454}
!3216 = !{i64 22459}
!3217 = !{i64 22471}
!3218 = !{i64 22476}
!3219 = !{i64 22488}
!3220 = !{i64 22502}
!3221 = !{i64 22507}
!3222 = !{i64 22528}
!3223 = !{i64 22544}
!3224 = !{i64 22569}
!3225 = !{i64 22592}
!3226 = !{i64 22599}
!3227 = !{i64 22611}
!3228 = !{i64 22618}
!3229 = !{i64 22630}
!3230 = !{i64 22678}
!3231 = !{i64 22745}
!3232 = !{i64 22761}
!3233 = !{i64 22766}
!3234 = !{i64 22770}
!3235 = !{i64 22774}
!3236 = !{i64 22778}
!3237 = !{i64 22783}
!3238 = !{i64 22790}
!3239 = !{i64 22793}
!3240 = !{i64 22811}
!3241 = !{i64 22662}
!3242 = !{i64 22721}
!3243 = !{i64 22737}
!3244 = !{i64 22817}
!3245 = !{i64 22824}
!3246 = !{i64 22836}
!3247 = !{i64 22841}
!3248 = !{i64 22846}
!3249 = !{i64 22848}
!3250 = !{i64 22855}
!3251 = !{i64 22858}
!3252 = !{i64 22881}
!3253 = !{i64 22924}
!3254 = !{i64 22929}
!3255 = !{i64 22931}
!3256 = !{i64 22942}
!3257 = !{i64 22949}
!3258 = !{i64 22957}
!3259 = !{i64 22965}
!3260 = !{i64 22969}
!3261 = !{i64 22973}
!3262 = !{i64 22976}
!3263 = !{i64 22980}
!3264 = !{i64 22998}
!3265 = !{i64 23086}
!3266 = !{i64 23091}
!3267 = !{i64 23093}
!3268 = !{i64 23106}
!3269 = !{i64 23111}
!3270 = !{i64 23119}
!3271 = !{i64 23124}
!3272 = !{i64 23134}
!3273 = !{i64 23137}
!3274 = !{i64 23139}
!3275 = !{i64 23159}
!3276 = !{i64 23161}
!3277 = !{i64 23168}
!3278 = !{i64 23175}
!3279 = !{i64 23182}
!3280 = !{i64 23186}
!3281 = !{i64 23190}
!3282 = !{i64 23194}
!3283 = !{i64 23200}
!3284 = !{i64 23202}
!3285 = !{i64 23204}
!3286 = !{i64 23215}
!3287 = !{i64 23217}
!3288 = !{i64 23220}
!3289 = !{i64 23223}
!3290 = !{i64 23226}
!3291 = !{i64 23229}
!3292 = !{i64 23234}
!3293 = !{i64 23237}
!3294 = !{i64 23240}
!3295 = !{i64 23243}
!3296 = !{i64 23249}
!3297 = !{i64 23258}
!3298 = !{i64 23266}
!3299 = !{i64 23270}
!3300 = !{i64 23273}
!3301 = !{i64 23280}
!3302 = !{i64 23297}
!3303 = !{i64 23309}
!3304 = !{i64 23323}
!3305 = !{i64 23330}
!3306 = !{i64 23337}
!3307 = !{i64 23351}
!3308 = !{i64 23355}
!3309 = !{i64 23359}
!3310 = !{i64 23366}
!3311 = !{i64 23373}
!3312 = !{i64 23377}
!3313 = !{i64 23384}
!3314 = !{i64 23387}
!3315 = !{i64 23394}
!3316 = !{i64 23400}
!3317 = !{i64 23407}
!3318 = !{i64 23414}
!3319 = !{i64 23421}
!3320 = !{i64 23444}
!3321 = !{i64 23452}
!3322 = !{i64 23457}
!3323 = !{i64 23460}
!3324 = !{i64 22990}
!3325 = !{i64 23316}
!3326 = !{i64 23344}
!3327 = !{i64 23466}
!3328 = !{i64 23473}
!3329 = !{i64 23489}
!3330 = !{i64 23503}
!3331 = !{i64 23508}
!3332 = !{i64 23515}
!3333 = !{i64 23519}
!3334 = !{i64 23523}
!3335 = !{i64 23527}
!3336 = !{i64 23534}
!3337 = !{i64 23538}
!3338 = !{i64 23542}
!3339 = !{i64 23551}
!3340 = !{i64 23563}
!3341 = !{i64 23570}
!3342 = !{i64 23574}
!3343 = !{i64 23577}
!3344 = !{i64 23584}
!3345 = !{i64 23588}
!3346 = !{i64 23592}
!3347 = !{i64 23596}
!3348 = !{i64 23608}
!3349 = !{i64 23617}
!3350 = !{i64 23627}
!3351 = !{i64 23631}
!3352 = !{i64 23635}
!3353 = !{i64 23642}
!3354 = !{i64 23646}
!3355 = !{i64 23650}
!3356 = !{i64 23660}
!3357 = !{i64 23670}
!3358 = !{i64 23685}
!3359 = !{i64 23700}
!3360 = !{i64 23707}
!3361 = !{i64 23709}
!3362 = !{i64 23713}
!3363 = !{i64 23721}
!3364 = !{i64 23724}
!3365 = !{i64 23728}
!3366 = !{i64 23738}
!3367 = !{i64 23750}
!3368 = !{i64 23757}
!3369 = !{i64 23785}
!3370 = !{i64 23792}
!3371 = !{i64 23797}
!3372 = !{i64 23804}
!3373 = !{i64 23807}
!3374 = !{i64 23809}
!3375 = !{i64 23840}
!3376 = !{i64 23845}
!3377 = !{i64 23847}
!3378 = !{i64 23858}
!3379 = !{i64 23876}
!3380 = !{i64 23895}
!3381 = !{i64 23913}
!3382 = !{i64 23918}
!3383 = !{i64 23925}
!3384 = !{i64 23928}
!3385 = !{i64 23930}
!3386 = !{i64 23937}
!3387 = !{i64 23956}
!3388 = !{i64 23964}
!3389 = !{i64 23972}
!3390 = !{i64 23976}
!3391 = !{i64 23981}
!3392 = !{i64 23989}
!3393 = !{i64 24006}
!3394 = !{i64 24009}
!3395 = !{i64 24014}
!3396 = !{i64 24027}
!3397 = !{i64 24034}
!3398 = !{i64 24041}
!3399 = !{i64 24044}
!3400 = !{i64 24051}
!3401 = !{i64 24058}
!3402 = !{i64 24068}
!3403 = !{i64 24071}
!3404 = !{i64 24077}
!3405 = !{i64 24081}
!3406 = !{i64 24085}
!3407 = !{i64 24088}
!3408 = !{i64 24099}
!3409 = !{i64 24104}
!3410 = !{i64 24132}
!3411 = !{i64 24159}
!3412 = !{i64 24167}
!3413 = !{i64 24177}
!3414 = !{i64 24185}
!3415 = !{i64 24199}
!3416 = !{i64 24204}
!3417 = !{i64 24211}
!3418 = !{i64 24214}
!3419 = !{i64 24220}
!3420 = !{i64 24233}
!3421 = !{i64 24244}
!3422 = !{i64 24249}
!3423 = !{i64 24256}
!3424 = !{i64 24259}
!3425 = !{i64 24281}
!3426 = !{i64 24286}
!3427 = !{i64 24293}
!3428 = !{i64 24296}
!3429 = !{i64 24313}
!3430 = !{i64 24326}
!3431 = !{i64 24329}
!3432 = !{i64 24331}
!3433 = !{i64 24335}
!3434 = !{i64 24338}
!3435 = !{i64 24345}
!3436 = !{i64 24359}
!3437 = !{i64 24364}
!3438 = !{i64 24375}
!3439 = !{i64 24377}
!3440 = !{i64 24399}
!3441 = !{i64 24422}
!3442 = !{i64 24431}
!3443 = !{i64 24438}
!3444 = !{i64 24441}
!3445 = !{i64 24443}
!3446 = !{i64 24465}
!3447 = !{i64 24473}
!3448 = !{i64 24476}
!3449 = !{i64 24486}
!3450 = !{i64 24490}
!3451 = !{i64 24493}
!3452 = !{i64 24500}
!3453 = !{i64 24507}
!3454 = !{i64 24515}
!3455 = !{i64 24517}
!3456 = !{i64 24542}
!3457 = !{i64 24554}
!3458 = !{i64 24562}
!3459 = !{i64 24567}
!3460 = !{i64 24569}
!3461 = !{i64 24575}
!3462 = !{i64 24586}
!3463 = !{i64 24590}
!3464 = !{i64 24592}
!3465 = !{i64 24596}
!3466 = !{i64 24599}
!3467 = !{i64 24606}
!3468 = !{i64 24613}
!3469 = !{i64 24616}
!3470 = !{i64 24618}
!3471 = !{i64 24623}
!3472 = !{i64 24626}
!3473 = !{i64 24633}
!3474 = !{i64 24640}
!3475 = !{i64 24646}
!3476 = !{i64 24653}
!3477 = !{i64 24657}
!3478 = !{i64 24660}
!3479 = !{i64 24667}
!3480 = !{i64 24674}
!3481 = !{i64 24677}
!3482 = !{i64 24679}
!3483 = !{i64 24683}
!3484 = !{i64 24686}
!3485 = !{i64 24693}
!3486 = !{i64 24712}
!3487 = !{i64 24725}
!3488 = !{i64 24745}
!3489 = !{i64 24753}
!3490 = !{i64 24761}
!3491 = !{i64 24769}
!3492 = !{i64 24775}
!3493 = !{i64 24779}
!3494 = !{i64 24783}
!3495 = !{i64 24793}
!3496 = !{i64 24823}
!3497 = !{i64 24796}
!3498 = !{i64 24832}
!3499 = !{i64 24839}
!3500 = !{i64 24843}
!3501 = !{i64 24861}
!3502 = !{i64 24868}
!3503 = !{i64 24879}
!3504 = !{i64 24884}
!3505 = !{i64 24891}
!3506 = !{i64 24894}
!3507 = !{i64 24897}
!3508 = !{i64 24901}
!3509 = !{i64 24914}
!3510 = !{i64 24919}
!3511 = !{i64 24931}
!3512 = !{i64 24940}
!3513 = !{i64 24942}
!3514 = !{i64 24946}
!3515 = !{i64 24950}
!3516 = !{i64 24954}
!3517 = !{i64 24958}
!3518 = !{i64 24972}
!3519 = !{i64 24983}
!3520 = !{i64 24988}
!3521 = !{i64 24995}
!3522 = !{i64 24998}
!3523 = !{i64 25004}
!3524 = !{i64 25008}
!3525 = !{i64 25026}
!3526 = !{i64 25034}
!3527 = !{i64 25044}
!3528 = !{i64 25051}
!3529 = !{i64 25058}
!3530 = !{i64 25050}
!3531 = !{i64 25063}
!3532 = !{i64 25067}
!3533 = !{i64 25071}
!3534 = !{i64 25075}
!3535 = !{i64 25079}
!3536 = !{i64 25083}
!3537 = !{i64 25096}
!3538 = !{i64 25101}
!3539 = !{i64 25105}
!3540 = !{i64 25113}
!3541 = !{i64 25115}
!3542 = !{i64 25120}
!3543 = !{i64 25124}
!3544 = !{i64 25128}
!3545 = !{i64 25132}
!3546 = !{i64 25137}
!3547 = !{i64 25139}
!3548 = !{i64 25144}
!3549 = !{i64 25150}
!3550 = !{i64 25160}
!3551 = !{i64 25168}
!3552 = !{i64 25172}
!3553 = !{i64 25175}
!3554 = !{i64 25177}
!3555 = !{i64 25181}
!3556 = !{i64 25183}
!3557 = !{i64 25187}
!3558 = !{i64 25190}
!3559 = !{i64 25196}
!3560 = !{i64 25200}
!3561 = !{i64 25205}
!3562 = !{i64 25217}
!3563 = !{i64 25228}
!3564 = !{i64 25238}
!3565 = !{i64 25242}
!3566 = !{i64 25247}
!3567 = !{i64 25252}
!3568 = !{i64 25255}
!3569 = !{i64 25295}
!3570 = !{i64 25300}
!3571 = !{i64 25275}
!3572 = !{i64 25283}
!3573 = !{i64 25291}
!3574 = !{i64 25308}
!3575 = !{i64 25311}
!3576 = !{i64 25315}
!3577 = !{i64 25320}
!3578 = !{i64 25326}
!3579 = !{i64 25334}
!3580 = !{i64 25346}
!3581 = !{i64 25351}
!3582 = !{i64 25362}
!3583 = !{i64 25367}
!3584 = !{i64 25370}
!3585 = !{i64 25376}
!3586 = !{i64 25393}
!3587 = !{i64 25398}
!3588 = !{i64 25408}
!3589 = !{i64 25410}
!3590 = !{i64 25403}
!3591 = !{i64 25412}
!3592 = !{i64 25427}
!3593 = !{i64 25437}
!3594 = !{i64 25439}
!3595 = !{i64 25432}
!3596 = !{i64 25441}
!3597 = !{i64 25448}
!3598 = !{i64 25453}
!3599 = !{i64 25460}
!3600 = !{i64 25462}
!3601 = !{i64 25470}
!3602 = !{i64 25472}
!3603 = !{i64 25477}
!3604 = !{i64 25486}
!3605 = !{i64 25492}
!3606 = !{i64 25494}
!3607 = !{i64 25502}
!3608 = !{i64 25505}
!3609 = !{i64 25513}
!3610 = !{i64 25518}
!3611 = !{i64 25525}
!3612 = !{i64 25529}
!3613 = !{i64 25537}
!3614 = !{i64 25539}
!3615 = !{i64 25557}
!3616 = !{i64 25562}
!3617 = !{i64 25233}
!3618 = !{i64 25571}
!3619 = !{i64 25576}
!3620 = !{i64 25578}
!3621 = !{i64 25583}
!3622 = !{i64 25590}
!3623 = !{i64 25592}
!3624 = !{i64 25600}
!3625 = !{i64 25605}
!3626 = !{i64 25615}
!3627 = !{i64 25623}
!3628 = !{i64 25632}
!3629 = !{i64 25637}
!3630 = !{i64 25642}
!3631 = !{i64 25645}
!3632 = !{i64 25647}
!3633 = !{i64 25654}
!3634 = !{i64 25681}
!3635 = !{i64 25692}
!3636 = !{i64 25700}
!3637 = !{i64 25708}
!3638 = !{i64 25717}
!3639 = !{i64 25722}
!3640 = !{i64 25725}
!3641 = !{i64 25727}
!3642 = !{i64 25729}
!3643 = !{i64 25731}
!3644 = !{i64 25738}
!3645 = !{i64 25748}
!3646 = !{i64 25755}
!3647 = !{i64 25759}
!3648 = !{i64 25762}
!3649 = !{i64 25764}
!3650 = !{i64 25773}
!3651 = !{i64 25779}
!3652 = !{i64 25784}
!3653 = !{i64 25805}
!3654 = !{i64 25810}
!3655 = !{i64 25818}
!3656 = !{i64 25821}
!3657 = !{i64 25827}
!3658 = !{i64 25834}
!3659 = !{i64 25841}
!3660 = !{i64 25847}
!3661 = !{i64 25855}
!3662 = !{i64 25877}
!3663 = !{i64 25888}
!3664 = !{i64 25896}
!3665 = !{i64 25900}
!3666 = !{i64 25903}
!3667 = !{i64 25911}
!3668 = !{i64 25916}
!3669 = !{i64 25920}
!3670 = !{i64 25923}
!3671 = !{i64 25927}
!3672 = !{i64 25930}
!3673 = !{i64 25932}
!3674 = !{i64 25941}
!3675 = !{i64 25946}
!3676 = !{i64 25949}
!3677 = !{i64 25954}
!3678 = !{i64 25969}
!3679 = !{i64 25971}
!3680 = !{i64 25973}
!3681 = !{i64 25976}
!3682 = !{i64 25964}
!3683 = !{i64 25959}
!3684 = !{i64 25983}
!3685 = !{i64 25988}
!3686 = !{i64 25990}
!3687 = !{i64 25992}
!3688 = !{i64 25999}
!3689 = !{i64 26001}
!3690 = !{i64 26006}
!3691 = !{i64 26004}
!3692 = !{i64 26012}
!3693 = !{i64 26019}
!3694 = !{i64 26026}
!3695 = !{i64 26041}
!3696 = !{i64 26046}
!3697 = !{i64 26051}
!3698 = !{i64 26059}
!3699 = !{i64 26067}
!3700 = !{i64 26072}
!3701 = !{i64 26077}
!3702 = !{i64 26079}
!3703 = !{i64 26084}
!3704 = !{i64 26091}
!3705 = !{i64 26098}
!3706 = !{i64 26106}
!3707 = !{i64 26116}
!3708 = !{i64 26124}
!3709 = !{i64 26129}
!3710 = !{i64 26137}
!3711 = !{i64 26141}
!3712 = !{i64 26149}
!3713 = !{i64 26153}
!3714 = !{i64 26158}
!3715 = !{i64 26163}
!3716 = !{i64 26166}
!3717 = !{i64 26172}
!3718 = !{i64 26184}
!3719 = !{i64 26190}
!3720 = !{i64 26198}
!3721 = !{i64 26201}
!3722 = !{i64 26207}
!3723 = !{i64 26215}
!3724 = !{i64 26224}
!3725 = !{i64 26229}
!3726 = !{i64 26237}
!3727 = !{i64 26239}
!3728 = !{i64 26247}
!3729 = !{i64 26250}
!3730 = !{i64 26256}
!3731 = !{i64 26261}
!3732 = !{i64 26269}
!3733 = !{i64 26277}
!3734 = !{i64 26282}
!3735 = !{i64 26288}
!3736 = !{i64 26300}
!3737 = !{i64 26305}
!3738 = !{i64 26434}
!3739 = !{i64 26438}
!3740 = !{i64 26443}
!3741 = !{i64 26312}
!3742 = !{i64 26324}
!3743 = !{i64 26329}
!3744 = !{i64 26331}
!3745 = !{i64 26338}
!3746 = !{i64 26344}
!3747 = !{i64 26359}
!3748 = !{i64 26364}
!3749 = !{i64 26369}
!3750 = !{i64 26371}
!3751 = !{i64 26377}
!3752 = !{i64 26386}
!3753 = !{i64 26389}
!3754 = !{i64 26395}
!3755 = !{i64 26401}
!3756 = !{i64 26409}
!3757 = !{i64 26411}
!3758 = !{i64 26416}
!3759 = !{i64 26424}
!3760 = !{i64 26429}
!3761 = !{i64 27501}
!3762 = !{i64 26450}
!3763 = !{i64 26459}
!3764 = !{i64 26462}
!3765 = !{i64 26472}
!3766 = !{i64 26476}
!3767 = !{i64 26488}
!3768 = !{i64 26490}
!3769 = !{i64 26497}
!3770 = !{i64 26500}
!3771 = !{i64 26573}
!3772 = !{i64 26502}
!3773 = !{i64 26510}
!3774 = !{i64 26512}
!3775 = !{i64 26515}
!3776 = !{i64 26519}
!3777 = !{i64 26527}
!3778 = !{i64 26531}
!3779 = !{i64 26533}
!3780 = !{i64 26536}
!3781 = !{i64 26543}
!3782 = !{i64 26549}
!3783 = !{i64 26557}
!3784 = !{i64 26560}
!3785 = !{i64 26563}
!3786 = !{i64 26565}
!3787 = !{i64 26570}
!3788 = !{i64 26581}
!3789 = !{i64 26583}
!3790 = !{i64 26591}
!3791 = !{i64 26594}
!3792 = !{i64 26597}
!3793 = !{i64 26600}
!3794 = !{i64 26603}
!3795 = !{i64 26635}
!3796 = !{i64 26645}
!3797 = !{i64 26655}
!3798 = !{i64 26660}
!3799 = !{i64 26665}
!3800 = !{i64 26669}
!3801 = !{i64 26672}
!3802 = !{i64 26679}
!3803 = !{i64 26681}
!3804 = !{i64 26690}
!3805 = !{i64 26684}
!3806 = !{i64 26704}
!3807 = !{i64 26709}
!3808 = !{i64 26712}
!3809 = !{i64 26707}
!3810 = !{i64 26718}
!3811 = !{i64 26734}
!3812 = !{i64 26739}
!3813 = !{i64 26744}
!3814 = !{i64 26749}
!3815 = !{i64 26754}
!3816 = !{i64 26759}
!3817 = !{i64 26761}
!3818 = !{i64 26763}
!3819 = !{i64 26773}
!3820 = !{i64 26775}
!3821 = !{i64 26782}
!3822 = !{i64 26784}
!3823 = !{i64 26786}
!3824 = !{i64 26794}
!3825 = !{i64 26796}
!3826 = !{i64 26798}
!3827 = !{i64 26806}
!3828 = !{i64 26808}
!3829 = !{i64 26810}
!3830 = !{i64 26818}
!3831 = !{i64 26822}
!3832 = !{i64 26824}
!3833 = !{i64 26832}
!3834 = !{i64 26834}
!3835 = !{i64 26836}
!3836 = !{i64 26844}
!3837 = !{i64 26847}
!3838 = !{i64 26850}
!3839 = !{i64 26853}
!3840 = !{i64 26856}
!3841 = !{i64 26862}
!3842 = !{i64 26870}
!3843 = !{i64 26876}
!3844 = !{i64 26883}
!3845 = !{i64 26896}
!3846 = !{i64 26901}
!3847 = !{i64 26903}
!3848 = !{i64 26911}
!3849 = !{i64 26923}
!3850 = !{i64 26936}
!3851 = !{i64 26952}
!3852 = !{i64 26957}
!3853 = !{i64 26962}
!3854 = !{i64 26967}
!3855 = !{i64 26972}
!3856 = !{i64 26977}
!3857 = !{i64 26980}
!3858 = !{i64 26982}
!3859 = !{i64 26990}
!3860 = !{i64 26995}
!3861 = !{i64 26998}
!3862 = !{i64 27001}
!3863 = !{i64 27008}
!3864 = !{i64 27013}
!3865 = !{i64 27011}
!3866 = !{i64 27018}
!3867 = !{i64 27021}
!3868 = !{i64 27026}
!3869 = !{i64 27029}
!3870 = !{i64 27037}
!3871 = !{i64 27044}
!3872 = !{i64 27057}
!3873 = !{i64 27062}
!3874 = !{i64 27068}
!3875 = !{i64 27077}
!3876 = !{i64 27082}
!3877 = !{i64 27088}
!3878 = !{i64 27095}
!3879 = !{i64 27097}
!3880 = !{i64 27103}
!3881 = !{i64 27111}
!3882 = !{i64 27114}
!3883 = !{i64 27120}
!3884 = !{i64 27122}
!3885 = !{i64 27124}
!3886 = !{i64 27132}
!3887 = !{i64 27140}
!3888 = !{i64 27160}
!3889 = !{i64 27179}
!3890 = !{i64 27184}
!3891 = !{i64 27189}
!3892 = !{i64 27192}
!3893 = !{i64 27198}
!3894 = !{i64 27206}
!3895 = !{i64 27209}
!3896 = !{i64 27212}
!3897 = !{i64 27227}
!3898 = !{i64 27239}
!3899 = !{i64 27241}
!3900 = !{i64 27251}
!3901 = !{i64 27246}
!3902 = !{i64 27263}
!3903 = !{i64 27268}
!3904 = !{i64 27270}
!3905 = !{i64 27272}
!3906 = !{i64 27281}
!3907 = !{i64 27283}
!3908 = !{i64 27287}
!3909 = !{i64 27295}
!3910 = !{i64 27303}
!3911 = !{i64 27306}
!3912 = !{i64 27318}
!3913 = !{i64 27326}
!3914 = !{i64 27328}
!3915 = !{i64 27335}
!3916 = !{i64 27348}
!3917 = !{i64 27353}
!3918 = !{i64 27355}
!3919 = !{i64 27363}
!3920 = !{i64 27391}
!3921 = !{i64 27399}
!3922 = !{i64 27404}
!3923 = !{i64 27407}
!3924 = !{i64 27409}
!3925 = !{i64 27417}
!3926 = !{i64 27420}
!3927 = !{i64 27423}
!3928 = !{i64 27438}
!3929 = !{i64 27447}
!3930 = !{i64 27452}
!3931 = !{i64 27463}
!3932 = !{i64 27476}
!3933 = !{i64 27481}
!3934 = !{i64 27483}
!3935 = !{i64 27491}
!3936 = !{i64 27512}
!3937 = !{i64 27527}
!3938 = !{i64 27543}
!3939 = !{i64 27555}
!3940 = !{i64 27566}
!3941 = !{i64 27571}
!3942 = !{i64 27576}
!3943 = !{i64 27579}
!3944 = !{i64 27589}
!3945 = !{i64 27600}
!3946 = !{i64 27605}
!3947 = !{i64 27610}
!3948 = !{i64 27613}
!3949 = !{i64 27619}
!3950 = !{i64 27627}
!3951 = !{i64 27635}
!3952 = !{i64 27640}
!3953 = !{i64 27646}
!3954 = !{i64 27650}
!3955 = !{i64 27652}
!3956 = !{i64 27657}
!3957 = !{i64 27661}
!3958 = !{i64 27664}
!3959 = !{i64 27671}
!3960 = !{i64 27678}
!3961 = !{i64 27684}
!3962 = !{i64 27691}
!3963 = !{i64 27695}
!3964 = !{i64 27698}
!3965 = !{i64 27705}
!3966 = !{i64 27712}
!3967 = !{i64 27717}
!3968 = !{i64 27722}
!3969 = !{i64 27724}
!3970 = !{i64 27730}
!3971 = !{i64 27737}
!3972 = !{i64 27742}
!3973 = !{i64 27747}
!3974 = !{i64 27755}
!3975 = !{i64 27781}
!3976 = !{i64 27786}
!3977 = !{i64 27788}
!3978 = !{i64 27794}
!3979 = !{i64 27813}
!3980 = !{i64 27817}
!3981 = !{i64 27822}
!3982 = !{i64 27824}
!3983 = !{i64 27830}
!3984 = !{i64 27854}
!3985 = !{i64 27858}
!3986 = !{i64 27863}
!3987 = !{i64 27865}
!3988 = !{i64 27871}
!3989 = !{i64 27890}
!3990 = !{i64 27894}
!3991 = !{i64 27899}
!3992 = !{i64 27901}
!3993 = !{i64 27907}
!3994 = !{i64 27931}
!3995 = !{i64 27935}
!3996 = !{i64 27940}
!3997 = !{i64 27942}
!3998 = !{i64 27948}
!3999 = !{i64 27972}
!4000 = !{i64 27976}
!4001 = !{i64 27981}
!4002 = !{i64 27983}
!4003 = !{i64 27989}
!4004 = !{i64 28013}
!4005 = !{i64 28017}
!4006 = !{i64 28022}
!4007 = !{i64 28024}
!4008 = !{i64 28030}
!4009 = !{i64 28054}
!4010 = !{i64 28057}
!4011 = !{i64 28062}
!4012 = !{i64 28064}
!4013 = !{i64 28070}
!4014 = !{i64 28095}
!4015 = !{i64 28099}
!4016 = !{i64 28104}
!4017 = !{i64 28106}
!4018 = !{i64 28112}
!4019 = !{i64 28123}
!4020 = !{i64 28129}
!4021 = !{i64 28136}
!4022 = !{i64 28144}
!4023 = !{i64 28152}
!4024 = !{i64 28155}
!4025 = !{i64 28163}
!4026 = !{i64 28167}
!4027 = !{i64 28170}
!4028 = !{i64 28172}
!4029 = !{i64 28176}
!4030 = !{i64 28180}
!4031 = !{i64 28186}
!4032 = !{i64 28190}
!4033 = !{i64 28194}
!4034 = !{i64 28196}
!4035 = !{i64 28209}
!4036 = !{i64 28211}
!4037 = !{i64 28215}
!4038 = !{i64 28219}
!4039 = !{i64 28226}
!4040 = !{i64 28237}
!4041 = !{i64 28239}
!4042 = !{i64 28243}
!4043 = !{i64 28247}
!4044 = !{i64 28254}
!4045 = !{i64 28258}
!4046 = !{i64 28261}
!4047 = !{i64 28265}
!4048 = !{i64 28273}
!4049 = !{i64 28281}
!4050 = !{i64 28284}
!4051 = !{i64 28309}
!4052 = !{i64 28318}
!4053 = !{i64 28323}
!4054 = !{i64 28326}
!4055 = !{i64 28329}
!4056 = !{i64 28346}
!4057 = !{i64 28357}
!4058 = !{i64 28362}
!4059 = !{i64 28367}
!4060 = !{i64 28370}
!4061 = !{i64 28384}
!4062 = !{i64 28395}
!4063 = !{i64 28400}
!4064 = !{i64 28405}
!4065 = !{i64 28408}
!4066 = !{i64 28422}
!4067 = !{i64 28433}
!4068 = !{i64 28438}
!4069 = !{i64 28443}
!4070 = !{i64 28446}
!4071 = !{i64 28483}
!4072 = !{i64 28496}
!4073 = !{i64 28527}
!4074 = !{i64 28542}
!4075 = !{i64 28544}
!4076 = !{i64 28559}
!4077 = !{i64 28588}
!4078 = !{i64 28593}
!4079 = !{i64 28598}
!4080 = !{i64 28606}
!4081 = !{i64 28611}
!4082 = !{i64 28613}
!4083 = !{i64 28623}
!4084 = !{i64 28628}
!4085 = !{i64 28631}
!4086 = !{i64 28635}
!4087 = !{i64 28643}
!4088 = !{i64 28648}
!4089 = !{i64 28653}
!4090 = !{i64 28658}
!4091 = !{i64 28665}
!4092 = !{i64 28667}
!4093 = !{i64 28669}
!4094 = !{i64 28676}
!4095 = !{i64 28678}
!4096 = !{i64 28683}
!4097 = !{i64 28688}
!4098 = !{i64 28693}
!4099 = !{i64 28734}
!4100 = !{i64 28749}
!4101 = !{i64 28752}
!4102 = !{i64 28755}
!4103 = !{i64 28762}
!4104 = !{i64 28766}
!4105 = !{i64 28770}
!4106 = !{i64 28772}
!4107 = !{i64 28784}
!4108 = !{i64 28792}
!4109 = !{i64 28795}
!4110 = !{i64 28799}
!4111 = !{i64 28803}
!4112 = !{i64 28806}
!4113 = !{i64 28808}
!4114 = !{i64 28812}
!4115 = !{i64 28817}
!4116 = !{i64 28834}
!4117 = !{i64 28946}
!4118 = !{i64 29072}
!4119 = !{i64 29074}
!4120 = !{i64 29076}
!4121 = !{i64 29078}
!4122 = !{i64 29081}
!4123 = !{i64 29087}
!4124 = !{i64 29094}
!4125 = !{i64 29128}
!4126 = !{i64 29131}
!4127 = !{i64 29136}
!4128 = !{i64 29150}
!4129 = !{i64 29158}
!4130 = !{i64 29166}
!4131 = !{i64 29138}
!4132 = !{i64 29179}
!4133 = !{i64 29186}
!4134 = !{i64 29390}
!4135 = !{i64 29504}
!4136 = !{i64 29521}
!4137 = !{i64 29544}
!4138 = !{i64 29536}
!4139 = !{i64 29556}
!4140 = !{i64 29567}
!4141 = !{i64 29571}
!4142 = !{i64 29575}
!4143 = !{i64 29579}
!4144 = !{i64 29596}
!4145 = !{i64 29582}
!4146 = !{i64 29603}
!4147 = !{i64 29606}
!4148 = !{i64 29613}
!4149 = !{i64 29617}
!4150 = !{i64 29609}
!4151 = !{i64 29626}
!4152 = !{i64 29646}
!4153 = !{i64 29648}
!4154 = !{i64 29651}
!4155 = !{i64 29622}
!4156 = !{i64 29653}
!4157 = !{i64 29658}
!4158 = !{i64 29660}
!4159 = !{i64 29663}
!4160 = !{i64 29665}
!4161 = !{i64 29677}
!4162 = !{i64 29682}
!4163 = !{i64 29686}
!4164 = !{i64 29688}
!4165 = !{i64 29697}
!4166 = !{i64 29715}
!4167 = !{i64 29753}
!4168 = !{i64 29755}
!4169 = !{i64 29757}
!4170 = !{i64 29762}
!4171 = !{i64 29767}
!4172 = !{i64 29772}
!4173 = !{i64 29780}
!4174 = !{i64 29788}
!4175 = !{i64 29796}
!4176 = !{i64 29804}
!4177 = !{i64 29864}
!4178 = !{i64 29892}
!4179 = !{i64 29904}
!4180 = !{i64 29909}
!4181 = !{i64 29907}
!4182 = !{i64 29914}
!4183 = !{i64 29918}
!4184 = !{i64 29934}
!4185 = !{i64 29921}
!4186 = !{i64 29948}
!4187 = !{i64 29954}
!4188 = !{i64 29956}
!4189 = !{i64 29961}
!4190 = !{i64 29963}
!4191 = !{i64 29969}
!4192 = !{i64 29972}
!4193 = !{i64 29977}
!4194 = !{i64 29981}
!4195 = !{i64 29989}
!4196 = !{i64 30028}
!4197 = !{i64 30047}
!4198 = !{i64 30051}
!4199 = !{i64 30288}
!4200 = !{i64 30323}
!4201 = !{i64 30335}
!4202 = !{i64 30347}
!4203 = !{i64 30373}
!4204 = !{i64 30326}
!4205 = !{i64 30369}
!4206 = !{i64 30382}
!4207 = !{i64 30388}
!4208 = !{i64 30394}
!4209 = !{i64 30398}
!4210 = !{i64 30401}
!4211 = !{i64 30409}
!4212 = !{i64 30412}
!4213 = !{i64 30414}
!4214 = !{i64 30416}
!4215 = !{i64 30418}
!4216 = !{i64 30420}
!4217 = !{i64 30422}
!4218 = !{i64 30431}
!4219 = !{i64 30435}
!4220 = !{i64 30442}
!4221 = !{i64 30445}
!4222 = !{i64 30450}
!4223 = !{i64 30452}
!4224 = !{i64 30455}
!4225 = !{i64 30469}
!4226 = !{i64 30473}
!4227 = !{i64 30480}
!4228 = !{i64 30483}
!4229 = !{i64 30488}
!4230 = !{i64 30490}
!4231 = !{i64 30496}
!4232 = !{i64 30500}
!4233 = !{i64 30503}
!4234 = !{i64 30385}
!4235 = !{i64 30514}
!4236 = !{i64 30518}
!4237 = !{i64 30531}
!4238 = !{i64 30536}
!4239 = !{i64 30538}
!4240 = !{i64 30541}
!4241 = !{i64 30547}
!4242 = !{i64 30552}
!4243 = !{i64 30555}
!4244 = !{i64 30561}
!4245 = !{i64 30567}
!4246 = !{i64 30573}
!4247 = !{i64 30579}
!4248 = !{i64 30654}
!4249 = !{i64 30656}
!4250 = !{i64 30660}
!4251 = !{i64 30707}
!4252 = !{i64 30710}
!4253 = !{i64 30719}
!4254 = !{i64 30739}
!4255 = !{i64 30741}
!4256 = !{i64 30745}
!4257 = !{i64 30760}
!4258 = !{i64 30765}
!4259 = !{i64 30767}
!4260 = !{i64 30770}
!4261 = !{i64 30776}
!4262 = !{i64 30791}
!4263 = !{i64 30796}
!4264 = !{i64 30800}
!4265 = !{i64 30804}
!4266 = !{i64 30811}
!4267 = !{i64 30786}
!4268 = !{i64 30832}
!4269 = !{i64 30837}
!4270 = !{i64 30842}
!4271 = !{i64 30851}
!4272 = !{i64 31040}
!4273 = !{i64 31044}
!4274 = !{i64 31054}
!4275 = !{i64 31058}
!4276 = !{i64 31065}
!4277 = !{i64 31069}
!4278 = !{i64 31071}
!4279 = !{i64 31074}
!4280 = !{i64 31077}
!4281 = !{i64 31081}
!4282 = !{i64 31088}
!4283 = !{i64 31092}
!4284 = !{i64 31116}
!4285 = !{i64 31131}
!4286 = !{i64 31139}
!4287 = !{i64 31095}
!4288 = !{i64 31144}
!4289 = !{i64 31148}
!4290 = !{i64 31155}
!4291 = !{i64 31158}
!4292 = !{i64 31160}
!4293 = !{i64 31163}
!4294 = !{i64 31166}
!4295 = !{i64 31169}
!4296 = !{i64 31176}
!4297 = !{i64 31179}
!4298 = !{i64 31202}
!4299 = !{i64 31207}
!4300 = !{i64 31209}
!4301 = !{i64 31211}
!4302 = !{i64 31217}
!4303 = !{i64 31219}
!4304 = !{i64 31224}
!4305 = !{i64 31230}
!4306 = !{i64 31233}
!4307 = !{i64 31252}
!4308 = !{i64 31258}
!4309 = !{i64 31263}
!4310 = !{i64 31265}
!4311 = !{i64 31268}
!4312 = !{i64 31282}
!4313 = !{i64 31296}
!4314 = !{i64 31300}
!4315 = !{i64 31323}
!4316 = !{i64 31326}
!4317 = !{i64 31303}
!4318 = !{i64 31338}
!4319 = !{i64 31342}
!4320 = !{i64 31345}
!4321 = !{i64 31355}
!4322 = !{i64 31360}
!4323 = !{i64 31362}
!4324 = !{i64 31364}
!4325 = !{i64 31376}
!4326 = !{i64 31382}
!4327 = !{i64 31387}
!4328 = !{i64 31389}
!4329 = !{i64 31391}
!4330 = !{i64 31395}
!4331 = !{i64 31399}
!4332 = !{i64 31401}
!4333 = !{i64 31403}
!4334 = !{i64 31406}
!4335 = !{i64 31408}
!4336 = !{i64 31413}
!4337 = !{i64 31417}
!4338 = !{i64 31427}
!4339 = !{i64 31429}
!4340 = !{i64 31431}
!4341 = !{i64 31434}
!4342 = !{i64 31442}
!4343 = !{i64 31446}
!4344 = !{i64 31449}
!4345 = !{i64 31451}
!4346 = !{i64 31466}
!4347 = !{i64 31471}
!4348 = !{i64 31473}
!4349 = !{i64 31479}
!4350 = !{i64 31491}
!4351 = !{i64 31496}
!4352 = !{i64 31498}
!4353 = !{i64 31504}
!4354 = !{i64 31508}
!4355 = !{i64 31512}
!4356 = !{i64 31514}
!4357 = !{i64 31516}
!4358 = !{i64 31519}
!4359 = !{i64 31529}
!4360 = !{i64 31531}
!4361 = !{i64 31535}
!4362 = !{i64 31540}
!4363 = !{i64 31542}
!4364 = !{i64 31551}
!4365 = !{i64 31556}
!4366 = !{i64 31558}
!4367 = !{i64 31561}
!4368 = !{i64 31564}
!4369 = !{i64 31577}
!4370 = !{i64 31580}
!4371 = !{i64 31569}
!4372 = !{i64 31595}
!4373 = !{i64 31600}
!4374 = !{i64 31602}
!4375 = !{i64 31604}
!4376 = !{i64 31618}
!4377 = !{i64 31623}
!4378 = !{i64 31625}
!4379 = !{i64 31627}
!4380 = !{i64 31631}
!4381 = !{i64 31636}
!4382 = !{i64 31641}
!4383 = !{i64 31643}
!4384 = !{i64 31660}
!4385 = !{i64 31665}
!4386 = !{i64 31672}
!4387 = !{i64 31677}
!4388 = !{i64 31670}
!4389 = !{i64 31679}
!4390 = !{i64 31682}
!4391 = !{i64 31699}
!4392 = !{i64 31712}
!4393 = !{i64 31716}
!4394 = !{i64 31742}
!4395 = !{i64 31719}
!4396 = !{i64 31770}
!4397 = !{i64 31766}
!4398 = !{i64 31774}
!4399 = !{i64 31777}
!4400 = !{i64 31779}
!4401 = !{i64 31784}
!4402 = !{i64 31795}
!4403 = !{i64 31797}
!4404 = !{i64 31804}
!4405 = !{i64 31809}
!4406 = !{i64 31811}
!4407 = !{i64 31816}
!4408 = !{i64 31819}
!4409 = !{i64 31814}
!4410 = !{i64 31821}
!4411 = !{i64 31824}
!4412 = !{i64 31827}
!4413 = !{i64 31829}
!4414 = !{i64 31838}
!4415 = !{i64 31840}
!4416 = !{i64 31842}
!4417 = !{i64 31845}
!4418 = !{i64 31863}
!4419 = !{i64 31872}
!4420 = !{i64 31894}
!4421 = !{i64 31897}
!4422 = !{i64 31906}
!4423 = !{i64 31913}
!4424 = !{i64 31921}
!4425 = !{i64 31916}
!4426 = !{i64 31926}
!4427 = !{i64 31930}
!4428 = !{i64 31933}
!4429 = !{i64 31935}
!4430 = !{i64 31952}
!4431 = !{i64 31957}
!4432 = !{i64 31959}
!4433 = !{i64 31961}
!4434 = !{i64 31964}
!4435 = !{i64 31971}
!4436 = !{i64 31974}
!4437 = !{i64 31976}
!4438 = !{i64 31985}
!4439 = !{i64 31989}
!4440 = !{i64 31994}
!4441 = !{i64 31997}
!4442 = !{i64 31992}
!4443 = !{i64 32003}
!4444 = !{i64 32024}
!4445 = !{i64 32029}
!4446 = !{i64 32034}
!4447 = !{i64 32036}
!4448 = !{i64 32041}
!4449 = !{i64 32067}
!4450 = !{i64 32070}
!4451 = !{i64 32072}
!4452 = !{i64 32084}
!4453 = !{i64 32088}
!4454 = !{i64 32107}
!4455 = !{i64 32112}
!4456 = !{i64 32116}
!4457 = !{i64 32119}
!4458 = !{i64 32123}
!4459 = !{i64 32124}
!4460 = !{i64 32128}
!4461 = !{i64 32131}
!4462 = !{i64 32133}
!4463 = !{i64 32137}
!4464 = !{i64 32140}
!4465 = !{i64 32142}
!4466 = !{i64 32146}
!4467 = !{i64 32148}
!4468 = !{i64 32150}
!4469 = !{i64 32152}
!4470 = !{i64 32159}
!4471 = !{i64 32162}
!4472 = !{i64 32164}
!4473 = !{i64 32171}
!4474 = !{i64 32173}
!4475 = !{i64 32176}
!4476 = !{i64 32178}
!4477 = !{i64 32184}
!4478 = !{i64 32186}
!4479 = !{i64 32190}
!4480 = !{i64 32192}
!4481 = !{i64 32194}
!4482 = !{i64 32196}
!4483 = !{i64 32203}
!4484 = !{i64 32206}
!4485 = !{i64 32208}
!4486 = !{i64 32211}
!4487 = !{i64 32215}
!4488 = !{i64 32217}
!4489 = !{i64 32221}
!4490 = !{i64 32223}
!4491 = !{i64 32225}
!4492 = !{i64 32228}
!4493 = !{i64 32231}
!4494 = !{i64 32239}
!4495 = !{i64 32242}
!4496 = !{i64 32256}
!4497 = !{i64 32260}
!4498 = !{i64 32264}
!4499 = !{i64 32269}
!4500 = !{i64 32272}
!4501 = !{i64 32267}
!4502 = !{i64 32276}
!4503 = !{i64 32277}
!4504 = !{i64 32281}
!4505 = !{i64 32284}
!4506 = !{i64 32286}
!4507 = !{i64 32290}
!4508 = !{i64 32293}
!4509 = !{i64 32295}
!4510 = !{i64 32299}
!4511 = !{i64 32302}
!4512 = !{i64 32304}
!4513 = !{i64 32308}
!4514 = !{i64 32316}
!4515 = !{i64 32320}
!4516 = !{i64 32322}
!4517 = !{i64 32329}
!4518 = !{i64 32331}
!4519 = !{i64 32334}
!4520 = !{i64 32337}
!4521 = !{i64 32339}
!4522 = !{i64 32343}
!4523 = !{i64 32345}
!4524 = !{i64 32349}
!4525 = !{i64 32351}
!4526 = !{i64 32355}
!4527 = !{i64 32359}
!4528 = !{i64 32365}
!4529 = !{i64 32362}
!4530 = !{i64 32368}
!4531 = !{i64 32372}
!4532 = !{i64 32379}
!4533 = !{i64 32381}
!4534 = !{i64 32387}
!4535 = !{i64 32389}
!4536 = !{i64 32393}
!4537 = !{i64 32395}
!4538 = !{i64 32400}
!4539 = !{i64 32402}
!4540 = !{i64 32407}
!4541 = !{i64 32413}
!4542 = !{i64 32418}
!4543 = !{i64 32424}
!4544 = !{i64 32448}
!4545 = !{i64 32452}
!4546 = !{i64 32455}
!4547 = !{i64 32457}
!4548 = !{i64 32466}
!4549 = !{i64 32468}
!4550 = !{i64 32470}
!4551 = !{i64 32472}
!4552 = !{i64 32474}
!4553 = !{i64 32485}
!4554 = !{i64 32487}
!4555 = !{i64 32490}
!4556 = !{i64 32493}
!4557 = !{i64 32500}
!4558 = !{i64 32501}
!4559 = !{i64 32508}
!4560 = !{i64 32511}
!4561 = !{i64 32513}
!4562 = !{i64 32526}
!4563 = !{i64 32528}
!4564 = !{i64 32531}
!4565 = !{i64 32534}
!4566 = !{i64 32536}
!4567 = !{i64 32552}
!4568 = !{i64 32559}
!4569 = !{i64 32561}
!4570 = !{i64 32576}
!4571 = !{i64 32580}
!4572 = !{i64 32583}
!4573 = !{i64 32610}
!4574 = !{i64 32619}
!4575 = !{i64 32613}
!4576 = !{i64 32628}
!4577 = !{i64 32634}
!4578 = !{i64 32637}
!4579 = !{i64 32643}
!4580 = !{i64 32647}
!4581 = !{i64 32650}
!4582 = !{i64 32665}
!4583 = !{i64 32668}
!4584 = !{i64 32679}
!4585 = !{i64 32685}
!4586 = !{i64 32688}
!4587 = !{i64 32692}
!4588 = !{i64 32696}
!4589 = !{i64 32700}
!4590 = !{i64 32703}
!4591 = !{i64 32707}
!4592 = !{i64 32713}
!4593 = !{i64 32717}
!4594 = !{i64 32721}
!4595 = !{i64 32725}
!4596 = !{i64 32728}
!4597 = !{i64 32732}
!4598 = !{i64 32736}
!4599 = !{i64 32742}
!4600 = !{i64 32745}
!4601 = !{i64 32749}
!4602 = !{i64 32763}
!4603 = !{i64 32757}
!4604 = !{i64 32772}
!4605 = !{i64 32777}
!4606 = !{i64 32779}
!4607 = !{i64 32785}
!4608 = !{i64 32789}
!4609 = !{i64 32794}
!4610 = !{i64 32797}
!4611 = !{i64 32805}
!4612 = !{i64 32815}
!4613 = !{i64 32818}
!4614 = !{i64 32820}
!4615 = !{i64 32823}
!4616 = !{i64 32826}
!4617 = !{i64 32828}
!4618 = !{i64 32830}
!4619 = !{i64 32832}
!4620 = !{i64 32838}
!4621 = !{i64 32840}
!4622 = !{i64 32843}
!4623 = !{i64 32848}
!4624 = !{i64 32851}
!4625 = !{i64 32853}
!4626 = !{i64 32855}
!4627 = !{i64 32857}
!4628 = !{i64 32863}
!4629 = !{i64 32865}
!4630 = !{i64 32871}
!4631 = !{i64 32874}
!4632 = !{i64 32877}
!4633 = !{i64 32879}
!4634 = !{i64 32883}
!4635 = !{i64 32885}
!4636 = !{i64 32889}
!4637 = !{i64 32893}
!4638 = !{i64 32897}
!4639 = !{i64 32906}
!4640 = !{i64 32910}
!4641 = !{i64 32928}
!4642 = !{i64 32932}
!4643 = !{i64 32939}
!4644 = !{i64 32942}
!4645 = !{i64 32947}
!4646 = !{i64 32951}
!4647 = !{i64 32954}
!4648 = !{i64 32956}
!4649 = !{i64 32960}
!4650 = !{i64 32963}
!4651 = !{i64 32965}
!4652 = !{i64 32972}
!4653 = !{i64 32975}
!4654 = !{i64 32979}
!4655 = !{i64 32986}
!4656 = !{i64 32989}
!4657 = !{i64 32977}
!4658 = !{i64 32994}
!4659 = !{i64 32999}
!4660 = !{i64 33002}
!4661 = !{i64 33004}
!4662 = !{i64 33011}
!4663 = !{i64 33018}
!4664 = !{i64 33026}
!4665 = !{i64 33046}
!4666 = !{i64 33056}
!4667 = !{i64 33080}
!4668 = !{i64 33093}
!4669 = !{i64 33103}
!4670 = !{i64 33109}
!4671 = !{i64 33114}
!4672 = !{i64 33117}
!4673 = !{i64 33112}
!4674 = !{i64 33073}
!4675 = !{i64 33085}
!4676 = !{i64 33089}
!4677 = !{i64 33141}
!4678 = !{i64 33148}
!4679 = !{i64 33151}
!4680 = !{i64 33153}
!4681 = !{i64 33160}
!4682 = !{i64 33163}
!4683 = !{i64 33165}
!4684 = !{i64 33175}
!4685 = !{i64 33200}
!4686 = !{i64 33206}
!4687 = !{i64 33210}
!4688 = !{i64 33214}
!4689 = !{i64 33064}
!4690 = !{i64 33218}
!4691 = !{i64 33223}
!4692 = !{i64 33230}
!4693 = !{i64 33237}
!4694 = !{i64 33250}
!4695 = !{i64 33264}
!4696 = !{i64 33268}
!4697 = !{i64 33291}
!4698 = !{i64 33294}
!4699 = !{i64 33271}
!4700 = !{i64 33300}
!4701 = !{i64 33304}
!4702 = !{i64 33307}
!4703 = !{i64 33309}
!4704 = !{i64 33330}
!4705 = !{i64 33338}
!4706 = !{i64 33348}
!4707 = !{i64 33358}
!4708 = !{i64 33363}
!4709 = !{i64 33365}
!4710 = !{i64 33367}
!4711 = !{i64 33382}
!4712 = !{i64 33394}
!4713 = !{i64 33399}
!4714 = !{i64 33401}
!4715 = !{i64 33404}
!4716 = !{i64 33418}
!4717 = !{i64 33424}
!4718 = !{i64 33429}
!4719 = !{i64 33468}
!4720 = !{i64 33475}
!4721 = !{i64 33477}
!4722 = !{i64 33487}
!4723 = !{i64 33490}
!4724 = !{i64 33496}
!4725 = !{i64 33501}
!4726 = !{i64 33504}
!4727 = !{i64 33510}
!4728 = !{i64 33515}
!4729 = !{i64 33518}
!4730 = !{i64 33531}
!4731 = !{i64 33534}
!4732 = !{i64 33536}
!4733 = !{i64 33541}
!4734 = !{i64 33545}
!4735 = !{i64 33547}
!4736 = !{i64 33553}
!4737 = !{i64 33559}
!4738 = !{i64 33565}
!4739 = !{i64 33571}
!4740 = !{i64 33578}
!4741 = !{i64 33584}
!4742 = !{i64 33587}
!4743 = !{i64 33593}
!4744 = !{i64 33597}
!4745 = !{i64 33600}
!4746 = !{i64 33606}
!4747 = !{i64 33610}
!4748 = !{i64 33613}
!4749 = !{i64 33619}
!4750 = !{i64 33624}
!4751 = !{i64 33630}
!4752 = !{i64 33635}
!4753 = !{i64 33641}
!4754 = !{i64 33645}
!4755 = !{i64 33648}
!4756 = !{i64 33650}
!4757 = !{i64 33652}
!4758 = !{i64 33658}
!4759 = !{i64 33666}
!4760 = !{i64 33668}
!4761 = !{i64 33672}
!4762 = !{i64 36178}
!4763 = !{i64 33725}
!4764 = !{i64 33730}
!4765 = !{i64 33733}
!4766 = !{i64 33858}
!4767 = !{i64 33860}
!4768 = !{i64 33876}
!4769 = !{i64 33880}
!4770 = !{i64 33882}
!4771 = !{i64 33885}
!4772 = !{i64 33887}
!4773 = !{i64 33891}
!4774 = !{i64 33898}
!4775 = !{i64 33900}
!4776 = !{i64 33904}
!4777 = !{i64 33906}
!4778 = !{i64 33913}
!4779 = !{i64 33950}
!4780 = !{i64 33953}
!4781 = !{i64 33962}
!4782 = !{i64 33969}
!4783 = !{i64 33990}
!4784 = !{i64 33999}
!4785 = !{i64 34015}
!4786 = !{i64 34029}
!4787 = !{i64 34036}
!4788 = !{i64 34045}
!4789 = !{i64 34073}
!4790 = !{i64 34080}
!4791 = !{i64 33919}
!4792 = !{i64 34087}
!4793 = !{i64 34090}
!4794 = !{i64 34092}
!4795 = !{i64 34099}
!4796 = !{i64 34102}
!4797 = !{i64 34110}
!4798 = !{i64 34112}
!4799 = !{i64 34117}
!4800 = !{i64 34123}
!4801 = !{i64 34129}
!4802 = !{i64 34131}
!4803 = !{i64 34142}
!4804 = !{i64 34147}
!4805 = !{i64 34153}
!4806 = !{i64 34165}
!4807 = !{i64 34170}
!4808 = !{i64 34172}
!4809 = !{i64 33439}
!4810 = !{i64 34233}
!4811 = !{i64 34264}
!4812 = !{i64 34268}
!4813 = !{i64 34282}
!4814 = !{i64 34289}
!4815 = !{i64 34352}
!4816 = !{i64 34359}
!4817 = !{i64 34431}
!4818 = !{i64 34439}
!4819 = !{i64 34446}
!4820 = !{i64 34461}
!4821 = !{i64 34466}
!4822 = !{i64 34468}
!4823 = !{i64 34500}
!4824 = !{i64 34474}
!4825 = !{i64 34488}
!4826 = !{i64 34491}
!4827 = !{i64 34497}
!4828 = !{i64 34503}
!4829 = !{i64 34506}
!4830 = !{i64 34520}
!4831 = !{i64 34522}
!4832 = !{i64 34546}
!4833 = !{i64 34553}
!4834 = !{i64 34559}
!4835 = !{i64 34564}
!4836 = !{i64 34567}
!4837 = !{i64 34578}
!4838 = !{i64 34588}
!4839 = !{i64 34594}
!4840 = !{i64 34606}
!4841 = !{i64 34627}
!4842 = !{i64 34634}
!4843 = !{i64 34647}
!4844 = !{i64 34657}
!4845 = !{i64 34659}
!4846 = !{i64 34693}
!4847 = !{i64 34698}
!4848 = !{i64 34700}
!4849 = !{i64 34709}
!4850 = !{i64 34740}
!4851 = !{i64 34743}
!4852 = !{i64 34745}
!4853 = !{i64 34755}
!4854 = !{i64 34762}
!4855 = !{i64 34769}
!4856 = !{i64 34773}
!4857 = !{i64 34775}
!4858 = !{i64 34797}
!4859 = !{i64 34802}
!4860 = !{i64 34804}
!4861 = !{i64 34815}
!4862 = !{i64 34820}
!4863 = !{i64 34823}
!4864 = !{i64 34827}
!4865 = !{i64 34830}
!4866 = !{i64 34834}
!4867 = !{i64 34838}
!4868 = !{i64 34856}
!4869 = !{i64 34863}
!4870 = !{i64 34868}
!4871 = !{i64 34873}
!4872 = !{i64 34875}
!4873 = !{i64 34883}
!4874 = !{i64 34891}
!4875 = !{i64 34895}
!4876 = !{i64 34899}
!4877 = !{i64 34926}
!4878 = !{i64 34932}
!4879 = !{i64 34937}
!4880 = !{i64 34939}
!4881 = !{i64 34945}
!4882 = !{i64 34954}
!4883 = !{i64 34957}
!4884 = !{i64 34963}
!4885 = !{i64 34966}
!4886 = !{i64 34973}
!4887 = !{i64 34975}
!4888 = !{i64 34978}
!4889 = !{i64 34980}
!4890 = !{i64 34982}
!4891 = !{i64 34984}
!4892 = !{i64 34988}
!4893 = !{i64 34990}
!4894 = !{i64 34994}
!4895 = !{i64 34997}
!4896 = !{i64 35004}
!4897 = !{i64 35007}
!4898 = !{i64 35009}
!4899 = !{i64 35013}
!4900 = !{i64 35016}
!4901 = !{i64 35018}
!4902 = !{i64 35022}
!4903 = !{i64 35024}
!4904 = !{i64 35028}
!4905 = !{i64 35031}
!4906 = !{i64 35035}
!4907 = !{i64 35039}
!4908 = !{i64 35044}
!4909 = !{i64 35059}
!4910 = !{i64 35064}
!4911 = !{i64 35066}
!4912 = !{i64 35068}
!4913 = !{i64 35086}
!4914 = !{i64 35095}
!4915 = !{i64 35107}
!4916 = !{i64 35114}
!4917 = !{i64 35125}
!4918 = !{i64 35130}
!4919 = !{i64 35116}
!4920 = !{i64 35135}
!4921 = !{i64 35141}
!4922 = !{i64 35143}
!4923 = !{i64 35146}
!4924 = !{i64 35171}
!4925 = !{i64 35176}
!4926 = !{i64 35178}
!4927 = !{i64 35180}
!4928 = !{i64 35184}
!4929 = !{i64 35187}
!4930 = !{i64 35209}
!4931 = !{i64 35214}
!4932 = !{i64 35217}
!4933 = !{i64 35230}
!4934 = !{i64 35253}
!4935 = !{i64 35259}
!4936 = !{i64 35264}
!4937 = !{i64 35267}
!4938 = !{i64 35328}
!4939 = !{i64 35332}
!4940 = !{i64 35335}
!4941 = !{i64 35337}
!4942 = !{i64 35343}
!4943 = !{i64 35348}
!4944 = !{i64 35351}
!4945 = !{i64 35357}
!4946 = !{i64 35376}
!4947 = !{i64 35381}
!4948 = !{i64 35384}
!4949 = !{i64 35416}
!4950 = !{i64 35422}
!4951 = !{i64 35424}
!4952 = !{i64 35432}
!4953 = !{i64 35435}
!4954 = !{i64 35437}
!4955 = !{i64 35443}
!4956 = !{i64 35449}
!4957 = !{i64 35462}
!4958 = !{i64 35430}
!4959 = !{i64 35494}
!4960 = !{i64 35514}
!4961 = !{i64 35520}
!4962 = !{i64 35523}
!4963 = !{i64 35566}
!4964 = !{i64 35618}
!4965 = !{i64 35625}
!4966 = !{i64 35627}
!4967 = !{i64 35637}
!4968 = !{i64 36208}
!4969 = !{i64 36214}
!4970 = !{i64 36247}
!4971 = !{i64 36252}
!4972 = !{i64 36254}
!4973 = !{i64 36257}
!4974 = !{i64 36262}
!4975 = !{i64 36268}
!4976 = !{i64 36274}
!4977 = !{i64 36277}
!4978 = !{i64 36296}
!4979 = !{i64 36303}
!4980 = !{i64 36313}
!4981 = !{i64 36321}
!4982 = !{i64 36329}
!4983 = !{i64 36341}
!4984 = !{i64 36344}
!4985 = !{i64 36349}
!4986 = !{i64 36354}
!4987 = !{i64 36356}
!4988 = !{i64 36358}
!4989 = !{i64 36362}
!4990 = !{i64 36367}
!4991 = !{i64 36393}
!4992 = !{i64 36398}
!4993 = !{i64 36400}
!4994 = !{i64 36402}
!4995 = !{i64 36406}
!4996 = !{i64 36410}
!4997 = !{i64 36413}
!4998 = !{i64 36415}
!4999 = !{i64 36422}
!5000 = !{i64 36429}
!5001 = !{i64 36432}
!5002 = !{i64 36435}
!5003 = !{i64 36441}
!5004 = !{i64 36458}
!5005 = !{i64 36461}
!5006 = !{i64 36463}
!5007 = !{i64 36468}
!5008 = !{i64 36472}
!5009 = !{i64 36477}
!5010 = !{i64 36493}
!5011 = !{i64 36500}
!5012 = !{i64 36505}
!5013 = !{i64 36507}
!5014 = !{i64 36534}
!5015 = !{i64 36544}
!5016 = !{i64 36565}
!5017 = !{i64 36581}
!5018 = !{i64 36584}
!5019 = !{i64 36590}
!5020 = !{i64 36594}
!5021 = !{i64 36597}
!5022 = !{i64 36603}
!5023 = !{i64 36607}
!5024 = !{i64 36610}
!5025 = !{i64 36616}
!5026 = !{i64 36624}
!5027 = !{i64 36630}
!5028 = !{i64 36635}
!5029 = !{i64 36638}
!5030 = !{i64 36644}
!5031 = !{i64 36654}
!5032 = !{i64 36663}
!5033 = !{i64 36668}
!5034 = !{i64 36670}
!5035 = !{i64 36676}
!5036 = !{i64 36714}
!5037 = !{i64 36728}
!5038 = !{i64 36733}
!5039 = !{i64 36736}
!5040 = !{i64 36741}
!5041 = !{i64 36746}
!5042 = !{i64 36748}
!5043 = !{i64 36754}
!5044 = !{i64 36770}
!5045 = !{i64 36775}
!5046 = !{i64 36777}
!5047 = !{i64 36783}
!5048 = !{i64 36788}
!5049 = !{i64 36796}
!5050 = !{i64 36801}
!5051 = !{i64 36807}
!5052 = !{i64 36810}
!5053 = !{i64 37430}
!5054 = !{i64 36816}
!5055 = !{i64 36835}
!5056 = !{i64 36838}
!5057 = !{i64 36849}
!5058 = !{i64 36860}
!5059 = !{i64 36866}
!5060 = !{i64 36881}
!5061 = !{i64 36883}
!5062 = !{i64 36890}
!5063 = !{i64 36895}
!5064 = !{i64 36898}
!5065 = !{i64 36904}
!5066 = !{i64 36908}
!5067 = !{i64 36911}
!5068 = !{i64 36917}
!5069 = !{i64 36922}
!5070 = !{i64 36928}
!5071 = !{i64 36936}
!5072 = !{i64 36558}
!5073 = !{i64 36955}
!5074 = !{i64 36962}
!5075 = !{i64 36970}
!5076 = !{i64 36974}
!5077 = !{i64 36986}
!5078 = !{i64 36972}
!5079 = !{i64 36993}
!5080 = !{i64 37000}
!5081 = !{i64 37002}
!5082 = !{i64 37013}
!5083 = !{i64 37018}
!5084 = !{i64 37020}
!5085 = !{i64 37022}
!5086 = !{i64 37026}
!5087 = !{i64 37038}
!5088 = !{i64 37045}
!5089 = !{i64 37049}
!5090 = !{i64 37053}
!5091 = !{i64 37070}
!5092 = !{i64 37078}
!5093 = !{i64 37080}
!5094 = !{i64 37082}
!5095 = !{i64 37102}
!5096 = !{i64 37107}
!5097 = !{i64 37112}
!5098 = !{i64 37117}
!5099 = !{i64 37129}
!5100 = !{i64 37136}
!5101 = !{i64 37141}
!5102 = !{i64 37148}
!5103 = !{i64 37151}
!5104 = !{i64 37157}
!5105 = !{i64 37160}
!5106 = !{i64 37167}
!5107 = !{i64 37170}
!5108 = !{i64 37176}
!5109 = !{i64 37179}
!5110 = !{i64 37185}
!5111 = !{i64 37192}
!5112 = !{i64 37199}
!5113 = !{i64 37202}
!5114 = !{i64 37211}
!5115 = !{i64 37215}
!5116 = !{i64 37218}
!5117 = !{i64 37221}
!5118 = !{i64 37229}
!5119 = !{i64 37245}
!5120 = !{i64 37253}
!5121 = !{i64 37261}
!5122 = !{i64 37265}
!5123 = !{i64 37272}
!5124 = !{i64 37275}
!5125 = !{i64 37279}
!5126 = !{i64 37282}
!5127 = !{i64 37287}
!5128 = !{i64 37291}
!5129 = !{i64 37293}
!5130 = !{i64 37302}
!5131 = !{i64 37307}
!5132 = !{i64 37296}
!5133 = !{i64 37316}
!5134 = !{i64 37319}
!5135 = !{i64 37321}
!5136 = !{i64 37329}
!5137 = !{i64 37333}
!5138 = !{i64 37338}
!5139 = !{i64 37342}
!5140 = !{i64 37349}
!5141 = !{i64 37356}
!5142 = !{i64 37363}
!5143 = !{i64 37367}
!5144 = !{i64 37374}
!5145 = !{i64 37381}
!5146 = !{i64 37387}
!5147 = !{i64 37392}
!5148 = !{i64 37401}
!5149 = !{i64 37403}
!5150 = !{i64 37405}
!5151 = !{i64 37415}
!5152 = !{i64 37420}
!5153 = !{i64 37437}
!5154 = !{i64 37440}
!5155 = !{i64 37446}
!5156 = !{i64 37450}
!5157 = !{i64 37461}
!5158 = !{i64 37486}
!5159 = !{i64 37488}
!5160 = !{i64 37494}
!5161 = !{i64 37498}
!5162 = !{i64 37503}
!5163 = !{i64 37519}
!5164 = !{i64 37526}
!5165 = !{i64 37534}
!5166 = !{i64 37541}
!5167 = !{i64 37549}
!5168 = !{i64 37558}
!5169 = !{i64 37561}
!5170 = !{i64 37563}
!5171 = !{i64 37569}
!5172 = !{i64 37576}
!5173 = !{i64 37579}
!5174 = !{i64 37581}
!5175 = !{i64 37592}
!5176 = !{i64 37600}
!5177 = !{i64 37615}
!5178 = !{i64 37632}
!5179 = !{i64 37637}
!5180 = !{i64 37639}
!5181 = !{i64 37650}
!5182 = !{i64 37654}
!5183 = !{i64 37659}
!5184 = !{i64 37675}
!5185 = !{i64 37683}
!5186 = !{i64 37686}
!5187 = !{i64 37692}
!5188 = !{i64 37698}
!5189 = !{i64 37701}
!5190 = !{i64 37707}
!5191 = !{i64 37714}
!5192 = !{i64 37720}
!5193 = !{i64 37725}
!5194 = !{i64 37728}
!5195 = !{i64 37736}
!5196 = !{i64 37739}
!5197 = !{i64 37747}
!5198 = !{i64 37756}
!5199 = !{i64 37759}
!5200 = !{i64 37761}
!5201 = !{i64 37765}
!5202 = !{i64 37768}
!5203 = !{i64 37770}
!5204 = !{i64 37781}
!5205 = !{i64 37786}
!5206 = !{i64 37790}
!5207 = !{i64 37795}
!5208 = !{i64 37799}
!5209 = !{i64 37807}
!5210 = !{i64 37811}
!5211 = !{i64 37814}
!5212 = !{i64 37820}
!5213 = !{i64 37831}
!5214 = !{i64 37841}
!5215 = !{i64 37846}
!5216 = !{i64 37849}
!5217 = !{i64 37860}
!5218 = !{i64 37865}
!5219 = !{i64 37873}
!5220 = !{i64 37881}
!5221 = !{i64 37883}
!5222 = !{i64 37893}
!5223 = !{i64 37901}
!5224 = !{i64 37906}
!5225 = !{i64 37909}
!5226 = !{i64 37935}
!5227 = !{i64 37920}
!5228 = !{i64 37922}
!5229 = !{i64 37949}
!5230 = !{i64 37959}
!5231 = !{i64 37961}
!5232 = !{i64 37965}
!5233 = !{i64 37968}
!5234 = !{i64 37970}
!5235 = !{i64 37974}
!5236 = !{i64 37977}
!5237 = !{i64 37979}
!5238 = !{i64 38031}
!5239 = !{i64 38080}
!5240 = !{i64 38101}
!5241 = !{i64 38121}
!5242 = !{i64 38128}
!5243 = !{i64 38131}
!5244 = !{i64 38137}
!5245 = !{i64 38144}
!5246 = !{i64 38150}
!5247 = !{i64 38162}
!5248 = !{i64 38166}
!5249 = !{i64 38169}
!5250 = !{i64 38175}
!5251 = !{i64 38179}
!5252 = !{i64 38182}
!5253 = !{i64 38188}
!5254 = !{i64 38196}
!5255 = !{i64 38202}
!5256 = !{i64 38205}
!5257 = !{i64 38207}
!5258 = !{i64 38214}
!5259 = !{i64 38247}
!5260 = !{i64 38256}
!5261 = !{i64 38264}
!5262 = !{i64 38273}
!5263 = !{i64 38267}
!5264 = !{i64 38288}
!5265 = !{i64 38292}
!5266 = !{i64 38295}
!5267 = !{i64 38301}
!5268 = !{i64 38305}
!5269 = !{i64 38316}
!5270 = !{i64 38308}
!5271 = !{i64 38327}
!5272 = !{i64 38330}
!5273 = !{i64 38333}
!5274 = !{i64 38373}
!5275 = !{i64 38341}
!5276 = !{i64 38383}
!5277 = !{i64 38390}
!5278 = !{i64 38393}
!5279 = !{i64 38403}
!5280 = !{i64 38416}
!5281 = !{i64 38431}
!5282 = !{i64 38418}
!5283 = !{i64 38409}
!5284 = !{i64 38424}
!5285 = !{i64 38439}
!5286 = !{i64 38443}
!5287 = !{i64 38455}
!5288 = !{i64 38461}
!5289 = !{i64 38465}
!5290 = !{i64 38468}
!5291 = !{i64 38474}
!5292 = !{i64 38479}
!5293 = !{i64 38485}
!5294 = !{i64 38490}
!5295 = !{i64 38496}
!5296 = !{i64 38501}
!5297 = !{i64 38507}
!5298 = !{i64 38518}
!5299 = !{i64 38524}
!5300 = !{i64 38543}
!5301 = !{i64 38546}
!5302 = !{i64 38554}
!5303 = !{i64 38559}
!5304 = !{i64 38561}
!5305 = !{i64 38575}
!5306 = !{i64 38579}
!5307 = !{i64 38593}
!5308 = !{i64 38596}
!5309 = !{i64 38601}
!5310 = !{i64 38603}
!5311 = !{i64 38616}
!5312 = !{i64 38624}
!5313 = !{i64 38632}
!5314 = !{i64 38641}
!5315 = !{i64 38654}
!5316 = !{i64 38658}
!5317 = !{i64 38672}
!5318 = !{i64 38674}
!5319 = !{i64 38677}
!5320 = !{i64 38683}
!5321 = !{i64 38688}
!5322 = !{i64 38694}
!5323 = !{i64 38710}
!5324 = !{i64 38736}
!5325 = !{i64 38699}
!5326 = !{i64 38785}
!5327 = !{i64 38791}
!5328 = !{i64 38795}
!5329 = !{i64 38799}
!5330 = !{i64 38752}
!5331 = !{i64 38801}
!5332 = !{i64 38817}
!5333 = !{i64 38809}
!5334 = !{i64 38819}
!5335 = !{i64 38870}
!5336 = !{i64 38835}
!5337 = !{i64 38838}
!5338 = !{i64 38851}
!5339 = !{i64 38862}
!5340 = !{i64 38876}
!5341 = !{i64 38880}
!5342 = !{i64 38890}
!5343 = !{i64 38894}
!5344 = !{i64 38901}
!5345 = !{i64 38910}
!5346 = !{i64 38912}
!5347 = !{i64 38915}
!5348 = !{i64 38917}
!5349 = !{i64 38925}
!5350 = !{i64 38932}
!5351 = !{i64 39023}
!5352 = !{i64 39031}
!5353 = !{i64 39035}
!5354 = !{i64 39040}
!5355 = !{i64 39043}
!5356 = !{i64 39048}
!5357 = !{i64 39051}
!5358 = !{i64 39057}
!5359 = !{i64 39061}
!5360 = !{i64 39070}
!5361 = !{i64 39064}
!5362 = !{i64 39079}
!5363 = !{i64 39083}
!5364 = !{i64 39089}
!5365 = !{i64 39098}
!5366 = !{i64 39103}
!5367 = !{i64 39105}
!5368 = !{i64 39111}
!5369 = !{i64 39115}
!5370 = !{i64 39124}
!5371 = !{i64 39128}
!5372 = !{i64 39133}
!5373 = !{i64 39135}
!5374 = !{i64 39141}
!5375 = !{i64 39146}
!5376 = !{i64 39156}
!5377 = !{i64 39170}
!5378 = !{i64 39178}
!5379 = !{i64 39183}
!5380 = !{i64 39185}
!5381 = !{i64 39203}
!5382 = !{i64 39207}
!5383 = !{i64 39212}
!5384 = !{i64 39215}
!5385 = !{i64 39221}
!5386 = !{i64 39226}
!5387 = !{i64 39244}
!5388 = !{i64 39248}
!5389 = !{i64 39252}
!5390 = !{i64 39256}
!5391 = !{i64 39260}
!5392 = !{i64 39261}
!5393 = !{i64 39263}
!5394 = !{i64 39276}
!5395 = !{i64 39281}
!5396 = !{i64 39288}
!5397 = !{i64 39291}
!5398 = !{i64 39293}
!5399 = !{i64 39295}
!5400 = !{i64 39299}
!5401 = !{i64 39310}
!5402 = !{i64 39316}
!5403 = !{i64 39324}
!5404 = !{i64 39330}
!5405 = !{i64 39333}
!5406 = !{i64 39339}
!5407 = !{i64 39347}
!5408 = !{i64 39359}
!5409 = !{i64 39368}
!5410 = !{i64 39372}
!5411 = !{i64 39376}
!5412 = !{i64 39382}
!5413 = !{i64 39388}
!5414 = !{i64 39391}
!5415 = !{i64 39404}
!5416 = !{i64 39407}
!5417 = !{i64 39410}
!5418 = !{i64 39416}
!5419 = !{i64 39429}
!5420 = !{i64 39436}
!5421 = !{i64 39443}
!5422 = !{i64 39446}
!5423 = !{i64 39452}
!5424 = !{i64 39465}
!5425 = !{i64 39469}
!5426 = !{i64 39459}
!5427 = !{i64 39478}
!5428 = !{i64 39486}
!5429 = !{i64 39495}
!5430 = !{i64 39499}
!5431 = !{i64 39502}
!5432 = !{i64 39505}
!5433 = !{i64 39508}
!5434 = !{i64 39511}
!5435 = !{i64 39513}
!5436 = !{i64 39517}
!5437 = !{i64 39528}
!5438 = !{i64 39535}
!5439 = !{i64 39542}
!5440 = !{i64 39545}
!5441 = !{i64 39549}
!5442 = !{i64 39552}
!5443 = !{i64 39559}
!5444 = !{i64 39566}
!5445 = !{i64 39570}
!5446 = !{i64 39575}
!5447 = !{i64 39580}
!5448 = !{i64 39589}
!5449 = !{i64 39591}
!5450 = !{i64 39598}
!5451 = !{i64 39601}
!5452 = !{i64 39618}
!5453 = !{i64 39607}
!5454 = !{i64 39612}
!5455 = !{i64 39623}
!5456 = !{i64 39626}
!5457 = !{i64 39629}
!5458 = !{i64 39635}
!5459 = !{i64 39642}
!5460 = !{i64 39644}
!5461 = !{i64 39646}
!5462 = !{i64 39650}
!5463 = !{i64 39653}
!5464 = !{i64 39655}
!5465 = !{i64 39659}
!5466 = !{i64 39662}
!5467 = !{i64 39671}
!5468 = !{i64 39675}
!5469 = !{i64 39682}
!5470 = !{i64 39684}
!5471 = !{i64 39694}
!5472 = !{i64 39698}
!5473 = !{i64 39700}
!5474 = !{i64 39706}
!5475 = !{i64 39713}
!5476 = !{i64 39721}
!5477 = !{i64 39734}
!5478 = !{i64 39738}
!5479 = !{i64 39740}
!5480 = !{i64 39744}
!5481 = !{i64 39748}
!5482 = !{i64 39754}
!5483 = !{i64 39758}
!5484 = !{i64 39760}
!5485 = !{i64 39763}
!5486 = !{i64 39778}
!5487 = !{i64 39783}
!5488 = !{i64 39785}
!5489 = !{i64 39797}
!5490 = !{i64 39804}
!5491 = !{i64 39806}
!5492 = !{i64 39810}
!5493 = !{i64 39827}
!5494 = !{i64 39835}
!5495 = !{i64 39839}
!5496 = !{i64 39846}
!5497 = !{i64 39848}
!5498 = !{i64 39850}
!5499 = !{i64 39859}
!5500 = !{i64 39862}
!5501 = !{i64 39873}
!5502 = !{i64 39877}
!5503 = !{i64 39885}
!5504 = !{i64 39892}
!5505 = !{i64 39896}
!5506 = !{i64 39904}
!5507 = !{i64 39911}
!5508 = !{i64 39915}
!5509 = !{i64 39923}
!5510 = !{i64 39933}
!5511 = !{i64 39936}
!5512 = !{i64 39938}
!5513 = !{i64 39946}
!5514 = !{i64 39950}
!5515 = !{i64 39957}
!5516 = !{i64 39960}
!5517 = !{i64 39962}
!5518 = !{i64 39970}
!5519 = !{i64 39974}
!5520 = !{i64 39977}
!5521 = !{i64 39980}
!5522 = !{i64 39982}
!5523 = !{i64 39984}
!5524 = !{i64 39998}
!5525 = !{i64 40001}
!5526 = !{i64 40004}
!5527 = !{i64 40007}
!5528 = !{i64 40010}
!5529 = !{i64 40012}
!5530 = !{i64 40017}
!5531 = !{i64 40019}
!5532 = !{i64 40021}
!5533 = !{i64 40029}
!5534 = !{i64 40047}
!5535 = !{i64 40050}
!5536 = !{i64 40052}
!5537 = !{i64 40054}
!5538 = !{i64 40061}
!5539 = !{i64 40063}
!5540 = !{i64 40075}
!5541 = !{i64 40077}
!5542 = !{i64 40080}
!5543 = !{i64 40086}
!5544 = !{i64 40089}
!5545 = !{i64 40091}
!5546 = !{i64 40094}
!5547 = !{i64 40099}
!5548 = !{i64 40101}
!5549 = !{i64 40106}
!5550 = !{i64 40110}
!5551 = !{i64 40118}
!5552 = !{i64 40121}
!5553 = !{i64 40127}
!5554 = !{i64 40131}
!5555 = !{i64 40134}
!5556 = !{i64 40140}
!5557 = !{i64 40145}
!5558 = !{i64 40148}
!5559 = !{i64 40154}
!5560 = !{i64 40160}
!5561 = !{i64 40166}
!5562 = !{i64 40172}
!5563 = !{i64 40181}
!5564 = !{i64 40187}
!5565 = !{i64 40191}
!5566 = !{i64 40194}
!5567 = !{i64 40200}
!5568 = !{i64 40205}
!5569 = !{i64 40211}
!5570 = !{i64 40214}
!5571 = !{i64 40220}
!5572 = !{i64 40228}
!5573 = !{i64 40230}
!5574 = !{i64 40237}
!5575 = !{i64 40240}
!5576 = !{i64 40246}
!5577 = !{i64 40251}
!5578 = !{i64 40253}
!5579 = !{i64 40255}
!5580 = !{i64 40261}
!5581 = !{i64 40267}
!5582 = !{i64 40269}
!5583 = !{i64 40272}
!5584 = !{i64 40278}
!5585 = !{i64 40282}
!5586 = !{i64 40284}
!5587 = !{i64 40291}
!5588 = !{i64 40294}
!5589 = !{i64 40300}
!5590 = !{i64 40303}
!5591 = !{i64 40312}
!5592 = !{i64 40315}
!5593 = !{i64 40319}
!5594 = !{i64 40332}
!5595 = !{i64 40334}
!5596 = !{i64 40345}
!5597 = !{i64 40349}
!5598 = !{i64 40352}
!5599 = !{i64 40357}
!5600 = !{i64 40375}
!5601 = !{i64 40380}
!5602 = !{i64 40382}
!5603 = !{i64 40388}
!5604 = !{i64 40395}
!5605 = !{i64 40398}
!5606 = !{i64 40403}
!5607 = !{i64 40408}
!5608 = !{i64 40413}
!5609 = !{i64 40415}
!5610 = !{i64 40421}
!5611 = !{i64 40425}
!5612 = !{i64 40428}
!5613 = !{i64 40434}
!5614 = !{i64 40439}
!5615 = !{i64 40445}
!5616 = !{i64 40450}
!5617 = !{i64 40471}
!5618 = !{i64 40505}
!5619 = !{i64 40514}
!5620 = !{i64 40518}
!5621 = !{i64 40526}
!5622 = !{i64 40759}
!5623 = !{i64 40766}
!5624 = !{i64 40769}
!5625 = !{i64 40771}
!5626 = !{i64 40788}
!5627 = !{i64 40796}
!5628 = !{i64 40799}
!5629 = !{i64 40806}
!5630 = !{i64 40786}
!5631 = !{i64 40809}
!5632 = !{i64 40814}
!5633 = !{i64 40816}
!5634 = !{i64 40827}
!5635 = !{i64 40830}
!5636 = !{i64 39728}
!5637 = !{i64 40836}
!5638 = !{i64 40839}
!5639 = !{i64 40841}
!5640 = !{i64 40847}
!5641 = !{i64 40853}
!5642 = !{i64 40856}
!5643 = !{i64 40860}
!5644 = !{i64 40869}
!5645 = !{i64 40875}
!5646 = !{i64 40878}
!5647 = !{i64 40884}
!5648 = !{i64 40890}
!5649 = !{i64 40895}
!5650 = !{i64 40899}
!5651 = !{i64 40903}
!5652 = !{i64 40906}
!5653 = !{i64 40913}
!5654 = !{i64 40921}
!5655 = !{i64 40924}
!5656 = !{i64 40930}
!5657 = !{i64 40932}
!5658 = !{i64 40934}
!5659 = !{i64 40937}
!5660 = !{i64 40941}
!5661 = !{i64 40964}
!5662 = !{i64 40968}
!5663 = !{i64 40988}
!5664 = !{i64 40990}
!5665 = !{i64 40996}
!5666 = !{i64 41000}
!5667 = !{i64 41003}
!5668 = !{i64 41021}
!5669 = !{i64 41023}
!5670 = !{i64 41029}
!5671 = !{i64 41035}
!5672 = !{i64 41041}
!5673 = !{i64 41046}
!5674 = !{i64 41049}
!5675 = !{i64 41064}
!5676 = !{i64 41084}
!5677 = !{i64 41105}
!5678 = !{i64 41110}
!5679 = !{i64 41115}
!5680 = !{i64 41130}
!5681 = !{i64 41140}
!5682 = !{i64 41148}
!5683 = !{i64 41150}
!5684 = !{i64 41159}
!5685 = !{i64 41167}
!5686 = !{i64 41175}
!5687 = !{i64 41192}
!5688 = !{i64 41195}
!5689 = !{i64 41201}
!5690 = !{i64 41229}
!5691 = !{i64 41232}
!5692 = !{i64 41258}
!5693 = !{i64 41260}
!5694 = !{i64 41266}
!5695 = !{i64 41274}
!5696 = !{i64 41279}
!5697 = !{i64 41292}
!5698 = !{i64 41307}
!5699 = !{i64 41325}
!5700 = !{i64 41332}
!5701 = !{i64 41340}
!5702 = !{i64 41348}
!5703 = !{i64 41356}
!5704 = !{i64 41364}
!5705 = !{i64 41372}
!5706 = !{i64 41380}
!5707 = !{i64 41388}
!5708 = !{i64 41393}
!5709 = !{i64 41401}
!5710 = !{i64 41406}
!5711 = !{i64 41408}
!5712 = !{i64 41410}
!5713 = !{i64 41417}
!5714 = !{i64 41425}
!5715 = !{i64 41432}
!5716 = !{i64 41434}
!5717 = !{i64 41449}
!5718 = !{i64 41460}
!5719 = !{i64 41462}
!5720 = !{i64 41470}
!5721 = !{i64 41511}
!5722 = !{i64 41519}
!5723 = !{i64 41525}
!5724 = !{i64 41568}
!5725 = !{i64 41586}
!5726 = !{i64 41593}
!5727 = !{i64 41596}
!5728 = !{i64 41598}
!5729 = !{i64 41602}
!5730 = !{i64 41605}
!5731 = !{i64 41607}
!5732 = !{i64 41610}
!5733 = !{i64 41613}
!5734 = !{i64 41620}
!5735 = !{i64 41623}
!5736 = !{i64 41642}
!5737 = !{i64 41650}
!5738 = !{i64 41655}
!5739 = !{i64 41669}
!5740 = !{i64 41693}
!5741 = !{i64 41712}
!5742 = !{i64 41727}
!5743 = !{i64 41734}
!5744 = !{i64 41737}
!5745 = !{i64 41739}
!5746 = !{i64 41743}
!5747 = !{i64 41746}
!5748 = !{i64 41748}
!5749 = !{i64 41752}
!5750 = !{i64 41755}
!5751 = !{i64 41760}
!5752 = !{i64 41763}
!5753 = !{i64 41773}
!5754 = !{i64 41795}
!5755 = !{i64 41808}
!5756 = !{i64 41824}
!5757 = !{i64 41831}
!5758 = !{i64 41834}
!5759 = !{i64 41836}
!5760 = !{i64 41840}
!5761 = !{i64 41843}
!5762 = !{i64 41845}
!5763 = !{i64 41849}
!5764 = !{i64 41852}
!5765 = !{i64 41857}
!5766 = !{i64 41860}
!5767 = !{i64 41876}
!5768 = !{i64 41886}
!5769 = !{i64 41908}
!5770 = !{i64 41920}
!5771 = !{i64 41933}
!5772 = !{i64 41957}
!5773 = !{i64 41969}
!5774 = !{i64 41973}
!5775 = !{i64 41977}
!5776 = !{i64 41982}
!5777 = !{i64 41997}
!5778 = !{i64 42005}
!5779 = !{i64 42020}
!5780 = !{i64 42028}
!5781 = !{i64 42030}
!5782 = !{i64 42033}
!5783 = !{i64 42039}
!5784 = !{i64 42042}
!5785 = !{i64 42048}
!5786 = !{i64 42055}
!5787 = !{i64 42061}
!5788 = !{i64 42066}
!5789 = !{i64 42068}
!5790 = !{i64 42073}
!5791 = !{i64 42082}
!5792 = !{i64 42087}
!5793 = !{i64 42092}
!5794 = !{i64 42095}
!5795 = !{i64 41938}
!5796 = !{i64 42107}
!5797 = !{i64 42112}
!5798 = !{i64 42117}
!5799 = !{i64 42119}
!5800 = !{i64 42130}
!5801 = !{i64 42134}
!5802 = !{i64 42139}
!5803 = !{i64 42153}
!5804 = !{i64 42201}
!5805 = !{i64 42206}
!5806 = !{i64 42210}
!5807 = !{i64 42224}
!5808 = !{i64 42231}
!5809 = !{i64 42236}
!5810 = !{i64 42229}
!5811 = !{i64 42246}
!5812 = !{i64 42251}
!5813 = !{i64 42271}
!5814 = !{i64 42292}
!5815 = !{i64 42307}
!5816 = !{i64 42312}
!5817 = !{i64 42314}
!5818 = !{i64 42319}
!5819 = !{i64 42324}
!5820 = !{i64 42334}
!5821 = !{i64 42351}
!5822 = !{i64 42361}
!5823 = !{i64 42363}
!5824 = !{i64 42365}
!5825 = !{i64 42368}
!5826 = !{i64 42373}
!5827 = !{i64 42383}
!5828 = !{i64 42400}
!5829 = !{i64 42402}
!5830 = !{i64 42405}
!5831 = !{i64 42408}
!5832 = !{i64 42414}
!5833 = !{i64 42423}
!5834 = !{i64 42417}
!5835 = !{i64 42432}
!5836 = !{i64 42438}
!5837 = !{i64 42446}
!5838 = !{i64 42449}
!5839 = !{i64 42452}
!5840 = !{i64 42461}
!5841 = !{i64 42463}
!5842 = !{i64 42469}
!5843 = !{i64 42477}
!5844 = !{i64 42480}
!5845 = !{i64 42483}
!5846 = !{i64 42490}
!5847 = !{i64 42500}
!5848 = !{i64 42506}
!5849 = !{i64 42514}
!5850 = !{i64 42517}
!5851 = !{i64 42520}
!5852 = !{i64 42527}
!5853 = !{i64 42584}
!5854 = !{i64 42609}
!5855 = !{i64 42613}
!5856 = !{i64 42615}
!5857 = !{i64 42618}
!5858 = !{i64 42621}
!5859 = !{i64 42628}
!5860 = !{i64 42645}
!5861 = !{i64 42649}
!5862 = !{i64 42694}
!5863 = !{i64 42704}
!5864 = !{i64 42709}
!5865 = !{i64 42713}
!5866 = !{i64 42718}
!5867 = !{i64 42720}
!5868 = !{i64 42738}
!5869 = !{i64 42746}
!5870 = !{i64 42769}
!5871 = !{i64 42798}
!5872 = !{i64 42800}
!5873 = !{i64 42802}
!5874 = !{i64 42805}
!5875 = !{i64 42809}
!5876 = !{i64 42811}
!5877 = !{i64 42814}
!5878 = !{i64 42834}
!5879 = !{i64 42841}
!5880 = !{i64 42852}
!5881 = !{i64 42884}
!5882 = !{i64 42893}
!5883 = !{i64 42824}
!5884 = !{i64 42826}
!5885 = !{i64 42907}
!5886 = !{i64 42917}
!5887 = !{i64 42922}
!5888 = !{i64 42931}
!5889 = !{i64 42932}
!5890 = !{i64 42938}
!5891 = !{i64 42951}
!5892 = !{i64 42961}
!5893 = !{i64 42968}
!5894 = !{i64 42972}
!5895 = !{i64 42979}
!5896 = !{i64 42983}
!5897 = !{i64 42990}
!5898 = !{i64 42994}
!5899 = !{i64 42998}
!5900 = !{i64 43005}
!5901 = !{i64 43008}
!5902 = !{i64 43012}
!5903 = !{i64 43015}
!5904 = !{i64 43026}
!5905 = !{i64 43035}
!5906 = !{i64 43040}
!5907 = !{i64 43054}
!5908 = !{i64 43079}
!5909 = !{i64 43084}
!5910 = !{i64 43088}
!5911 = !{i64 43086}
!5912 = !{i64 43052}
!5913 = !{i64 43115}
!5914 = !{i64 43125}
!5915 = !{i64 43135}
!5916 = !{i64 43136}
!5917 = !{i64 43142}
!5918 = !{i64 43145}
!5919 = !{i64 43147}
!5920 = !{i64 43151}
!5921 = !{i64 43153}
!5922 = !{i64 43158}
!5923 = !{i64 43168}
!5924 = !{i64 43198}
!5925 = !{i64 43207}
!5926 = !{i64 43209}
!5927 = !{i64 43215}
!5928 = !{i64 43219}
!5929 = !{i64 43259}
!5930 = !{i64 43262}
!5931 = !{i64 43245}
!5932 = !{i64 43252}
!5933 = !{i64 43231}
!5934 = !{i64 43238}
!5935 = !{i64 43203}
!5936 = !{i64 43268}
!5937 = !{i64 43270}
!5938 = !{i64 43272}
!5939 = !{i64 43281}
!5940 = !{i64 43283}
!5941 = !{i64 43289}
!5942 = !{i64 43292}
!5943 = !{i64 43299}
!5944 = !{i64 43303}
!5945 = !{i64 43313}
!5946 = !{i64 43316}
!5947 = !{i64 43318}
!5948 = !{i64 43307}
!5949 = !{i64 43323}
!5950 = !{i64 0, i64 65}
!5951 = !{i64 43331}
!5952 = !{i64 43335}
!5953 = !{i64 43337}
!5954 = !{i64 43339}
!5955 = !{i64 43343}
!5956 = !{i64 43345}
!5957 = !{i64 43350}
!5958 = !{i64 43352}
!5959 = !{i64 43356}
!5960 = !{i64 43359}
!5961 = !{i64 43363}
!5962 = !{i64 43366}
!5963 = !{i64 43368}
!5964 = !{i64 43384}
!5965 = !{i64 43386}
!5966 = !{i64 43389}
!5967 = !{i64 43392}
!5968 = !{i64 43398}
!5969 = !{i64 43395}
!5970 = !{i64 43401}
!5971 = !{i64 43408}
!5972 = !{i64 43405}
!5973 = !{i64 43411}
!5974 = !{i64 43415}
!5975 = !{i64 43428}
!5976 = !{i64 43454}
!5977 = !{i64 43456}
!5978 = !{i64 43478}
!5979 = !{i64 43487}
!5980 = !{i64 43499}
!5981 = !{i64 43502}
!5982 = !{i64 43506}
!5983 = !{i64 43508}
!5984 = !{i64 43517}
!5985 = !{i64 43520}
!5986 = !{i64 43523}
!5987 = !{i64 43535}
!5988 = !{i64 43543}
!5989 = !{i64 43550}
!5990 = !{i64 43552}
!5991 = !{i64 43582}
!5992 = !{i64 43599}
!5993 = !{i64 43601}
!5994 = !{i64 43605}
!5995 = !{i64 43609}
!5996 = !{i64 43615}
!5997 = !{i64 43620}
!5998 = !{i64 43622}
!5999 = !{i64 43633}
!6000 = !{i64 43662}
!6001 = !{i64 43667}
!6002 = !{i64 43669}
!6003 = !{i64 43571}
!6004 = !{i64 43671}
!6005 = !{i64 43674}
!6006 = !{i64 43676}
!6007 = !{i64 43678}
!6008 = !{i64 43682}
!6009 = !{i64 43684}
!6010 = !{i64 43687}
!6011 = !{i64 43698}
!6012 = !{i64 43703}
!6013 = !{i64 43705}
!6014 = !{i64 43695}
!6015 = !{i64 43712}
!6016 = !{i64 43733}
!6017 = !{i64 43744}
!6018 = !{i64 43760}
!6019 = !{i64 43767}
!6020 = !{i64 43772}
!6021 = !{i64 43776}
!6022 = !{i64 43779}
!6023 = !{i64 43781}
!6024 = !{i64 43784}
!6025 = !{i64 43793}
!6026 = !{i64 43795}
!6027 = !{i64 43811}
!6028 = !{i64 43818}
!6029 = !{i64 43830}
!6030 = !{i64 43841}
!6031 = !{i64 43846}
!6032 = !{i64 43848}
!6033 = !{i64 43804}
!6034 = !{i64 43809}
!6035 = !{i64 43854}
!6036 = !{i64 43858}
!6037 = !{i64 43861}
!6038 = !{i64 43874}
!6039 = !{i64 43881}
!6040 = !{i64 43885}
!6041 = !{i64 43890}
!6042 = !{i64 43892}
!6043 = !{i64 43894}
!6044 = !{i64 43898}
!6045 = !{i64 43919}
!6046 = !{i64 43929}
!6047 = !{i64 43931}
!6048 = !{i64 43924}
!6049 = !{i64 43933}
!6050 = !{i64 43936}
!6051 = !{i64 43943}
!6052 = !{i64 43950}
!6053 = !{i64 43961}
!6054 = !{i64 43975}
!6055 = !{i64 43977}
!6056 = !{i64 43982}
!6057 = !{i64 43988}
!6058 = !{i64 43990}
!6059 = !{i64 43993}
!6060 = !{i64 43996}
!6061 = !{i64 44007}
!6062 = !{i64 44014}
!6063 = !{i64 44017}
!6064 = !{i64 44021}
!6065 = !{i64 44026}
!6066 = !{i64 44029}
!6067 = !{i64 44032}
!6068 = !{i64 44061}
!6069 = !{i64 44064}
!6070 = !{i64 44066}
!6071 = !{i64 44070}
!6072 = !{i64 44073}
!6073 = !{i64 44076}
!6074 = !{i64 44092}
!6075 = !{i64 44100}
!6076 = !{i64 44102}
!6077 = !{i64 44104}
!6078 = !{i64 44108}
!6079 = !{i64 44126}
!6080 = !{i64 44128}
!6081 = !{i64 44132}
!6082 = !{i64 44135}
!6083 = !{i64 44157}
!6084 = !{i64 44160}
!6085 = !{i64 44175}
!6086 = !{i64 44180}
!6087 = !{i64 44182}
!6088 = !{i64 44184}
!6089 = !{i64 44189}
!6090 = !{i64 44192}
!6091 = !{i64 44197}
!6092 = !{i64 44199}
!6093 = !{i64 44208}
!6094 = !{i64 44213}
!6095 = !{i64 44216}
!6096 = !{i64 44218}
!6097 = !{i64 44220}
!6098 = !{i64 44226}
!6099 = !{i64 44228}
!6100 = !{i64 44232}
!6101 = !{i64 44234}
!6102 = !{i64 44238}
!6103 = !{i64 44240}
!6104 = !{i64 44244}
!6105 = !{i64 44258}
